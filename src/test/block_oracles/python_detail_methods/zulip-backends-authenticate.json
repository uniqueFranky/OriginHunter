{
  "origin": "codeshovel",
  "repositoryName": "zulip",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/zulip/.git",
  "startCommitName": "6407d0b1f96623760094c604be2e8d1243d06142",
  "sourceFileName": "backends.py",
  "functionName": "authenticate",
  "functionId": "ZulipDummyBackend__authenticate___self__*__username-str__realm-Realm__use_dummy_backend-bool(default-False)__return_data-Optional[Dict[str,Any]](default-None)",
  "sourceFilePath": "zproject/backends.py",
  "functionAnnotation": "",
  "functionStartLine": 189,
  "functionEndLine": 195,
  "numCommitsSeen": 1277,
  "timeTaken": 18194,
  "changeHistory": [
    "802d3dbbf4b020885c308f584ae536b7c2bb137e",
    "082f23a659bc789df55a4ba7db313d0d72baa7d6",
    "c3cd3e94c16c80371e97ea224eb02c80660ec1db",
    "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c",
    "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
    "089ff8a0ae0756584e45d20500579a8edd8da153",
    "c9457d4af0b808c818b928c84e4e518b25123c0b",
    "13ee26019f4764c3a25bccb637f6ce737caad041",
    "5b0ff2a69a830f842b6a6f489e5e6025ad1ab127",
    "c7b789325473ac3c366b7ff6b21d1b45396de9e9",
    "ea39fb25565ffdadb9060406dba60b40b2b89eac",
    "b28b3cd65cae038d09732db9a3697f520818168e",
    "dff03fafdaa46d9772545ec6935748dea1e966dd"
  ],
  "changeHistoryShort": {
    "802d3dbbf4b020885c308f584ae536b7c2bb137e": "Yparameterchange",
    "082f23a659bc789df55a4ba7db313d0d72baa7d6": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3cd3e94c16c80371e97ea224eb02c80660ec1db": "Yparameterchange",
    "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c": "Ymultichange(Yparameterchange,Ybodychange)",
    "f17974ab32ee8162bb0dcb4386c2bf7609905efd": "Ymultichange(Yparameterchange,Ybodychange)",
    "089ff8a0ae0756584e45d20500579a8edd8da153": "Ymultichange(Yparameterchange,Yreturntypechange)",
    "c9457d4af0b808c818b928c84e4e518b25123c0b": "Ybodychange",
    "13ee26019f4764c3a25bccb637f6ce737caad041": "Ybodychange",
    "5b0ff2a69a830f842b6a6f489e5e6025ad1ab127": "Ybodychange",
    "c7b789325473ac3c366b7ff6b21d1b45396de9e9": "Ymultichange(Yparameterchange,Ybodychange)",
    "ea39fb25565ffdadb9060406dba60b40b2b89eac": "Ymultichange(Yparameterchange,Ybodychange)",
    "b28b3cd65cae038d09732db9a3697f520818168e": "Ybodychange",
    "dff03fafdaa46d9772545ec6935748dea1e966dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "802d3dbbf4b020885c308f584ae536b7c2bb137e": {
      "type": "Yparameterchange",
      "commitMessage": "authenticate: Use keyword-only parameters.\n\nSince positional arguments are interpreted differently by different\nbackends in Django\u0027s authentication backend system, it’s safer to\ndisallow them.\n\nThis had been the motivation for previously declaring the parameters\nwith default values when we were on Python 2, but that was not super\neffective because Python has no rule against positional default\narguments and that convention for our authentication backends was\nsolely enforced by code review.\n\nSigned-off-by: Anders Kaseorg \u003canders@zulipchat.com\u003e\n",
      "commitDate": "2019/5/28 下午2:49",
      "commitName": "802d3dbbf4b020885c308f584ae536b7c2bb137e",
      "commitAuthor": "Anders Kaseorg",
      "commitDateOld": "2019/5/28 下午2:47",
      "commitNameOld": "082f23a659bc789df55a4ba7db313d0d72baa7d6",
      "commitAuthorOld": "Anders Kaseorg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    def authenticate(self, *, username: str, realm: Realm,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        if use_dummy_backend:\n            return common_get_active_user(username, realm, return_data)\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 157,
      "functionName": "authenticate",
      "functionAnnotation": "",
      "diff": "@@ -1,6 +1,6 @@\n-    def authenticate(self, username: str, realm: Realm,\n+    def authenticate(self, *, username: str, realm: Realm,\n                      use_dummy_backend: bool\u003dFalse,\n                      return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         if use_dummy_backend:\n             return common_get_active_user(username, realm, return_data)\n         return None\n",
      "extendedDetails": {
        "oldValue": "[self, username-str, realm-Realm, use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]",
        "newValue": "[self, *, username-str, realm-Realm, use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]"
      }
    },
    "082f23a659bc789df55a4ba7db313d0d72baa7d6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "authenticate: Remove default values for required parameters.\n\nIt is now the caller’s responsibility to check that realm is not None.\n\nSigned-off-by: Anders Kaseorg \u003canders@zulipchat.com\u003e\n",
      "commitDate": "2019/5/28 下午2:47",
      "commitName": "082f23a659bc789df55a4ba7db313d0d72baa7d6",
      "commitAuthor": "Anders Kaseorg",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "authenticate: Remove default values for required parameters.\n\nIt is now the caller’s responsibility to check that realm is not None.\n\nSigned-off-by: Anders Kaseorg \u003canders@zulipchat.com\u003e\n",
          "commitDate": "2019/5/28 下午2:47",
          "commitName": "082f23a659bc789df55a4ba7db313d0d72baa7d6",
          "commitAuthor": "Anders Kaseorg",
          "commitDateOld": "2019/5/28 下午2:47",
          "commitNameOld": "725582850f39290567e9a07e20b1ab1865d41285",
          "commitAuthorOld": "Anders Kaseorg",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: str, realm: Realm,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        if use_dummy_backend:\n            return common_get_active_user(username, realm, return_data)\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 157,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,9 +1,6 @@\n-    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n+    def authenticate(self, username: str, realm: Realm,\n                      use_dummy_backend: bool\u003dFalse,\n                      return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         if use_dummy_backend:\n-            # These are kwargs only for readability; they should never be None\n-            assert username is not None\n-            assert realm is not None\n             return common_get_active_user(username, realm, return_data)\n         return None\n",
          "extendedDetails": {
            "oldValue": "[self, username-Optional[str](default-None), realm-Optional[Realm](default-None), use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]",
            "newValue": "[self, username-str, realm-Realm, use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "authenticate: Remove default values for required parameters.\n\nIt is now the caller’s responsibility to check that realm is not None.\n\nSigned-off-by: Anders Kaseorg \u003canders@zulipchat.com\u003e\n",
          "commitDate": "2019/5/28 下午2:47",
          "commitName": "082f23a659bc789df55a4ba7db313d0d72baa7d6",
          "commitAuthor": "Anders Kaseorg",
          "commitDateOld": "2019/5/28 下午2:47",
          "commitNameOld": "725582850f39290567e9a07e20b1ab1865d41285",
          "commitAuthorOld": "Anders Kaseorg",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: str, realm: Realm,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        if use_dummy_backend:\n            return common_get_active_user(username, realm, return_data)\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 157,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,9 +1,6 @@\n-    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n+    def authenticate(self, username: str, realm: Realm,\n                      use_dummy_backend: bool\u003dFalse,\n                      return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         if use_dummy_backend:\n-            # These are kwargs only for readability; they should never be None\n-            assert username is not None\n-            assert realm is not None\n             return common_get_active_user(username, realm, return_data)\n         return None\n",
          "extendedDetails": {}
        }
      ]
    },
    "c3cd3e94c16c80371e97ea224eb02c80660ec1db": {
      "type": "Yparameterchange",
      "commitMessage": "mypy: Add Optional \u0026 check in zproject/backends.py; remove from mypy.ini.\n",
      "commitDate": "2018/10/30 上午3:53",
      "commitName": "c3cd3e94c16c80371e97ea224eb02c80660ec1db",
      "commitAuthor": "neiljp (Neil Pilgrim)",
      "commitDateOld": "2018/10/18 上午6:28",
      "commitNameOld": "a34b79a3f4de79b489a71871fb980a649a2abcb0",
      "commitAuthorOld": "Tim Abbott",
      "daysBetweenCommits": 11.89,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        if use_dummy_backend:\n            # These are kwargs only for readability; they should never be None\n            assert username is not None\n            assert realm is not None\n            return common_get_active_user(username, realm, return_data)\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 160,
      "functionName": "authenticate",
      "functionAnnotation": "",
      "diff": "@@ -1,9 +1,9 @@\n     def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n                      use_dummy_backend: bool\u003dFalse,\n-                     return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n+                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         if use_dummy_backend:\n             # These are kwargs only for readability; they should never be None\n             assert username is not None\n             assert realm is not None\n             return common_get_active_user(username, realm, return_data)\n         return None\n",
      "extendedDetails": {
        "oldValue": "[self, username-Optional[str](default-None), realm-Optional[Realm](default-None), use_dummy_backend-bool(default-False), return_data-Dict[str,Any](default-None)]",
        "newValue": "[self, username-Optional[str](default-None), realm-Optional[Realm](default-None), use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]"
      }
    },
    "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "auth: Rewrite DummyAuthBackend to not block email reuse.\n\nThis require some care to ensure we still provide the same nice error\nmessages for the case of a user who has an account, just not with this\norganization.\n\nAlso, we fix the fact that the docstring was (and I think always has\nbeen) at best confusing and perhaps even inaccurate.\n",
      "commitDate": "2017/11/22 上午10:23",
      "commitName": "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c",
      "commitAuthor": "Tim Abbott",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "auth: Rewrite DummyAuthBackend to not block email reuse.\n\nThis require some care to ensure we still provide the same nice error\nmessages for the case of a user who has an account, just not with this\norganization.\n\nAlso, we fix the fact that the docstring was (and I think always has\nbeen) at best confusing and perhaps even inaccurate.\n",
          "commitDate": "2017/11/22 上午10:23",
          "commitName": "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2017/11/22 上午10:22",
          "commitNameOld": "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
          "commitAuthorOld": "Tim Abbott",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n        if use_dummy_backend:\n            # These are kwargs only for readability; they should never be None\n            assert username is not None\n            assert realm is not None\n            return common_get_active_user(username, realm, return_data)\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 319,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,15 +1,9 @@\n-    def authenticate(self, username: Optional[Text]\u003dNone, realm: Optional[Realm]\u003dNone,\n+    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n                      use_dummy_backend: bool\u003dFalse,\n-                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n-        assert username is not None\n-        assert realm is not None\n+                     return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n         if use_dummy_backend:\n-            user_profile \u003d common_get_active_user_by_email(username)\n-            if user_profile is None:\n-                return None\n-            if not user_matches_subdomain(realm.subdomain, user_profile):\n-                if return_data is not None:\n-                    return_data[\"invalid_subdomain\"] \u003d True\n-                return None\n-            return user_profile\n+            # These are kwargs only for readability; they should never be None\n+            assert username is not None\n+            assert realm is not None\n+            return common_get_active_user(username, realm, return_data)\n         return None\n",
          "extendedDetails": {
            "oldValue": "[self, username-Optional[Text](default-None), realm-Optional[Realm](default-None), use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]",
            "newValue": "[self, username-Optional[str](default-None), realm-Optional[Realm](default-None), use_dummy_backend-bool(default-False), return_data-Dict[str,Any](default-None)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "auth: Rewrite DummyAuthBackend to not block email reuse.\n\nThis require some care to ensure we still provide the same nice error\nmessages for the case of a user who has an account, just not with this\norganization.\n\nAlso, we fix the fact that the docstring was (and I think always has\nbeen) at best confusing and perhaps even inaccurate.\n",
          "commitDate": "2017/11/22 上午10:23",
          "commitName": "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2017/11/22 上午10:22",
          "commitNameOld": "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
          "commitAuthorOld": "Tim Abbott",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n        if use_dummy_backend:\n            # These are kwargs only for readability; they should never be None\n            assert username is not None\n            assert realm is not None\n            return common_get_active_user(username, realm, return_data)\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 319,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,15 +1,9 @@\n-    def authenticate(self, username: Optional[Text]\u003dNone, realm: Optional[Realm]\u003dNone,\n+    def authenticate(self, username: Optional[str]\u003dNone, realm: Optional[Realm]\u003dNone,\n                      use_dummy_backend: bool\u003dFalse,\n-                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n-        assert username is not None\n-        assert realm is not None\n+                     return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n         if use_dummy_backend:\n-            user_profile \u003d common_get_active_user_by_email(username)\n-            if user_profile is None:\n-                return None\n-            if not user_matches_subdomain(realm.subdomain, user_profile):\n-                if return_data is not None:\n-                    return_data[\"invalid_subdomain\"] \u003d True\n-                return None\n-            return user_profile\n+            # These are kwargs only for readability; they should never be None\n+            assert username is not None\n+            assert realm is not None\n+            return common_get_active_user(username, realm, return_data)\n         return None\n",
          "extendedDetails": {}
        }
      ]
    },
    "f17974ab32ee8162bb0dcb4386c2bf7609905efd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "DummyAuthBackend: Require being passed a realm object.\n\nWe should now always know the realm in our auth code paths.\n",
      "commitDate": "2017/11/22 上午10:22",
      "commitName": "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
      "commitAuthor": "Tim Abbott",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "DummyAuthBackend: Require being passed a realm object.\n\nWe should now always know the realm in our auth code paths.\n",
          "commitDate": "2017/11/22 上午10:22",
          "commitName": "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2017/11/22 上午3:47",
          "commitNameOld": "089ff8a0ae0756584e45d20500579a8edd8da153",
          "commitAuthorOld": "Tim Abbott",
          "daysBetweenCommits": 0.27,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: Optional[Text]\u003dNone, realm: Optional[Realm]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        assert username is not None\n        assert realm is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm.subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 291,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,14 +1,15 @@\n-    def authenticate(self, username: Optional[Text]\u003dNone, realm_subdomain: Optional[Text]\u003dNone,\n+    def authenticate(self, username: Optional[Text]\u003dNone, realm: Optional[Realm]\u003dNone,\n                      use_dummy_backend: bool\u003dFalse,\n                      return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         assert username is not None\n+        assert realm is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n-            if not user_matches_subdomain(realm_subdomain, user_profile):\n+            if not user_matches_subdomain(realm.subdomain, user_profile):\n                 if return_data is not None:\n                     return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
          "extendedDetails": {
            "oldValue": "[self, username-Optional[Text](default-None), realm_subdomain-Optional[Text](default-None), use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]",
            "newValue": "[self, username-Optional[Text](default-None), realm-Optional[Realm](default-None), use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "DummyAuthBackend: Require being passed a realm object.\n\nWe should now always know the realm in our auth code paths.\n",
          "commitDate": "2017/11/22 上午10:22",
          "commitName": "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2017/11/22 上午3:47",
          "commitNameOld": "089ff8a0ae0756584e45d20500579a8edd8da153",
          "commitAuthorOld": "Tim Abbott",
          "daysBetweenCommits": 0.27,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: Optional[Text]\u003dNone, realm: Optional[Realm]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        assert username is not None\n        assert realm is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm.subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 291,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,14 +1,15 @@\n-    def authenticate(self, username: Optional[Text]\u003dNone, realm_subdomain: Optional[Text]\u003dNone,\n+    def authenticate(self, username: Optional[Text]\u003dNone, realm: Optional[Realm]\u003dNone,\n                      use_dummy_backend: bool\u003dFalse,\n                      return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         assert username is not None\n+        assert realm is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n-            if not user_matches_subdomain(realm_subdomain, user_profile):\n+            if not user_matches_subdomain(realm.subdomain, user_profile):\n                 if return_data is not None:\n                     return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
          "extendedDetails": {}
        }
      ]
    },
    "089ff8a0ae0756584e45d20500579a8edd8da153": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange)",
      "commitMessage": "backends: Convert authenticate methods to modern type annotations.\n",
      "commitDate": "2017/11/22 上午3:47",
      "commitName": "089ff8a0ae0756584e45d20500579a8edd8da153",
      "commitAuthor": "Tim Abbott",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "backends: Convert authenticate methods to modern type annotations.\n",
          "commitDate": "2017/11/22 上午3:47",
          "commitName": "089ff8a0ae0756584e45d20500579a8edd8da153",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2017/11/18 上午3:44",
          "commitNameOld": "1e3aa55f4f238d392fa7c0ddb5c4216c5656ba9a",
          "commitAuthorOld": "Umair Khan",
          "daysBetweenCommits": 4.0,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: Optional[Text]\u003dNone, realm_subdomain: Optional[Text]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        assert username is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm_subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 291,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,14 +1,14 @@\n-    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n-                     return_data\u003dNone):\n-        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n+    def authenticate(self, username: Optional[Text]\u003dNone, realm_subdomain: Optional[Text]\u003dNone,\n+                     use_dummy_backend: bool\u003dFalse,\n+                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         assert username is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n             if not user_matches_subdomain(realm_subdomain, user_profile):\n                 if return_data is not None:\n                     return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
          "extendedDetails": {
            "oldValue": "[self, username(default-None), realm_subdomain(default-None), use_dummy_backend(default-False), return_data(default-None)]",
            "newValue": "[self, username-Optional[Text](default-None), realm_subdomain-Optional[Text](default-None), use_dummy_backend-bool(default-False), return_data-Optional[Dict[str,Any]](default-None)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "backends: Convert authenticate methods to modern type annotations.\n",
          "commitDate": "2017/11/22 上午3:47",
          "commitName": "089ff8a0ae0756584e45d20500579a8edd8da153",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2017/11/18 上午3:44",
          "commitNameOld": "1e3aa55f4f238d392fa7c0ddb5c4216c5656ba9a",
          "commitAuthorOld": "Umair Khan",
          "daysBetweenCommits": 4.0,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username: Optional[Text]\u003dNone, realm_subdomain: Optional[Text]\u003dNone,\n                     use_dummy_backend: bool\u003dFalse,\n                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n        assert username is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm_subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 291,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,14 +1,14 @@\n-    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n-                     return_data\u003dNone):\n-        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n+    def authenticate(self, username: Optional[Text]\u003dNone, realm_subdomain: Optional[Text]\u003dNone,\n+                     use_dummy_backend: bool\u003dFalse,\n+                     return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n         assert username is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n             if not user_matches_subdomain(realm_subdomain, user_profile):\n                 if return_data is not None:\n                     return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Optional[UserProfile]"
          }
        }
      ]
    },
    "c9457d4af0b808c818b928c84e4e518b25123c0b": {
      "type": "Ybodychange",
      "commitMessage": "subdomains: Refactor check_subdomain to a clearer interface.\n\nNow that every call site of check_subdomain produces its second\nargument in exactly the same way, push that shared bit of logic\ninto a new wrapper for check_subdomain.\n\nAlso give that new function a name that says more specifically what\nit\u0027s checking -- which I think is easier to articulate for this\ninterface than for that of check_subdomain.\n",
      "commitDate": "2017/10/27 上午1:29",
      "commitName": "c9457d4af0b808c818b928c84e4e518b25123c0b",
      "commitAuthor": "Greg Price",
      "commitDateOld": "2017/10/26 上午5:35",
      "commitNameOld": "9314a7ac8b92f3950030867134f9e3bf2c594492",
      "commitAuthorOld": "Vishnu Ks",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                     return_data\u003dNone):\n        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n        assert username is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm_subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 260,
      "functionName": "authenticate",
      "functionAnnotation": "",
      "diff": "@@ -1,14 +1,14 @@\n     def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                      return_data\u003dNone):\n         # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n         assert username is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n-            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n+            if not user_matches_subdomain(realm_subdomain, user_profile):\n                 if return_data is not None:\n                     return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
      "extendedDetails": {}
    },
    "13ee26019f4764c3a25bccb637f6ce737caad041": {
      "type": "Ybodychange",
      "commitMessage": "zproject/backends.py: Check for None before use.\n\nCheck if the dict \u0027return_data\u0027 is None before setting attributes\non it.\n",
      "commitDate": "2017/5/24 下午12:56",
      "commitName": "13ee26019f4764c3a25bccb637f6ce737caad041",
      "commitAuthor": "Eklavya Sharma",
      "commitDateOld": "2017/5/11 上午8:20",
      "commitNameOld": "5019b53492dc06b08ff8b489bd3f15fe9be3b03c",
      "commitAuthorOld": "Tim Abbott",
      "daysBetweenCommits": 13.19,
      "commitsBetweenForRepo": 369,
      "commitsBetweenForFile": 1,
      "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                     return_data\u003dNone):\n        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n        assert username is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 259,
      "functionName": "authenticate",
      "functionAnnotation": "",
      "diff": "@@ -1,13 +1,14 @@\n     def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                      return_data\u003dNone):\n         # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n         assert username is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n             if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n-                return_data[\"invalid_subdomain\"] \u003d True\n+                if return_data is not None:\n+                    return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
      "extendedDetails": {}
    },
    "5b0ff2a69a830f842b6a6f489e5e6025ad1ab127": {
      "type": "Ybodychange",
      "commitMessage": "mypy: Fix some strict-optional related issues.\n",
      "commitDate": "2017/3/20 下午1:26",
      "commitName": "5b0ff2a69a830f842b6a6f489e5e6025ad1ab127",
      "commitAuthor": "Tim Abbott",
      "commitDateOld": "2017/3/16 上午2:11",
      "commitNameOld": "0d296afa5401d6ad06ce9c8ef3b8887f396a50da",
      "commitAuthorOld": "Umair Khan",
      "daysBetweenCommits": 4.47,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                     return_data\u003dNone):\n        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n        assert username is not None\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 197,
      "functionName": "authenticate",
      "functionAnnotation": "",
      "diff": "@@ -1,12 +1,13 @@\n     def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                      return_data\u003dNone):\n         # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n+        assert username is not None\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n             if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                 return_data[\"invalid_subdomain\"] \u003d True\n                 return None\n             return user_profile\n         return None\n",
      "extendedDetails": {}
    },
    "c7b789325473ac3c366b7ff6b21d1b45396de9e9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "auth: Give nicer subdomain errors when using ZulipDummyBackend.\n\nThis improves Google and JWT auth as well as the registration\ncodepath to log something if the wrong subdomain is encountered.\n\nIdeally, we\u0027d have tests for these, and code to make the Google and JWT\nauth cases show a clear error message.\n",
      "commitDate": "2016/9/28 下午2:25",
      "commitName": "c7b789325473ac3c366b7ff6b21d1b45396de9e9",
      "commitAuthor": "Tim Abbott",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "auth: Give nicer subdomain errors when using ZulipDummyBackend.\n\nThis improves Google and JWT auth as well as the registration\ncodepath to log something if the wrong subdomain is encountered.\n\nIdeally, we\u0027d have tests for these, and code to make the Google and JWT\nauth cases show a clear error message.\n",
          "commitDate": "2016/9/28 下午2:25",
          "commitName": "c7b789325473ac3c366b7ff6b21d1b45396de9e9",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2016/9/28 下午2:24",
          "commitNameOld": "ea39fb25565ffdadb9060406dba60b40b2b89eac",
          "commitAuthorOld": "hackerkid",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                     return_data\u003dNone):\n        # type: (Optional[text_type], Optional[text_type], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 151,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,9 +1,12 @@\n-    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse):\n-        # type: (Optional[text_type], Optional[text_type], bool) -\u003e Optional[UserProfile]\n+    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n+                     return_data\u003dNone):\n+        # type: (Optional[text_type], Optional[text_type], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n-            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n-                return user_profile\n+            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n+                return_data[\"invalid_subdomain\"] \u003d True\n+                return None\n+            return user_profile\n         return None\n",
          "extendedDetails": {
            "oldValue": "[self, username(default-None), realm_subdomain(default-None), use_dummy_backend(default-False)]",
            "newValue": "[self, username(default-None), realm_subdomain(default-None), use_dummy_backend(default-False), return_data(default-None)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "auth: Give nicer subdomain errors when using ZulipDummyBackend.\n\nThis improves Google and JWT auth as well as the registration\ncodepath to log something if the wrong subdomain is encountered.\n\nIdeally, we\u0027d have tests for these, and code to make the Google and JWT\nauth cases show a clear error message.\n",
          "commitDate": "2016/9/28 下午2:25",
          "commitName": "c7b789325473ac3c366b7ff6b21d1b45396de9e9",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2016/9/28 下午2:24",
          "commitNameOld": "ea39fb25565ffdadb9060406dba60b40b2b89eac",
          "commitAuthorOld": "hackerkid",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n                     return_data\u003dNone):\n        # type: (Optional[text_type], Optional[text_type], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return_data[\"invalid_subdomain\"] \u003d True\n                return None\n            return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 151,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,9 +1,12 @@\n-    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse):\n-        # type: (Optional[text_type], Optional[text_type], bool) -\u003e Optional[UserProfile]\n+    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse,\n+                     return_data\u003dNone):\n+        # type: (Optional[text_type], Optional[text_type], bool, Optional[Dict[str, Any]]) -\u003e Optional[UserProfile]\n         if use_dummy_backend:\n             user_profile \u003d common_get_active_user_by_email(username)\n             if user_profile is None:\n                 return None\n-            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n-                return user_profile\n+            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n+                return_data[\"invalid_subdomain\"] \u003d True\n+                return None\n+            return user_profile\n         return None\n",
          "extendedDetails": {}
        }
      ]
    },
    "ea39fb25565ffdadb9060406dba60b40b2b89eac": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add option for hosting each realm on its own subdomain.\n\nThis adds support for running a Zulip production server with each\nrealm on its own unique subdomain, e.g. https://realm_name.example.com.\n\nThis patch includes a ton of important features:\n* Configuring the Zulip sesion middleware to issue cookier correctly\n  for the subdomains case.\n* Throwing an error if the user tries to visit an invalid subdomain.\n* Runs a portion of the Casper tests with REALMS_HAVE_SUBDOMAINS\n  enabled to test the subdomain signup process.\n* Updating our integrations documentation to refer to the current subdomain.\n* Enforces that users can only login to the subdomain of their realm\n  (but does not restrict the API; that will be tightened in a future commit).\n\nNote that toggling settings.REALMS_HAVE_SUBDOMAINS on a live server is\nnot supported without manual intervention (the main problem will be\nadding \"subdomain\" values for all the existing realms).\n\n[substantially modified by tabbott as part of merging]\n",
      "commitDate": "2016/9/28 下午2:24",
      "commitName": "ea39fb25565ffdadb9060406dba60b40b2b89eac",
      "commitAuthor": "hackerkid",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add option for hosting each realm on its own subdomain.\n\nThis adds support for running a Zulip production server with each\nrealm on its own unique subdomain, e.g. https://realm_name.example.com.\n\nThis patch includes a ton of important features:\n* Configuring the Zulip sesion middleware to issue cookier correctly\n  for the subdomains case.\n* Throwing an error if the user tries to visit an invalid subdomain.\n* Runs a portion of the Casper tests with REALMS_HAVE_SUBDOMAINS\n  enabled to test the subdomain signup process.\n* Updating our integrations documentation to refer to the current subdomain.\n* Enforces that users can only login to the subdomain of their realm\n  (but does not restrict the API; that will be tightened in a future commit).\n\nNote that toggling settings.REALMS_HAVE_SUBDOMAINS on a live server is\nnot supported without manual intervention (the main problem will be\nadding \"subdomain\" values for all the existing realms).\n\n[substantially modified by tabbott as part of merging]\n",
          "commitDate": "2016/9/28 下午2:24",
          "commitName": "ea39fb25565ffdadb9060406dba60b40b2b89eac",
          "commitAuthor": "hackerkid",
          "commitDateOld": "2016/8/10 上午12:19",
          "commitNameOld": "60f30fdb365b15e6b42e87839384cc31d6ce1e2a",
          "commitAuthorOld": "Umair Khan",
          "daysBetweenCommits": 49.59,
          "commitsBetweenForRepo": 552,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse):\n        # type: (Optional[text_type], Optional[text_type], bool) -\u003e Optional[UserProfile]\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 151,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,5 +1,9 @@\n-    def authenticate(self, username\u003dNone, use_dummy_backend\u003dFalse):\n-        # type: (Optional[str], bool) -\u003e Optional[UserProfile]\n+    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse):\n+        # type: (Optional[text_type], Optional[text_type], bool) -\u003e Optional[UserProfile]\n         if use_dummy_backend:\n-            return common_get_active_user_by_email(username)\n+            user_profile \u003d common_get_active_user_by_email(username)\n+            if user_profile is None:\n+                return None\n+            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n+                return user_profile\n         return None\n",
          "extendedDetails": {
            "oldValue": "[self, username(default-None), use_dummy_backend(default-False)]",
            "newValue": "[self, username(default-None), realm_subdomain(default-None), use_dummy_backend(default-False)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add option for hosting each realm on its own subdomain.\n\nThis adds support for running a Zulip production server with each\nrealm on its own unique subdomain, e.g. https://realm_name.example.com.\n\nThis patch includes a ton of important features:\n* Configuring the Zulip sesion middleware to issue cookier correctly\n  for the subdomains case.\n* Throwing an error if the user tries to visit an invalid subdomain.\n* Runs a portion of the Casper tests with REALMS_HAVE_SUBDOMAINS\n  enabled to test the subdomain signup process.\n* Updating our integrations documentation to refer to the current subdomain.\n* Enforces that users can only login to the subdomain of their realm\n  (but does not restrict the API; that will be tightened in a future commit).\n\nNote that toggling settings.REALMS_HAVE_SUBDOMAINS on a live server is\nnot supported without manual intervention (the main problem will be\nadding \"subdomain\" values for all the existing realms).\n\n[substantially modified by tabbott as part of merging]\n",
          "commitDate": "2016/9/28 下午2:24",
          "commitName": "ea39fb25565ffdadb9060406dba60b40b2b89eac",
          "commitAuthor": "hackerkid",
          "commitDateOld": "2016/8/10 上午12:19",
          "commitNameOld": "60f30fdb365b15e6b42e87839384cc31d6ce1e2a",
          "commitAuthorOld": "Umair Khan",
          "daysBetweenCommits": 49.59,
          "commitsBetweenForRepo": 552,
          "commitsBetweenForFile": 1,
          "actualSource": "    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse):\n        # type: (Optional[text_type], Optional[text_type], bool) -\u003e Optional[UserProfile]\n        if use_dummy_backend:\n            user_profile \u003d common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return user_profile\n        return None\n",
          "path": "zproject/backends.py",
          "functionStartLine": 151,
          "functionName": "authenticate",
          "functionAnnotation": "",
          "diff": "@@ -1,5 +1,9 @@\n-    def authenticate(self, username\u003dNone, use_dummy_backend\u003dFalse):\n-        # type: (Optional[str], bool) -\u003e Optional[UserProfile]\n+    def authenticate(self, username\u003dNone, realm_subdomain\u003dNone, use_dummy_backend\u003dFalse):\n+        # type: (Optional[text_type], Optional[text_type], bool) -\u003e Optional[UserProfile]\n         if use_dummy_backend:\n-            return common_get_active_user_by_email(username)\n+            user_profile \u003d common_get_active_user_by_email(username)\n+            if user_profile is None:\n+                return None\n+            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n+                return user_profile\n         return None\n",
          "extendedDetails": {}
        }
      ]
    },
    "b28b3cd65cae038d09732db9a3697f520818168e": {
      "type": "Ybodychange",
      "commitMessage": "CVE-2016-4427: Fix access by deactivated realms/users.\n\nThe security model for deactivated users (and users in deactivated\nrealms) being unable to access the service is intended to work via two\nmechanisms:\n\n* All active user sessions are deleted, and all login code paths\n  (where a user could get a new session) check whether the user (or\n  realm) is inactive before authorizing the request, preventing the\n  user from accessing the website and AJAX endpoints.\n* All API code paths (which don\u0027t require a session) check whether the\n  user (and realm) are active.\n\nHowever, this security model was not implemented correctly.  In\nparticular, the check for whether a user has an active account in the\nlogin process was done inside the login form\u0027s validators, which meant\nthat authentication mechanisms that did not use the login form\n(e.g. Google and REMOTE_USER auth) could succeed in granting a session\neven with an inactive account.  The Zulip homepage would still fail to\nload because the code for / includes an API call to Tornado authorized\nby the user\u0027s token that would fail, but this mechanism could allow an\ninactive user to access realm data or users to access data in a\ndeactivated realm.\n\nThis fixes the issue by adding explicit checks for inactive users and\ninactive realms in all authentication backends (even those that were\nalready protected by the login form validator).\n\nMirror dummy users are already inactive, so we can remove the explicit\ncode around mirror dummy users.\n\nThe following commits add a complete set of tests for Zulip\u0027s inactive\nuser and realm security model.\n",
      "commitDate": "2016/5/11 上午12:50",
      "commitName": "b28b3cd65cae038d09732db9a3697f520818168e",
      "commitAuthor": "Tim Abbott",
      "commitDateOld": "2016/2/4 上午11:29",
      "commitNameOld": "999e4688d4ef8317f13d606ee9c1f505e7effad5",
      "commitAuthorOld": "Tim Abbott",
      "daysBetweenCommits": 96.56,
      "commitsBetweenForRepo": 437,
      "commitsBetweenForFile": 1,
      "actualSource": "    def authenticate(self, username\u003dNone, use_dummy_backend\u003dFalse):\n        if use_dummy_backend:\n            return common_get_active_user_by_email(username)\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 64,
      "functionName": "authenticate",
      "functionAnnotation": "",
      "diff": "@@ -1,7 +1,4 @@\n     def authenticate(self, username\u003dNone, use_dummy_backend\u003dFalse):\n         if use_dummy_backend:\n-            try:\n-                return get_user_profile_by_email(username)\n-            except UserProfile.DoesNotExist:\n-                pass\n+            return common_get_active_user_by_email(username)\n         return None\n",
      "extendedDetails": {}
    },
    "dff03fafdaa46d9772545ec6935748dea1e966dd": {
      "type": "Yintroduced",
      "commitMessage": "Use LDAP-provided information if available for real names\n\nIf authoritative data is available from say the LDAP database, we now\nignore the POSTed user name, and don\u0027t offer it as a form field.\n\nWe fall back to giving the user a text field if they aren\u0027t in LDAP.\n\nIf users do not have any form fields to fill out, we simply bring them\nto the app without the registration page, logging them in using a dummy\nbackend.\n\n(imported from commit 6bee87430ba46ff753ea3408251e8a80c45c713f)\n",
      "commitDate": "2013/11/23 上午5:51",
      "commitName": "dff03fafdaa46d9772545ec6935748dea1e966dd",
      "commitAuthor": "Luke Faraone",
      "diff": "@@ -0,0 +1,7 @@\n+    def authenticate(self, username\u003dNone, use_dummy_backend\u003dFalse):\n+        if use_dummy_backend:\n+            try:\n+                return get_user_profile_by_email(username)\n+            except UserProfile.DoesNotExist:\n+                pass\n+        return None\n",
      "actualSource": "    def authenticate(self, username\u003dNone, use_dummy_backend\u003dFalse):\n        if use_dummy_backend:\n            try:\n                return get_user_profile_by_email(username)\n            except UserProfile.DoesNotExist:\n                pass\n        return None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 32,
      "functionName": "authenticate",
      "functionAnnotation": ""
    }
  }
}