{
  "statementVersions": [
    {
      "commit": "802d3dbbf4b020885c308f584ae536b7c2bb137e",
      "startLine": 4,
      "endLine": 5,
      "methodCode": "    def authenticate(self, *, username: str, realm: Realm,\n                     use_dummy_backend: bool=False,\n                     return_data: Optional[Dict[str, Any]]=None) -> Optional[UserProfile]:\n        if use_dummy_backend:\n            return common_get_active_user(username, realm, return_data)\n        return None\n"
    },
    {
      "commit": "082f23a659bc789df55a4ba7db313d0d72baa7d6",
      "startLine": 4,
      "endLine": 5,
      "methodCode": "    def authenticate(self, username: str, realm: Realm,\n                     use_dummy_backend: bool=False,\n                     return_data: Optional[Dict[str, Any]]=None) -> Optional[UserProfile]:\n        if use_dummy_backend:\n            return common_get_active_user(username, realm, return_data)\n        return None\n"
    },
    {
      "commit": "c3cd3e94c16c80371e97ea224eb02c80660ec1db",
      "startLine": 4,
      "endLine": 8,
      "methodCode": "    def authenticate(self, username: Optional[str]=None, realm: Optional[Realm]=None,\n                     use_dummy_backend: bool=False,\n                     return_data: Optional[Dict[str, Any]]=None) -> Optional[UserProfile]:\n        if use_dummy_backend:\n            # These are kwargs only for readability; they should never be None\n            assert username is not None\n            assert realm is not None\n            return common_get_active_user(username, realm, return_data)\n        return None\n"
    },
    {
      "commit": "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c",
      "startLine": 4,
      "endLine": 8,
      "methodCode": "    def authenticate(self, username: Optional[str]=None, realm: Optional[Realm]=None,\n                     use_dummy_backend: bool=False,\n                     return_data: Dict[str, Any]=None) -> Optional[UserProfile]:\n        if use_dummy_backend:\n            # These are kwargs only for readability; they should never be None\n            assert username is not None\n            assert realm is not None\n            return common_get_active_user(username, realm, return_data)\n        return None\n"
    },
    {
      "commit": "f17974ab32ee8162bb0dcb4386c2bf7609905efd",
      "startLine": 6,
      "endLine": 14,
      "methodCode": "    def authenticate(self, username: Optional[Text]=None, realm: Optional[Realm]=None,\n                     use_dummy_backend: bool=False,\n                     return_data: Optional[Dict[str, Any]]=None) -> Optional[UserProfile]:\n        assert username is not None\n        assert realm is not None\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm.subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] = True\n                return None\n            return user_profile\n        return None\n"
    },
    {
      "commit": "089ff8a0ae0756584e45d20500579a8edd8da153",
      "startLine": 5,
      "endLine": 13,
      "methodCode": "    def authenticate(self, username: Optional[Text]=None, realm_subdomain: Optional[Text]=None,\n                     use_dummy_backend: bool=False,\n                     return_data: Optional[Dict[str, Any]]=None) -> Optional[UserProfile]:\n        assert username is not None\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm_subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] = True\n                return None\n            return user_profile\n        return None\n"
    },
    {
      "commit": "c9457d4af0b808c818b928c84e4e518b25123c0b",
      "startLine": 5,
      "endLine": 13,
      "methodCode": "    def authenticate(self, username=None, realm_subdomain=None, use_dummy_backend=False,\n                     return_data=None):\n        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -> Optional[UserProfile]\n        assert username is not None\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not user_matches_subdomain(realm_subdomain, user_profile):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] = True\n                return None\n            return user_profile\n        return None\n"
    },
    {
      "commit": "13ee26019f4764c3a25bccb637f6ce737caad041",
      "startLine": 5,
      "endLine": 13,
      "methodCode": "    def authenticate(self, username=None, realm_subdomain=None, use_dummy_backend=False,\n                     return_data=None):\n        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -> Optional[UserProfile]\n        assert username is not None\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                if return_data is not None:\n                    return_data[\"invalid_subdomain\"] = True\n                return None\n            return user_profile\n        return None\n"
    },
    {
      "commit": "5b0ff2a69a830f842b6a6f489e5e6025ad1ab127",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "    def authenticate(self, username=None, realm_subdomain=None, use_dummy_backend=False,\n                     return_data=None):\n        # type: (Optional[Text], Optional[Text], bool, Optional[Dict[str, Any]]) -> Optional[UserProfile]\n        assert username is not None\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return_data[\"invalid_subdomain\"] = True\n                return None\n            return user_profile\n        return None\n"
    },
    {
      "commit": "c7b789325473ac3c366b7ff6b21d1b45396de9e9",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "    def authenticate(self, username=None, realm_subdomain=None, use_dummy_backend=False,\n                     return_data=None):\n        # type: (Optional[text_type], Optional[text_type], bool, Optional[Dict[str, Any]]) -> Optional[UserProfile]\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return_data[\"invalid_subdomain\"] = True\n                return None\n            return user_profile\n        return None\n"
    },
    {
      "commit": "ea39fb25565ffdadb9060406dba60b40b2b89eac",
      "startLine": 3,
      "endLine": 8,
      "methodCode": "    def authenticate(self, username=None, realm_subdomain=None, use_dummy_backend=False):\n        # type: (Optional[text_type], Optional[text_type], bool) -> Optional[UserProfile]\n        if use_dummy_backend:\n            user_profile = common_get_active_user_by_email(username)\n            if user_profile is None:\n                return None\n            if check_subdomain(realm_subdomain, user_profile.realm.subdomain):\n                return user_profile\n        return None\n"
    },
    {
      "commit": "b28b3cd65cae038d09732db9a3697f520818168e",
      "startLine": 2,
      "endLine": 3,
      "methodCode": "    def authenticate(self, username=None, use_dummy_backend=False):\n        if use_dummy_backend:\n            return common_get_active_user_by_email(username)\n        return None\n"
    },
    {
      "commit": "dff03fafdaa46d9772545ec6935748dea1e966dd",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "    def authenticate(self, username=None, use_dummy_backend=False):\n        if use_dummy_backend:\n            try:\n                return get_user_profile_by_email(username)\n            except UserProfile.DoesNotExist:\n                pass\n        return None\n"
    }
  ]
}