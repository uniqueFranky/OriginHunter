{
  "origin": "codeshovel",
  "repositoryName": "jetty.project",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/jetty.project/.git",
  "startCommitName": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af",
  "sourceFileName": "HttpTransportOverHTTP2.java",
  "functionName": "push",
  "functionId": "push___request-MetaData.Request(modifiers-final)",
  "sourceFilePath": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 195,
  "functionEndLine": 222,
  "numCommitsSeen": 67,
  "timeTaken": 2333,
  "changeHistory": [
    "48887377c99bffb1c7043e7e01e33d6674c7eacc",
    "d4809e9b790fcd49298a6b70cedeaff37c23b880",
    "14cd10b67667af2f57cb0d608095dc97dee14131",
    "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
    "7b41e78f748e8404263929ad65fd25b1966631f3",
    "0a144ed3ac8a4f9379a4b0939196cbd310f648ee",
    "75c1322adc7255cf7916a3e928f19875401db157",
    "728a7c3442c081e6b483ea347d813aa791e98d22",
    "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
    "b5971484a57212a39af6f70267ea00a24fdbf100"
  ],
  "changeHistoryShort": {
    "48887377c99bffb1c7043e7e01e33d6674c7eacc": "Ybodychange",
    "d4809e9b790fcd49298a6b70cedeaff37c23b880": "Ybodychange",
    "14cd10b67667af2f57cb0d608095dc97dee14131": "Ybodychange",
    "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5": "Ybodychange",
    "7b41e78f748e8404263929ad65fd25b1966631f3": "Ybodychange",
    "0a144ed3ac8a4f9379a4b0939196cbd310f648ee": "Ybodychange",
    "75c1322adc7255cf7916a3e928f19875401db157": "Ybodychange",
    "728a7c3442c081e6b483ea347d813aa791e98d22": "Ybodychange",
    "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "b5971484a57212a39af6f70267ea00a24fdbf100": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48887377c99bffb1c7043e7e01e33d6674c7eacc": {
      "type": "Ybodychange",
      "commitMessage": "459081 - http2 push failures.\n\nIntroduced ExecutionStrategy.dispatch() to handle the case where\nresources that are being pushed block.\n",
      "commitDate": "2015/3/11 上午7:12",
      "commitName": "48887377c99bffb1c7043e7e01e33d6674c7eacc",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2015/2/19 上午6:00",
      "commitNameOld": "d4809e9b790fcd49298a6b70cedeaff37c23b880",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 20.05,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    if (LOG.isDebugEnabled())\n        LOG.debug(\"HTTP/2 Push {}\", request);\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            connection.push(connector, (IStream) pushStream, request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    }, new Stream.Listener.Adapter());\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 137,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n     if (LOG.isDebugEnabled())\n         LOG.debug(\"HTTP/2 Push {}\", request);\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n-            connection.onPush(connector, (IStream) pushStream, request);\n+            connection.push(connector, (IStream) pushStream, request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n         }\n     }, new Stream.Listener.Adapter());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d4809e9b790fcd49298a6b70cedeaff37c23b880": {
      "type": "Ybodychange",
      "commitMessage": "Improved handling of the stream close state.\n\nNow the stream close state is updated when the frame has been\nsuccessfully written, and when it is received.\nThe stream is closed in case of failures.\nJust after the stream close state update, if the stream is closed\nthen it is removed from the session.\n",
      "commitDate": "2015/2/19 上午6:00",
      "commitName": "d4809e9b790fcd49298a6b70cedeaff37c23b880",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2015/2/9 下午4:11",
      "commitNameOld": "02b5732720607c2703d8c0e1a9d62901f40aea67",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 9.58,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    if (LOG.isDebugEnabled())\n        LOG.debug(\"HTTP/2 Push {}\", request);\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            connection.onPush(connector, (IStream) pushStream, request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    }, new Stream.Listener.Adapter());\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 137,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n     if (LOG.isDebugEnabled())\n         LOG.debug(\"HTTP/2 Push {}\", request);\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n             connection.onPush(connector, (IStream) pushStream, request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n         }\n-    });\n+    }, new Stream.Listener.Adapter());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "14cd10b67667af2f57cb0d608095dc97dee14131": {
      "type": "Ybodychange",
      "commitMessage": "experimenting with push API\n",
      "commitDate": "2015/2/6 上午10:48",
      "commitName": "14cd10b67667af2f57cb0d608095dc97dee14131",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2015/2/5 上午7:02",
      "commitNameOld": "f6cfe07a69669197accb166fc7359a4e2a810871",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    if (LOG.isDebugEnabled())\n        LOG.debug(\"HTTP/2 Push {}\", request);\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            connection.onPush(connector, (IStream) pushStream, request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    });\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 136,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,23 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n+    if (LOG.isDebugEnabled())\n+        LOG.debug(\"HTTP/2 Push {}\", request);\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n             connection.onPush(connector, (IStream) pushStream, request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5": {
      "type": "Ybodychange",
      "commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
      "commitDate": "2014/12/19 上午12:14",
      "commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/12/9 下午7:27",
      "commitNameOld": "dfe9dc3115c148e6f8a47034fda5e2f62d1dbc9d",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 9.2,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            connection.onPush(connector, (IStream) pushStream, request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    });\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 128,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,21 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n-            HTTP2ServerConnection connection \u003d (HTTP2ServerConnection) endPoint.getConnection();\n-            HttpChannelOverHTTP2 channel \u003d connection.newHttpChannelOverHTTP2(connector, pushStream);\n-            channel.onPushRequest(request);\n+            connection.onPush(connector, (IStream) pushStream, request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7b41e78f748e8404263929ad65fd25b1966631f3": {
      "type": "Ybodychange",
      "commitMessage": "Improved HttpChannelOverHTTP2 recycling\n",
      "commitDate": "2014/12/5 下午3:36",
      "commitName": "7b41e78f748e8404263929ad65fd25b1966631f3",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2014/11/28 上午9:09",
      "commitNameOld": "0a144ed3ac8a4f9379a4b0939196cbd310f648ee",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 7.27,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HTTP2ServerConnection connection \u003d (HTTP2ServerConnection) endPoint.getConnection();\n            HttpChannelOverHTTP2 channel \u003d connection.newHttpChannelOverHTTP2(connector, pushStream);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    });\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 117,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,23 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n-            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream);\n-            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport);\n-            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n+            HTTP2ServerConnection connection \u003d (HTTP2ServerConnection) endPoint.getConnection();\n+            HttpChannelOverHTTP2 channel \u003d connection.newHttpChannelOverHTTP2(connector, pushStream);\n             channel.onPushRequest(request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a144ed3ac8a4f9379a4b0939196cbd310f648ee": {
      "type": "Ybodychange",
      "commitMessage": "453487 Recycle HttpChannelOverHTTP2\n\nThis is an initial recyling of the channel.   The pool is a concurrent linked list, but it may be better to use an array backed list/stack that can easily enforce a maximum pool size.\nThe pool is currently on the session listener, when it really should be on the HTTP2ServerConnection, but more refactoring is needed for that.\nAlso the pool is currently inaccessible to the push mechanism\n",
      "commitDate": "2014/11/28 上午9:09",
      "commitName": "0a144ed3ac8a4f9379a4b0939196cbd310f648ee",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2014/10/24 下午12:51",
      "commitNameOld": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 34.85,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream);\n            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport);\n            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    });\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 117,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,24 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n-            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n-            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n-            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n+            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream);\n+            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport);\n             pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n             channel.onPushRequest(request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "75c1322adc7255cf7916a3e928f19875401db157": {
      "type": "Ybodychange",
      "commitMessage": "Rewritten close workflow to make sure that connections are correctly closed.\n",
      "commitDate": "2014/8/21 下午5:54",
      "commitName": "75c1322adc7255cf7916a3e928f19875401db157",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/8/20 上午12:40",
      "commitNameOld": "c15480644fc191adb1360150b7dbc3a0a79c7fc7",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n        }\n    });\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 103,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,25 @@\n @Override\n public void push(final MetaData.Request request) {\n     if (!stream.getSession().isPushEnabled()) {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n         return;\n     }\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n             HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n             HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n             HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n             pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n             channel.onPushRequest(request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n-            stream.getSession().disconnect();\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "728a7c3442c081e6b483ea347d813aa791e98d22": {
      "type": "Ybodychange",
      "commitMessage": "Made push functionality honor configuration parameter sent via SETTINGS.\n",
      "commitDate": "2014/8/16 上午12:34",
      "commitName": "728a7c3442c081e6b483ea347d813aa791e98d22",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/8/15 上午5:05",
      "commitNameOld": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    if (!stream.getSession().isPushEnabled()) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n        return;\n    }\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n            stream.getSession().disconnect();\n        }\n    });\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 101,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,26 @@\n @Override\n public void push(final MetaData.Request request) {\n+    if (!stream.getSession().isPushEnabled()) {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"HTTP/2 Push disabled for {}\", request);\n+        return;\n+    }\n     stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n \n         @Override\n         public void succeeded(Stream pushStream) {\n             HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n             HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n             HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n             pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n             channel.onPushRequest(request);\n         }\n \n         @Override\n         public void failed(Throwable x) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Could not push \" + request, x);\n             stream.getSession().disconnect();\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Implemented HTTP/2 push functionality.\n\nA PushCacheFilter contains the logic to associate secondary resources\nto primary resources.\nPushCacheFilter calls a Jetty-specific API on the request dispatcher:\nDispatcher.push(ServletRequest). This is a technology preview of the\npush functionality slated for Servlet 4.0.\nThe push() invocation arrives to the transport and it is converted to\nHTTP/2 specific PUSH_PROMISE, along with the mechanism to simulate\nthe request for the secondary resource.\n",
      "commitDate": "2014/8/15 上午5:05",
      "commitName": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
      "commitAuthor": "Simone Bordet",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented HTTP/2 push functionality.\n\nA PushCacheFilter contains the logic to associate secondary resources\nto primary resources.\nPushCacheFilter calls a Jetty-specific API on the request dispatcher:\nDispatcher.push(ServletRequest). This is a technology preview of the\npush functionality slated for Servlet 4.0.\nThe push() invocation arrives to the transport and it is converted to\nHTTP/2 specific PUSH_PROMISE, along with the mechanism to simulate\nthe request for the secondary resource.\n",
          "commitDate": "2014/8/15 上午5:05",
          "commitName": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
          "commitAuthor": "Simone Bordet",
          "commitDateOld": "2014/8/6 上午8:50",
          "commitNameOld": "b5971484a57212a39af6f70267ea00a24fdbf100",
          "commitAuthorOld": "Greg Wilkins",
          "daysBetweenCommits": 8.84,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n            stream.getSession().disconnect();\n        }\n    });\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 101,
          "functionName": "push",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,21 @@\n @Override\n-public void push(org.eclipse.jetty.http.MetaData.Request request) {\n-    LOG.warn(\"NOT YET IMPLEMENTED push in {}\", this);\n+public void push(final MetaData.Request request) {\n+    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n+\n+        @Override\n+        public void succeeded(Stream pushStream) {\n+            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n+            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n+            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n+            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n+            channel.onPushRequest(request);\n+        }\n+\n+        @Override\n+        public void failed(Throwable x) {\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Could not push \" + request, x);\n+            stream.getSession().disconnect();\n+        }\n+    });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[request-org.eclipse.jetty.http.MetaData.Request]",
            "newValue": "[request-MetaData.Request(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented HTTP/2 push functionality.\n\nA PushCacheFilter contains the logic to associate secondary resources\nto primary resources.\nPushCacheFilter calls a Jetty-specific API on the request dispatcher:\nDispatcher.push(ServletRequest). This is a technology preview of the\npush functionality slated for Servlet 4.0.\nThe push() invocation arrives to the transport and it is converted to\nHTTP/2 specific PUSH_PROMISE, along with the mechanism to simulate\nthe request for the secondary resource.\n",
          "commitDate": "2014/8/15 上午5:05",
          "commitName": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
          "commitAuthor": "Simone Bordet",
          "commitDateOld": "2014/8/6 上午8:50",
          "commitNameOld": "b5971484a57212a39af6f70267ea00a24fdbf100",
          "commitAuthorOld": "Greg Wilkins",
          "daysBetweenCommits": 8.84,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n            stream.getSession().disconnect();\n        }\n    });\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 101,
          "functionName": "push",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,21 @@\n @Override\n-public void push(org.eclipse.jetty.http.MetaData.Request request) {\n-    LOG.warn(\"NOT YET IMPLEMENTED push in {}\", this);\n+public void push(final MetaData.Request request) {\n+    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n+\n+        @Override\n+        public void succeeded(Stream pushStream) {\n+            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n+            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n+            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n+            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n+            channel.onPushRequest(request);\n+        }\n+\n+        @Override\n+        public void failed(Throwable x) {\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Could not push \" + request, x);\n+            stream.getSession().disconnect();\n+        }\n+    });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implemented HTTP/2 push functionality.\n\nA PushCacheFilter contains the logic to associate secondary resources\nto primary resources.\nPushCacheFilter calls a Jetty-specific API on the request dispatcher:\nDispatcher.push(ServletRequest). This is a technology preview of the\npush functionality slated for Servlet 4.0.\nThe push() invocation arrives to the transport and it is converted to\nHTTP/2 specific PUSH_PROMISE, along with the mechanism to simulate\nthe request for the secondary resource.\n",
          "commitDate": "2014/8/15 上午5:05",
          "commitName": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
          "commitAuthor": "Simone Bordet",
          "commitDateOld": "2014/8/6 上午8:50",
          "commitNameOld": "b5971484a57212a39af6f70267ea00a24fdbf100",
          "commitAuthorOld": "Greg Wilkins",
          "daysBetweenCommits": 8.84,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void push(final MetaData.Request request) {\n    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n\n        @Override\n        public void succeeded(Stream pushStream) {\n            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n            channel.onPushRequest(request);\n        }\n\n        @Override\n        public void failed(Throwable x) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Could not push \" + request, x);\n            stream.getSession().disconnect();\n        }\n    });\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 101,
          "functionName": "push",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,21 @@\n @Override\n-public void push(org.eclipse.jetty.http.MetaData.Request request) {\n-    LOG.warn(\"NOT YET IMPLEMENTED push in {}\", this);\n+public void push(final MetaData.Request request) {\n+    stream.push(new PushPromiseFrame(stream.getId(), 0, request), new Promise\u003cStream\u003e() {\n+\n+        @Override\n+        public void succeeded(Stream pushStream) {\n+            HttpTransportOverHTTP2 transport \u003d new HttpTransportOverHTTP2(connector, httpConfiguration, endPoint, (IStream) pushStream, request);\n+            HttpInputOverHTTP2 input \u003d new HttpInputOverHTTP2();\n+            HttpChannelOverHTTP2 channel \u003d new HttpChannelOverHTTP2(connector, httpConfiguration, endPoint, transport, input, pushStream);\n+            pushStream.setAttribute(IStream.CHANNEL_ATTRIBUTE, channel);\n+            channel.onPushRequest(request);\n+        }\n+\n+        @Override\n+        public void failed(Throwable x) {\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Could not push \" + request, x);\n+            stream.getSession().disconnect();\n+        }\n+    });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\n@see org.eclipse.jetty.server.HttpTransport#push(org.eclipse.jetty.http.MetaData.Request)\n",
            "newValue": ""
          }
        }
      ]
    },
    "b5971484a57212a39af6f70267ea00a24fdbf100": {
      "type": "Yintroduced",
      "commitMessage": "Basic push mechanism skeleton\n",
      "commitDate": "2014/8/6 上午8:50",
      "commitName": "b5971484a57212a39af6f70267ea00a24fdbf100",
      "commitAuthor": "Greg Wilkins",
      "diff": "@@ -0,0 +1,4 @@\n+@Override\n+public void push(org.eclipse.jetty.http.MetaData.Request request) {\n+    LOG.warn(\"NOT YET IMPLEMENTED push in {}\", this);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void push(org.eclipse.jetty.http.MetaData.Request request) {\n    LOG.warn(\"NOT YET IMPLEMENTED push in {}\", this);\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 93,
      "functionName": "push",
      "functionAnnotation": "@Override",
      "functionDoc": "\n@see org.eclipse.jetty.server.HttpTransport#push(org.eclipse.jetty.http.MetaData.Request)\n"
    }
  }
}