{
  "origin": "codeshovel",
  "repositoryName": "flink",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/flink/.git",
  "startCommitName": "9e936a5f8198b0059e9b5fba33163c2bbe3efbdd",
  "sourceFileName": "RemoteStreamEnvironment.java",
  "functionName": "executeRemotely",
  "functionId": "executeRemotely___streamGraph-StreamGraph__jarFiles-List__URL__",
  "sourceFilePath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
  "functionAnnotation": "",
  "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
  "functionStartLine": 190,
  "functionEndLine": 237,
  "numCommitsSeen": 74,
  "timeTaken": 6181,
  "changeHistory": [
    "fc3ee68bb1c0676ae8825c675d0c01e25d36db7b",
    "af5279e9bd3dec18512a54c59982e3dc1f253cd2",
    "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9",
    "38d3720863c6187153174d0df57fc414b0cf8e96",
    "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76",
    "ddd6a99a95b56c52ea5b5153b7270b578f5479bc",
    "f9b52a3114a2114e6846091acf3abb294a49615b",
    "7498d3e35a29449270a88a30eb32b7de74887f5b",
    "d7948fad6a73fdefae43cd42193342398a1581aa",
    "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
    "0ee0c1f5573ad059dc6a8e4489094b7f78267306",
    "82d6236173093b7e035a21360c7b69c67fd6ae62",
    "71bf2f570861daae53b24bfcf1d06aedb85311b9",
    "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029",
    "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
    "b70431239a5e18555866addb41ee6edf2b79ff60",
    "6b0d40764da9dce2e2d21882e9a03a21c6783ff0",
    "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
    "6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148",
    "076223cb9540c973eaba7d24e50c0e1f3eb80308",
    "d0dd5138fd0bddf2bf942bffee1681c298043b3e",
    "0163cfa11d64b641718a70aa30b7b896cdc077ba",
    "35cf874c36fc522e9fae6af4625901ee3c3bc9a3",
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
    "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb",
    "646190d3adcbb599b051946ed342daa549ce54ef",
    "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5",
    "12e52f8ac430c00ed38096944e50db1e185f3567",
    "23f649e4d42e8d2dde8ce424142c901b502ec583",
    "1171d024664a93cf298e935b06cd1c1c4db258ff",
    "d26c2305ede77abbceb6ebb58e1fdc6aad158cbe",
    "b96db729c450ea05930ca0feba01769d3eb5d1f9",
    "5b05ca635d1a661bf2be3baf60159d84834a9942"
  ],
  "changeHistoryShort": {
    "fc3ee68bb1c0676ae8825c675d0c01e25d36db7b": "Ybodychange",
    "af5279e9bd3dec18512a54c59982e3dc1f253cd2": "Ybodychange",
    "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9": "Ybodychange",
    "38d3720863c6187153174d0df57fc414b0cf8e96": "Ybodychange",
    "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76": "Ybodychange",
    "ddd6a99a95b56c52ea5b5153b7270b578f5479bc": "Ybodychange",
    "f9b52a3114a2114e6846091acf3abb294a49615b": "Ybodychange",
    "7498d3e35a29449270a88a30eb32b7de74887f5b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "d7948fad6a73fdefae43cd42193342398a1581aa": "Ymodifierchange",
    "bf29de981c2bcd5cb5d33c68b158c95c8820f43d": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876": "Yfilerename",
    "0ee0c1f5573ad059dc6a8e4489094b7f78267306": "Ybodychange",
    "82d6236173093b7e035a21360c7b69c67fd6ae62": "Ybodychange",
    "71bf2f570861daae53b24bfcf1d06aedb85311b9": "Ybodychange",
    "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029": "Ybodychange",
    "2b8db40ac40d70027ce331f3a04c6ca7aa562a84": "Ymultichange(Yexceptionschange,Ybodychange)",
    "b70431239a5e18555866addb41ee6edf2b79ff60": "Ybodychange",
    "6b0d40764da9dce2e2d21882e9a03a21c6783ff0": "Ybodychange",
    "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a": "Ymultichange(Yreturntypechange,Ybodychange,Ydocchange)",
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": "Yfilerename",
    "6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148": "Ybodychange",
    "076223cb9540c973eaba7d24e50c0e1f3eb80308": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Yannotationchange,Ydocchange)",
    "d0dd5138fd0bddf2bf942bffee1681c298043b3e": "Ybodychange",
    "0163cfa11d64b641718a70aa30b7b896cdc077ba": "Ybodychange",
    "35cf874c36fc522e9fae6af4625901ee3c3bc9a3": "Ybodychange",
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": "Yfilerename",
    "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb": "Ybodychange",
    "646190d3adcbb599b051946ed342daa549ce54ef": "Ybodychange",
    "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5": "Yfilerename",
    "12e52f8ac430c00ed38096944e50db1e185f3567": "Yfilerename",
    "23f649e4d42e8d2dde8ce424142c901b502ec583": "Ybodychange",
    "1171d024664a93cf298e935b06cd1c1c4db258ff": "Ybodychange",
    "d26c2305ede77abbceb6ebb58e1fdc6aad158cbe": "Ybodychange",
    "b96db729c450ea05930ca0feba01769d3eb5d1f9": "Ybodychange",
    "5b05ca635d1a661bf2be3baf60159d84834a9942": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc3ee68bb1c0676ae8825c675d0c01e25d36db7b": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8573] Extend ProgramInvocationException message with Job ID where applicable\n\nThis closes #6169.\nThis closes #5421.\n",
      "commitDate": "2018/6/15 下午3:08",
      "commitName": "fc3ee68bb1c0676ae8825c675d0c01e25d36db7b",
      "commitAuthor": "Andrey Zagrebin",
      "commitDateOld": "2018/4/2 下午10:59",
      "commitNameOld": "af5279e9bd3dec18512a54c59982e3dc1f253cd2",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 73.67,
      "commitsBetweenForRepo": 475,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    final ClusterClient\u003c?\u003e client;\n    try {\n        if (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n            client \u003d new StandaloneClusterClient(configuration);\n        } else {\n            client \u003d new RestClusterClient\u003c\u003e(configuration, \"RemoteStreamEnvironment\");\n        }\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), streamGraph.getJobGraph().getJobID(), e);\n    }\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, streamGraph.getJobGraph().getJobID(), e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 190,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,35 +1,35 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n     configuration.setString(JobManagerOptions.ADDRESS, host);\n     configuration.setInteger(JobManagerOptions.PORT, port);\n     final ClusterClient\u003c?\u003e client;\n     try {\n         if (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n             client \u003d new StandaloneClusterClient(configuration);\n         } else {\n             client \u003d new RestClusterClient\u003c\u003e(configuration, \"RemoteStreamEnvironment\");\n         }\n     } catch (Exception e) {\n-        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n+        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), streamGraph.getJobGraph().getJobID(), e);\n     }\n     client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     try {\n         return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n-        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n+        throw new ProgramInvocationException(\"The program execution failed\" + term, streamGraph.getJobGraph().getJobID(), e);\n     } finally {\n         try {\n             client.shutdown();\n         } catch (Exception e) {\n             LOG.warn(\"Could not properly shut down the cluster client.\", e);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "af5279e9bd3dec18512a54c59982e3dc1f253cd2": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-9121] [flip6] Remove Flip6 prefixes and other references\n\nRemove Flip6 prefixes and references to make Flip-6 the proper default:\n\nRename categories Flip6 -\u003e New and OldAndFlip6 -\u003e LegacyAndNew\n\nRemove Flip-6 from documentation\n\nRemove Flip-6 from start up scripts\n\nThis closes #5801.\n",
      "commitDate": "2018/4/2 下午10:59",
      "commitName": "af5279e9bd3dec18512a54c59982e3dc1f253cd2",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2018/2/22 上午5:49",
      "commitNameOld": "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 39.72,
      "commitsBetweenForRepo": 363,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    final ClusterClient\u003c?\u003e client;\n    try {\n        if (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n            client \u003d new StandaloneClusterClient(configuration);\n        } else {\n            client \u003d new RestClusterClient\u003c\u003e(configuration, \"RemoteStreamEnvironment\");\n        }\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 190,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,35 +1,35 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n     configuration.setString(JobManagerOptions.ADDRESS, host);\n     configuration.setInteger(JobManagerOptions.PORT, port);\n     final ClusterClient\u003c?\u003e client;\n     try {\n-        if (CoreOptions.OLD_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n+        if (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n             client \u003d new StandaloneClusterClient(configuration);\n         } else {\n             client \u003d new RestClusterClient\u003c\u003e(configuration, \"RemoteStreamEnvironment\");\n         }\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     try {\n         return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         try {\n             client.shutdown();\n         } catch (Exception e) {\n             LOG.warn(\"Could not properly shut down the cluster client.\", e);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8705] [flip6] Add Flip-6 support to Remote(Stream)Environment\n\nThis commit enables the Remote(Stream)Environment to submit jobs to a Flip-6\nbased cluster. It achieves this by instantiating a RestClusterClient instead\nof a StandaloneClusterClient.\n",
      "commitDate": "2018/2/22 上午5:49",
      "commitName": "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2018/1/12 下午11:14",
      "commitNameOld": "38d3720863c6187153174d0df57fc414b0cf8e96",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 40.27,
      "commitsBetweenForRepo": 407,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    final ClusterClient\u003c?\u003e client;\n    try {\n        if (CoreOptions.OLD_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n            client \u003d new StandaloneClusterClient(configuration);\n        } else {\n            client \u003d new RestClusterClient\u003c\u003e(configuration, \"RemoteStreamEnvironment\");\n        }\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 190,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,31 +1,35 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n     configuration.setString(JobManagerOptions.ADDRESS, host);\n     configuration.setInteger(JobManagerOptions.PORT, port);\n-    StandaloneClusterClient client;\n+    final ClusterClient\u003c?\u003e client;\n     try {\n-        client \u003d new StandaloneClusterClient(configuration);\n-        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+        if (CoreOptions.OLD_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n+            client \u003d new StandaloneClusterClient(configuration);\n+        } else {\n+            client \u003d new RestClusterClient\u003c\u003e(configuration, \"RemoteStreamEnvironment\");\n+        }\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n+    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     try {\n         return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         try {\n             client.shutdown();\n         } catch (Exception e) {\n             LOG.warn(\"Could not properly shut down the cluster client.\", e);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "38d3720863c6187153174d0df57fc414b0cf8e96": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8347] [flip6] Make cluster id used by ClusterDescriptor typesafe\n\nThe ClusterDescriptor uses a typed cluster id for the ClusterClient retrieval.\nMoreover, the ClusterClient and the CustomCommandLine are typed accordingly.\n\nThis closes #5232.\n",
      "commitDate": "2018/1/12 下午11:14",
      "commitName": "38d3720863c6187153174d0df57fc414b0cf8e96",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/7/10 下午6:41",
      "commitNameOld": "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76",
      "commitAuthorOld": "zjureel",
      "daysBetweenCommits": 186.19,
      "commitsBetweenForRepo": 1232,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    StandaloneClusterClient client;\n    try {\n        client \u003d new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 187,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,31 +1,31 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n     configuration.setString(JobManagerOptions.ADDRESS, host);\n     configuration.setInteger(JobManagerOptions.PORT, port);\n-    ClusterClient client;\n+    StandaloneClusterClient client;\n     try {\n         client \u003d new StandaloneClusterClient(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         try {\n             client.shutdown();\n         } catch (Exception e) {\n             LOG.warn(\"Could not properly shut down the cluster client.\", e);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7099] Replace usages of deprecated JOB_MANAGER_IPC_PORT_KEY and JOB_MANAGER_IPC_ADDRESS_KEY\n\nThis closes #4278.\n",
      "commitDate": "2017/7/10 下午6:41",
      "commitName": "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76",
      "commitAuthor": "zjureel",
      "commitDateOld": "2017/5/23 上午4:22",
      "commitNameOld": "12b4185c6c09101b64e12a84c33dc4d28f95cff9",
      "commitAuthorOld": "Greg Hogan",
      "daysBetweenCommits": 48.6,
      "commitsBetweenForRepo": 303,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    ClusterClient client;\n    try {\n        client \u003d new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 188,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,31 +1,31 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n-    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n-    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n+    configuration.setString(JobManagerOptions.ADDRESS, host);\n+    configuration.setInteger(JobManagerOptions.PORT, port);\n     ClusterClient client;\n     try {\n         client \u003d new StandaloneClusterClient(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         try {\n             client.shutdown();\n         } catch (Exception e) {\n             LOG.warn(\"Could not properly shut down the cluster client.\", e);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ddd6a99a95b56c52ea5b5153b7270b578f5479bc": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-6078] Remove CuratorFramework#close calls from ZooKeeper based HA services\n\nRemove client less factory methods from ZooKeeperUtils\n\nIntroduce default job id\n\nThis closes #3781.\n",
      "commitDate": "2017/5/5 下午5:06",
      "commitName": "ddd6a99a95b56c52ea5b5153b7270b578f5479bc",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/4/26 下午4:36",
      "commitNameOld": "5aa93a270a87b5a965e5c37c5c8bd6e6208b09b7",
      "commitAuthorOld": "Aljoscha Krettek",
      "daysBetweenCommits": 9.02,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    ClusterClient client;\n    try {\n        client \u003d new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 188,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,27 +1,31 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     ClusterClient client;\n     try {\n         client \u003d new StandaloneClusterClient(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n-        client.shutdown();\n+        try {\n+            client.shutdown();\n+        } catch (Exception e) {\n+            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f9b52a3114a2114e6846091acf3abb294a49615b": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-3667] refactor client communication classes\n\n- ClusterDescriptor: base interface for cluster deployment descriptors\n- ClusterDescriptor: YarnClusterDescriptor\n\n- ClusterClient: base class for ClusterClients, handles lifecycle of cluster\n- ClusterClient: shares configuration with the implementations\n- ClusterClient: StandaloneClusterClient, YarnClusterClient\n- ClusterClient: remove run methods and enable detached mode via flag\n\n- CliFrontend: remove all Yarn specific logic\n- CliFrontend: remove all cluster setup logic\n\n- CustomCommandLine: interface for other cluster implementations\n- Customcommandline: enables creation of new cluster or resuming from existing\n\n- Yarn: move Yarn classes and functionality to the yarn module (yarn\n  properties, yarn interfaces)\n- Yarn: improve reliability of cluster startup\n- Yarn Tests: only disable parallel execution of ITCases\n\nThis closes #1978\n",
      "commitDate": "2016/6/17 下午4:37",
      "commitName": "f9b52a3114a2114e6846091acf3abb294a49615b",
      "commitAuthor": "Maximilian Michels",
      "commitDateOld": "2016/4/25 下午11:50",
      "commitNameOld": "7498d3e35a29449270a88a30eb32b7de74887f5b",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 52.7,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    ClusterClient client;\n    try {\n        client \u003d new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 185,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,27 +1,27 @@\n protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.clientConfiguration);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n-    Client client;\n+    ClusterClient client;\n     try {\n-        client \u003d new Client(configuration);\n+        client \u003d new StandaloneClusterClient(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n-        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n+        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7498d3e35a29449270a88a30eb32b7de74887f5b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
      "commitDate": "2016/4/25 下午11:50",
      "commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
      "commitAuthor": "Till Rohrmann",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
          "commitDate": "2016/4/25 下午11:50",
          "commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2016/4/6 下午8:39",
          "commitNameOld": "d7948fad6a73fdefae43cd42193342398a1581aa",
          "commitAuthorOld": "nikste",
          "daysBetweenCommits": 19.13,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 184,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,27 +1,27 @@\n-protected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n-    configuration.addAll(this.config);\n+    configuration.addAll(this.clientConfiguration);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[streamGraph-StreamGraph]",
            "newValue": "[streamGraph-StreamGraph, jarFiles-List\u003cURL\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
          "commitDate": "2016/4/25 下午11:50",
          "commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2016/4/6 下午8:39",
          "commitNameOld": "d7948fad6a73fdefae43cd42193342398a1581aa",
          "commitAuthorOld": "nikste",
          "daysBetweenCommits": 19.13,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 184,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,27 +1,27 @@\n-protected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n-    configuration.addAll(this.config);\n+    configuration.addAll(this.clientConfiguration);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n",
          "commitDate": "2016/4/25 下午11:50",
          "commitName": "7498d3e35a29449270a88a30eb32b7de74887f5b",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2016/4/6 下午8:39",
          "commitNameOld": "d7948fad6a73fdefae43cd42193342398a1581aa",
          "commitAuthorOld": "nikste",
          "daysBetweenCommits": 19.13,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 184,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,27 +1,27 @@\n-protected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List\u003cURL\u003e jarFiles) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n-    configuration.addAll(this.config);\n+    configuration.addAll(this.clientConfiguration);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
            "newValue": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@param jarFiles List of jar file URLs to ship to the cluster\n@return The result of the job execution, containing elapsed time and accumulators.\n"
          }
        }
      ]
    },
    "d7948fad6a73fdefae43cd42193342398a1581aa": {
      "type": "Ymodifierchange",
      "commitMessage": "[FLINK-2522] Streaming support for Flink-Scala-Shell\n",
      "commitDate": "2016/4/6 下午8:39",
      "commitName": "d7948fad6a73fdefae43cd42193342398a1581aa",
      "commitAuthor": "nikste",
      "commitDateOld": "2016/2/5 下午9:43",
      "commitNameOld": "b54499b1cf6d14d01e448ea9ce8edabaaba83929",
      "commitAuthorOld": "Robert Metzger",
      "daysBetweenCommits": 60.96,
      "commitsBetweenForRepo": 385,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 182,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,27 +1,27 @@\n-private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n+protected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(this.config);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "bf29de981c2bcd5cb5d33c68b158c95c8820f43d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
      "commitDate": "2015/11/2 上午2:00",
      "commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
      "commitAuthor": "Maximilian Michels",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
          "commitDate": "2015/11/2 上午2:00",
          "commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
          "commitAuthor": "Maximilian Michels",
          "commitDateOld": "2015/10/21 下午5:01",
          "commitNameOld": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
          "commitAuthorOld": "Rufus Refactor",
          "daysBetweenCommits": 11.37,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 180,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,35 +1,27 @@\n-private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n+private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    for (URL jarFile : jarFiles) {\n-        try {\n-            jobGraph.addJar(new Path(jarFile.toURI()));\n-        } catch (URISyntaxException e) {\n-            throw new ProgramInvocationException(\"URL is invalid\", e);\n-        }\n-    }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n-    configuration.addAll(jobGraph.getJobConfiguration());\n     configuration.addAll(this.config);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n-        return client.runBlocking(jobGraph, usercodeClassLoader);\n+        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[jobGraph-JobGraph]",
            "newValue": "[streamGraph-StreamGraph]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
          "commitDate": "2015/11/2 上午2:00",
          "commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
          "commitAuthor": "Maximilian Michels",
          "commitDateOld": "2015/10/21 下午5:01",
          "commitNameOld": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
          "commitAuthorOld": "Rufus Refactor",
          "daysBetweenCommits": 11.37,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 180,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,35 +1,27 @@\n-private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n+private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    for (URL jarFile : jarFiles) {\n-        try {\n-            jobGraph.addJar(new Path(jarFile.toURI()));\n-        } catch (URISyntaxException e) {\n-            throw new ProgramInvocationException(\"URL is invalid\", e);\n-        }\n-    }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n-    configuration.addAll(jobGraph.getJobConfiguration());\n     configuration.addAll(this.config);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n-        return client.runBlocking(jobGraph, usercodeClassLoader);\n+        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] delegate JobGraph generation to Client class\n",
          "commitDate": "2015/11/2 上午2:00",
          "commitName": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
          "commitAuthor": "Maximilian Michels",
          "commitDateOld": "2015/10/21 下午5:01",
          "commitNameOld": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
          "commitAuthorOld": "Rufus Refactor",
          "daysBetweenCommits": 11.37,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 180,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,35 +1,27 @@\n-private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n+private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    for (URL jarFile : jarFiles) {\n-        try {\n-            jobGraph.addJar(new Path(jarFile.toURI()));\n-        } catch (URISyntaxException e) {\n-            throw new ProgramInvocationException(\"URL is invalid\", e);\n-        }\n-    }\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n-    configuration.addAll(jobGraph.getJobConfiguration());\n     configuration.addAll(this.config);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n-        return client.runBlocking(jobGraph, usercodeClassLoader);\n+        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
            "newValue": "Executes the remote job.\n\n@param streamGraph Stream Graph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n"
          }
        }
      ]
    },
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876": {
      "type": "Yfilerename",
      "commitMessage": "[FLINK-2877] Move Streaming API out of Staging package\n",
      "commitDate": "2015/10/21 下午5:01",
      "commitName": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
      "commitAuthor": "Rufus Refactor",
      "commitDateOld": "2015/10/21 下午4:35",
      "commitNameOld": "42a3d8cfa9eacc19ac04004b256b6eb51422b523",
      "commitAuthorOld": "Maximilian Michels",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (URL jarFile : jarFiles) {\n        try {\n            jobGraph.addJar(new Path(jarFile.toURI()));\n        } catch (URISyntaxException e) {\n            throw new ProgramInvocationException(\"URL is invalid\", e);\n        }\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(jobGraph.getJobConfiguration());\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 181,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
        "newPath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java"
      }
    },
    "0ee0c1f5573ad059dc6a8e4489094b7f78267306": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1789][core][runtime] Allow adding of URLs to the usercode class loader\n\nThis closes #593.\n",
      "commitDate": "2015/10/8 下午9:55",
      "commitName": "0ee0c1f5573ad059dc6a8e4489094b7f78267306",
      "commitAuthor": "twalthr",
      "commitDateOld": "2015/10/1 下午5:02",
      "commitNameOld": "82d6236173093b7e035a21360c7b69c67fd6ae62",
      "commitAuthorOld": "Stephan Ewen",
      "daysBetweenCommits": 7.2,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (URL jarFile : jarFiles) {\n        try {\n            jobGraph.addJar(new Path(jarFile.toURI()));\n        } catch (URISyntaxException e) {\n            throw new ProgramInvocationException(\"URL is invalid\", e);\n        }\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(jobGraph.getJobConfiguration());\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 181,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,31 +1,35 @@\n private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    for (File file : jarFiles) {\n-        jobGraph.addJar(new Path(file.getAbsolutePath()));\n+    for (URL jarFile : jarFiles) {\n+        try {\n+            jobGraph.addJar(new Path(jarFile.toURI()));\n+        } catch (URISyntaxException e) {\n+            throw new ProgramInvocationException(\"URL is invalid\", e);\n+        }\n     }\n-    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n+    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n     Configuration configuration \u003d new Configuration();\n     configuration.addAll(jobGraph.getJobConfiguration());\n     configuration.addAll(this.config);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.runBlocking(jobGraph, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82d6236173093b7e035a21360c7b69c67fd6ae62": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] [storm] Clean up instantiation of mini clusters and test environments.\n",
      "commitDate": "2015/10/1 下午5:02",
      "commitName": "82d6236173093b7e035a21360c7b69c67fd6ae62",
      "commitAuthor": "Stephan Ewen",
      "commitDateOld": "2015/9/23 上午1:55",
      "commitNameOld": "71bf2f570861daae53b24bfcf1d06aedb85311b9",
      "commitAuthorOld": "Maximilian Michels",
      "daysBetweenCommits": 8.63,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    Configuration configuration \u003d new Configuration();\n    configuration.addAll(jobGraph.getJobConfiguration());\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 133,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,29 +1,31 @@\n private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n-    Configuration configuration \u003d jobGraph.getJobConfiguration();\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n+    Configuration configuration \u003d new Configuration();\n+    configuration.addAll(jobGraph.getJobConfiguration());\n+    configuration.addAll(this.config);\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     Client client;\n     try {\n         client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     } catch (Exception e) {\n         throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n     }\n     try {\n         return client.runBlocking(jobGraph, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     } finally {\n         client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "71bf2f570861daae53b24bfcf1d06aedb85311b9": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-2097][core] implement a job session management\n\nSessions make sure that the JobManager does not immediately discard a\nJobGraph after execution, but keeps it around for further operations to\nbe attached to the graph. That is the basis for interactive sessions.\n\nThis pull request implements a rudimentary session management. Together\nwith the backtracking #640, this will enable users to submit jobs to the\ncluster and access intermediate results. Session handling ensures that\nthe results are cleared eventually.\n\nExecutionGraphs are kept as long as\n  - no timeout occurred or\n  - the session has not been explicitly ended\n\nThe following changes have also been made in this pull request:\n\n- The Job ID is created through the ExecutionEnvironment and passed through\n\n- Sessions can be termined by the ExecutionEnvironment or directly\n  through the executor\n\n- The environments use reapers (local) and shutdown hooks (remote) to\n  ensure session termination when the environment runs out of scope\n\n- The Client manages only connections to the JobManager, it is not job\n  specific\n\nThis closes #858.\n",
      "commitDate": "2015/9/23 上午1:55",
      "commitName": "71bf2f570861daae53b24bfcf1d06aedb85311b9",
      "commitAuthor": "Maximilian Michels",
      "commitDateOld": "2015/8/31 下午5:02",
      "commitNameOld": "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 22.37,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client \u003d new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 106,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,28 +1,29 @@\n private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n     configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n     configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n+    Client client;\n     try {\n-        Client client \u003d new Client(configuration, usercodeClassLoader, -1);\n+        client \u003d new Client(configuration);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n-        JobSubmissionResult result \u003d client.run(jobGraph, true);\n-        if (result instanceof JobExecutionResult) {\n-            return (JobExecutionResult) result;\n-        } else {\n-            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n-            return new JobExecutionResult(result.getJobID(), -1, null);\n-        }\n+    } catch (Exception e) {\n+        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n+    }\n+    try {\n+        return client.runBlocking(jobGraph, usercodeClassLoader);\n     } catch (ProgramInvocationException e) {\n         throw e;\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n+    } finally {\n+        client.shutdown();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-2291] [runtime] Add ZooKeeper support to elect a leader from a set of JobManager. The leader will then be retrieved from ZooKeeper by the TaskManagers.\n\nRefactors FlinkMiniCluster to support multiple JobManager\n\nAdds proper remote address resolution for actors\n\nClean up of LeaderElection and LeaderRetrievalService. Removes synchronization to avoid deadlock.\n\nAdds ZooKeeper start option to TestBaseUtils.startCluster\n\nRemoves registration session IDs, using the leader session IDs instead. Sets the leader session ID\n directly in the grantLeadership method. Let the LeaderElectionService select the leader session I\nD. Return leader session ID to LeaderRetrievalListeners.\n\nRemoves direct ActorRef interaction\n\nIntroduces LeaderRetrievalService for the Client and the CliFrontend.\n\nMake ApplicationClient to use the LeaderRetrievalService for JobManager resolution\n\nAdds LeaderElection/Retrieval tests\n\nAdded test for exception forwarding from the CuratorFramework to a Contender\n\nAdds test job submission with changing leaders\n\nAdds new test cases for job cleanup after leader election change\n\nAdds new LeaderChangeStateCleanup test case\n\nAdds LeaderElectionRetrievalTestingCluster\n\nIntroduces ListeningBehaviour for job submissions\n\nRelocation of org.apache.curator in flink-shaded-hadoop jar\n\nAdds Apache ZooKeeper and Apache Curator to LICENSE and NOTICE files\n\nIncreases zookeeper connection timeout to 20000 ms for the KafkaITCase to fix failing tests on Travis\n\nIncreased timeouts of ZooKeeperLeaderElectionTest for Travis\n\nMakes the WebInfoServer and the WebRuntimeMonitor to use the LeaderRetrievalService to retrieve the current leading JobManager\n\nAdds proper synchronization to ZooKeeperLeaderElectionService. Fixes StateCheckpointedITCase and PartitionedStateCheckpointingITCase\n\nAdds configuration description for new ZooKeeper configuration values\n\nFixed port selection of JobManager at startup\n\nImproves logging output\n\nExtends masters file to also specify the webui ports\n\nAdds proper network interface resolution by retrieving the current leader address\n\nMakes the ZooKeeperLeaderElectionService write the leader information in ephemeral nodes so that the information is deleted once the leader has terminated. Fixes a bug in the TaskManager due to call by name semantics of scheduler.scheduleOnce.\n\nAdds jobManagerURL to TriggerTaskManagerRegistration message\n\nEnables findConnectingAddress to use the ZooKeeperLeaderRetrievalService. This allows to test the connection to a possibly changing master node.\n\nChanges startup scripts to respect the recovery mode instead of the ZK_QUORUM\n\nAdjust travis log file to only log zookeeper errors\n\nUpdates high availability setup guide\n\nAdds TestLogger to leader election tests\n\nThis closes #1016.\n",
      "commitDate": "2015/8/31 下午5:02",
      "commitName": "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2015/8/19 下午11:53",
      "commitNameOld": "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
      "commitAuthorOld": "Aljoscha Krettek",
      "daysBetweenCommits": 11.71,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    try {\n        Client client \u003d new Client(configuration, usercodeClassLoader, -1);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n        JobSubmissionResult result \u003d client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 105,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,28 +1,28 @@\n private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n+    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n+    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n     try {\n-        Client client \u003d new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n+        Client client \u003d new Client(configuration, usercodeClassLoader, -1);\n         client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n         JobSubmissionResult result \u003d client.run(jobGraph, true);\n         if (result instanceof JobExecutionResult) {\n             return (JobExecutionResult) result;\n         } else {\n             LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n             return new JobExecutionResult(result.getJobID(), -1, null);\n         }\n     } catch (ProgramInvocationException e) {\n         throw e;\n-    } catch (UnknownHostException e) {\n-        throw new ProgramInvocationException(e.getMessage(), e);\n     } catch (Exception e) {\n         String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n         throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2b8db40ac40d70027ce331f3a04c6ca7aa562a84": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "[FLINK-1918] [client] Fix misleading NullPointerException in case of unresolvable host names\n",
      "commitDate": "2015/4/22 下午8:19",
      "commitName": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
      "commitAuthor": "Stephan Ewen",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "[FLINK-1918] [client] Fix misleading NullPointerException in case of unresolvable host names\n",
          "commitDate": "2015/4/22 下午8:19",
          "commitName": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
          "commitAuthor": "Stephan Ewen",
          "commitDateOld": "2015/4/22 下午8:19",
          "commitNameOld": "b70431239a5e18555866addb41ee6edf2b79ff60",
          "commitAuthorOld": "Stephan Ewen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    try {\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n        JobSubmissionResult result \u003d client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (UnknownHostException e) {\n        throw new ProgramInvocationException(e.getMessage(), e);\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    }\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 106,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,22 +1,28 @@\n-private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n+private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n-    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n-    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n     try {\n+        Client client \u003d new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n+        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n         JobSubmissionResult result \u003d client.run(jobGraph, true);\n         if (result instanceof JobExecutionResult) {\n             return (JobExecutionResult) result;\n         } else {\n             LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n             return new JobExecutionResult(result.getJobID(), -1, null);\n         }\n     } catch (ProgramInvocationException e) {\n-        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n+        throw e;\n+    } catch (UnknownHostException e) {\n+        throw new ProgramInvocationException(e.getMessage(), e);\n+    } catch (Exception e) {\n+        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n+        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ProgramInvocationException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-1918] [client] Fix misleading NullPointerException in case of unresolvable host names\n",
          "commitDate": "2015/4/22 下午8:19",
          "commitName": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
          "commitAuthor": "Stephan Ewen",
          "commitDateOld": "2015/4/22 下午8:19",
          "commitNameOld": "b70431239a5e18555866addb41ee6edf2b79ff60",
          "commitAuthorOld": "Stephan Ewen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    try {\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n        JobSubmissionResult result \u003d client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (UnknownHostException e) {\n        throw new ProgramInvocationException(e.getMessage(), e);\n    } catch (Exception e) {\n        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    }\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 106,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,22 +1,28 @@\n-private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n+private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n-    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n-    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n+    ClassLoader usercodeClassLoader \u003d JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n     try {\n+        Client client \u003d new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n+        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n         JobSubmissionResult result \u003d client.run(jobGraph, true);\n         if (result instanceof JobExecutionResult) {\n             return (JobExecutionResult) result;\n         } else {\n             LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n             return new JobExecutionResult(result.getJobID(), -1, null);\n         }\n     } catch (ProgramInvocationException e) {\n-        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n+        throw e;\n+    } catch (UnknownHostException e) {\n+        throw new ProgramInvocationException(e.getMessage(), e);\n+    } catch (Exception e) {\n+        String term \u003d e.getMessage() \u003d\u003d null ? \".\" : (\": \" + e.getMessage());\n+        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b70431239a5e18555866addb41ee6edf2b79ff60": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1878] [streaming] Stream environments accept a flag that controls sysout logging during execution.\n",
      "commitDate": "2015/4/22 下午8:19",
      "commitName": "b70431239a5e18555866addb41ee6edf2b79ff60",
      "commitAuthor": "Stephan Ewen",
      "commitDateOld": "2015/3/31 下午2:56",
      "commitNameOld": "6b0d40764da9dce2e2d21882e9a03a21c6783ff0",
      "commitAuthorOld": "Robert Metzger",
      "daysBetweenCommits": 22.22,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        JobSubmissionResult result \u003d client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 105,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,21 +1,22 @@\n private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n+    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n     try {\n         JobSubmissionResult result \u003d client.run(jobGraph, true);\n         if (result instanceof JobExecutionResult) {\n             return (JobExecutionResult) result;\n         } else {\n             LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n             return new JobExecutionResult(result.getJobID(), -1, null);\n         }\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b0d40764da9dce2e2d21882e9a03a21c6783ff0": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1771] Add support for submitting single jobs to a detached YARN session\n\nWith this change, users can submit a Flink job to a YARN cluster without having a local client monitoring the Application Master or job. You can basically fire and forget a Flink job to YARN.\nFor supporting this, the ApplicationMaster can now monitor the status of a job and shutdown itself once it is in a terminal state.\n\nThe change also verifies that various ways of setting the parallelism on YARN are passed through the system correctly (per job, session).\n\nThere was a bug in YARN container creation which made the configuration values for the heap offset useless. This change fixes this error.\n\nAll mentioned features and bugs are covered by the flink-yarn-tests.\n\nThis closes #542\n",
      "commitDate": "2015/3/31 下午2:56",
      "commitName": "6b0d40764da9dce2e2d21882e9a03a21c6783ff0",
      "commitAuthor": "Robert Metzger",
      "commitDateOld": "2015/3/23 下午7:45",
      "commitNameOld": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
      "commitAuthorOld": "Gabor Gevay",
      "daysBetweenCommits": 7.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n    try {\n        JobSubmissionResult result \u003d client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 104,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
      "diff": "@@ -1,15 +1,21 @@\n private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n-    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n+    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n     try {\n-        return client.run(jobGraph, true);\n+        JobSubmissionResult result \u003d client.run(jobGraph, true);\n+        if (result instanceof JobExecutionResult) {\n+            return (JobExecutionResult) result;\n+        } else {\n+            LOG.warn(\"The Client didn\u0027t return a JobExecutionResult\");\n+            return new JobExecutionResult(result.getJobID(), -1, null);\n+        }\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
      "commitDate": "2015/3/23 下午7:45",
      "commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
      "commitAuthor": "Gabor Gevay",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
          "commitDate": "2015/3/23 下午7:45",
          "commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
          "commitAuthor": "Gabor Gevay",
          "commitDateOld": "2015/3/23 下午4:03",
          "commitNameOld": "cf84bca124ac34875ef3e559abbbf509c1218542",
          "commitAuthorOld": "Maximilian Michels",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        return client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 103,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,15 +1,15 @@\n-private void executeRemotely(JobGraph jobGraph) {\n+private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n     try {\n-        client.run(jobGraph, true);\n+        return client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "JobExecutionResult"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
          "commitDate": "2015/3/23 下午7:45",
          "commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
          "commitAuthor": "Gabor Gevay",
          "commitDateOld": "2015/3/23 下午4:03",
          "commitNameOld": "cf84bca124ac34875ef3e559abbbf509c1218542",
          "commitAuthorOld": "Maximilian Michels",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        return client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 103,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,15 +1,15 @@\n-private void executeRemotely(JobGraph jobGraph) {\n+private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n     try {\n-        client.run(jobGraph, true);\n+        return client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[FLINK-1767] [streaming] Make StreamExecutionEnvironment return JobExecutionResult instead of void.\n\nConflicts:\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/LocalStreamEnvironment.java\n\tflink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/ClusterUtil.java\n\nThis closes #516\n",
          "commitDate": "2015/3/23 下午7:45",
          "commitName": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
          "commitAuthor": "Gabor Gevay",
          "commitDateOld": "2015/3/23 下午4:03",
          "commitNameOld": "cf84bca124ac34875ef3e559abbbf509c1218542",
          "commitAuthorOld": "Maximilian Michels",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        return client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 103,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n",
          "diff": "@@ -1,15 +1,15 @@\n-private void executeRemotely(JobGraph jobGraph) {\n+private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n     try {\n-        client.run(jobGraph, true);\n+        return client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
            "newValue": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n@return The result of the job execution, containing elapsed time and accumulators.\n"
          }
        }
      ]
    },
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": {
      "type": "Yfilerename",
      "commitMessage": "[FLINK-1452] Rename \u0027flink-addons\u0027 to \u0027flink-staging\u0027\n",
      "commitDate": "2015/2/3 上午2:40",
      "commitName": "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
      "commitAuthor": "Robert Metzger",
      "commitDateOld": "2015/2/2 上午7:27",
      "commitNameOld": "563e546236217dace58a8031d56d08a27e08160b",
      "commitAuthorOld": "zentol",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 101,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
        "newPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java"
      }
    },
    "6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] StreamExecutionEnvironment rework + user class loader fix for cluster deployment\n",
      "commitDate": "2014/11/13 下午10:24",
      "commitName": "6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2014/9/25 上午3:07",
      "commitNameOld": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 49.8,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 101,
      "functionName": "executeRemotely",
      "functionAnnotation": "",
      "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
      "diff": "@@ -1,21 +1,15 @@\n private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n-        File file \u003d new File(jarFiles[i]);\n-        try {\n-            JobWithJars.checkJarFile(file);\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n-        }\n+    for (File file : jarFiles) {\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n-    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n+    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "076223cb9540c973eaba7d24e50c0e1f3eb80308": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Yannotationchange,Ydocchange)",
      "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
      "commitDate": "2014/9/25 上午3:07",
      "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
      "commitAuthor": "mbalassi",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
          "commitDate": "2014/9/25 上午3:07",
          "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/9/23 下午7:59",
          "commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.3,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 90,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
          "diff": "@@ -1,23 +1,21 @@\n-@Override\n-public void execute() {\n+private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "execute",
            "newValue": "executeRemotely"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
          "commitDate": "2014/9/25 上午3:07",
          "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/9/23 下午7:59",
          "commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.3,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 90,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
          "diff": "@@ -1,23 +1,21 @@\n-@Override\n-public void execute() {\n+private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[jobGraph-JobGraph]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
          "commitDate": "2014/9/25 上午3:07",
          "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/9/23 下午7:59",
          "commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.3,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 90,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
          "diff": "@@ -1,23 +1,21 @@\n-@Override\n-public void execute() {\n+private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
          "commitDate": "2014/9/25 上午3:07",
          "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/9/23 下午7:59",
          "commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.3,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 90,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
          "diff": "@@ -1,23 +1,21 @@\n-@Override\n-public void execute() {\n+private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
          "commitDate": "2014/9/25 上午3:07",
          "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/9/23 下午7:59",
          "commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.3,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 90,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
          "diff": "@@ -1,23 +1,21 @@\n-@Override\n-public void execute() {\n+private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[FLINK-1122] [streaming] Job Execution with user specified name\n",
          "commitDate": "2014/9/25 上午3:07",
          "commitName": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/9/23 下午7:59",
          "commitNameOld": "b904b0041cf97b2c6181b1985afc457ed01cf626",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.3,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
          "functionStartLine": 90,
          "functionName": "executeRemotely",
          "functionAnnotation": "",
          "functionDoc": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n",
          "diff": "@@ -1,23 +1,21 @@\n-@Override\n-public void execute() {\n+private void executeRemotely(JobGraph jobGraph) {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n-    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Executes the remote job.\n\n@param jobGraph jobGraph to execute\n"
          }
        }
      ]
    },
    "d0dd5138fd0bddf2bf942bffee1681c298043b3e": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Updated logging to utilize SLF4J\n",
      "commitDate": "2014/9/20 下午7:44",
      "commitName": "d0dd5138fd0bddf2bf942bffee1681c298043b3e",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/9/5 下午5:57",
      "commitNameOld": "08188508d528c1072a746aacbf2a5c712d4f8467",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 72,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n @Override\n public void execute() {\n     if (LOG.isInfoEnabled()) {\n-        LOG.info(\"Running remotely at \" + host + \":\" + port);\n+        LOG.info(\"Running remotely at {}:{}\", host, port);\n     }\n     JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0163cfa11d64b641718a70aa30b7b896cdc077ba": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Fix LICENSE file for streaming project. Minor merge fixes.\n\nThis closes #72\n",
      "commitDate": "2014/8/18 下午11:34",
      "commitName": "0163cfa11d64b641718a70aa30b7b896cdc077ba",
      "commitAuthor": "Stephan Ewen",
      "commitDateOld": "2014/8/18 下午10:23",
      "commitNameOld": "35cf874c36fc522e9fae6af4625901ee3c3bc9a3",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 74,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n @Override\n public void execute() {\n     if (LOG.isInfoEnabled()) {\n         LOG.info(\"Running remotely at \" + host + \":\" + port);\n     }\n     JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n-    Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n+    Client client \u003d new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "35cf874c36fc522e9fae6af4625901ee3c3bc9a3": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Exception handling update \u0026 minor refactor\n",
      "commitDate": "2014/8/18 下午10:23",
      "commitName": "35cf874c36fc522e9fae6af4625901ee3c3bc9a3",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午10:23",
      "commitNameOld": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 74,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n @Override\n public void execute() {\n-    if (log.isInfoEnabled()) {\n-        log.info(\"Running remotely at \" + host + \":\" + port);\n+    if (LOG.isInfoEnabled()) {\n+        LOG.info(\"Running remotely at \" + host + \":\" + port);\n     }\n     JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n     for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n         File file \u003d new File(jarFiles[i]);\n         try {\n             JobWithJars.checkJarFile(file);\n         } catch (IOException e) {\n             throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n         jobGraph.addJar(new Path(file.getAbsolutePath()));\n     }\n     Configuration configuration \u003d jobGraph.getJobConfiguration();\n     Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n     try {\n         client.run(jobGraph, true);\n     } catch (ProgramInvocationException e) {\n         throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
      "commitDate": "2014/8/18 下午10:23",
      "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午10:22",
      "commitNameOld": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    if (log.isInfoEnabled()) {\n        log.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java",
      "functionStartLine": 74,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
        "newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/RemoteStreamEnvironment.java"
      }
    },
    "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Merged conflicts\n",
      "commitDate": "2014/8/18 下午10:11",
      "commitName": "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:58",
      "commitNameOld": "646190d3adcbb599b051946ed342daa549ce54ef",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    if (log.isInfoEnabled()) {\n        log.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n        File file \u003d new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration \u003d jobGraph.getJobConfiguration();\n    Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 74,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,23 @@\n @Override\n public void execute() {\n-    try {\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Running remotely at \" + host + \":\" + port);\n-        }\n-        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n-        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n-            File file \u003d new File(jarFiles[i]);\n+    if (log.isInfoEnabled()) {\n+        log.info(\"Running remotely at \" + host + \":\" + port);\n+    }\n+    JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n+    for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n+        File file \u003d new File(jarFiles[i]);\n+        try {\n             JobWithJars.checkJarFile(file);\n-            jobGraph.addJar(new Path(file.getAbsolutePath()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n         }\n-        Configuration configuration \u003d jobGraph.getJobConfiguration();\n-        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n+        jobGraph.addJar(new Path(file.getAbsolutePath()));\n+    }\n+    Configuration configuration \u003d jobGraph.getJobConfiguration();\n+    Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n+    try {\n         client.run(jobGraph, true);\n-    } catch (IOException e) {\n-        if (log.isErrorEnabled()) {\n-            log.error(e.getMessage());\n-        }\n     } catch (ProgramInvocationException e) {\n-        if (log.isErrorEnabled()) {\n-            log.error(e.getMessage());\n-        }\n+        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "646190d3adcbb599b051946ed342daa549ce54ef": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Eliminated writing to standard output\n",
      "commitDate": "2014/8/18 下午9:58",
      "commitName": "646190d3adcbb599b051946ed342daa549ce54ef",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "9d1806cc584440f687fda1830918f2f02002e2ec",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        if (log.isInfoEnabled()) {\n            log.info(\"Running remotely at \" + host + \":\" + port);\n        }\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 68,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,25 @@\n @Override\n public void execute() {\n     try {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Running remotely at \" + host + \":\" + port);\n+        }\n         JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n         for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n             File file \u003d new File(jarFiles[i]);\n             JobWithJars.checkJarFile(file);\n             jobGraph.addJar(new Path(file.getAbsolutePath()));\n         }\n         Configuration configuration \u003d jobGraph.getJobConfiguration();\n         Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n         client.run(jobGraph, true);\n     } catch (IOException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n-            e.printStackTrace();\n         }\n     } catch (ProgramInvocationException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n-            e.printStackTrace();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Module rename\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "12e52f8ac430c00ed38096944e50db1e185f3567",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 63,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
        "newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java"
      }
    },
    "12e52f8ac430c00ed38096944e50db1e185f3567": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Package and Java Dependency rename\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "12e52f8ac430c00ed38096944e50db1e185f3567",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "b89fa9a2437a24ba311efaa8c3dac9bbf62e7a73",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 63,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/RemoteStreamEnvironment.java"
      }
    },
    "23f649e4d42e8d2dde8ce424142c901b502ec583": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Multiple iteration 1\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "23f649e4d42e8d2dde8ce424142c901b502ec583",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "1171d024664a93cf298e935b06cd1c1c4db258ff",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 63,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,24 @@\n @Override\n public void execute() {\n     try {\n         JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n         for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n             File file \u003d new File(jarFiles[i]);\n             JobWithJars.checkJarFile(file);\n             jobGraph.addJar(new Path(file.getAbsolutePath()));\n         }\n         Configuration configuration \u003d jobGraph.getJobConfiguration();\n         Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n         client.run(jobGraph, true);\n     } catch (IOException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n+            e.printStackTrace();\n         }\n     } catch (ProgramInvocationException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n+            e.printStackTrace();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1171d024664a93cf298e935b06cd1c1c4db258ff": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] ZeroMQ package\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "1171d024664a93cf298e935b06cd1c1c4db258ff",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "7dc7b5c9b2369ac91dda96281982d6a1470fa947",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 53,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,22 @@\n @Override\n public void execute() {\n     try {\n         JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n         for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n             File file \u003d new File(jarFiles[i]);\n             JobWithJars.checkJarFile(file);\n             jobGraph.addJar(new Path(file.getAbsolutePath()));\n         }\n         Configuration configuration \u003d jobGraph.getJobConfiguration();\n         Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n         client.run(jobGraph, true);\n     } catch (IOException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n-            e.printStackTrace();\n         }\n     } catch (ProgramInvocationException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n-            e.printStackTrace();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d26c2305ede77abbceb6ebb58e1fdc6aad158cbe": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Fixed JavaDoc of RemoteStreamEnvironment\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "d26c2305ede77abbceb6ebb58e1fdc6aad158cbe",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "b96db729c450ea05930ca0feba01769d3eb5d1f9",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 64,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,24 @@\n @Override\n public void execute() {\n     try {\n         JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n         for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n             File file \u003d new File(jarFiles[i]);\n             JobWithJars.checkJarFile(file);\n             jobGraph.addJar(new Path(file.getAbsolutePath()));\n         }\n         Configuration configuration \u003d jobGraph.getJobConfiguration();\n         Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n         client.run(jobGraph, true);\n     } catch (IOException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n+            e.printStackTrace();\n         }\n     } catch (ProgramInvocationException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n+            e.printStackTrace();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b96db729c450ea05930ca0feba01769d3eb5d1f9": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] IterativeDataStream Prototype\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "b96db729c450ea05930ca0feba01769d3eb5d1f9",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "5b05ca635d1a661bf2be3baf60159d84834a9942",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 53,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,22 @@\n @Override\n public void execute() {\n     try {\n         JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n         for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n             File file \u003d new File(jarFiles[i]);\n             JobWithJars.checkJarFile(file);\n             jobGraph.addJar(new Path(file.getAbsolutePath()));\n         }\n         Configuration configuration \u003d jobGraph.getJobConfiguration();\n         Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n         client.run(jobGraph, true);\n     } catch (IOException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n-            e.printStackTrace();\n         }\n     } catch (ProgramInvocationException e) {\n         if (log.isErrorEnabled()) {\n             log.error(e.getMessage());\n-            e.printStackTrace();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b05ca635d1a661bf2be3baf60159d84834a9942": {
      "type": "Yintroduced",
      "commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
      "commitAuthor": "ghermann",
      "diff": "@@ -0,0 +1,24 @@\n+@Override\n+public void execute() {\n+    try {\n+        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n+        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n+            File file \u003d new File(jarFiles[i]);\n+            JobWithJars.checkJarFile(file);\n+            jobGraph.addJar(new Path(file.getAbsolutePath()));\n+        }\n+        Configuration configuration \u003d jobGraph.getJobConfiguration();\n+        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n+        client.run(jobGraph, true);\n+    } catch (IOException e) {\n+        if (log.isErrorEnabled()) {\n+            log.error(e.getMessage());\n+            e.printStackTrace();\n+        }\n+    } catch (ProgramInvocationException e) {\n+        if (log.isErrorEnabled()) {\n+            log.error(e.getMessage());\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph \u003d jobGraphBuilder.getJobGraph();\n        for (int i \u003d 0; i \u003c jarFiles.length; i++) {\n            File file \u003d new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration \u003d jobGraph.getJobConfiguration();\n        Client client \u003d new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/RemoteStreamEnvironment.java",
      "functionStartLine": 67,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}