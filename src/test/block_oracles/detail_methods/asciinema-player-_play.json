{
  "origin": "codeshovel",
  "repositoryName": "asciinema",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/asciinema/.git",
  "startCommitName": "631831deadfc2d6ee55fff9d8c035caf5ef38d56",
  "sourceFileName": "player.py",
  "functionName": "_play",
  "functionId": "Player___play___self__asciicast__idle_time_limit__speed__stdin",
  "sourceFilePath": "asciinema/player.py",
  "functionAnnotation": "",
  "functionStartLine": 19,
  "functionEndLine": 75,
  "numCommitsSeen": 32,
  "timeTaken": 199,
  "changeHistory": [
    "96ea4e735e5d5dac54ce4bd3011920f09e4905a3",
    "fb1e25d933851743f4aed744279ab5361af9ad4b",
    "3cc2a541e1abfdf5c04800838e5aade7283fcd0d",
    "a3a38794e5e1d962c2941ea9667326c09b52aa64",
    "8f804bf687e6ccdf62ffed2afe6e765fc758c460",
    "fef56d548fece46c56dc698d1325a6df01770833",
    "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc",
    "8927554e445a0915a67da3c32e656645aee7a96c",
    "479cfafecba2595332113ce18b421bc4955b1ad4"
  ],
  "changeHistoryShort": {
    "96ea4e735e5d5dac54ce4bd3011920f09e4905a3": "Ybodychange",
    "fb1e25d933851743f4aed744279ab5361af9ad4b": "Ybodychange",
    "3cc2a541e1abfdf5c04800838e5aade7283fcd0d": "Ybodychange",
    "a3a38794e5e1d962c2941ea9667326c09b52aa64": "Ymultichange(Yparameterchange,Ybodychange)",
    "8f804bf687e6ccdf62ffed2afe6e765fc758c460": "Ybodychange",
    "fef56d548fece46c56dc698d1325a6df01770833": "Ybodychange",
    "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc": "Ymultichange(Yparameterchange,Ybodychange)",
    "8927554e445a0915a67da3c32e656645aee7a96c": "Ybodychange",
    "479cfafecba2595332113ce18b421bc4955b1ad4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96ea4e735e5d5dac54ce4bd3011920f09e4905a3": {
      "type": "Ybodychange",
      "commitMessage": "Refactor frames module into events module\n",
      "commitDate": "2018/3/2 上午3:53",
      "commitName": "96ea4e735e5d5dac54ce4bd3011920f09e4905a3",
      "commitAuthor": "Marcin Kulik",
      "commitDateOld": "2017/11/26 上午7:35",
      "commitNameOld": "fb1e25d933851743f4aed744279ab5361af9ad4b",
      "commitAuthorOld": "Marcin Kulik",
      "daysBetweenCommits": 95.85,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, stdin):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout_events()\n        stdout \u003d ev.to_relative_time(stdout)\n        stdout \u003d ev.cap_relative_time(stdout, idle_time_limit)\n        stdout \u003d ev.to_absolute_time(stdout)\n        stdout \u003d ev.adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n        ctrl_c \u003d False\n        paused \u003d False\n        pause_time \u003d None\n\n        for t, _type, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            while stdin and not ctrl_c and delay \u003e 0:\n                if paused:\n                    while True:\n                        data \u003d read_blocking(stdin.fileno(), 1000)\n\n                        if 0x03 in data:  # ctrl-c\n                            ctrl_c \u003d True\n                            break\n\n                        if 0x20 in data:  # space\n                            paused \u003d False\n                            base_time \u003d base_time + (time.time() - pause_time)\n                            break\n\n                        if 0x2e in data:  # period (dot)\n                            delay \u003d 0\n                            pause_time \u003d time.time()\n                            base_time \u003d pause_time - t\n                            break\n                else:\n                    data \u003d read_blocking(stdin.fileno(), delay)\n\n                    if not data:\n                        break\n\n                    if 0x03 in data:  # ctrl-c\n                        ctrl_c \u003d True\n                        break\n\n                    if 0x20 in data:  # space\n                        paused \u003d True\n                        pause_time \u003d time.time()\n                        slept \u003d t - (pause_time - base_time)\n                        delay \u003d delay - slept\n\n            if ctrl_c:\n                break\n\n            sys.stdout.write(text)\n            sys.stdout.flush()",
      "path": "asciinema/player.py",
      "functionStartLine": 19,
      "functionName": "_play",
      "functionAnnotation": "",
      "diff": "@@ -1,57 +1,57 @@\n     def _play(self, asciicast, idle_time_limit, speed, stdin):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n-        stdout \u003d asciicast.stdout()\n-        stdout \u003d frames.to_relative_time(stdout)\n-        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n-        stdout \u003d frames.to_absolute_time(stdout)\n-        stdout \u003d frames.adjust_speed(stdout, speed)\n+        stdout \u003d asciicast.stdout_events()\n+        stdout \u003d ev.to_relative_time(stdout)\n+        stdout \u003d ev.cap_relative_time(stdout, idle_time_limit)\n+        stdout \u003d ev.to_absolute_time(stdout)\n+        stdout \u003d ev.adjust_speed(stdout, speed)\n \n         base_time \u003d time.time()\n         ctrl_c \u003d False\n         paused \u003d False\n         pause_time \u003d None\n \n-        for t, text in stdout:\n+        for t, _type, text in stdout:\n             delay \u003d t - (time.time() - base_time)\n \n             while stdin and not ctrl_c and delay \u003e 0:\n                 if paused:\n                     while True:\n                         data \u003d read_blocking(stdin.fileno(), 1000)\n \n                         if 0x03 in data:  # ctrl-c\n                             ctrl_c \u003d True\n                             break\n \n                         if 0x20 in data:  # space\n                             paused \u003d False\n                             base_time \u003d base_time + (time.time() - pause_time)\n                             break\n \n                         if 0x2e in data:  # period (dot)\n                             delay \u003d 0\n                             pause_time \u003d time.time()\n                             base_time \u003d pause_time - t\n                             break\n                 else:\n                     data \u003d read_blocking(stdin.fileno(), delay)\n \n                     if not data:\n                         break\n \n                     if 0x03 in data:  # ctrl-c\n                         ctrl_c \u003d True\n                         break\n \n                     if 0x20 in data:  # space\n                         paused \u003d True\n                         pause_time \u003d time.time()\n                         slept \u003d t - (pause_time - base_time)\n                         delay \u003d delay - slept\n \n             if ctrl_c:\n                 break\n \n             sys.stdout.write(text)\n             sys.stdout.flush()\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fb1e25d933851743f4aed744279ab5361af9ad4b": {
      "type": "Ybodychange",
      "commitMessage": "Toggle pause with space + step a frame at a time with period\n\nBased on initial work by by Kelvin Ly (@cactorium, https://github.com/cactorium) in https://github.com/asciinema/asciinema/pull/231/files\n\nCloses #133\nCloses #242\n",
      "commitDate": "2017/11/26 上午7:35",
      "commitName": "fb1e25d933851743f4aed744279ab5361af9ad4b",
      "commitAuthor": "Marcin Kulik",
      "commitDateOld": "2017/11/26 上午1:43",
      "commitNameOld": "3cc2a541e1abfdf5c04800838e5aade7283fcd0d",
      "commitAuthorOld": "Marcin Kulik",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, stdin):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d frames.to_relative_time(stdout)\n        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n        stdout \u003d frames.to_absolute_time(stdout)\n        stdout \u003d frames.adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n        ctrl_c \u003d False\n        paused \u003d False\n        pause_time \u003d None\n\n        for t, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            while stdin and not ctrl_c and delay \u003e 0:\n                if paused:\n                    while True:\n                        data \u003d read_blocking(stdin.fileno(), 1000)\n\n                        if 0x03 in data:  # ctrl-c\n                            ctrl_c \u003d True\n                            break\n\n                        if 0x20 in data:  # space\n                            paused \u003d False\n                            base_time \u003d base_time + (time.time() - pause_time)\n                            break\n\n                        if 0x2e in data:  # period (dot)\n                            delay \u003d 0\n                            pause_time \u003d time.time()\n                            base_time \u003d pause_time - t\n                            break\n                else:\n                    data \u003d read_blocking(stdin.fileno(), delay)\n\n                    if not data:\n                        break\n\n                    if 0x03 in data:  # ctrl-c\n                        ctrl_c \u003d True\n                        break\n\n                    if 0x20 in data:  # space\n                        paused \u003d True\n                        pause_time \u003d time.time()\n                        slept \u003d t - (pause_time - base_time)\n                        delay \u003d delay - slept\n\n            if ctrl_c:\n                break\n\n            sys.stdout.write(text)\n            sys.stdout.flush()",
      "path": "asciinema/player.py",
      "functionStartLine": 19,
      "functionName": "_play",
      "functionAnnotation": "",
      "diff": "@@ -1,21 +1,57 @@\n     def _play(self, asciicast, idle_time_limit, speed, stdin):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n         stdout \u003d frames.to_relative_time(stdout)\n         stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n         stdout \u003d frames.to_absolute_time(stdout)\n         stdout \u003d frames.adjust_speed(stdout, speed)\n \n         base_time \u003d time.time()\n+        ctrl_c \u003d False\n+        paused \u003d False\n+        pause_time \u003d None\n \n         for t, text in stdout:\n             delay \u003d t - (time.time() - base_time)\n \n-            if delay \u003e 0:\n-                data \u003d read_blocking(stdin.fileno(), delay)\n-                if 0x03 in data:  # ctrl-c\n-                    break\n+            while stdin and not ctrl_c and delay \u003e 0:\n+                if paused:\n+                    while True:\n+                        data \u003d read_blocking(stdin.fileno(), 1000)\n+\n+                        if 0x03 in data:  # ctrl-c\n+                            ctrl_c \u003d True\n+                            break\n+\n+                        if 0x20 in data:  # space\n+                            paused \u003d False\n+                            base_time \u003d base_time + (time.time() - pause_time)\n+                            break\n+\n+                        if 0x2e in data:  # period (dot)\n+                            delay \u003d 0\n+                            pause_time \u003d time.time()\n+                            base_time \u003d pause_time - t\n+                            break\n+                else:\n+                    data \u003d read_blocking(stdin.fileno(), delay)\n+\n+                    if not data:\n+                        break\n+\n+                    if 0x03 in data:  # ctrl-c\n+                        ctrl_c \u003d True\n+                        break\n+\n+                    if 0x20 in data:  # space\n+                        paused \u003d True\n+                        pause_time \u003d time.time()\n+                        slept \u003d t - (pause_time - base_time)\n+                        delay \u003d delay - slept\n+\n+            if ctrl_c:\n+                break\n \n             sys.stdout.write(text)\n             sys.stdout.flush()\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cc2a541e1abfdf5c04800838e5aade7283fcd0d": {
      "type": "Ybodychange",
      "commitMessage": "Make ctr+c respond immediately during playback\n",
      "commitDate": "2017/11/26 上午1:43",
      "commitName": "3cc2a541e1abfdf5c04800838e5aade7283fcd0d",
      "commitAuthor": "Marcin Kulik",
      "commitDateOld": "2017/11/19 上午1:53",
      "commitNameOld": "a3a38794e5e1d962c2941ea9667326c09b52aa64",
      "commitAuthorOld": "Marcin Kulik",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, stdin):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d frames.to_relative_time(stdout)\n        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n        stdout \u003d frames.to_absolute_time(stdout)\n        stdout \u003d frames.adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n\n        for t, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            if delay \u003e 0:\n                data \u003d read_blocking(stdin.fileno(), delay)\n                if 0x03 in data:  # ctrl-c\n                    break\n\n            sys.stdout.write(text)\n            sys.stdout.flush()",
      "path": "asciinema/player.py",
      "functionStartLine": 19,
      "functionName": "_play",
      "functionAnnotation": "",
      "diff": "@@ -1,24 +1,21 @@\n     def _play(self, asciicast, idle_time_limit, speed, stdin):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n         stdout \u003d frames.to_relative_time(stdout)\n         stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n         stdout \u003d frames.to_absolute_time(stdout)\n         stdout \u003d frames.adjust_speed(stdout, speed)\n \n         base_time \u003d time.time()\n \n         for t, text in stdout:\n             delay \u003d t - (time.time() - base_time)\n \n             if delay \u003e 0:\n-                time.sleep(delay)\n+                data \u003d read_blocking(stdin.fileno(), delay)\n+                if 0x03 in data:  # ctrl-c\n+                    break\n \n             sys.stdout.write(text)\n-            sys.stdout.flush()\n-\n-            if stdin:\n-                data \u003d read_non_blocking(stdin.fileno())\n-                if 0x03 in data:  # ctrl-c\n-                    break\n\\ No newline at end of file\n+            sys.stdout.flush()\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a3a38794e5e1d962c2941ea9667326c09b52aa64": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Use /dev/tty as stdin during playback\n",
      "commitDate": "2017/11/19 上午1:53",
      "commitName": "a3a38794e5e1d962c2941ea9667326c09b52aa64",
      "commitAuthor": "Marcin Kulik",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Use /dev/tty as stdin during playback\n",
          "commitDate": "2017/11/19 上午1:53",
          "commitName": "a3a38794e5e1d962c2941ea9667326c09b52aa64",
          "commitAuthor": "Marcin Kulik",
          "commitDateOld": "2017/11/12 下午8:08",
          "commitNameOld": "8f804bf687e6ccdf62ffed2afe6e765fc758c460",
          "commitAuthorOld": "Marcin Kulik",
          "daysBetweenCommits": 6.24,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, stdin):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d frames.to_relative_time(stdout)\n        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n        stdout \u003d frames.to_absolute_time(stdout)\n        stdout \u003d frames.adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n\n        for t, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            if delay \u003e 0:\n                time.sleep(delay)\n\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if stdin:\n                data \u003d read_non_blocking(stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
          "path": "asciinema/player.py",
          "functionStartLine": 19,
          "functionName": "_play",
          "functionAnnotation": "",
          "diff": "@@ -1,24 +1,24 @@\n-    def _play(self, asciicast, idle_time_limit, speed, raw):\n+    def _play(self, asciicast, idle_time_limit, speed, stdin):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n         stdout \u003d frames.to_relative_time(stdout)\n         stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n         stdout \u003d frames.to_absolute_time(stdout)\n         stdout \u003d frames.adjust_speed(stdout, speed)\n \n         base_time \u003d time.time()\n \n         for t, text in stdout:\n             delay \u003d t - (time.time() - base_time)\n \n             if delay \u003e 0:\n                 time.sleep(delay)\n \n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n-            if raw:\n-                data \u003d read_non_blocking(sys.stdin.fileno())\n+            if stdin:\n+                data \u003d read_non_blocking(stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[self, asciicast, idle_time_limit, speed, raw]",
            "newValue": "[self, asciicast, idle_time_limit, speed, stdin]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use /dev/tty as stdin during playback\n",
          "commitDate": "2017/11/19 上午1:53",
          "commitName": "a3a38794e5e1d962c2941ea9667326c09b52aa64",
          "commitAuthor": "Marcin Kulik",
          "commitDateOld": "2017/11/12 下午8:08",
          "commitNameOld": "8f804bf687e6ccdf62ffed2afe6e765fc758c460",
          "commitAuthorOld": "Marcin Kulik",
          "daysBetweenCommits": 6.24,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, stdin):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d frames.to_relative_time(stdout)\n        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n        stdout \u003d frames.to_absolute_time(stdout)\n        stdout \u003d frames.adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n\n        for t, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            if delay \u003e 0:\n                time.sleep(delay)\n\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if stdin:\n                data \u003d read_non_blocking(stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
          "path": "asciinema/player.py",
          "functionStartLine": 19,
          "functionName": "_play",
          "functionAnnotation": "",
          "diff": "@@ -1,24 +1,24 @@\n-    def _play(self, asciicast, idle_time_limit, speed, raw):\n+    def _play(self, asciicast, idle_time_limit, speed, stdin):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n         stdout \u003d frames.to_relative_time(stdout)\n         stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n         stdout \u003d frames.to_absolute_time(stdout)\n         stdout \u003d frames.adjust_speed(stdout, speed)\n \n         base_time \u003d time.time()\n \n         for t, text in stdout:\n             delay \u003d t - (time.time() - base_time)\n \n             if delay \u003e 0:\n                 time.sleep(delay)\n \n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n-            if raw:\n-                data \u003d read_non_blocking(sys.stdin.fileno())\n+            if stdin:\n+                data \u003d read_non_blocking(stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "8f804bf687e6ccdf62ffed2afe6e765fc758c460": {
      "type": "Ybodychange",
      "commitMessage": "Move frames related functions to frames module\n",
      "commitDate": "2017/11/12 下午8:08",
      "commitName": "8f804bf687e6ccdf62ffed2afe6e765fc758c460",
      "commitAuthor": "Marcin Kulik",
      "commitDateOld": "2017/11/11 上午5:44",
      "commitNameOld": "fef56d548fece46c56dc698d1325a6df01770833",
      "commitAuthorOld": "Marcin Kulik",
      "daysBetweenCommits": 1.6,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, raw):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d frames.to_relative_time(stdout)\n        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n        stdout \u003d frames.to_absolute_time(stdout)\n        stdout \u003d frames.adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n\n        for t, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            if delay \u003e 0:\n                time.sleep(delay)\n\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if raw:\n                data \u003d read_non_blocking(sys.stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
      "path": "asciinema/player.py",
      "functionStartLine": 18,
      "functionName": "_play",
      "functionAnnotation": "",
      "diff": "@@ -1,24 +1,24 @@\n     def _play(self, asciicast, idle_time_limit, speed, raw):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n-        stdout \u003d to_relative_time(stdout)\n-        stdout \u003d compress_time(stdout, idle_time_limit)\n-        stdout \u003d to_absolute_time(stdout)\n-        stdout \u003d adjust_speed(stdout, speed)\n+        stdout \u003d frames.to_relative_time(stdout)\n+        stdout \u003d frames.cap_relative_time(stdout, idle_time_limit)\n+        stdout \u003d frames.to_absolute_time(stdout)\n+        stdout \u003d frames.adjust_speed(stdout, speed)\n \n         base_time \u003d time.time()\n \n         for t, text in stdout:\n             delay \u003d t - (time.time() - base_time)\n \n             if delay \u003e 0:\n                 time.sleep(delay)\n \n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n             if raw:\n                 data \u003d read_non_blocking(sys.stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fef56d548fece46c56dc698d1325a6df01770833": {
      "type": "Ybodychange",
      "commitMessage": "Use absolute time for Asciicast#stdout()\n",
      "commitDate": "2017/11/11 上午5:44",
      "commitName": "fef56d548fece46c56dc698d1325a6df01770833",
      "commitAuthor": "Marcin Kulik",
      "commitDateOld": "2017/10/26 下午7:21",
      "commitNameOld": "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc",
      "commitAuthorOld": "Marcin Kulik",
      "daysBetweenCommits": 15.43,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, raw):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d to_relative_time(stdout)\n        stdout \u003d compress_time(stdout, idle_time_limit)\n        stdout \u003d to_absolute_time(stdout)\n        stdout \u003d adjust_speed(stdout, speed)\n\n        base_time \u003d time.time()\n\n        for t, text in stdout:\n            delay \u003d t - (time.time() - base_time)\n\n            if delay \u003e 0:\n                time.sleep(delay)\n\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if raw:\n                data \u003d read_non_blocking(sys.stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
      "path": "asciinema/player.py",
      "functionStartLine": 29,
      "functionName": "_play",
      "functionAnnotation": "",
      "diff": "@@ -1,16 +1,24 @@\n     def _play(self, asciicast, idle_time_limit, speed, raw):\n         idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n+        stdout \u003d to_relative_time(stdout)\n         stdout \u003d compress_time(stdout, idle_time_limit)\n+        stdout \u003d to_absolute_time(stdout)\n         stdout \u003d adjust_speed(stdout, speed)\n \n-        for delay, text in stdout:\n-            time.sleep(delay)\n+        base_time \u003d time.time()\n+\n+        for t, text in stdout:\n+            delay \u003d t - (time.time() - base_time)\n+\n+            if delay \u003e 0:\n+                time.sleep(delay)\n+\n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n             if raw:\n                 data \u003d read_non_blocking(sys.stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Rename max-wait to idle-time-limit\n",
      "commitDate": "2017/10/26 下午7:21",
      "commitName": "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc",
      "commitAuthor": "Marcin Kulik",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Rename max-wait to idle-time-limit\n",
          "commitDate": "2017/10/26 下午7:21",
          "commitName": "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc",
          "commitAuthor": "Marcin Kulik",
          "commitDateOld": "2017/9/22 下午3:40",
          "commitNameOld": "8927554e445a0915a67da3c32e656645aee7a96c",
          "commitAuthorOld": "Marcin Kulik",
          "daysBetweenCommits": 34.15,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, raw):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d compress_time(stdout, idle_time_limit)\n        stdout \u003d adjust_speed(stdout, speed)\n\n        for delay, text in stdout:\n            time.sleep(delay)\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if raw:\n                data \u003d read_non_blocking(sys.stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
          "path": "asciinema/player.py",
          "functionStartLine": 28,
          "functionName": "_play",
          "functionAnnotation": "",
          "diff": "@@ -1,16 +1,16 @@\n-    def _play(self, asciicast, max_wait, speed, raw):\n-        max_wait \u003d max_wait or asciicast.max_wait\n+    def _play(self, asciicast, idle_time_limit, speed, raw):\n+        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n-        stdout \u003d compress_time(stdout, max_wait)\n+        stdout \u003d compress_time(stdout, idle_time_limit)\n         stdout \u003d adjust_speed(stdout, speed)\n \n         for delay, text in stdout:\n             time.sleep(delay)\n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n             if raw:\n                 data \u003d read_non_blocking(sys.stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[self, asciicast, max_wait, speed, raw]",
            "newValue": "[self, asciicast, idle_time_limit, speed, raw]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename max-wait to idle-time-limit\n",
          "commitDate": "2017/10/26 下午7:21",
          "commitName": "ac58f27a2e758bf4cd3c5eb3d11a343b27b95dbc",
          "commitAuthor": "Marcin Kulik",
          "commitDateOld": "2017/9/22 下午3:40",
          "commitNameOld": "8927554e445a0915a67da3c32e656645aee7a96c",
          "commitAuthorOld": "Marcin Kulik",
          "daysBetweenCommits": 34.15,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "    def _play(self, asciicast, idle_time_limit, speed, raw):\n        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d compress_time(stdout, idle_time_limit)\n        stdout \u003d adjust_speed(stdout, speed)\n\n        for delay, text in stdout:\n            time.sleep(delay)\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if raw:\n                data \u003d read_non_blocking(sys.stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
          "path": "asciinema/player.py",
          "functionStartLine": 28,
          "functionName": "_play",
          "functionAnnotation": "",
          "diff": "@@ -1,16 +1,16 @@\n-    def _play(self, asciicast, max_wait, speed, raw):\n-        max_wait \u003d max_wait or asciicast.max_wait\n+    def _play(self, asciicast, idle_time_limit, speed, raw):\n+        idle_time_limit \u003d idle_time_limit or asciicast.idle_time_limit\n \n         stdout \u003d asciicast.stdout()\n-        stdout \u003d compress_time(stdout, max_wait)\n+        stdout \u003d compress_time(stdout, idle_time_limit)\n         stdout \u003d adjust_speed(stdout, speed)\n \n         for delay, text in stdout:\n             time.sleep(delay)\n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n             if raw:\n                 data \u003d read_non_blocking(sys.stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "8927554e445a0915a67da3c32e656645aee7a96c": {
      "type": "Ybodychange",
      "commitMessage": "Support of v2 format in `asciinema play`\n",
      "commitDate": "2017/9/22 下午3:40",
      "commitName": "8927554e445a0915a67da3c32e656645aee7a96c",
      "commitAuthor": "Marcin Kulik",
      "commitDateOld": "2017/4/11 下午11:15",
      "commitNameOld": "479cfafecba2595332113ce18b421bc4955b1ad4",
      "commitAuthorOld": "Marcin Kulik",
      "daysBetweenCommits": 163.68,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "    def _play(self, asciicast, max_wait, speed, raw):\n        max_wait \u003d max_wait or asciicast.max_wait\n\n        stdout \u003d asciicast.stdout()\n        stdout \u003d compress_time(stdout, max_wait)\n        stdout \u003d adjust_speed(stdout, speed)\n\n        for delay, text in stdout:\n            time.sleep(delay)\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if raw:\n                data \u003d read_non_blocking(sys.stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
      "path": "asciinema/player.py",
      "functionStartLine": 28,
      "functionName": "_play",
      "functionAnnotation": "",
      "diff": "@@ -1,12 +1,16 @@\n     def _play(self, asciicast, max_wait, speed, raw):\n-        for delay, text in asciicast.stdout:\n-            if max_wait and delay \u003e max_wait:\n-                delay \u003d max_wait\n-            time.sleep(delay / speed)\n+        max_wait \u003d max_wait or asciicast.max_wait\n+\n+        stdout \u003d asciicast.stdout()\n+        stdout \u003d compress_time(stdout, max_wait)\n+        stdout \u003d adjust_speed(stdout, speed)\n+\n+        for delay, text in stdout:\n+            time.sleep(delay)\n             sys.stdout.write(text)\n             sys.stdout.flush()\n \n             if raw:\n                 data \u003d read_non_blocking(sys.stdin.fileno())\n                 if 0x03 in data:  # ctrl-c\n                     break\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "479cfafecba2595332113ce18b421bc4955b1ad4": {
      "type": "Yintroduced",
      "commitMessage": "Eat all stdin data during playback ONLY IF stdin is a TTY\n",
      "commitDate": "2017/4/11 下午11:15",
      "commitName": "479cfafecba2595332113ce18b421bc4955b1ad4",
      "commitAuthor": "Marcin Kulik",
      "diff": "@@ -0,0 +1,12 @@\n+    def _play(self, asciicast, max_wait, speed, raw):\n+        for delay, text in asciicast.stdout:\n+            if max_wait and delay \u003e max_wait:\n+                delay \u003d max_wait\n+            time.sleep(delay / speed)\n+            sys.stdout.write(text)\n+            sys.stdout.flush()\n+\n+            if raw:\n+                data \u003d read_non_blocking(sys.stdin.fileno())\n+                if 0x03 in data:  # ctrl-c\n+                    break\n\\ No newline at end of file\n",
      "actualSource": "    def _play(self, asciicast, max_wait, speed, raw):\n        for delay, text in asciicast.stdout:\n            if max_wait and delay \u003e max_wait:\n                delay \u003d max_wait\n            time.sleep(delay / speed)\n            sys.stdout.write(text)\n            sys.stdout.flush()\n\n            if raw:\n                data \u003d read_non_blocking(sys.stdin.fileno())\n                if 0x03 in data:  # ctrl-c\n                    break",
      "path": "asciinema/player.py",
      "functionStartLine": 17,
      "functionName": "_play",
      "functionAnnotation": ""
    }
  }
}