{
  "origin": "codeshovel",
  "repositoryName": "okhttp",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/okhttp/.git",
  "startCommitName": "5224f3045ba9b171fce521777edf389f9206173c",
  "sourceFileName": "Http2Connection.java",
  "functionName": "newStream",
  "functionId": "newStream___associatedStreamId-int__requestHeaders-List__Header____out-boolean",
  "sourceFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 233,
  "functionEndLine": 271,
  "numCommitsSeen": 224,
  "timeTaken": 2509,
  "changeHistory": [
    "8f56e81f938c6f68d9e15f9b43f3f17ab467faa2",
    "86be1c3acdf3c7b26c57cae17612b74ada5ce1a1",
    "3d43a8dba89ccd7333c3ebcf74928e441790d943",
    "0c04821a25c83fddebb29e8cd590609142ba20a2",
    "a18d4e184b224d1567ffc1faa5502a5eeaf5445c",
    "1503e362f61ca8c55adebcce802a724ae375debe",
    "c9a89876de476983f273edbf108c365127c18c5e",
    "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
    "cc38140be4c7e41330cf7749c3eeba23c85f9522",
    "1ab398fb93f61e6053ba0190fb76b2d312b83800",
    "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
    "110a4fac4257fe2df0e23149fbef76e750604cf4",
    "fb46f100a4d66342a0b101624fd351a51b6f14a9",
    "ab78dadb4bb94db74770e179e04e2ed791c4a51e",
    "358169b89f32c00bf229b4e42ccef756588da71f",
    "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
    "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
    "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
    "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
    "68de030b356e83ca5680986a290e98cfee8fd550",
    "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
    "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
    "39c0d7d56397ab14892db8032464cb8a9f983ff1",
    "3c0faa9ca18de3be0a178e590086888f4f89612a",
    "7ccbf48838b7cfe42759c67790636d442ea5daa3",
    "2d45a13249943cafa73460b35c3c366e5742eb6f",
    "6f6d959fdae64065521990413f86bc7ab038d7c1",
    "1bd9fefb5199d1499c8dac6c82c18c82e0678428",
    "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
    "689f66222bd8984dd69229a4ee9caf8da528ae12",
    "7f4249625960b7f10dc61aae4d1896c2e126f538",
    "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
    "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
    "853c4012b79711f123c0b9780e565062b32bf1c7",
    "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
    "60b3a6dd6240f40c29fffd897c2dac314af49836",
    "2bd54fa72fe72f92212428a024050838c2b62d57",
    "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e"
  ],
  "changeHistoryShort": {
    "8f56e81f938c6f68d9e15f9b43f3f17ab467faa2": "Ybodychange",
    "86be1c3acdf3c7b26c57cae17612b74ada5ce1a1": "Ybodychange",
    "3d43a8dba89ccd7333c3ebcf74928e441790d943": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "0c04821a25c83fddebb29e8cd590609142ba20a2": "Ymultichange(Yparameterchange,Ybodychange)",
    "a18d4e184b224d1567ffc1faa5502a5eeaf5445c": "Ybodychange",
    "1503e362f61ca8c55adebcce802a724ae375debe": "Ybodychange",
    "c9a89876de476983f273edbf108c365127c18c5e": "Ymovefromfile",
    "c753d2e41ba667f9b5a31451a16ecbaecdc65d80": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "cc38140be4c7e41330cf7749c3eeba23c85f9522": "Ybodychange",
    "1ab398fb93f61e6053ba0190fb76b2d312b83800": "Ybodychange",
    "a5ba3e9062f3bde4bb6896f1db433a2408119e94": "Ybodychange",
    "110a4fac4257fe2df0e23149fbef76e750604cf4": "Yfilerename",
    "fb46f100a4d66342a0b101624fd351a51b6f14a9": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "ab78dadb4bb94db74770e179e04e2ed791c4a51e": "Ybodychange",
    "358169b89f32c00bf229b4e42ccef756588da71f": "Ybodychange",
    "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de": "Ybodychange",
    "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63": "Yparameterchange",
    "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8": "Ybodychange",
    "5c787a0b9d5c83c764880da4b1503a65ee0ff267": "Yparameterchange",
    "68de030b356e83ca5680986a290e98cfee8fd550": "Ybodychange",
    "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a": "Ybodychange",
    "2f31d7122d8806b6c32d2d1e181ca635fb80bba7": "Ybodychange",
    "39c0d7d56397ab14892db8032464cb8a9f983ff1": "Ymultichange(Ybodychange,Ydocchange)",
    "3c0faa9ca18de3be0a178e590086888f4f89612a": "Yfilerename",
    "7ccbf48838b7cfe42759c67790636d442ea5daa3": "Yfilerename",
    "2d45a13249943cafa73460b35c3c366e5742eb6f": "Ydocchange",
    "6f6d959fdae64065521990413f86bc7ab038d7c1": "Ybodychange",
    "1bd9fefb5199d1499c8dac6c82c18c82e0678428": "Ybodychange",
    "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c": "Ybodychange",
    "689f66222bd8984dd69229a4ee9caf8da528ae12": "Yfilerename",
    "7f4249625960b7f10dc61aae4d1896c2e126f538": "Ybodychange",
    "60d5852c6676ece85b0e3d0c6e45fb0186303f83": "Ybodychange",
    "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d": "Yfilerename",
    "853c4012b79711f123c0b9780e565062b32bf1c7": "Ybodychange",
    "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d": "Ybodychange",
    "60b3a6dd6240f40c29fffd897c2dac314af49836": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2bd54fa72fe72f92212428a024050838c2b62d57": "Ybodychange",
    "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f56e81f938c6f68d9e15f9b43f3f17ab467faa2": {
      "type": "Ybodychange",
      "commitMessage": "Reset stream after a rollover (#3752)\n\n* Fail requests that roll over stream id\r\n\r\n* revert bad starting id\r\n\r\n* alternate implementation\r\n",
      "commitDate": "2018/1/29 上午12:42",
      "commitName": "8f56e81f938c6f68d9e15f9b43f3f17ab467faa2",
      "commitAuthor": "Yuri Schimke",
      "commitDateOld": "2017/8/14 下午10:43",
      "commitNameOld": "cd22113332cdeeedac8d6bda3297194f983b4aaf",
      "commitAuthorOld": "Igor Fedorenko",
      "daysBetweenCommits": 167.08,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (nextStreamId \u003e Integer.MAX_VALUE / 2) {\n                shutdown(REFUSED_STREAM);\n            }\n            if (shutdown) {\n                throw new ConnectionShutdownException();\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
      "functionStartLine": 209,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,35 @@\n private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d false;\n     boolean flushHeaders;\n     Http2Stream stream;\n     int streamId;\n     synchronized (writer) {\n         synchronized (this) {\n+            if (nextStreamId \u003e Integer.MAX_VALUE / 2) {\n+                shutdown(REFUSED_STREAM);\n+            }\n             if (shutdown) {\n                 throw new ConnectionShutdownException();\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n         writer.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86be1c3acdf3c7b26c57cae17612b74ada5ce1a1": {
      "type": "Ybodychange",
      "commitMessage": "Gracefully recover from an HTTP/2 connection shutdown at start of request.\n",
      "commitDate": "2016/11/20 下午8:54",
      "commitName": "86be1c3acdf3c7b26c57cae17612b74ada5ce1a1",
      "commitAuthor": "Dave Roberge",
      "commitDateOld": "2016/11/13 下午11:50",
      "commitNameOld": "c581f5ddc6a091e36e745a44ca787d903e32df51",
      "commitAuthorOld": "",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new ConnectionShutdownException();\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
      "functionStartLine": 208,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d false;\n     boolean flushHeaders;\n     Http2Stream stream;\n     int streamId;\n     synchronized (writer) {\n         synchronized (this) {\n             if (shutdown) {\n-                throw new IOException(\"shutdown\");\n+                throw new ConnectionShutdownException();\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n         writer.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d43a8dba89ccd7333c3ebcf74928e441790d943": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
      "commitDate": "2016/7/10 上午6:09",
      "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
      "commitAuthor": "jwilson",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
          "commitDate": "2016/7/10 上午6:09",
          "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016/7/10 上午5:27",
          "commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
          "functionStartLine": 208,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n-private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d false;\n     boolean flushHeaders;\n-    FramedStream stream;\n+    Http2Stream stream;\n     int streamId;\n-    synchronized (frameWriter) {\n+    synchronized (writer) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n-            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n+            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n-            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n-        frameWriter.flush();\n+        writer.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
            "newPath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
          "commitDate": "2016/7/10 上午6:09",
          "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016/7/10 上午5:27",
          "commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
          "functionStartLine": 208,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n-private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d false;\n     boolean flushHeaders;\n-    FramedStream stream;\n+    Http2Stream stream;\n     int streamId;\n-    synchronized (frameWriter) {\n+    synchronized (writer) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n-            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n+            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n-            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n-        frameWriter.flush();\n+        writer.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "FramedStream",
            "newValue": "Http2Stream"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
          "commitDate": "2016/7/10 上午6:09",
          "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016/7/10 上午5:27",
          "commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
          "functionStartLine": 208,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n-private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+private Http2Stream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d false;\n     boolean flushHeaders;\n-    FramedStream stream;\n+    Http2Stream stream;\n     int streamId;\n-    synchronized (frameWriter) {\n+    synchronized (writer) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            stream \u003d new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n-            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n+            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n-            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n-        frameWriter.flush();\n+        writer.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0c04821a25c83fddebb29e8cd590609142ba20a2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Drop support for SPDY/3.\n\nIt\u0027s redundant with HTTP/2.\n",
      "commitDate": "2016/7/10 上午5:19",
      "commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
      "commitAuthor": "jwilson",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Drop support for SPDY/3.\n\nIt\u0027s redundant with HTTP/2.\n",
          "commitDate": "2016/7/10 上午5:19",
          "commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016/7/7 上午10:02",
          "commitNameOld": "1267cb958c507f123ab135cac638768009dc84b5",
          "commitAuthorOld": "Dave Roberge",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
          "functionStartLine": 208,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n-private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n-    boolean inFinished \u003d !in;\n+    boolean inFinished \u003d false;\n     boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n-            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n+            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[associatedStreamId-int, requestHeaders-List\u003cHeader\u003e, out-boolean, in-boolean]",
            "newValue": "[associatedStreamId-int, requestHeaders-List\u003cHeader\u003e, out-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Drop support for SPDY/3.\n\nIt\u0027s redundant with HTTP/2.\n",
          "commitDate": "2016/7/10 上午5:19",
          "commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016/7/7 上午10:02",
          "commitNameOld": "1267cb958c507f123ab135cac638768009dc84b5",
          "commitAuthorOld": "Dave Roberge",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d false;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
          "functionStartLine": 208,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n-private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     boolean outFinished \u003d !out;\n-    boolean inFinished \u003d !in;\n+    boolean inFinished \u003d false;\n     boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n-            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n+            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "a18d4e184b224d1567ffc1faa5502a5eeaf5445c": {
      "type": "Ybodychange",
      "commitMessage": "Remove methods from FramedConnection that are unused\n\nWhile investigating an Android issue with these methods\nI found they were not used. Tidying up.\n",
      "commitDate": "2016/5/31 下午5:15",
      "commitName": "a18d4e184b224d1567ffc1faa5502a5eeaf5445c",
      "commitAuthor": "Neil Fuller",
      "commitDateOld": "2016/5/22 下午10:18",
      "commitNameOld": "1503e362f61ca8c55adebcce802a724ae375debe",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
      "functionStartLine": 227,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,32 @@\n private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n             flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n-                setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (flushHeaders) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1503e362f61ca8c55adebcce802a724ae375debe": {
      "type": "Ybodychange",
      "commitMessage": "Flush streams if the window size is zero.\n\nOtherwise we can deadlock, with OkHttp waiting for the server to send a larger\nwindow and the server not knowing that there\u0027s a stream that even wants it.\n",
      "commitDate": "2016/5/22 下午10:18",
      "commitName": "1503e362f61ca8c55adebcce802a724ae375debe",
      "commitAuthor": "jwilson",
      "commitDateOld": "2016/5/8 上午9:08",
      "commitNameOld": "4f24a30c12032b7033884a630696014afd3e77cb",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 14.55,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
      "functionStartLine": 248,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,33 @@\n private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n+    boolean flushHeaders;\n     FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            flushHeaders \u003d !out || bytesLeftInWriteWindow \u003d\u003d 0L || stream.bytesLeftInWriteWindow \u003d\u003d 0L;\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n-    if (!out) {\n+    if (flushHeaders) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9a89876de476983f273edbf108c365127c18c5e": {
      "type": "Ymovefromfile",
      "commitMessage": "Rename com.squareup.okhttp to okhttp3\n\nMaven group changes will come in follow up.\n",
      "commitDate": "2015/12/16 下午2:34",
      "commitName": "c9a89876de476983f273edbf108c365127c18c5e",
      "commitAuthor": "jwilson",
      "commitDateOld": "2015/12/16 上午10:36",
      "commitNameOld": "54dc2df914f2aae37fb48cc2c2f7560ee664bc2b",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
      "functionStartLine": 252,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
        "newPath": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
        "oldMethodName": "newStream",
        "newMethodName": "newStream"
      }
    },
    "c753d2e41ba667f9b5a31451a16ecbaecdc65d80": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
      "commitDate": "2015/6/18 上午6:40",
      "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
      "commitAuthor": "Jake Wharton",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
          "commitDate": "2015/6/18 上午6:40",
          "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "2015/6/17 上午12:46",
          "commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
          "functionStartLine": 248,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n-private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    SpdyStream stream;\n+    FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
            "newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
          "commitDate": "2015/6/18 上午6:40",
          "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "2015/6/17 上午12:46",
          "commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
          "functionStartLine": 248,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n-private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    SpdyStream stream;\n+    FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "SpdyStream",
            "newValue": "FramedStream"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
          "commitDate": "2015/6/18 上午6:40",
          "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "2015/6/17 上午12:46",
          "commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
          "functionStartLine": 248,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n-private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private FramedStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    SpdyStream stream;\n+    FramedStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n+            stream \u003d new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "cc38140be4c7e41330cf7749c3eeba23c85f9522": {
      "type": "Ybodychange",
      "commitMessage": "Added support for http/2 draft 12, which is incompatible with previous priority schemes.\n",
      "commitDate": "2014/5/5 上午2:53",
      "commitName": "cc38140be4c7e41330cf7749c3eeba23c85f9522",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/4/18 下午11:58",
      "commitNameOld": "889bc764a5f1627090a69e6e100bcd18474dfb86",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 16.12,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 231,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,31 @@\n private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    int priority \u003d -1;\n-    int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n-            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n         } else if (client) {\n             throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1ab398fb93f61e6053ba0190fb76b2d312b83800": {
      "type": "Ybodychange",
      "commitMessage": "Address PushObserver feedback.\n",
      "commitDate": "2014/3/5 下午12:53",
      "commitName": "1ab398fb93f61e6053ba0190fb76b2d312b83800",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/3/2 下午1:23",
      "commitNameOld": "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 233,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        } else if (client) {\n+            throw new IllegalArgumentException(\"client streams shouldn\u0027t have associated stream IDs\");\n         } else {\n-            if (client)\n-                throw new IOException(\"Client attempted to push stream: \" + associatedStreamId);\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a5ba3e9062f3bde4bb6896f1db433a2408119e94": {
      "type": "Ybodychange",
      "commitMessage": "Add HTTP/2 PushObserver.\n",
      "commitDate": "2014/3/2 下午1:23",
      "commitName": "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/2/28 下午12:28",
      "commitNameOld": "110a4fac4257fe2df0e23149fbef76e750604cf4",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            if (client)\n                throw new IOException(\"Client attempted to push stream: \" + associatedStreamId);\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 233,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,33 @@\n private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         if (associatedStreamId \u003d\u003d 0) {\n             frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n         } else {\n+            if (client)\n+                throw new IOException(\"Client attempted to push stream: \" + associatedStreamId);\n             frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n         }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "110a4fac4257fe2df0e23149fbef76e750604cf4": {
      "type": "Yfilerename",
      "commitMessage": "Rearrange OkHttp modules.\n\nThe HTTP client and SPDY code are now a single module that\nmockwebserver depends upon.\n\nThe tests are now in a separate module that depends on both\nOkHttp and mockwebserver.\n",
      "commitDate": "2014/2/28 下午12:28",
      "commitName": "110a4fac4257fe2df0e23149fbef76e750604cf4",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2014/2/26 上午11:34",
      "commitNameOld": "d5cbd0aebe090d956f54b6697068fcbff6d668e7",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 227,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "fb46f100a4d66342a0b101624fd351a51b6f14a9": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
      "commitDate": "2014/2/24 上午9:16",
      "commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
      "commitAuthor": "Adrian Cole",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
          "commitDate": "2014/2/24 上午9:16",
          "commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
          "commitAuthor": "Adrian Cole",
          "commitDateOld": "2014/2/24 上午7:44",
          "commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
          "commitAuthorOld": "jwilson",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
          "functionStartLine": 227,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,31 @@\n-public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        if (associatedStreamId \u003d\u003d 0) {\n+            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        } else {\n+            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[requestHeaders-List\u003cHeader\u003e, out-boolean, in-boolean]",
            "newValue": "[associatedStreamId-int, requestHeaders-List\u003cHeader\u003e, out-boolean, in-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
          "commitDate": "2014/2/24 上午9:16",
          "commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
          "commitAuthor": "Adrian Cole",
          "commitDateOld": "2014/2/24 上午7:44",
          "commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
          "commitAuthorOld": "jwilson",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
          "functionStartLine": 227,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,31 @@\n-public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        if (associatedStreamId \u003d\u003d 0) {\n+            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        } else {\n+            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
          "commitDate": "2014/2/24 上午9:16",
          "commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
          "commitAuthor": "Adrian Cole",
          "commitDateOld": "2014/2/24 上午7:44",
          "commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
          "commitAuthorOld": "jwilson",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
          "functionStartLine": 227,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,31 @@\n-public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        if (associatedStreamId \u003d\u003d 0) {\n+            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        } else {\n+            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
          "commitDate": "2014/2/24 上午9:16",
          "commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
          "commitAuthor": "Adrian Cole",
          "commitDateOld": "2014/2/24 上午7:44",
          "commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
          "commitAuthorOld": "jwilson",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId \u003d\u003d 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
          "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
          "functionStartLine": 227,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,31 @@\n-public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+private SpdyStream newStream(int associatedStreamId, List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n-    int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        if (associatedStreamId \u003d\u003d 0) {\n+            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        } else {\n+            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n+        }\n     }\n     if (!out) {\n         frameWriter.flush();\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
            "newValue": ""
          }
        }
      ]
    },
    "ab78dadb4bb94db74770e179e04e2ed791c4a51e": {
      "type": "Ybodychange",
      "commitMessage": "Use BufferedSink in SPDY and HTTP/2.\n",
      "commitDate": "2014/2/24 上午12:42",
      "commitName": "ab78dadb4bb94db74770e179e04e2ed791c4a51e",
      "commitAuthor": "jwilson",
      "commitDateOld": "2014/2/23 上午5:08",
      "commitNameOld": "095448552ee41e62e58994be0f424df750c6822f",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 207,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,28 @@\n public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n+    if (!out) {\n+        frameWriter.flush();\n+    }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "358169b89f32c00bf229b4e42ccef756588da71f": {
      "type": "Ybodychange",
      "commitMessage": "Send window update after the peer sends half the limit on a stream or connection.\n",
      "commitDate": "2014/1/27 下午1:54",
      "commitName": "358169b89f32c00bf229b4e42ccef756588da71f",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/1/27 上午6:01",
      "commitNameOld": "d990b5819cd6282923134564f3bcc59263eb0616",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 196,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de": {
      "type": "Ybodychange",
      "commitMessage": "Honor change in connection-level initial write window from peer settings.\n",
      "commitDate": "2014/1/27 上午3:48",
      "commitName": "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/1/27 上午1:36",
      "commitNameOld": "b9b5c8462da2abe26dcf157d2df483ba61e3d379",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 189,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63": {
      "type": "Yparameterchange",
      "commitMessage": "Top-level immutable, internal HeaderEntry class to reduce duplication around header names.  Do not emit :version in http/2.\n",
      "commitDate": "2014/1/20 上午2:35",
      "commitName": "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/1/19 下午12:46",
      "commitNameOld": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 161,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n-public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[requestHeaders-List\u003cByteString\u003e, out-boolean, in-boolean]",
        "newValue": "[requestHeaders-List\u003cHeader\u003e, out-boolean, in-boolean]"
      }
    },
    "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8": {
      "type": "Ybodychange",
      "commitMessage": "Extract default settings to variants.  Read windowSize (spdy/3) and headerTableSize (http/2) from peer.\n",
      "commitDate": "2014/1/19 下午12:46",
      "commitName": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/1/17 上午12:39",
      "commitNameOld": "9766de54dc8be4560b45d89452b016998277dae3",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 2.51,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 162,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c787a0b9d5c83c764880da4b1503a65ee0ff267": {
      "type": "Yparameterchange",
      "commitMessage": "Refactor SPDY code to use ByteString for headers.\n",
      "commitDate": "2014/1/7 上午10:51",
      "commitName": "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014/1/6 上午8:53",
      "commitNameOld": "d7444f5fc4414b51b2708606257381cc0de404e1",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 161,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n-public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[requestHeaders-List\u003cString\u003e, out-boolean, in-boolean]",
        "newValue": "[requestHeaders-List\u003cByteString\u003e, out-boolean, in-boolean]"
      }
    },
    "68de030b356e83ca5680986a290e98cfee8fd550": {
      "type": "Ybodychange",
      "commitMessage": "update http2 to draft 9 and hpack to draft 5\n",
      "commitDate": "2014/1/5 上午11:33",
      "commitName": "68de030b356e83ca5680986a290e98cfee8fd550",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2013/12/3 上午2:18",
      "commitNameOld": "f7d96b25631612860a1a3e3ebed76d5a4511b90c",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 33.39,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d -1;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 149,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n-    int priority \u003d 0;\n+    int priority \u003d -1;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a": {
      "type": "Ybodychange",
      "commitMessage": "Use one callback for SYN_STREAM, SYN_REPLY and HEADERS.\n\nThis is closer to the semantics of HTTP/2.0, which uses the HEADERS\nframe for all three types. SPDY is a bit more strict because it\nrelies on redundancy; it\u0027s an error to send a SYN_REPLY after a\nHEADERS frame. With HTTP/2.0, there\u0027s only one type so there\u0027s\nno error to detect.\n",
      "commitDate": "2013/9/2 上午1:57",
      "commitName": "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/8/27 下午10:25",
      "commitNameOld": "5663f815af072160f344712d5b353439bd2066f1",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 5.15,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 146,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n         frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f31d7122d8806b6c32d2d1e181ca635fb80bba7": {
      "type": "Ybodychange",
      "commitMessage": "Hide more flags from SPDY APIs.\n\nFlags are not portable between SPDY/3 and HTTP/2.0,\nso hide them in the reader \u0026 writer code.\n\nAlso rename SpdyReader to FrameReader and SpdyWriter to\nFrameWriter. Other classes will be renamed as they become\nindependent of the underlying protocol.\n",
      "commitDate": "2013/8/15 下午12:29",
      "commitName": "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/8/14 下午7:25",
      "commitNameOld": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 150,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,25 +1,25 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n-    synchronized (spdyWriter) {\n+    synchronized (frameWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39c0d7d56397ab14892db8032464cb8a9f983ff1": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Push stream flags into Spdy3.\n\nPreviously flags were being interpretted in SpdyConnection\nand SpdyStream. This won\u0027t work for HTTP/2.0, which has its\nown flag setup.\n",
      "commitDate": "2013/8/14 下午7:25",
      "commitName": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
      "commitAuthor": "jwilson",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Push stream flags into Spdy3.\n\nPreviously flags were being interpretted in SpdyConnection\nand SpdyStream. This won\u0027t work for HTTP/2.0, which has its\nown flag setup.\n",
          "commitDate": "2013/8/14 下午7:25",
          "commitName": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
          "commitAuthor": "jwilson",
          "commitDateOld": "2013/8/12 上午12:02",
          "commitNameOld": "21dc92f967d01c2da3ace57b7cc04421e2fd296b",
          "commitAuthorOld": "jwilson",
          "daysBetweenCommits": 2.81,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
          "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
          "functionStartLine": 150,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
          "diff": "@@ -1,24 +1,25 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n-    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n+    boolean outFinished \u003d !out;\n+    boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Push stream flags into Spdy3.\n\nPreviously flags were being interpretted in SpdyConnection\nand SpdyStream. This won\u0027t work for HTTP/2.0, which has its\nown flag setup.\n",
          "commitDate": "2013/8/14 下午7:25",
          "commitName": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
          "commitAuthor": "jwilson",
          "commitDateOld": "2013/8/12 上午12:02",
          "commitNameOld": "21dc92f967d01c2da3ace57b7cc04421e2fd296b",
          "commitAuthorOld": "jwilson",
          "daysBetweenCommits": 2.81,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
          "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
          "functionStartLine": 150,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
          "diff": "@@ -1,24 +1,25 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n-    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n+    boolean outFinished \u003d !out;\n+    boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n+            stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n                 setIdle(false);\n             }\n         }\n-        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n+        spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\nto the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\nsend data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
            "newValue": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n"
          }
        }
      ]
    },
    "3c0faa9ca18de3be0a178e590086888f4f89612a": {
      "type": "Yfilerename",
      "commitMessage": "Make a home for MockWebServer in OkHttp.\n\nTo build HTTP/2.0 support into OkHttp I\u0027m going to simultaneously\nbuild HTTP/2.0 support into MockWebServer. To make that possible,\nI\u0027m first going to fork MockWebServer and then combine it with\nMockSpdyServer.\n",
      "commitDate": "2013/8/4 上午12:50",
      "commitName": "3c0faa9ca18de3be0a178e590086888f4f89612a",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/7/21 上午2:14",
      "commitNameOld": "cc4633943800572673c03b32d0b2bc9a08ae184d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 13.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 162,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\nto the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\nsend data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "newPath": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "7ccbf48838b7cfe42759c67790636d442ea5daa3": {
      "type": "Yfilerename",
      "commitMessage": "Move library into a module. Introduce sample module with simple GitHub client.\n",
      "commitDate": "2013/3/26 上午11:04",
      "commitName": "7ccbf48838b7cfe42759c67790636d442ea5daa3",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "2013/3/15 下午10:39",
      "commitNameOld": "ba2b7432cb9fabfc725b09a9f14878cb128ef208",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 10.52,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 164,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\nto the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\nsend data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "2d45a13249943cafa73460b35c3c366e5742eb6f": {
      "type": "Ydocchange",
      "commitMessage": "Mechanically change OkHttp to Square\u0027s Java style.\n",
      "commitDate": "2013/2/1 上午6:36",
      "commitName": "2d45a13249943cafa73460b35c3c366e5742eb6f",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/2/1 上午6:23",
      "commitNameOld": "6f6d959fdae64065521990413f86bc7ab038d7c1",
      "commitAuthorOld": "Marcelo Cortes",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 171,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\nto the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\nsend data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
        "newValue": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\nto the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\nsend data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n"
      }
    },
    "6f6d959fdae64065521990413f86bc7ab038d7c1": {
      "type": "Ybodychange",
      "commitMessage": "Improvements to connection pool\n",
      "commitDate": "2013/2/1 上午6:23",
      "commitName": "6f6d959fdae64065521990413f86bc7ab038d7c1",
      "commitAuthor": "Marcelo Cortes",
      "commitDateOld": "2013/1/23 上午2:38",
      "commitNameOld": "3a0874cb220a26170e7097432676307feef4504f",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 9.16,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 175,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,23 +1,24 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n+                setIdle(false);\n             }\n         }\n         spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1bd9fefb5199d1499c8dac6c82c18c82e0678428": {
      "type": "Ybodychange",
      "commitMessage": "Implement flow control for the outgoing stream.\n\nWe had a bug where we were using spdy/2\u0027s layout for\nsetting frames rather than spdy/3\u0027s layout. I discovered\nthis when testing flow control against Chrome.\n\nThis fixes uploads greater than 64 KiB.\n",
      "commitDate": "2013/1/19 上午4:50",
      "commitName": "1bd9fefb5199d1499c8dac6c82c18c82e0678428",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/1/19 上午1:52",
      "commitNameOld": "b1c592d7c9013a0b5e18f83cd5bd4b56f420b37c",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 153,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,23 +1,23 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n+            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n         spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c": {
      "type": "Ybodychange",
      "commitMessage": "Upgrade from spdy/2 to spdy/3.\n",
      "commitDate": "2013/1/7 上午7:30",
      "commitName": "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/1/2 上午11:50",
      "commitNameOld": "689f66222bd8984dd69229a4ee9caf8da528ae12",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 4.82,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    int slot \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 153,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,22 +1,23 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n+    int slot \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n-            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+            stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n             if (stream.isOpen()) {\n                 streams.put(streamId, stream);\n             }\n         }\n-        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n+        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "689f66222bd8984dd69229a4ee9caf8da528ae12": {
      "type": "Yfilerename",
      "commitMessage": "Flatten internal packages and utility classes.\n\nThe previous structure had hierarchy that was useful\nfor libcore but overkill for OkHttp.\n",
      "commitDate": "2013/1/2 上午11:50",
      "commitName": "689f66222bd8984dd69229a4ee9caf8da528ae12",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013/1/2 上午11:27",
      "commitNameOld": "73516e6ab1d336ffd520e845e14f80cf08657bd0",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 147,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
        "newPath": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "7f4249625960b7f10dc61aae4d1896c2e126f538": {
      "type": "Ybodychange",
      "commitMessage": "Discard streams once they\u0027re no longer open.\n\nThis avoids a memory leak; we don\u0027t hold onto the input stream\nand it\u0027s large 64 KiB buffer long after that stream is done.\n\nIt also allows SpdyConnection to track how many streams are\ncurrently active. This will allow a follow up change to shut\ndown connections that don\u0027t host any streams.\n",
      "commitDate": "2013/1/1 上午9:55",
      "commitName": "7f4249625960b7f10dc61aae4d1896c2e126f538",
      "commitAuthor": "jwilson",
      "commitDateOld": "2012/12/31 下午3:35",
      "commitNameOld": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
      "functionStartLine": 148,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,20 +1,22 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             if (shutdown) {\n                 throw new IOException(\"shutdown\");\n             }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n-            streams.put(streamId, stream);\n+            if (stream.isOpen()) {\n+                streams.put(streamId, stream);\n+            }\n         }\n         spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60d5852c6676ece85b0e3d0c6e45fb0186303f83": {
      "type": "Ybodychange",
      "commitMessage": "Implement GOAWAY, for clean shutdowns of SPDY connections.\n\nAlso clean up some SPDY headers and improve error messages.\n",
      "commitDate": "2012/12/31 下午3:35",
      "commitName": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
      "commitAuthor": "jwilson",
      "commitDateOld": "2012/12/30 下午1:36",
      "commitNameOld": "768059cfc4c611f3212d0b92ff5073541a852faf",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
      "functionStartLine": 140,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,17 +1,20 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n+            if (shutdown) {\n+                throw new IOException(\"shutdown\");\n+            }\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n             streams.put(streamId, stream);\n         }\n         spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d": {
      "type": "Yfilerename",
      "commitMessage": "Move out of the libcore package.\n\nTo promote the code into AOSP, we\u0027ll keep this package as-is\nand do the jarjar in Android instead.\n",
      "commitDate": "2012/12/16 上午5:55",
      "commitName": "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
      "commitAuthor": "jwilson",
      "commitDateOld": "2012/12/16 上午5:17",
      "commitNameOld": "7f7aa90bc5d41d8f818fc988d2a91d22393c7329",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
      "functionStartLine": 136,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/libcore/net/spdy/SpdyConnection.java",
        "newPath": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java"
      }
    },
    "853c4012b79711f123c0b9780e565062b32bf1c7": {
      "type": "Ybodychange",
      "commitMessage": "Abandon foolish consistency with SpdyReader for sending frames.\n\nSetting fields and then calling a method is just not as usable\nas calling a method that takes arguments.\n\nAlso move Settings into their own class, so we can sling them\naround without a bunch of ceremony.\n",
      "commitDate": "2012/9/26 下午11:58",
      "commitName": "853c4012b79711f123c0b9780e565062b32bf1c7",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2012/9/26 上午5:32",
      "commitNameOld": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 151,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,22 +1,17 @@\n public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     SpdyStream stream;\n     int streamId;\n     synchronized (spdyWriter) {\n         synchronized (this) {\n             streamId \u003d nextStreamId;\n             nextStreamId +\u003d 2;\n             stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n             streams.put(streamId, stream);\n         }\n-        spdyWriter.flags \u003d flags;\n-        spdyWriter.id \u003d streamId;\n-        spdyWriter.associatedId \u003d associatedStreamId;\n-        spdyWriter.priority \u003d priority;\n-        spdyWriter.nameValueBlock \u003d requestHeaders;\n-        spdyWriter.synStream();\n+        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n     }\n     return stream;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d": {
      "type": "Ybodychange",
      "commitMessage": "Address some todos around stream failures and peer errors.\n",
      "commitDate": "2012/9/26 上午5:32",
      "commitName": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2012/9/26 上午2:29",
      "commitNameOld": "60b3a6dd6240f40c29fffd897c2dac314af49836",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.flags \u003d flags;\n        spdyWriter.id \u003d streamId;\n        spdyWriter.associatedId \u003d associatedStreamId;\n        spdyWriter.priority \u003d priority;\n        spdyWriter.nameValueBlock \u003d requestHeaders;\n        spdyWriter.synStream();\n    }\n    return stream;\n}",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 181,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "60b3a6dd6240f40c29fffd897c2dac314af49836": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
      "commitDate": "2012/9/26 上午2:29",
      "commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
          "commitDate": "2012/9/26 上午2:29",
          "commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "2012/9/25 下午12:34",
          "commitNameOld": "2bd54fa72fe72f92212428a024050838c2b62d57",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.flags \u003d flags;\n        spdyWriter.id \u003d streamId;\n        spdyWriter.associatedId \u003d associatedStreamId;\n        spdyWriter.priority \u003d priority;\n        spdyWriter.nameValueBlock \u003d requestHeaders;\n        spdyWriter.synStream();\n    }\n    return stream;\n}",
          "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
          "functionStartLine": 185,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
          "diff": "@@ -1,16 +1,22 @@\n-public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n-    int streamId \u003d nextStreamId;\n-    nextStreamId +\u003d 2;\n+public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n-    SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n-    streams.put(streamId, result);\n-    spdyWriter.flags \u003d flags;\n-    spdyWriter.id \u003d streamId;\n-    spdyWriter.associatedId \u003d associatedStreamId;\n-    spdyWriter.priority \u003d priority;\n-    spdyWriter.nameValueBlock \u003d requestHeaders;\n-    spdyWriter.synStream();\n-    return result;\n+    SpdyStream stream;\n+    int streamId;\n+    synchronized (spdyWriter) {\n+        synchronized (this) {\n+            streamId \u003d nextStreamId;\n+            nextStreamId +\u003d 2;\n+            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+            streams.put(streamId, stream);\n+        }\n+        spdyWriter.flags \u003d flags;\n+        spdyWriter.id \u003d streamId;\n+        spdyWriter.associatedId \u003d associatedStreamId;\n+        spdyWriter.priority \u003d priority;\n+        spdyWriter.nameValueBlock \u003d requestHeaders;\n+        spdyWriter.synStream();\n+    }\n+    return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
          "commitDate": "2012/9/26 上午2:29",
          "commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "2012/9/25 下午12:34",
          "commitNameOld": "2bd54fa72fe72f92212428a024050838c2b62d57",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId \u003d nextStreamId;\n            nextStreamId +\u003d 2;\n            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.flags \u003d flags;\n        spdyWriter.id \u003d streamId;\n        spdyWriter.associatedId \u003d associatedStreamId;\n        spdyWriter.priority \u003d priority;\n        spdyWriter.nameValueBlock \u003d requestHeaders;\n        spdyWriter.synStream();\n    }\n    return stream;\n}",
          "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
          "functionStartLine": 185,
          "functionName": "newStream",
          "functionAnnotation": "",
          "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
          "diff": "@@ -1,16 +1,22 @@\n-public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n-    int streamId \u003d nextStreamId;\n-    nextStreamId +\u003d 2;\n+public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n-    SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n-    streams.put(streamId, result);\n-    spdyWriter.flags \u003d flags;\n-    spdyWriter.id \u003d streamId;\n-    spdyWriter.associatedId \u003d associatedStreamId;\n-    spdyWriter.priority \u003d priority;\n-    spdyWriter.nameValueBlock \u003d requestHeaders;\n-    spdyWriter.synStream();\n-    return result;\n+    SpdyStream stream;\n+    int streamId;\n+    synchronized (spdyWriter) {\n+        synchronized (this) {\n+            streamId \u003d nextStreamId;\n+            nextStreamId +\u003d 2;\n+            stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+            streams.put(streamId, stream);\n+        }\n+        spdyWriter.flags \u003d flags;\n+        spdyWriter.id \u003d streamId;\n+        spdyWriter.associatedId \u003d associatedStreamId;\n+        spdyWriter.priority \u003d priority;\n+        spdyWriter.nameValueBlock \u003d requestHeaders;\n+        spdyWriter.synStream();\n+    }\n+    return stream;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2bd54fa72fe72f92212428a024050838c2b62d57": {
      "type": "Ybodychange",
      "commitMessage": "Implement TYPE_PING.\n\nThough it isn\u0027t particularly useful in practice, it\u0027s\ngoing to be extremely handy for testing since it makes\na happens-before relationship very easy to create.\n",
      "commitDate": "2012/9/25 下午12:34",
      "commitName": "2bd54fa72fe72f92212428a024050838c2b62d57",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2012/9/22 上午5:28",
      "commitNameOld": "7a7ad1cdb22ed381c468ee38d757da03b4b1877a",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 3.3,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int streamId \u003d nextStreamId;\n    nextStreamId +\u003d 2;\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n    streams.put(streamId, result);\n    spdyWriter.flags \u003d flags;\n    spdyWriter.id \u003d streamId;\n    spdyWriter.associatedId \u003d associatedStreamId;\n    spdyWriter.priority \u003d priority;\n    spdyWriter.nameValueBlock \u003d requestHeaders;\n    spdyWriter.synStream();\n    return result;\n}",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 168,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n",
      "diff": "@@ -1,16 +1,16 @@\n public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n     int streamId \u003d nextStreamId;\n     nextStreamId +\u003d 2;\n     int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n     int associatedStreamId \u003d 0;\n     int priority \u003d 0;\n     SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n     streams.put(streamId, result);\n     spdyWriter.flags \u003d flags;\n-    spdyWriter.streamId \u003d streamId;\n-    spdyWriter.associatedStreamId \u003d associatedStreamId;\n+    spdyWriter.id \u003d streamId;\n+    spdyWriter.associatedId \u003d associatedStreamId;\n     spdyWriter.priority \u003d priority;\n     spdyWriter.nameValueBlock \u003d requestHeaders;\n     spdyWriter.synStream();\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e": {
      "type": "Yintroduced",
      "commitMessage": "Initial import.\n\nThis is a fork of okhttp from http://code.google.com/p/okhttp.\nI\u0027m moving it to Github since that\u0027s where my code reviewers\nare. I\u0027ve renamed the core package from com.google.okhttp to\ncom.squareup.okhttp because Square is where I expect ongoing\ndevelopment of this project to take place.\n\nAll code in this project is subject to be contributed upstream\nto AOSP. In particular, all code in the libcore package is\nderived from AOSP and intended to be contributed back to AOSP\non an ongoing basis.\n",
      "commitDate": "2012/7/23 下午10:02",
      "commitName": "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,16 @@\n+public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n+    int streamId \u003d nextStreamId;\n+    nextStreamId +\u003d 2;\n+    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n+    int associatedStreamId \u003d 0;\n+    int priority \u003d 0;\n+    SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+    streams.put(streamId, result);\n+    spdyWriter.flags \u003d flags;\n+    spdyWriter.streamId \u003d streamId;\n+    spdyWriter.associatedStreamId \u003d associatedStreamId;\n+    spdyWriter.priority \u003d priority;\n+    spdyWriter.nameValueBlock \u003d requestHeaders;\n+    spdyWriter.synStream();\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in) throws IOException {\n    int streamId \u003d nextStreamId;\n    nextStreamId +\u003d 2;\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;\n    int priority \u003d 0;\n    SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n    streams.put(streamId, result);\n    spdyWriter.flags \u003d flags;\n    spdyWriter.streamId \u003d streamId;\n    spdyWriter.associatedStreamId \u003d associatedStreamId;\n    spdyWriter.priority \u003d priority;\n    spdyWriter.nameValueBlock \u003d requestHeaders;\n    spdyWriter.synStream();\n    return result;\n}",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 113,
      "functionName": "newStream",
      "functionAnnotation": "",
      "functionDoc": "Returns a new locally-initiated stream.\n\n@param out true to create an output stream that we can use to send data\n    to the remote peer. Corresponds to {@code FLAG_FIN}.\n@param in true to create an input stream that the remote peer can use to\n    send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.\n"
    }
  }
}