{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "FinalLocalVariableCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 188,
  "functionEndLine": 240,
  "numCommitsSeen": 100,
  "timeTaken": 4914,
  "changeHistory": [
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
    "8fef90609bcf29c84823f4a9affae013ded9379d",
    "5e0ab75777985f056715f6d9dc5e4667b1a0dfa2",
    "4d214096fcc798a2bc4e71287339e6a8e08784c4",
    "ed76401d3bd039d684d6de21c4894d3ab62a3076",
    "bf69cf167c9432daabc7b6e4a426fff33650a057",
    "0a1a4c6e94c9b3b73b21b323f14ae7b7337b1b44",
    "55aa50d8f09d28521f0d0004ce475fa09082faea",
    "628e893f24cf41ad122c5adf656832a89168e766",
    "9c3b17b9db6c0884d4d456b4d6219abc03a453d4",
    "36b91a59d62c9505b835717f00f470c499cf9b30",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "b097b3f002ca40474b729c27c531787bc2e79f04",
    "c9c475a6c7a8cb728ba1c091b386db46f11a781f",
    "11ff590ba5cc717cbe00d88eb0b578e805572bc8",
    "3831aa913e25d2bd424ccbeb239bd06439867a58",
    "dd6b080a16e0933b3d19305f84ba01c8893839f3",
    "5512e6fdba69ea486a21e299f7b134f4d9d60431",
    "98a9266a8091c1c6b26d41b4e17e1a32458f1bac",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "93a33df5bda022b29fa6f4d6f3ad2d8b5f0a2b6f",
    "a6b47597067d3456c894435a8fdc52b1c7060bed",
    "c6019cd352aff6919a61b40fa8efce3567141206",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "deb4d7a38805032ea8c9e2476eff5e00e38f1015",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
    "08638b5f739d9929698860048c052da2d5f80209",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
    "43fe1ad269809f293b375dc4d0a4313798bf2124",
    "9bcd88cf20db457966d0a83d2728a7c51a7d8623",
    "2af259b791c8655a2b9862099763f860d3d7ae42",
    "62179e05f3f4a7214eb1fd7775a2012c8870e4a8",
    "0c717ef2abd068366612d44280633a1c7ac9efac"
  ],
  "changeHistoryShort": {
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": "Ybodychange",
    "8fef90609bcf29c84823f4a9affae013ded9379d": "Ybodychange",
    "5e0ab75777985f056715f6d9dc5e4667b1a0dfa2": "Ybodychange",
    "4d214096fcc798a2bc4e71287339e6a8e08784c4": "Ybodychange",
    "ed76401d3bd039d684d6de21c4894d3ab62a3076": "Ybodychange",
    "bf69cf167c9432daabc7b6e4a426fff33650a057": "Ybodychange",
    "0a1a4c6e94c9b3b73b21b323f14ae7b7337b1b44": "Ybodychange",
    "55aa50d8f09d28521f0d0004ce475fa09082faea": "Ybodychange",
    "628e893f24cf41ad122c5adf656832a89168e766": "Ybodychange",
    "9c3b17b9db6c0884d4d456b4d6219abc03a453d4": "Ybodychange",
    "36b91a59d62c9505b835717f00f470c499cf9b30": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "b097b3f002ca40474b729c27c531787bc2e79f04": "Ybodychange",
    "c9c475a6c7a8cb728ba1c091b386db46f11a781f": "Ybodychange",
    "11ff590ba5cc717cbe00d88eb0b578e805572bc8": "Ybodychange",
    "3831aa913e25d2bd424ccbeb239bd06439867a58": "Ybodychange",
    "dd6b080a16e0933b3d19305f84ba01c8893839f3": "Ybodychange",
    "5512e6fdba69ea486a21e299f7b134f4d9d60431": "Ybodychange",
    "98a9266a8091c1c6b26d41b4e17e1a32458f1bac": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "93a33df5bda022b29fa6f4d6f3ad2d8b5f0a2b6f": "Ybodychange",
    "a6b47597067d3456c894435a8fdc52b1c7060bed": "Ybodychange",
    "c6019cd352aff6919a61b40fa8efce3567141206": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "deb4d7a38805032ea8c9e2476eff5e00e38f1015": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333": "Ydocchange",
    "08638b5f739d9929698860048c052da2d5f80209": "Ymultichange(Ybodychange,Yannotationchange)",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "1aee9d55cc5bd8cca011e17369f6e370efcc85bb": "Ydocchange",
    "43fe1ad269809f293b375dc4d0a4313798bf2124": "Ybodychange",
    "9bcd88cf20db457966d0a83d2728a7c51a7d8623": "Ybodychange",
    "2af259b791c8655a2b9862099763f860d3d7ae42": "Ybodychange",
    "62179e05f3f4a7214eb1fd7775a2012c8870e4a8": "Ybodychange",
    "0c717ef2abd068366612d44280633a1c7ac9efac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for simple cases",
      "commitDate": "2017/11/9 下午10:45",
      "commitName": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthor": "rnveach",
      "commitDateOld": "2017/10/31 上午9:16",
      "commitNameOld": "5cdbb191a17c65c2956b35d71513e9b59b6d2166",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 9.56,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            currentScopeAssignedVariables.push(new ArrayDeque\u003c\u003e());\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) \u003d\u003d null \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) \u003d\u003d null \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                    currentScopeAssignedVariables.peek().add(ast);\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        case TokenTypes.LITERAL_BREAK:\n            scopeStack.peek().containsBreak \u003d true;\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 188,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,43 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             currentScopeAssignedVariables.push(new ArrayDeque\u003c\u003e());\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n+            if (!isInLambda(ast) \u0026\u0026 ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) \u003d\u003d null \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) \u003d\u003d null \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                 if (candidate.isPresent()) {\n                     determineAssignmentConditions(ast, candidate.get());\n                     currentScopeAssignedVariables.peek().add(ast);\n                 }\n                 removeFinalVariableCandidateFromStack(ast);\n             }\n             break;\n         case TokenTypes.LITERAL_BREAK:\n             scopeStack.peek().containsBreak \u003d true;\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8fef90609bcf29c84823f4a9affae013ded9379d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4727: fixed FinalLocalVariable scanning anonymous classes",
      "commitDate": "2017/7/30 上午10:50",
      "commitName": "8fef90609bcf29c84823f4a9affae013ded9379d",
      "commitAuthor": "rnveach",
      "commitDateOld": "2017/7/24 上午4:48",
      "commitNameOld": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 6.25,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            currentScopeAssignedVariables.push(new ArrayDeque\u003c\u003e());\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) \u003d\u003d null \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                    currentScopeAssignedVariables.peek().add(ast);\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        case TokenTypes.LITERAL_BREAK:\n            scopeStack.peek().containsBreak \u003d true;\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 186,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,43 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             currentScopeAssignedVariables.push(new ArrayDeque\u003c\u003e());\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n-            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n+            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) \u003d\u003d null \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                 if (candidate.isPresent()) {\n                     determineAssignmentConditions(ast, candidate.get());\n                     currentScopeAssignedVariables.peek().add(ast);\n                 }\n                 removeFinalVariableCandidateFromStack(ast);\n             }\n             break;\n         case TokenTypes.LITERAL_BREAK:\n             scopeStack.peek().containsBreak \u003d true;\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5e0ab75777985f056715f6d9dc5e4667b1a0dfa2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4082: Take \"break\" into consideration in FinalLocalVariable\n",
      "commitDate": "2017/4/19 上午3:54",
      "commitName": "5e0ab75777985f056715f6d9dc5e4667b1a0dfa2",
      "commitAuthor": "Luolc",
      "commitDateOld": "2017/4/5 下午8:37",
      "commitNameOld": "3bd3a52280388520c64ec813dd1e4ffb3a0063a2",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 13.3,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            currentScopeAssignedVariables.push(new ArrayDeque\u003c\u003e());\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                    currentScopeAssignedVariables.peek().add(ast);\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        case TokenTypes.LITERAL_BREAK:\n            scopeStack.peek().containsBreak \u003d true;\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 186,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,43 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n+            currentScopeAssignedVariables.push(new ArrayDeque\u003c\u003e());\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                 if (candidate.isPresent()) {\n                     determineAssignmentConditions(ast, candidate.get());\n+                    currentScopeAssignedVariables.peek().add(ast);\n                 }\n                 removeFinalVariableCandidateFromStack(ast);\n             }\n             break;\n+        case TokenTypes.LITERAL_BREAK:\n+            scopeStack.peek().containsBreak \u003d true;\n+            break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d214096fcc798a2bc4e71287339e6a8e08784c4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3617: make FinalLocalVariable not check multi-catch vars\n",
      "commitDate": "2016/12/8 上午5:22",
      "commitName": "4d214096fcc798a2bc4e71287339e6a8e08784c4",
      "commitAuthor": "liscju",
      "commitDateOld": "2016/9/15 上午4:58",
      "commitNameOld": "25a37e5049b7816b34c552899841a978efc37a63",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 84.02,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 179,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,38 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n+            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast) \u0026\u0026 !isMultipleTypeCatch(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                 if (candidate.isPresent()) {\n                     determineAssignmentConditions(ast, candidate.get());\n                 }\n                 removeFinalVariableCandidateFromStack(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ed76401d3bd039d684d6de21c4894d3ab62a3076": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3074: Fix FinalLocalVariable false positive when variable is assigned inside and outside switch-block (#3366)\n\n",
      "commitDate": "2016/7/23 下午1:09",
      "commitName": "ed76401d3bd039d684d6de21c4894d3ab62a3076",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2016/7/23 下午12:49",
      "commitNameOld": "2bf2138d04ebbb969c6c26d27f01ef0a572a64c8",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 177,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,38 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                 if (candidate.isPresent()) {\n-                    if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n-                        candidate.get().assignInIfBlock \u003d true;\n-                        if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n-                            candidate.get().assignInIfBlockWhichIsInsideCaseBlock \u003d true;\n-                        }\n-                    } else {\n-                        candidate.get().assignOutsideConditionalBlock \u003d true;\n-                    }\n+                    determineAssignmentConditions(ast, candidate.get());\n                 }\n                 removeFinalVariableCandidateFromStack(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bf69cf167c9432daabc7b6e4a426fff33650a057": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3006: Refactoring of FinalLocalVariableCheck to increase readability\n",
      "commitDate": "2016/3/30 上午6:47",
      "commitName": "bf69cf167c9432daabc7b6e4a426fff33650a057",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2016/3/30 上午6:47",
      "commitNameOld": "0a1a4c6e94c9b3b73b21b323f14ae7b7337b1b44",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n                        candidate.get().assignInIfBlock \u003d true;\n                        if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n                            candidate.get().assignInIfBlockWhichIsInsideCaseBlock \u003d true;\n                        }\n                    } else {\n                        candidate.get().assignOutsideConditionalBlock \u003d true;\n                    }\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 177,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,45 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n-                if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n-                    markFinalVariableCandidateAsAssignedInIfBlock(ast);\n-                    if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n-                        markFinalVariableCandidateAsAssignedInCaseBlock(ast);\n+                final Optional\u003cFinalVariableCandidate\u003e candidate \u003d getFinalCandidate(ast);\n+                if (candidate.isPresent()) {\n+                    if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n+                        candidate.get().assignInIfBlock \u003d true;\n+                        if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n+                            candidate.get().assignInIfBlockWhichIsInsideCaseBlock \u003d true;\n+                        }\n+                    } else {\n+                        candidate.get().assignOutsideConditionalBlock \u003d true;\n                     }\n-                } else if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_ELSE)) {\n-                    markFinalVariableCandidateAsAssignedInElseBlock(ast);\n-                } else {\n-                    markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock(ast);\n                 }\n-                removeVariable(ast);\n+                removeFinalVariableCandidateFromStack(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a1a4c6e94c9b3b73b21b323f14ae7b7337b1b44": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3006: Fix false positive when variable is assigned in if block which is inside catch block\n",
      "commitDate": "2016/3/30 上午6:47",
      "commitName": "0a1a4c6e94c9b3b73b21b323f14ae7b7337b1b44",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2016/3/30 上午6:47",
      "commitNameOld": "55aa50d8f09d28521f0d0004ce475fa09082faea",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n                    markFinalVariableCandidateAsAssignedInIfBlock(ast);\n                    if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n                        markFinalVariableCandidateAsAssignedInCaseBlock(ast);\n                    }\n                } else if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_ELSE)) {\n                    markFinalVariableCandidateAsAssignedInElseBlock(ast);\n                } else {\n                    markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock(ast);\n                }\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 176,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,44 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n-                if (isInIfBlock(ast)) {\n-                    markFinalVariableCandidateAsAssignInIfBlock(ast);\n-                } else if (isInElseBlock(ast)) {\n-                    markFinalVariableCandidateAsAssignInElseBlock(ast);\n+                if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n+                    markFinalVariableCandidateAsAssignedInIfBlock(ast);\n+                    if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n+                        markFinalVariableCandidateAsAssignedInCaseBlock(ast);\n+                    }\n+                } else if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_ELSE)) {\n+                    markFinalVariableCandidateAsAssignedInElseBlock(ast);\n                 } else {\n-                    markFinalVariableCandidateAsAssignOutsideIfOrElseBlock(ast);\n+                    markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock(ast);\n                 }\n                 removeVariable(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55aa50d8f09d28521f0d0004ce475fa09082faea": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3006: Fix false positive when variable is assigned multiple times\n",
      "commitDate": "2016/3/30 上午6:47",
      "commitName": "55aa50d8f09d28521f0d0004ce475fa09082faea",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2016/3/30 上午6:47",
      "commitNameOld": "11210350f58660d96012cea051f0fbc3bc462cb1",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                if (isInIfBlock(ast)) {\n                    markFinalVariableCandidateAsAssignInIfBlock(ast);\n                } else if (isInElseBlock(ast)) {\n                    markFinalVariableCandidateAsAssignInElseBlock(ast);\n                } else {\n                    markFinalVariableCandidateAsAssignOutsideIfOrElseBlock(ast);\n                }\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 176,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,41 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                 storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n+                if (isInIfBlock(ast)) {\n+                    markFinalVariableCandidateAsAssignInIfBlock(ast);\n+                } else if (isInElseBlock(ast)) {\n+                    markFinalVariableCandidateAsAssignInElseBlock(ast);\n+                } else {\n+                    markFinalVariableCandidateAsAssignOutsideIfOrElseBlock(ast);\n+                }\n                 removeVariable(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "628e893f24cf41ad122c5adf656832a89168e766": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2807: FinalLocalVariable doesn\u0027t report variable when condition separates 2 assignments\n",
      "commitDate": "2016/1/24 下午10:35",
      "commitName": "628e893f24cf41ad122c5adf656832a89168e766",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "2016/1/5 上午8:25",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 176,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,34 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.SLIST:\n             if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n+                storePrevScopeUninitializedVariableData();\n                 scopeStack.push(new ScopeData());\n             }\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9c3b17b9db6c0884d4d456b4d6219abc03a453d4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2405: FinalLocalVariable false-positive in SWITCH solved\n",
      "commitDate": "2015/12/26 下午11:31",
      "commitName": "9c3b17b9db6c0884d4d456b4d6219abc03a453d4",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "2015/12/15 上午9:17",
      "commitNameOld": "1ef123bf60e8f4ba348f2e6399175dee62f016b2",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 11.59,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 172,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,33 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n-        case TokenTypes.SLIST:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n             scopeStack.push(new ScopeData());\n             break;\n+        case TokenTypes.SLIST:\n+            if (ast.getParent().getType() !\u003d TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) \u003d\u003d ast.getParent()) {\n+                scopeStack.push(new ScopeData());\n+            }\n+            break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "36b91a59d62c9505b835717f00f470c499cf9b30": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1551: Fix FinalLocalVariable false-negative",
      "commitDate": "2015/11/1 下午9:41",
      "commitName": "36b91a59d62c9505b835717f00f470c499cf9b30",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "2015/9/25 下午8:55",
      "commitNameOld": "fbd04a537a209f84407fd3695171213f4e011e33",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 37.03,
      "commitsBetweenForRepo": 258,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 172,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,29 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n-        case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n-        case TokenTypes.STATIC_INIT:\n-        case TokenTypes.INSTANCE_INIT:\n-            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n+            scopeStack.push(new ScopeData());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n-                insertVariable(ast);\n+                insertParameter(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n-            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n+            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n-            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n+            if (isAssignOperator(parentType) \u0026\u0026 isFirstChild(ast)) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "2015/8/28 上午3:53",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/8/27 下午8:17",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 170,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (!inLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !inAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.inInterfaceBlock(ast)) {\n+            if (!isInLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !isInAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b097b3f002ca40474b729c27c531787bc2e79f04": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1293: Improved coverage for FinalLocalVariableCheck\n",
      "commitDate": "2015/8/3 上午9:27",
      "commitName": "b097b3f002ca40474b729c27c531787bc2e79f04",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "2015/8/2 上午12:42",
      "commitNameOld": "f8ba0d727928aaa1275758fa09114155faab0b9e",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.36,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!inLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !inAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.inInterfaceBlock(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 170,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,32 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (!inLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !inAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.inInterfaceBlock(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.VARIABLE_DEF:\n-            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n+            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 !isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n+            throw new IllegalStateException(\"Incorrect token type\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9c475a6c7a8cb728ba1c091b386db46f11a781f": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring of FinalLocalVariableCheck to avoid \u0027fall through\u0027 violation, issue #1395.\n",
      "commitDate": "2015/7/21 上午1:02",
      "commitName": "c9c475a6c7a8cb728ba1c091b386db46f11a781f",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2015/7/18 下午12:51",
      "commitNameOld": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.51,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!inLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !inAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.inInterfaceBlock(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 142,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,31 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n-                break;\n+            if (!inLambda(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL) \u0026\u0026 !inAbstractOrNativeMethod(ast) \u0026\u0026 !ScopeUtils.inInterfaceBlock(ast)) {\n+                insertVariable(ast);\n             }\n+            break;\n         case TokenTypes.VARIABLE_DEF:\n-            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n+            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 isVariableInForInit(ast) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11ff590ba5cc717cbe00d88eb0b578e805572bc8": {
      "type": "Ybodychange",
      "commitMessage": "Solution to wrong variable reported because of name shadowing in FinalLocalVariableCheck. solves #1142\n",
      "commitDate": "2015/6/19 上午5:42",
      "commitName": "11ff590ba5cc717cbe00d88eb0b578e805572bc8",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "2015/6/14 下午2:01",
      "commitNameOld": "3831aa913e25d2bd424ccbeb239bd06439867a58",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.65,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 142,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n+            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast) \u0026\u0026 !ast.branchContains(TokenTypes.FINAL)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3831aa913e25d2bd424ccbeb239bd06439867a58": {
      "type": "Ybodychange",
      "commitMessage": "FinalLocalVariableCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "2015/6/14 下午2:01",
      "commitName": "3831aa913e25d2bd424ccbeb239bd06439867a58",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "2015/5/17 下午7:47",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 142,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n-            if ((TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n+            if (isAssignOperator(parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd6b080a16e0933b3d19305f84ba01c8893839f3": {
      "type": "Ybodychange",
      "commitMessage": "all TODO/FIXME were removed , some of them converted to issues\n",
      "commitDate": "2015/4/24 上午1:38",
      "commitName": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "2015/3/16 上午11:45",
      "commitNameOld": "5512e6fdba69ea486a21e299f7b134f4d9d60431",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 38.58,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 144,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "5512e6fdba69ea486a21e299f7b134f4d9d60431": {
      "type": "Ybodychange",
      "commitMessage": "Final Local Variable Name Check, fixed bug with lambda\u0027s params, issue #747\n",
      "commitDate": "2015/3/16 上午11:45",
      "commitName": "5512e6fdba69ea486a21e299f7b134f4d9d60431",
      "commitAuthor": "alexkravin",
      "commitDateOld": "2015/3/15 上午5:56",
      "commitNameOld": "98a9266a8091c1c6b26d41b4e17e1a32458f1bac",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 144,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n+            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                 removeVariable(ast);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "98a9266a8091c1c6b26d41b4e17e1a32458f1bac": {
      "type": "Ybodychange",
      "commitMessage": "Combine nested if statements, issue #744\n\nAll violations of PMD rule [CollapsibleIfStatements](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/basic.html#CollapsibleIfStatements) are fixed.\n",
      "commitDate": "2015/3/15 上午5:56",
      "commitName": "98a9266a8091c1c6b26d41b4e17e1a32458f1bac",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/3/13 上午4:07",
      "commitNameOld": "fe6158d4106f713438e769d0ab77289910cfe5bd",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 144,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,30 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n-            if (TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) {\n-                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n-                    removeVariable(ast);\n-                }\n+            if ((TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) \u0026\u0026 ast.getParent().getFirstChild() \u003d\u003d ast) {\n+                removeVariable(ast);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "2015/3/11 上午5:36",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/3/6 下午1:39",
      "commitNameOld": "93a33df5bda022b29fa6f4d6f3ad2d8b5f0a2b6f",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 4.66,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if (TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) {\n                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 136,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n+            if (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n-            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n+            if (TokenTypes.POST_DEC \u003d\u003d parentType || TokenTypes.DEC \u003d\u003d parentType || TokenTypes.POST_INC \u003d\u003d parentType || TokenTypes.INC \u003d\u003d parentType || TokenTypes.ASSIGN \u003d\u003d parentType || TokenTypes.PLUS_ASSIGN \u003d\u003d parentType || TokenTypes.MINUS_ASSIGN \u003d\u003d parentType || TokenTypes.DIV_ASSIGN \u003d\u003d parentType || TokenTypes.STAR_ASSIGN \u003d\u003d parentType || TokenTypes.MOD_ASSIGN \u003d\u003d parentType || TokenTypes.SR_ASSIGN \u003d\u003d parentType || TokenTypes.BSR_ASSIGN \u003d\u003d parentType || TokenTypes.SL_ASSIGN \u003d\u003d parentType || TokenTypes.BXOR_ASSIGN \u003d\u003d parentType || TokenTypes.BOR_ASSIGN \u003d\u003d parentType || TokenTypes.BAND_ASSIGN \u003d\u003d parentType) {\n                 if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                     removeVariable(ast);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "93a33df5bda022b29fa6f4d6f3ad2d8b5f0a2b6f": {
      "type": "Ybodychange",
      "commitMessage": "fix for FinalLocalVariableCheck - FOR_EACH_CLAUSE variable is not reported. issue #20\n",
      "commitDate": "2015/3/6 下午1:39",
      "commitName": "93a33df5bda022b29fa6f4d6f3ad2d8b5f0a2b6f",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "2015/2/20 下午9:02",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 13.69,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 136,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) \u0026\u0026 isVariableInForInit(ast)) {\n+            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 shouldCheckEnhancedForLoopVariable(ast) \u0026\u0026 isVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                     removeVariable(ast);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6b47597067d3456c894435a8fdc52b1c7060bed": {
      "type": "Ybodychange",
      "commitMessage": "Final Local Variable Check, fixed false-positive, issue #258\n",
      "commitDate": "2015/2/19 下午2:07",
      "commitName": "a6b47597067d3456c894435a8fdc52b1c7060bed",
      "commitAuthor": "alexkravin",
      "commitDateOld": "2015/2/19 上午5:14",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) \u0026\u0026 isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 91,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) \u0026\u0026 isFirstVariableInForInit(ast)) {\n+            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) \u0026\u0026 isVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                     removeVariable(ast);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c6019cd352aff6919a61b40fa8efce3567141206": {
      "type": "Ybodychange",
      "commitMessage": "Final Local Variable Check, fixed false-positive, issue #258\n",
      "commitDate": "2015/1/27 上午10:43",
      "commitName": "c6019cd352aff6919a61b40fa8efce3567141206",
      "commitAuthor": "alexkravin",
      "commitDateOld": "2015/1/22 下午8:29",
      "commitNameOld": "b2eeea93c2b1c9a148a8ecf615637aeea4630638",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 4.59,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) \u0026\u0026 isFirstVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 91,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n @Override\n public void visitToken(DetailAST ast) {\n     switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n+            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) \u0026\u0026 isFirstVariableInForInit(ast)) {\n                 insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d ast.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                     removeVariable(ast);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "2015/1/19 下午10:20",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "2015/1/19 下午10:20",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2014/12/16 下午2:09",
          "commitNameOld": "deb4d7a38805032ea8c9e2476eff5e00e38f1015",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 34.34,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
          "functionStartLine": 91,
          "functionName": "visitToken",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n @Override\n-public void visitToken(DetailAST aAST) {\n-    switch(aAST.getType()) {\n+public void visitToken(DetailAST ast) {\n+    switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n-            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n+            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractOrNativeMethod(aAST)) {\n+            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n-                insertVariable(aAST);\n+            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n+                insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n-            final int parentType \u003d aAST.getParent().getType();\n+            final int parentType \u003d ast.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n-                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n-                    removeVariable(aAST);\n+                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n+                    removeVariable(ast);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "2015/1/19 下午10:20",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2014/12/16 下午2:09",
          "commitNameOld": "deb4d7a38805032ea8c9e2476eff5e00e38f1015",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 34.34,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d ast.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
          "functionStartLine": 91,
          "functionName": "visitToken",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,32 @@\n @Override\n-public void visitToken(DetailAST aAST) {\n-    switch(aAST.getType()) {\n+public void visitToken(DetailAST ast) {\n+    switch(ast.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n-            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n+            scopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractOrNativeMethod(aAST)) {\n+            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n-                insertVariable(aAST);\n+            if ((ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (ast.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n+                insertVariable(ast);\n             }\n             break;\n         case TokenTypes.IDENT:\n-            final int parentType \u003d aAST.getParent().getType();\n+            final int parentType \u003d ast.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n-                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n-                    removeVariable(aAST);\n+                if (ast.getParent().getFirstChild() \u003d\u003d ast) {\n+                    removeVariable(ast);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "deb4d7a38805032ea8c9e2476eff5e00e38f1015": {
      "type": "Ybodychange",
      "commitMessage": "Final Local Variable Check, fixed false-positive - native method\u0027s param should be declared final, issue #158\n",
      "commitDate": "2014/12/16 下午2:09",
      "commitName": "deb4d7a38805032ea8c9e2476eff5e00e38f1015",
      "commitAuthor": "alexkravin",
      "commitDateOld": "2014/7/9 上午9:17",
      "commitNameOld": "8c1b62313ffba68c246e61820a904edbf3c61335",
      "commitAuthorOld": "Maroontress Fast Software",
      "daysBetweenCommits": 160.2,
      "commitsBetweenForRepo": 344,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractOrNativeMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 91,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n @Override\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n+            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractOrNativeMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                     removeVariable(aAST);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "2014/3/5 上午1:18",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "2014/2/27 下午2:35",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 91,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java"
      }
    },
    "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333": {
      "type": "Ydocchange",
      "commitMessage": "Get rid of needless {@inheritDoc}\n",
      "commitDate": "2008/1/14 下午3:42",
      "commitName": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2008/1/13 上午10:47",
      "commitNameOld": "5a7e221b757e91d49be1aea105eb4b839e653fbd",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 91,
      "functionName": "visitToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldValue": "@inheritDoc}\n",
        "newValue": ""
      }
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "2007/12/15 下午2:36",
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "2007/12/15 下午2:36",
          "commitName": "08638b5f739d9929698860048c052da2d5f80209",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2007/1/27 下午10:51",
          "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 321.66,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
          "functionStartLine": 99,
          "functionName": "visitToken",
          "functionAnnotation": "@Override",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,31 +1,32 @@\n+@Override\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n-            mScopeStack.push(new HashMap());\n+            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                     removeVariable(aAST);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "2007/12/15 下午2:36",
          "commitName": "08638b5f739d9929698860048c052da2d5f80209",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2007/1/27 下午10:51",
          "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 321.66,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
          "functionStartLine": 99,
          "functionName": "visitToken",
          "functionAnnotation": "@Override",
          "functionDoc": "@inheritDoc}\n",
          "diff": "@@ -1,31 +1,32 @@\n+@Override\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n-            mScopeStack.push(new HashMap());\n+            mScopeStack.push(new HashMap\u003cString, DetailAST\u003e());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                     removeVariable(aAST);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        }
      ]
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "2006/7/7 上午11:26",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2005/11/1 上午3:23",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 95,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "@@ -1,31 +1,31 @@\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             mScopeStack.push(new HashMap());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) {\n+            if ((aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) \u0026\u0026 (aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE)) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                     removeVariable(aAST);\n                 }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1aee9d55cc5bd8cca011e17369f6e370efcc85bb": {
      "type": "Ydocchange",
      "commitMessage": "Fixed 1290379 (now JavadomMethod check does not allow single @see tag in javadoc).  NUMBER of javadocs changed to follow new rule.\n",
      "commitDate": "2005/11/1 上午3:23",
      "commitName": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "2005/7/21 下午9:25",
      "commitNameOld": "43fe1ad269809f293b375dc4d0a4313798bf2124",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 102.25,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 95,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\n@see Check#visitToken(DetailAST)\n",
        "newValue": "@inheritDoc}\n"
      }
    },
    "43fe1ad269809f293b375dc4d0a4313798bf2124": {
      "type": "Ybodychange",
      "commitMessage": "FinalLocalVariable should check if variable is used in left side of assignment (bug 1241722)\n",
      "commitDate": "2005/7/21 下午9:25",
      "commitName": "43fe1ad269809f293b375dc4d0a4313798bf2124",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "2005/1/9 下午6:50",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 193.11,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 95,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "\n@see Check#visitToken(DetailAST)\n",
      "diff": "@@ -1,29 +1,31 @@\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             mScopeStack.push(new HashMap());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n-                removeVariable(aAST);\n+                if (aAST.getParent().getFirstChild() \u003d\u003d aAST) {\n+                    removeVariable(aAST);\n+                }\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9bcd88cf20db457966d0a83d2728a7c51a7d8623": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug where local variables to for-each clauses where flagged as requiring the final modifier.\n",
      "commitDate": "2004/12/20 上午7:10",
      "commitName": "9bcd88cf20db457966d0a83d2728a7c51a7d8623",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "2004/8/4 下午7:17",
      "commitNameOld": "2af259b791c8655a2b9862099763f860d3d7ae42",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 137.5,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 95,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "\n@see Check#visitToken(DetailAST)\n",
      "diff": "@@ -1,29 +1,29 @@\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             mScopeStack.push(new HashMap());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n             if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n-            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n+            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK \u0026\u0026 aAST.getParent().getType() !\u003d TokenTypes.FOR_EACH_CLAUSE) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 removeVariable(aAST);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2af259b791c8655a2b9862099763f860d3d7ae42": {
      "type": "Ybodychange",
      "commitMessage": "FinalParametersCheck and FinalLocalVariablesCheck ignore abstract methods (bug 1002849)\n",
      "commitDate": "2004/8/4 下午7:17",
      "commitName": "2af259b791c8655a2b9862099763f860d3d7ae42",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "2004/7/26 上午3:11",
      "commitNameOld": "62179e05f3f4a7214eb1fd7775a2012c8870e4a8",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 9.67,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 95,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "\n@see Check#visitToken(DetailAST)\n",
      "diff": "@@ -1,29 +1,29 @@\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             mScopeStack.push(new HashMap());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n-            if (ScopeUtils.inInterfaceBlock(aAST)) {\n+            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                 break;\n             }\n         case TokenTypes.VARIABLE_DEF:\n             if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 removeVariable(aAST);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "62179e05f3f4a7214eb1fd7775a2012c8870e4a8": {
      "type": "Ybodychange",
      "commitMessage": "FinalLocalVariable ignores parameters of interface methods (request 993922)\n",
      "commitDate": "2004/7/26 上午3:11",
      "commitName": "62179e05f3f4a7214eb1fd7775a2012c8870e4a8",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "2004/4/27 下午12:17",
      "commitNameOld": "e95d9b668ff5d6fbc64ac13d7cd349a41367e830",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 89.62,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 95,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "\n@see Check#visitToken(DetailAST)\n",
      "diff": "@@ -1,26 +1,29 @@\n public void visitToken(DetailAST aAST) {\n     switch(aAST.getType()) {\n         case TokenTypes.OBJBLOCK:\n         case TokenTypes.SLIST:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.METHOD_DEF:\n         case TokenTypes.CTOR_DEF:\n         case TokenTypes.STATIC_INIT:\n         case TokenTypes.INSTANCE_INIT:\n             mScopeStack.push(new HashMap());\n             break;\n         case TokenTypes.PARAMETER_DEF:\n+            if (ScopeUtils.inInterfaceBlock(aAST)) {\n+                break;\n+            }\n         case TokenTypes.VARIABLE_DEF:\n             if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n                 insertVariable(aAST);\n             }\n             break;\n         case TokenTypes.IDENT:\n             final int parentType \u003d aAST.getParent().getType();\n             if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                 removeVariable(aAST);\n             }\n             break;\n         default:\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0c717ef2abd068366612d44280633a1c7ac9efac": {
      "type": "Yintroduced",
      "commitMessage": "Added FinalLocalVariable check from Roland Auckenthaler and Kevin Gibbs.\n",
      "commitDate": "2003/9/11 下午8:01",
      "commitName": "0c717ef2abd068366612d44280633a1c7ac9efac",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,26 @@\n+public void visitToken(DetailAST aAST) {\n+    switch(aAST.getType()) {\n+        case TokenTypes.OBJBLOCK:\n+        case TokenTypes.SLIST:\n+        case TokenTypes.LITERAL_FOR:\n+        case TokenTypes.METHOD_DEF:\n+        case TokenTypes.CTOR_DEF:\n+        case TokenTypes.STATIC_INIT:\n+        case TokenTypes.INSTANCE_INIT:\n+            mScopeStack.push(new HashMap());\n+            break;\n+        case TokenTypes.PARAMETER_DEF:\n+        case TokenTypes.VARIABLE_DEF:\n+            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n+                insertVariable(aAST);\n+            }\n+            break;\n+        case TokenTypes.IDENT:\n+            final int parentType \u003d aAST.getParent().getType();\n+            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n+                removeVariable(aAST);\n+            }\n+            break;\n+        default:\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType \u003d aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC \u003d\u003d parentType) || (TokenTypes.DEC \u003d\u003d parentType) || (TokenTypes.POST_INC \u003d\u003d parentType) || (TokenTypes.INC \u003d\u003d parentType) || (TokenTypes.ASSIGN \u003d\u003d parentType) || (TokenTypes.PLUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.MINUS_ASSIGN \u003d\u003d parentType) || (TokenTypes.DIV_ASSIGN \u003d\u003d parentType) || (TokenTypes.STAR_ASSIGN \u003d\u003d parentType) || (TokenTypes.MOD_ASSIGN \u003d\u003d parentType) || (TokenTypes.SR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BSR_ASSIGN \u003d\u003d parentType) || (TokenTypes.SL_ASSIGN \u003d\u003d parentType) || (TokenTypes.BXOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BOR_ASSIGN \u003d\u003d parentType) || (TokenTypes.BAND_ASSIGN \u003d\u003d parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java",
      "functionStartLine": 94,
      "functionName": "visitToken",
      "functionAnnotation": "",
      "functionDoc": "\n@see Check#visitToken(DetailAST)\n"
    }
  }
}