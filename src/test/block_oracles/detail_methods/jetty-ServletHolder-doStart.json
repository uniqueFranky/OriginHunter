{
  "origin": "codeshovel",
  "repositoryName": "jetty.project",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/jetty.project/.git",
  "startCommitName": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af",
  "sourceFileName": "ServletHolder.java",
  "functionName": "doStart",
  "functionId": "doStart",
  "sourceFilePath": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 311,
  "functionEndLine": 412,
  "numCommitsSeen": 100,
  "timeTaken": 4172,
  "changeHistory": [
    "a639ee9275e672ca21320f56f62f1648d24aa140",
    "a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9",
    "edfd05dd9c9be4af1c61b30924d10725f8a7ec55",
    "69afe33b820401cef1e08fcb5911a025b29a4487",
    "6097123af68784a0186337b2e01a8025d7d13d25",
    "49a32eb1b0da23229441cd2f199ec57caab46cbc",
    "2a25402de0a12ca41d85dc95fa365dbd70a4a086",
    "3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99",
    "7db7620c3656c89b70868e584445248838795233",
    "b3be24742353f7b5880fa8229a20ed0b19058cac",
    "801a33d367041ad1752ddfcae5348485ca928c25",
    "9c168866ffbb349d56501d11801f0418bdee3596",
    "3f4a05fde3a3ef756809d0528e78031f46554fc9",
    "cd47727ce491d6bb1984ac1f6934080abc608c90",
    "3bcfc2946991975e804c8c00aad550aa0610db07",
    "de005c68fdd010c22d0cab95729a07f8dc51c9e3",
    "cbec18af6028105cfa5261c6176c29ac210140bc",
    "f7f7e0af7545e060f6508c7fe07b858fd58ebc3b",
    "da627b843fe81fa0fe52a046c1be8595630e9ae7"
  ],
  "changeHistoryShort": {
    "a639ee9275e672ca21320f56f62f1648d24aa140": "Yannotationchange",
    "a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9": "Ybodychange",
    "edfd05dd9c9be4af1c61b30924d10725f8a7ec55": "Ybodychange",
    "69afe33b820401cef1e08fcb5911a025b29a4487": "Ybodychange",
    "6097123af68784a0186337b2e01a8025d7d13d25": "Ybodychange",
    "49a32eb1b0da23229441cd2f199ec57caab46cbc": "Ybodychange",
    "2a25402de0a12ca41d85dc95fa365dbd70a4a086": "Ybodychange",
    "3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99": "Ybodychange",
    "7db7620c3656c89b70868e584445248838795233": "Ybodychange",
    "b3be24742353f7b5880fa8229a20ed0b19058cac": "Ybodychange",
    "801a33d367041ad1752ddfcae5348485ca928c25": "Ybodychange",
    "9c168866ffbb349d56501d11801f0418bdee3596": "Ybodychange",
    "3f4a05fde3a3ef756809d0528e78031f46554fc9": "Ybodychange",
    "cd47727ce491d6bb1984ac1f6934080abc608c90": "Ybodychange",
    "3bcfc2946991975e804c8c00aad550aa0610db07": "Ybodychange",
    "de005c68fdd010c22d0cab95729a07f8dc51c9e3": "Ybodychange",
    "cbec18af6028105cfa5261c6176c29ac210140bc": "Ybodychange",
    "f7f7e0af7545e060f6508c7fe07b858fd58ebc3b": "Ybodychange",
    "da627b843fe81fa0fe52a046c1be8595630e9ae7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a639ee9275e672ca21320f56f62f1648d24aa140": {
      "type": "Yannotationchange",
      "commitMessage": "Resolved errorprone MissingOverride warnings #2206\n\n`@Override` was added to methods which were missing the annotation #2206\n\nSigned-off-by: Lachlan Roberts \u003clachlan@webtide.com\u003e\n",
      "commitDate": "2018/3/1 上午10:59",
      "commitName": "a639ee9275e672ca21320f56f62f1648d24aa140",
      "commitAuthor": "Lachlan Roberts",
      "commitDateOld": "2018/1/9 下午11:37",
      "commitNameOld": "41ed9f29f41263c9facede20bddfaafa669b43c5",
      "commitAuthorOld": "",
      "daysBetweenCommits": 50.47,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n            if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        } else\n            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    synchronized (this) {\n        if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n            _servlet \u003d new SingleThreadedWrapper();\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 310,
      "functionName": "doStart",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,60 +1,61 @@\n+@Override\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n         if (!StringUtil.isBlank(precompiled)) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n             if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                 setClassName(jsp.getClassName());\n             } else {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n                         LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n                     setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         } else\n             LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     synchronized (this) {\n         if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n             _servlet \u003d new SingleThreadedWrapper();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1841 reduce ServletHolder contention\n",
      "commitDate": "2017/9/26 下午2:40",
      "commitName": "a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2017/9/23 上午6:47",
      "commitNameOld": "86c6caf608992db094b27b29b75de034f31fe94d",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 3.33,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n            if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        } else\n            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    synchronized (this) {\n        if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n            _servlet \u003d new SingleThreadedWrapper();\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 307,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,60 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n         if (!StringUtil.isBlank(precompiled)) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n             if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                 setClassName(jsp.getClassName());\n             } else {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n                         LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n                     setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         } else\n             LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n-    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n-        _servlet \u003d new SingleThreadedWrapper();\n+    synchronized (this) {\n+        if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n+            _servlet \u003d new SingleThreadedWrapper();\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "edfd05dd9c9be4af1c61b30924d10725f8a7ec55": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1268\n\nAdd unit tests, tweak log and error messages, fix bug.\n",
      "commitDate": "2017/1/19 上午10:49",
      "commitName": "edfd05dd9c9be4af1c61b30924d10725f8a7ec55",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2017/1/18 下午12:16",
      "commitNameOld": "69afe33b820401cef1e08fcb5911a025b29a4487",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n            if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        } else\n            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 308,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,58 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n         if (!StringUtil.isBlank(precompiled)) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n             ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n             if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                 setClassName(jsp.getClassName());\n             } else {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n+                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n                     setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n-        }\n+        } else\n+            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "69afe33b820401cef1e08fcb5911a025b29a4487": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1268\n",
      "commitDate": "2017/1/18 下午12:16",
      "commitName": "69afe33b820401cef1e08fcb5911a025b29a4487",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2016/11/2 下午2:32",
      "commitNameOld": "8461cc07b3e64e6f9e56d58a2a8f955bd734240f",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 76.91,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n            if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 308,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n-        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n-        if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n+        if (!StringUtil.isBlank(precompiled)) {\n             if (LOG.isDebugEnabled())\n-                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n-            setClassName(jsp.getClassName());\n-        } else {\n-            if (getClassName() \u003d\u003d null) {\n+                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n+            ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n+            if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+                setClassName(jsp.getClassName());\n+            } else {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n                         LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n                     setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         }\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6097123af68784a0186337b2e01a8025d7d13d25": {
      "type": "Ybodychange",
      "commitMessage": "460176  When checking for precompiled jsp, ensure classname is present\n",
      "commitDate": "2015/2/18 上午8:05",
      "commitName": "6097123af68784a0186337b2e01a8025d7d13d25",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2015/1/23 下午8:59",
      "commitNameOld": "ae47edb8a785aedc469482667d1aacdf2aefeae2",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 25.46,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n        if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() \u003d\u003d null) {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 285,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n         ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n-        if (jsp !\u003d null) {\n+        if (jsp !\u003d null \u0026\u0026 jsp.getClassName() !\u003d null) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n             setClassName(jsp.getClassName());\n         } else {\n             if (getClassName() \u003d\u003d null) {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n                         LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n                     setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         }\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "49a32eb1b0da23229441cd2f199ec57caab46cbc": {
      "type": "Ybodychange",
      "commitMessage": "444124  JSP include with \u003cservlet\u003e\u003cjsp-file\u003e can cause infinite recursion\n",
      "commitDate": "2014/9/23 下午5:33",
      "commitName": "49a32eb1b0da23229441cd2f199ec57caab46cbc",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2014/7/23 下午2:53",
      "commitNameOld": "fa3d7d0f7e02dee5285decb7786ab2575875ec84",
      "commitAuthorOld": "",
      "daysBetweenCommits": 62.11,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n        if (jsp !\u003d null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() \u003d\u003d null) {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 286,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,57 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n         ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n         if (jsp !\u003d null) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n             setClassName(jsp.getClassName());\n         } else {\n             if (getClassName() \u003d\u003d null) {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n-                    if (_initOnStartup)\n-                        setInitParameter(\"jspFile\", _forcedPath);\n+                    setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         }\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2a25402de0a12ca41d85dc95fa365dbd70a4a086": {
      "type": "Ybodychange",
      "commitMessage": "444124  JSP include with \u003cservlet\u003e\u003cjsp-file\u003e can cause infinite recursion\n",
      "commitDate": "2014/9/18 下午4:02",
      "commitName": "2a25402de0a12ca41d85dc95fa365dbd70a4a086",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2014/7/23 下午2:49",
      "commitNameOld": "3a6879d3e8efb895bf27803735785428f7ed3659",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 57.05,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n        if (jsp !\u003d null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() \u003d\u003d null) {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 285,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,57 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n         ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n         if (jsp !\u003d null) {\n             if (LOG.isDebugEnabled())\n                 LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n             setClassName(jsp.getClassName());\n         } else {\n             if (getClassName() \u003d\u003d null) {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n-                    if (_initOnStartup)\n-                        setInitParameter(\"jspFile\", _forcedPath);\n+                    setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         }\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99": {
      "type": "Ybodychange",
      "commitMessage": "Guarded calls to LOG.debug() with if (LOG.isDebugEnabled()) to reduce allocation of varargs Object[].\n",
      "commitDate": "2014/6/25 下午6:26",
      "commitName": "3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/5/13 下午5:21",
      "commitNameOld": "fb2010177c55c6c144e1e52dd9aa1321b534e089",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 43.05,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n        if (jsp !\u003d null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() \u003d\u003d null) {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    if (_initOnStartup)\n                        setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 280,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,58 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n         String precompiled \u003d getClassNameForJsp(_forcedPath);\n-        LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n         ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n         if (jsp !\u003d null) {\n-            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n             setClassName(jsp.getClassName());\n         } else {\n             if (getClassName() \u003d\u003d null) {\n                 jsp \u003d getServletHandler().getServlet(\"jsp\");\n                 if (jsp !\u003d null) {\n-                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                     setClassName(jsp.getClassName());\n                     for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                         if (!_initParams.containsKey(entry.getKey()))\n                             setInitParameter(entry.getKey(), entry.getValue());\n                     }\n                     if (_initOnStartup)\n                         setInitParameter(\"jspFile\", _forcedPath);\n                 }\n             }\n         }\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7db7620c3656c89b70868e584445248838795233": {
      "type": "Ybodychange",
      "commitMessage": "367680 jsp-file with load-on-startup not precompiled\n",
      "commitDate": "2014/5/7 上午3:22",
      "commitName": "7db7620c3656c89b70868e584445248838795233",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2014/3/14 上午10:07",
      "commitNameOld": "b3be24742353f7b5880fa8229a20ed0b19058cac",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 53.72,
      "commitsBetweenForRepo": 239,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d getClassNameForJsp(_forcedPath);\n        LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n        if (jsp !\u003d null) {\n            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() \u003d\u003d null) {\n                jsp \u003d getServletHandler().getServlet(\"jsp\");\n                if (jsp !\u003d null) {\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    if (_initOnStartup)\n                        setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 280,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,55 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     if (_forcedPath !\u003d null) {\n-        String precompiled \u003d \"org.apache.jsp\" + _forcedPath.replace(\u0027.\u0027, \u0027_\u0027).replace(\u0027/\u0027, \u0027.\u0027);\n+        String precompiled \u003d getClassNameForJsp(_forcedPath);\n+        LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n         ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n         if (jsp !\u003d null) {\n             LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n             setClassName(jsp.getClassName());\n         } else {\n-            jsp \u003d getServletHandler().getServlet(\"jsp\");\n-            if (jsp !\u003d null) {\n-                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n-                setClassName(jsp.getClassName());\n+            if (getClassName() \u003d\u003d null) {\n+                jsp \u003d getServletHandler().getServlet(\"jsp\");\n+                if (jsp !\u003d null) {\n+                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+                    setClassName(jsp.getClassName());\n+                    for (Map.Entry\u003cString, String\u003e entry : jsp.getInitParameters().entrySet()) {\n+                        if (!_initParams.containsKey(entry.getKey()))\n+                            setInitParameter(entry.getKey(), entry.getValue());\n+                    }\n+                    if (_initOnStartup)\n+                        setInitParameter(\"jspFile\", _forcedPath);\n+                }\n             }\n         }\n     }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b3be24742353f7b5880fa8229a20ed0b19058cac": {
      "type": "Ybodychange",
      "commitMessage": "merged quickstart changes\n",
      "commitDate": "2014/3/14 上午10:07",
      "commitName": "b3be24742353f7b5880fa8229a20ed0b19058cac",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2014/2/13 上午9:31",
      "commitNameOld": "18e19260ff2a0f99b7c935177287c77aa2c5588d",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 29.02,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath !\u003d null) {\n        String precompiled \u003d \"org.apache.jsp\" + _forcedPath.replace(\u0027.\u0027, \u0027_\u0027).replace(\u0027/\u0027, \u0027.\u0027);\n        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n        if (jsp !\u003d null) {\n            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            jsp \u003d getServletHandler().getServlet(\"jsp\");\n            if (jsp !\u003d null) {\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 277,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,46 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n+    if (_forcedPath !\u003d null) {\n+        String precompiled \u003d \"org.apache.jsp\" + _forcedPath.replace(\u0027.\u0027, \u0027_\u0027).replace(\u0027/\u0027, \u0027.\u0027);\n+        ServletHolder jsp \u003d getServletHandler().getServlet(precompiled);\n+        if (jsp !\u003d null) {\n+            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+            setClassName(jsp.getClassName());\n+        } else {\n+            jsp \u003d getServletHandler().getServlet(\"jsp\");\n+            if (jsp !\u003d null) {\n+                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n+                setClassName(jsp.getClassName());\n+            }\n+        }\n+    }\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "801a33d367041ad1752ddfcae5348485ca928c25": {
      "type": "Ybodychange",
      "commitMessage": "424303  @ServletSecurity not applied on non load-on-startup servlets\n",
      "commitDate": "2013/12/19 下午12:23",
      "commitName": "801a33d367041ad1752ddfcae5348485ca928c25",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2013/12/12 上午11:44",
      "commitNameOld": "dfe5889bc4b006054e550ab85c537857e4d66b6e",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 283,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,32 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (_servletHandler.isStartWithUnavailable()) {\n             LOG.ignore(ue);\n             return;\n         } else\n             throw ue;\n     }\n+    checkInitOnStartup();\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9c168866ffbb349d56501d11801f0418bdee3596": {
      "type": "Ybodychange",
      "commitMessage": "407931 Add toggle for failing on servlet availability\n",
      "commitDate": "2013/5/16 上午8:27",
      "commitName": "9c168866ffbb349d56501d11801f0418bdee3596",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2013/5/3 下午2:20",
      "commitNameOld": "dfbef2db05da1a68e774f250572c3b670ee651e7",
      "commitAuthorOld": "",
      "daysBetweenCommits": 12.75,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 285,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,31 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n-        throw ue;\n+        if (_servletHandler.isStartWithUnavailable()) {\n+            LOG.ignore(ue);\n+            return;\n+        } else\n+            throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n-        if (!_servletHandler.isStartWithUnavailable())\n+        if (_servletHandler.isStartWithUnavailable()) {\n+            LOG.ignore(ue);\n+            return;\n+        } else\n             throw ue;\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3f4a05fde3a3ef756809d0528e78031f46554fc9": {
      "type": "Ybodychange",
      "commitMessage": "407931 Add toggle for failing on servlet availability\n",
      "commitDate": "2013/5/16 上午6:25",
      "commitName": "3f4a05fde3a3ef756809d0528e78031f46554fc9",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2013/5/3 下午2:18",
      "commitNameOld": "f4ee8ba48d77b7e571d21a52838a166b53530355",
      "commitAuthorOld": "",
      "daysBetweenCommits": 12.67,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n    if (_extInstance || _initOnStartup) {\n        try {\n            initServlet();\n        } catch (Exception e) {\n            if (_servletHandler.isStartWithUnavailable())\n                LOG.ignore(e);\n            else\n                throw e;\n        }\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 289,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,41 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n-        throw ue;\n+        if (_servletHandler.isStartWithUnavailable()) {\n+            LOG.ignore(ue);\n+            return;\n+        } else\n+            throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n-        if (!_servletHandler.isStartWithUnavailable())\n+        if (_servletHandler.isStartWithUnavailable()) {\n+            LOG.ignore(ue);\n+            return;\n+        } else\n             throw ue;\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n     if (_extInstance || _initOnStartup) {\n         try {\n             initServlet();\n         } catch (Exception e) {\n             if (_servletHandler.isStartWithUnavailable())\n                 LOG.ignore(e);\n             else\n                 throw e;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cd47727ce491d6bb1984ac1f6934080abc608c90": {
      "type": "Ybodychange",
      "commitMessage": "402982 Premature initialization of Servlets\n",
      "commitDate": "2013/3/14 下午12:28",
      "commitName": "cd47727ce491d6bb1984ac1f6934080abc608c90",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2013/1/12 上午7:04",
      "commitNameOld": "e1c516c7d1937b8604864dfe57236877ef5be4ea",
      "commitAuthorOld": "",
      "daysBetweenCommits": 61.22,
      "commitsBetweenForRepo": 335,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (!_servletHandler.isStartWithUnavailable())\n            throw ue;\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 285,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,24 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     try {\n         super.doStart();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         throw ue;\n     }\n     try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n         if (!_servletHandler.isStartWithUnavailable())\n             throw ue;\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n-    if (_extInstance || _initOnStartup) {\n-        try {\n-            initServlet();\n-        } catch (Exception e) {\n-            if (_servletHandler.isStartWithUnavailable())\n-                LOG.ignore(e);\n-            else\n-                throw e;\n-        }\n-    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bcfc2946991975e804c8c00aad550aa0610db07": {
      "type": "Ybodychange",
      "commitMessage": "384280 Implement preliminary ServletRegistrations\n",
      "commitDate": "2012/7/12 下午2:27",
      "commitName": "3bcfc2946991975e804c8c00aad550aa0610db07",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2012/7/4 下午11:11",
      "commitNameOld": "96fe2d6c3fc1337d359a9900f176363d8c775b6c",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (!_servletHandler.isStartWithUnavailable())\n            throw ue;\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n    if (_extInstance || _initOnStartup) {\n        try {\n            initServlet();\n        } catch (Exception e) {\n            if (_servletHandler.isStartWithUnavailable())\n                LOG.ignore(e);\n            else\n                throw e;\n        }\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 284,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,34 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     if (!_enabled)\n         return;\n     try {\n         super.doStart();\n+    } catch (UnavailableException ue) {\n+        makeUnavailable(ue);\n+        throw ue;\n+    }\n+    try {\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n+        if (!_servletHandler.isStartWithUnavailable())\n+            throw ue;\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n     if (_extInstance || _initOnStartup) {\n         try {\n             initServlet();\n         } catch (Exception e) {\n             if (_servletHandler.isStartWithUnavailable())\n                 LOG.ignore(e);\n             else\n                 throw e;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de005c68fdd010c22d0cab95729a07f8dc51c9e3": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Merge branch \u0027release-8\u0027\"\n\nThis reverts commit 9e72457941e98eb2ee1adf64f2bc53160b01e34d, reversing\nchanges made to df12605f0e3e549c07c96968eedfd382fd6f274e.\n",
      "commitDate": "2011/11/30 下午1:27",
      "commitName": "de005c68fdd010c22d0cab95729a07f8dc51c9e3",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2011/11/22 上午11:09",
      "commitNameOld": "cbec18af6028105cfa5261c6176c29ac210140bc",
      "commitAuthorOld": "Jan Bartel",
      "daysBetweenCommits": 8.1,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    try {\n        super.doStart();\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n    if (_extInstance || _initOnStartup) {\n        try {\n            initServlet();\n        } catch (Exception e) {\n            if (_servletHandler.isStartWithUnavailable())\n                LOG.ignore(e);\n            else\n                throw e;\n        }\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 237,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,25 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n-    if (!_enabled)\n-        return;\n     try {\n         super.doStart();\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n     if (_extInstance || _initOnStartup) {\n         try {\n             initServlet();\n         } catch (Exception e) {\n             if (_servletHandler.isStartWithUnavailable())\n                 LOG.ignore(e);\n             else\n                 throw e;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cbec18af6028105cfa5261c6176c29ac210140bc": {
      "type": "Ybodychange",
      "commitMessage": "364430 Support web.xml enabled state for servlets\n",
      "commitDate": "2011/11/22 上午11:09",
      "commitName": "cbec18af6028105cfa5261c6176c29ac210140bc",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2011/11/17 上午7:59",
      "commitNameOld": "127a5af8d7d9c10fdc1904ec94700e185bdd87b3",
      "commitAuthorOld": "",
      "daysBetweenCommits": 5.13,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    if (!_enabled)\n        return;\n    try {\n        super.doStart();\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n    if (_extInstance || _initOnStartup) {\n        try {\n            initServlet();\n        } catch (Exception e) {\n            if (_servletHandler.isStartWithUnavailable())\n                LOG.ignore(e);\n            else\n                throw e;\n        }\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 263,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,27 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n+    if (!_enabled)\n+        return;\n     try {\n         super.doStart();\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n     if (_extInstance || _initOnStartup) {\n         try {\n             initServlet();\n         } catch (Exception e) {\n             if (_servletHandler.isStartWithUnavailable())\n                 LOG.ignore(e);\n             else\n                 throw e;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f7f7e0af7545e060f6508c7fe07b858fd58ebc3b": {
      "type": "Ybodychange",
      "commitMessage": "293739 - Deprecate static Jetty Log usage in favor of named logs\n\n+ Finished conversion of jetty-security, jetty-server, jetty-servlet,\n  jetty-servlets, jetty-websocket\n",
      "commitDate": "2011/8/25 上午3:53",
      "commitName": "f7f7e0af7545e060f6508c7fe07b858fd58ebc3b",
      "commitAuthor": "Joakim Erdfelt",
      "commitDateOld": "2011/8/16 下午3:59",
      "commitNameOld": "ee1afa5e97d0a49dcb039ae576fdb5ad0242341b",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 8.5,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    try {\n        super.doStart();\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n    if (_extInstance || _initOnStartup) {\n        try {\n            initServlet();\n        } catch (Exception e) {\n            if (_servletHandler.isStartWithUnavailable())\n                LOG.ignore(e);\n            else\n                throw e;\n        }\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 238,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n public void doStart() throws Exception {\n     _unavailable \u003d 0;\n     try {\n         super.doStart();\n         checkServletType();\n     } catch (UnavailableException ue) {\n         makeUnavailable(ue);\n     }\n     _identityService \u003d _servletHandler.getIdentityService();\n     if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n         _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n     _config \u003d new Config();\n     if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n         _servlet \u003d new SingleThreadedWrapper();\n     if (_extInstance || _initOnStartup) {\n         try {\n             initServlet();\n         } catch (Exception e) {\n             if (_servletHandler.isStartWithUnavailable())\n-                Log.ignore(e);\n+                LOG.ignore(e);\n             else\n                 throw e;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "da627b843fe81fa0fe52a046c1be8595630e9ae7": {
      "type": "Yintroduced",
      "commitMessage": "jetty @ eclipse initial commit\n\ngit-svn-id: svn+ssh://dev.eclipse.org/svnroot/rt/org.eclipse.jetty/jetty/trunk@8 7e9141cc-0065-0410-87d8-b60c137991c4\n",
      "commitDate": "2009/3/25 上午5:07",
      "commitName": "da627b843fe81fa0fe52a046c1be8595630e9ae7",
      "commitAuthor": "Greg Wilkins",
      "diff": "@@ -0,0 +1,25 @@\n+public void doStart() throws Exception {\n+    _unavailable \u003d 0;\n+    try {\n+        super.doStart();\n+        checkServletType();\n+    } catch (UnavailableException ue) {\n+        makeUnavailable(ue);\n+    }\n+    _identityService \u003d _servletHandler.getIdentityService();\n+    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n+        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n+    _config \u003d new Config();\n+    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n+        _servlet \u003d new SingleThreadedWrapper();\n+    if (_extInstance || _initOnStartup) {\n+        try {\n+            initServlet();\n+        } catch (Exception e) {\n+            if (_servletHandler.isStartWithUnavailable())\n+                Log.ignore(e);\n+            else\n+                throw e;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void doStart() throws Exception {\n    _unavailable \u003d 0;\n    try {\n        super.doStart();\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n    }\n    _identityService \u003d _servletHandler.getIdentityService();\n    if (_identityService !\u003d null \u0026\u0026 _runAsRole !\u003d null)\n        _runAsToken \u003d _identityService.newRunAsToken(_runAsRole);\n    _config \u003d new Config();\n    if (_class !\u003d null \u0026\u0026 javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet \u003d new SingleThreadedWrapper();\n    if (_extInstance || _initOnStartup) {\n        try {\n            initServlet();\n        } catch (Exception e) {\n            if (_servletHandler.isStartWithUnavailable())\n                Log.ignore(e);\n            else\n                throw e;\n        }\n    }\n}",
      "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java",
      "functionStartLine": 219,
      "functionName": "doStart",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}