{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "CommonUtils.java",
  "functionName": "createPattern",
  "functionId": "createPattern___pattern-String__flags-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws IllegalArgumentException\n            if unable to create Pattern object.\n",
  "functionStartLine": 104,
  "functionEndLine": 112,
  "numCommitsSeen": 320,
  "timeTaken": 5189,
  "changeHistory": [
    "ce21086e087661553f3a774c38362327ee88996a",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
    "f2c6263e151e8a7300755b36fbb41511c0a0cca1",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5",
    "081c654df8d801f576506265681654a730cfc375",
    "97f0829897b9000236489295f89d57a77d8006b4",
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
    "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "e27489c7721909245ea5055eac3b9c7c659081f6",
    "b0db9beefa6e08f88e72dc2868767f7a9db62f51",
    "419d9243861ac99e80a7783547a51adf8b284817",
    "59222296258fecc02db44eeae1cb65b44b68c267",
    "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957",
    "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b",
    "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9",
    "0fd69594a4c3e82f92f93f0371791da66938f8c3"
  ],
  "changeHistoryShort": {
    "ce21086e087661553f3a774c38362327ee88996a": "Ymultichange(Ybodychange,Ydocchange)",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": "Ybodychange",
    "f2c6263e151e8a7300755b36fbb41511c0a0cca1": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ymultichange(Ymovefromfile,Ydocchange)",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": "Yfilerename",
    "081c654df8d801f576506265681654a730cfc375": "Yexceptionschange",
    "97f0829897b9000236489295f89d57a77d8006b4": "Ybodychange",
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c": "Ybodychange",
    "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04": "Ymovefromfile",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "e27489c7721909245ea5055eac3b9c7c659081f6": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Ydocchange)",
    "b0db9beefa6e08f88e72dc2868767f7a9db62f51": "Ybodychange",
    "419d9243861ac99e80a7783547a51adf8b284817": "Yexceptionschange",
    "59222296258fecc02db44eeae1cb65b44b68c267": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange)",
    "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957": "Ybodychange",
    "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b": "Ymovefromfile",
    "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9": "Ybodychange",
    "0fd69594a4c3e82f92f93f0371791da66938f8c3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce21086e087661553f3a774c38362327ee88996a": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Issue #3763: Try to avoid non-jdk runtime exceptions in code\n",
      "commitDate": "2017/2/27 上午11:25",
      "commitName": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthor": "Vladislav Lisetskii",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3763: Try to avoid non-jdk runtime exceptions in code\n",
          "commitDate": "2017/2/27 上午11:25",
          "commitName": "ce21086e087661553f3a774c38362327ee88996a",
          "commitAuthor": "Vladislav Lisetskii",
          "commitDateOld": "2017/1/27 下午10:31",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 30.54,
          "commitsBetweenForRepo": 104,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern, int flags) {\n    try {\n        return Pattern.compile(pattern, flags);\n    } catch (final PatternSyntaxException ex) {\n        throw new IllegalArgumentException(\"Failed to initialise regular expression \" + pattern, ex);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 94,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws IllegalArgumentException\n            if unable to create Pattern object.\n",
          "diff": "@@ -1,7 +1,7 @@\n public static Pattern createPattern(String pattern, int flags) {\n     try {\n         return Pattern.compile(pattern, flags);\n     } catch (final PatternSyntaxException ex) {\n-        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, ex);\n+        throw new IllegalArgumentException(\"Failed to initialise regular expression \" + pattern, ex);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Issue #3763: Try to avoid non-jdk runtime exceptions in code\n",
          "commitDate": "2017/2/27 上午11:25",
          "commitName": "ce21086e087661553f3a774c38362327ee88996a",
          "commitAuthor": "Vladislav Lisetskii",
          "commitDateOld": "2017/1/27 下午10:31",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 30.54,
          "commitsBetweenForRepo": 104,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern, int flags) {\n    try {\n        return Pattern.compile(pattern, flags);\n    } catch (final PatternSyntaxException ex) {\n        throw new IllegalArgumentException(\"Failed to initialise regular expression \" + pattern, ex);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 94,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws IllegalArgumentException\n            if unable to create Pattern object.\n",
          "diff": "@@ -1,7 +1,7 @@\n public static Pattern createPattern(String pattern, int flags) {\n     try {\n         return Pattern.compile(pattern, flags);\n     } catch (final PatternSyntaxException ex) {\n-        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, ex);\n+        throw new IllegalArgumentException(\"Failed to initialise regular expression \" + pattern, ex);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
            "newValue": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws IllegalArgumentException\n            if unable to create Pattern object.\n"
          }
        }
      ]
    },
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2616: Fix CatchParameterName check violations in Checkstyle code\n",
      "commitDate": "2015/12/4 上午7:16",
      "commitName": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/10/30 下午12:12",
      "commitNameOld": "f2c6263e151e8a7300755b36fbb41511c0a0cca1",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 34.79,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String pattern, int flags) {\n    try {\n        return Pattern.compile(pattern, flags);\n    } catch (final PatternSyntaxException ex) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, ex);\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
      "functionStartLine": 201,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
      "diff": "@@ -1,7 +1,7 @@\n public static Pattern createPattern(String pattern, int flags) {\n     try {\n         return Pattern.compile(pattern, flags);\n-    } catch (final PatternSyntaxException e) {\n-        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n+    } catch (final PatternSyntaxException ex) {\n+        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, ex);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f2c6263e151e8a7300755b36fbb41511c0a0cca1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Issue #2451: removed excess hierarchy from RegexpCheck",
      "commitDate": "2015/10/30 下午12:12",
      "commitName": "f2c6263e151e8a7300755b36fbb41511c0a0cca1",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #2451: removed excess hierarchy from RegexpCheck",
          "commitDate": "2015/10/30 下午12:12",
          "commitName": "f2c6263e151e8a7300755b36fbb41511c0a0cca1",
          "commitAuthor": "rnveach",
          "commitDateOld": "2015/10/14 下午8:52",
          "commitNameOld": "d2551035044a845fd1b3e345f2470875a43a8991",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 15.64,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern, int flags) {\n    try {\n        return Pattern.compile(pattern, flags);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 201,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
          "diff": "@@ -1,7 +1,7 @@\n-public static Pattern createPattern(String pattern) {\n+public static Pattern createPattern(String pattern, int flags) {\n     try {\n-        return Pattern.compile(pattern);\n+        return Pattern.compile(pattern, flags);\n     } catch (final PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String]",
            "newValue": "[pattern-String, flags-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2451: removed excess hierarchy from RegexpCheck",
          "commitDate": "2015/10/30 下午12:12",
          "commitName": "f2c6263e151e8a7300755b36fbb41511c0a0cca1",
          "commitAuthor": "rnveach",
          "commitDateOld": "2015/10/14 下午8:52",
          "commitNameOld": "d2551035044a845fd1b3e345f2470875a43a8991",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 15.64,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern, int flags) {\n    try {\n        return Pattern.compile(pattern, flags);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 201,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
          "diff": "@@ -1,7 +1,7 @@\n-public static Pattern createPattern(String pattern) {\n+public static Pattern createPattern(String pattern, int flags) {\n     try {\n-        return Pattern.compile(pattern);\n+        return Pattern.compile(pattern, flags);\n     } catch (final PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Issue #2451: removed excess hierarchy from RegexpCheck",
          "commitDate": "2015/10/30 下午12:12",
          "commitName": "f2c6263e151e8a7300755b36fbb41511c0a0cca1",
          "commitAuthor": "rnveach",
          "commitDateOld": "2015/10/14 下午8:52",
          "commitNameOld": "d2551035044a845fd1b3e345f2470875a43a8991",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 15.64,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern, int flags) {\n    try {\n        return Pattern.compile(pattern, flags);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 201,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
          "diff": "@@ -1,7 +1,7 @@\n-public static Pattern createPattern(String pattern) {\n+public static Pattern createPattern(String pattern, int flags) {\n     try {\n-        return Pattern.compile(pattern);\n+        return Pattern.compile(pattern, flags);\n     } catch (final PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
            "newValue": "Helper method to create a regular expression with a specific flags.\n\n@param pattern the pattern to match\n@param flags the flags to set\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n"
          }
        }
      ]
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ymultichange(Ymovefromfile,Ydocchange)",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "2015/8/27 下午8:17",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
          "commitDate": "2015/8/27 下午8:17",
          "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
          "commitAuthor": "Ilja Dubinin",
          "commitDateOld": "2015/8/27 下午8:17",
          "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern) {\n    try {\n        return Pattern.compile(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 176,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/Utils.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
            "oldMethodName": "createPattern",
            "newMethodName": "createPattern"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
          "commitDate": "2015/8/27 下午8:17",
          "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
          "commitAuthor": "Ilja Dubinin",
          "commitDateOld": "2015/8/27 下午8:17",
          "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern) {\n    try {\n        return Pattern.compile(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "functionStartLine": 176,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
            "newValue": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException\n            if unable to create Pattern object.\n"
          }
        }
      ]
    },
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": {
      "type": "Yfilerename",
      "commitMessage": "Utils classes have been moved to utils package. Issue #1898\n",
      "commitDate": "2015/8/27 下午8:17",
      "commitName": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "2015/8/27 上午9:08",
      "commitNameOld": "f6113bb56d695719a8803274effb3596cb82120f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String pattern) {\n    try {\n        return Pattern.compile(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/Utils.java",
      "functionStartLine": 224,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/Utils.java"
      }
    },
    "081c654df8d801f576506265681654a730cfc375": {
      "type": "Yexceptionschange",
      "commitMessage": "Remove superfluous runtime exception declarations. #46\n",
      "commitDate": "2015/8/2 上午4:24",
      "commitName": "081c654df8d801f576506265681654a730cfc375",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/7/19 下午10:15",
      "commitNameOld": "41d538f9be41a0561ca7a28b159c034bcd3810e8",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 13.26,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String pattern) {\n    try {\n        return Pattern.compile(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "functionStartLine": 218,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "@@ -1,7 +1,7 @@\n-public static Pattern createPattern(String pattern) throws ConversionException {\n+public static Pattern createPattern(String pattern) {\n     try {\n         return Pattern.compile(pattern);\n     } catch (final PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[ConversionException]",
        "newValue": "[]"
      }
    },
    "97f0829897b9000236489295f89d57a77d8006b4": {
      "type": "Ybodychange",
      "commitMessage": "Added test method for Utils.isPatternValid method\n\nPull #861\n",
      "commitDate": "2015/3/28 上午6:34",
      "commitName": "97f0829897b9000236489295f89d57a77d8006b4",
      "commitAuthor": "Damian Szczepanik",
      "commitDateOld": "2015/3/28 上午5:39",
      "commitNameOld": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthorOld": "Damian Szczepanik",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String pattern) throws ConversionException {\n    try {\n        return Pattern.compile(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "functionStartLine": 179,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "@@ -1,7 +1,7 @@\n public static Pattern createPattern(String pattern) throws ConversionException {\n     try {\n         return Pattern.compile(pattern);\n     } catch (final PatternSyntaxException e) {\n-        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n+        throw new ConversionException(\"Failed to initialise regular expression \" + pattern, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c": {
      "type": "Ybodychange",
      "commitMessage": "Deleted cache from Utils class + unified setters with patterns\n\nIssue #845\n",
      "commitDate": "2015/3/28 上午5:39",
      "commitName": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthor": "Damian Szczepanik",
      "commitDateOld": "2015/3/27 上午5:15",
      "commitNameOld": "b771841de7524abd86473664a8d6fc1409398c3a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String pattern) throws ConversionException {\n    try {\n        return Pattern.compile(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n    }\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "functionStartLine": 179,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "@@ -1,9 +1,7 @@\n public static Pattern createPattern(String pattern) throws ConversionException {\n-    Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getPattern(pattern);\n+        return Pattern.compile(pattern);\n     } catch (final PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n     }\n-    return retVal;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04": {
      "type": "Ymovefromfile",
      "commitMessage": "Moved all methods from checkstyle.api.utils to checkstyle.utils, issue #661\n",
      "commitDate": "2015/3/16 上午5:22",
      "commitName": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthor": "alexkravin",
      "commitDateOld": "2015/3/16 上午5:17",
      "commitNameOld": "9c4cd707e349660cfe32f095a2a96a0a0f854e67",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String pattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n    }\n    return retVal;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "functionStartLine": 265,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
        "oldMethodName": "createPattern",
        "newMethodName": "createPattern"
      }
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": "2015/1/19 下午10:19",
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "2015/1/19 下午10:19",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2014/11/7 下午1:25",
          "commitNameOld": "ae9d1d6217ad7dbc2e6f1faa890298c68726dcb4",
          "commitAuthorOld": "Vladimir Sitnikov",
          "daysBetweenCommits": 73.37,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n    }\n    return retVal;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 230,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static Pattern createPattern(String aPattern) throws ConversionException {\n+public static Pattern createPattern(String pattern) throws ConversionException {\n     Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getPattern(aPattern);\n+        retVal \u003d getPattern(pattern);\n     } catch (final PatternSyntaxException e) {\n-        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[aPattern-String]",
            "newValue": "[pattern-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "2015/1/19 下午10:19",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2014/11/7 下午1:25",
          "commitNameOld": "ae9d1d6217ad7dbc2e6f1faa890298c68726dcb4",
          "commitAuthorOld": "Vladimir Sitnikov",
          "daysBetweenCommits": 73.37,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n    }\n    return retVal;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 230,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static Pattern createPattern(String aPattern) throws ConversionException {\n+public static Pattern createPattern(String pattern) throws ConversionException {\n     Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getPattern(aPattern);\n+        retVal \u003d getPattern(pattern);\n     } catch (final PatternSyntaxException e) {\n-        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "2015/1/19 下午10:19",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2014/11/7 下午1:25",
          "commitNameOld": "ae9d1d6217ad7dbc2e6f1faa890298c68726dcb4",
          "commitAuthorOld": "Vladimir Sitnikov",
          "daysBetweenCommits": 73.37,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String pattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(pattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n    }\n    return retVal;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 230,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static Pattern createPattern(String aPattern) throws ConversionException {\n+public static Pattern createPattern(String pattern) throws ConversionException {\n     Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getPattern(aPattern);\n+        retVal \u003d getPattern(pattern);\n     } catch (final PatternSyntaxException e) {\n-        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + pattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
            "newValue": "Helper method to create a regular expression.\n\n@param pattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n"
          }
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "2014/3/5 上午1:18",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "2014/2/27 下午2:35",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String aPattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(aPattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java",
      "functionStartLine": 229,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java"
      }
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "2006/7/7 上午11:44",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2006/6/17 下午10:18",
      "commitNameOld": "81b52e27c5077f9a4f426d32b0e39a785052c715",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 19.56,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Pattern createPattern(String aPattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(aPattern);\n    } catch (final PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
      "functionStartLine": 231,
      "functionName": "createPattern",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
      "diff": "@@ -1,9 +1,9 @@\n public static Pattern createPattern(String aPattern) throws ConversionException {\n     Pattern retVal \u003d null;\n     try {\n         retVal \u003d getPattern(aPattern);\n-    } catch (PatternSyntaxException e) {\n+    } catch (final PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e27489c7721909245ea5055eac3b9c7c659081f6": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
      "commitDate": "2005/5/12 上午12:48",
      "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
          "commitDate": "2005/5/12 上午12:48",
          "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "2005/1/9 下午6:50",
          "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 122.25,
          "commitsBetweenForRepo": 118,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String aPattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(aPattern);\n    } catch (PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 215,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static RE createRE(String aPattern) throws ConversionException {\n-    RE retVal \u003d null;\n+public static Pattern createPattern(String aPattern) throws ConversionException {\n+    Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getRE(aPattern);\n-    } catch (RESyntaxException e) {\n+        retVal \u003d getPattern(aPattern);\n+    } catch (PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "createRE",
            "newValue": "createPattern"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
          "commitDate": "2005/5/12 上午12:48",
          "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "2005/1/9 下午6:50",
          "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 122.25,
          "commitsBetweenForRepo": 118,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String aPattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(aPattern);\n    } catch (PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 215,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static RE createRE(String aPattern) throws ConversionException {\n-    RE retVal \u003d null;\n+public static Pattern createPattern(String aPattern) throws ConversionException {\n+    Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getRE(aPattern);\n-    } catch (RESyntaxException e) {\n+        retVal \u003d getPattern(aPattern);\n+    } catch (PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "RE",
            "newValue": "Pattern"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
          "commitDate": "2005/5/12 上午12:48",
          "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "2005/1/9 下午6:50",
          "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 122.25,
          "commitsBetweenForRepo": 118,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String aPattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(aPattern);\n    } catch (PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 215,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static RE createRE(String aPattern) throws ConversionException {\n-    RE retVal \u003d null;\n+public static Pattern createPattern(String aPattern) throws ConversionException {\n+    Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getRE(aPattern);\n-    } catch (RESyntaxException e) {\n+        retVal \u003d getPattern(aPattern);\n+    } catch (PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
          "commitDate": "2005/5/12 上午12:48",
          "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "2005/1/9 下午6:50",
          "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 122.25,
          "commitsBetweenForRepo": 118,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Pattern createPattern(String aPattern) throws ConversionException {\n    Pattern retVal \u003d null;\n    try {\n        retVal \u003d getPattern(aPattern);\n    } catch (PatternSyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 215,
          "functionName": "createPattern",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n",
          "diff": "@@ -1,9 +1,9 @@\n-public static RE createRE(String aPattern) throws ConversionException {\n-    RE retVal \u003d null;\n+public static Pattern createPattern(String aPattern) throws ConversionException {\n+    Pattern retVal \u003d null;\n     try {\n-        retVal \u003d getRE(aPattern);\n-    } catch (RESyntaxException e) {\n+        retVal \u003d getPattern(aPattern);\n+    } catch (PatternSyntaxException e) {\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
            "newValue": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create Pattern object.\n"
          }
        }
      ]
    },
    "b0db9beefa6e08f88e72dc2868767f7a9db62f51": {
      "type": "Ybodychange",
      "commitMessage": "removed (old debugging?) output code.\n",
      "commitDate": "2002/12/8 下午7:58",
      "commitName": "b0db9beefa6e08f88e72dc2868767f7a9db62f51",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "2002/12/8 下午1:11",
      "commitNameOld": "b2704f029aacdb186f889377b8d051030498f2cc",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static RE createRE(String aPattern) throws ConversionException {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d getRE(aPattern);\n    } catch (RESyntaxException e) {\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
      "functionStartLine": 163,
      "functionName": "createRE",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
      "diff": "@@ -1,11 +1,9 @@\n public static RE createRE(String aPattern) throws ConversionException {\n     RE retVal \u003d null;\n     try {\n         retVal \u003d getRE(aPattern);\n     } catch (RESyntaxException e) {\n-        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n-        e.printStackTrace(System.out);\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "419d9243861ac99e80a7783547a51adf8b284817": {
      "type": "Yexceptionschange",
      "commitMessage": "corrected checkstyle errors\n",
      "commitDate": "2002/12/6 下午7:23",
      "commitName": "419d9243861ac99e80a7783547a51adf8b284817",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "2002/12/6 下午6:38",
      "commitNameOld": "302031989566e096adc3e87c935ab47202a7ce3e",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static RE createRE(String aPattern) throws ConversionException {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d getRE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
      "functionStartLine": 176,
      "functionName": "createRE",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
      "diff": "@@ -1,11 +1,11 @@\n-public static RE createRE(String aPattern) {\n+public static RE createRE(String aPattern) throws ConversionException {\n     RE retVal \u003d null;\n     try {\n         retVal \u003d getRE(aPattern);\n     } catch (RESyntaxException e) {\n         System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n         e.printStackTrace(System.out);\n         throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[ConversionException]"
      }
    },
    "59222296258fecc02db44eeae1cb65b44b68c267": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Implemented the first Javadoc test. Still need to add some Javadoc (no pun\nintended) and also refactor the utility methods.\n",
      "commitDate": "2002/10/24 下午10:33",
      "commitName": "59222296258fecc02db44eeae1cb65b44b68c267",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Implemented the first Javadoc test. Still need to add some Javadoc (no pun\nintended) and also refactor the utility methods.\n",
          "commitDate": "2002/10/24 下午10:33",
          "commitName": "59222296258fecc02db44eeae1cb65b44b68c267",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2002/10/24 下午9:34",
          "commitNameOld": "7af9e82fc16545a8153b529fba91df0fb310e2e6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d getRE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 248,
          "functionName": "createRE",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static RE createRE(String aPattern) {\n+public static RE createRE(String aPattern) {\n     RE retVal \u003d null;\n     try {\n-        retVal \u003d Utils.getRE(aPattern);\n+        retVal \u003d getRE(aPattern);\n     } catch (RESyntaxException e) {\n         System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n         e.printStackTrace(System.out);\n-        System.exit(1);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
            "oldMethodName": "createRE",
            "newMethodName": "createRE"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Implemented the first Javadoc test. Still need to add some Javadoc (no pun\nintended) and also refactor the utility methods.\n",
          "commitDate": "2002/10/24 下午10:33",
          "commitName": "59222296258fecc02db44eeae1cb65b44b68c267",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2002/10/24 下午9:34",
          "commitNameOld": "7af9e82fc16545a8153b529fba91df0fb310e2e6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d getRE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 248,
          "functionName": "createRE",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static RE createRE(String aPattern) {\n+public static RE createRE(String aPattern) {\n     RE retVal \u003d null;\n     try {\n-        retVal \u003d Utils.getRE(aPattern);\n+        retVal \u003d getRE(aPattern);\n     } catch (RESyntaxException e) {\n         System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n         e.printStackTrace(System.out);\n-        System.exit(1);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented the first Javadoc test. Still need to add some Javadoc (no pun\nintended) and also refactor the utility methods.\n",
          "commitDate": "2002/10/24 下午10:33",
          "commitName": "59222296258fecc02db44eeae1cb65b44b68c267",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2002/10/24 下午9:34",
          "commitNameOld": "7af9e82fc16545a8153b529fba91df0fb310e2e6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d getRE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 248,
          "functionName": "createRE",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static RE createRE(String aPattern) {\n+public static RE createRE(String aPattern) {\n     RE retVal \u003d null;\n     try {\n-        retVal \u003d Utils.getRE(aPattern);\n+        retVal \u003d getRE(aPattern);\n     } catch (RESyntaxException e) {\n         System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n         e.printStackTrace(System.out);\n-        System.exit(1);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implemented the first Javadoc test. Still need to add some Javadoc (no pun\nintended) and also refactor the utility methods.\n",
          "commitDate": "2002/10/24 下午10:33",
          "commitName": "59222296258fecc02db44eeae1cb65b44b68c267",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2002/10/24 下午9:34",
          "commitNameOld": "7af9e82fc16545a8153b529fba91df0fb310e2e6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d getRE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n    }\n    return retVal;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java",
          "functionStartLine": 248,
          "functionName": "createRE",
          "functionAnnotation": "",
          "functionDoc": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n",
          "diff": "@@ -1,11 +1,11 @@\n-private static RE createRE(String aPattern) {\n+public static RE createRE(String aPattern) {\n     RE retVal \u003d null;\n     try {\n-        retVal \u003d Utils.getRE(aPattern);\n+        retVal \u003d getRE(aPattern);\n     } catch (RESyntaxException e) {\n         System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n         e.printStackTrace(System.out);\n-        System.exit(1);\n+        throw new ConversionException(\"Failed to initialise regexp expression \" + aPattern, e);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method to create a regular expression. Will exit if unable to\ncreate the object.\n\n@param aPattern the pattern to match\n@return a created regexp object\n",
            "newValue": "Helper method to create a regular expression.\n\n@param aPattern the pattern to match\n@return a created regexp object\n@throws ConversionException if unable to create RE object.\n"
          }
        }
      ]
    },
    "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957": {
      "type": "Ybodychange",
      "commitMessage": "Implemented a factory to create RE objects. Also improved error handling. This\nmay improve performance?\n",
      "commitDate": "2002/5/14 下午12:41",
      "commitName": "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/5/13 下午8:52",
      "commitNameOld": "fca8c918043974fcf6cc59e5d4161ada0b7c4c76",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d Utils.getRE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        System.exit(1);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java",
      "functionStartLine": 920,
      "functionName": "createRE",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression. Will exit if unable to\ncreate the object.\n\n@param aPattern the pattern to match\n@return a created regexp object\n",
      "diff": "@@ -1,11 +1,11 @@\n private static RE createRE(String aPattern) {\n     RE retVal \u003d null;\n     try {\n-        retVal \u003d new RE(aPattern);\n+        retVal \u003d Utils.getRE(aPattern);\n     } catch (RESyntaxException e) {\n         System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n         e.printStackTrace(System.out);\n         System.exit(1);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b": {
      "type": "Ymovefromfile",
      "commitMessage": "Re-factored VerifierImpl to be called Verifier. The original intention of\nthe interface was to allow different verifiers to be swapped in. Considering\nhow much work would be required to create a verifier from scratch, people\nare more likely to just want to extend VerifierImpl.\n",
      "commitDate": "2002/1/14 上午10:56",
      "commitName": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/1/14 上午9:33",
      "commitNameOld": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d new RE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        System.exit(1);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java",
      "functionStartLine": 710,
      "functionName": "createRE",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression. Will exit if unable to\ncreate the object.\n\n@param aPattern the pattern to match\n@return a created regexp object\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java",
        "oldMethodName": "createRE",
        "newMethodName": "createRE"
      }
    },
    "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9": {
      "type": "Ybodychange",
      "commitMessage": "changed for release 1.2\n",
      "commitDate": "2001/6/28 下午9:10",
      "commitName": "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2001/6/22 下午9:24",
      "commitNameOld": "0fd69594a4c3e82f92f93f0371791da66938f8c3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d new RE(aPattern);\n    } catch (RESyntaxException e) {\n        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.out);\n        System.exit(1);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java",
      "functionStartLine": 531,
      "functionName": "createRE",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression. Will exit if unable to\ncreate the object.\n\n@param aPattern the pattern to match\n@return a created regexp object\n",
      "diff": "@@ -1,11 +1,11 @@\n private static RE createRE(String aPattern) {\n     RE retVal \u003d null;\n     try {\n         retVal \u003d new RE(aPattern);\n     } catch (RESyntaxException e) {\n-        System.err.println(\"Failed to initialise regexp expression \" + aPattern);\n-        e.printStackTrace(System.err);\n+        System.out.println(\"Failed to initialise regexp expression \" + aPattern);\n+        e.printStackTrace(System.out);\n         System.exit(1);\n     }\n     return retVal;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0fd69594a4c3e82f92f93f0371791da66938f8c3": {
      "type": "Yintroduced",
      "commitMessage": "first cut\n",
      "commitDate": "2001/6/22 下午9:24",
      "commitName": "0fd69594a4c3e82f92f93f0371791da66938f8c3",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,11 @@\n+private static RE createRE(String aPattern) {\n+    RE retVal \u003d null;\n+    try {\n+        retVal \u003d new RE(aPattern);\n+    } catch (RESyntaxException e) {\n+        System.err.println(\"Failed to initialise regexp expression \" + aPattern);\n+        e.printStackTrace(System.err);\n+        System.exit(1);\n+    }\n+    return retVal;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static RE createRE(String aPattern) {\n    RE retVal \u003d null;\n    try {\n        retVal \u003d new RE(aPattern);\n    } catch (RESyntaxException e) {\n        System.err.println(\"Failed to initialise regexp expression \" + aPattern);\n        e.printStackTrace(System.err);\n        System.exit(1);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java",
      "functionStartLine": 524,
      "functionName": "createRE",
      "functionAnnotation": "",
      "functionDoc": "Helper method to create a regular expression. Will exit if unable to\ncreate the object.\n\n@param aPattern the pattern to match\n@return a created regexp object\n"
    }
  }
}