{
  "origin": "codeshovel",
  "repositoryName": "hibernate-orm",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/hibernate-orm/.git",
  "startCommitName": "8bd79b29cfa7b2d539a746dc356d60b66e1e596b",
  "sourceFileName": "QueryBinder.java",
  "functionName": "bindNativeQuery",
  "functionId": "bindNativeQuery___queryAnn-org.hibernate.annotations.NamedNativeQuery__context-MetadataBuildingContext",
  "sourceFilePath": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 142,
  "functionEndLine": 210,
  "numCommitsSeen": 53,
  "timeTaken": 2102,
  "changeHistory": [
    "9caca0ce37d5a2763d476c6fa2471addcca710ca",
    "3edb72db4844c10aa8490472c4b1af05d75076ab",
    "129c0f13482b99e2705f0e234b6bc0572a95c271",
    "814b51493375bb781713a992353b6babba12dd31",
    "ad17f89c4c29f0327c843cf5265e156d65743ab1",
    "8c806d361d63764e8523006944dde52aff70532c",
    "a9b1425f3f07021dae556e710b2bdfdc3812661b",
    "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814",
    "7419fc298dab9afe82fbdbb8b64854fa37f60817",
    "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f",
    "1ca2bc19a5f667e10f9a2c2b10320b9c40921563",
    "9d7a03a5f7f03bc803d897baa590861154b39f5e",
    "7337743c93574823424ed6c399cfcf6bd75614f8"
  ],
  "changeHistoryShort": {
    "9caca0ce37d5a2763d476c6fa2471addcca710ca": "Ymultichange(Yparameterchange,Ybodychange)",
    "3edb72db4844c10aa8490472c4b1af05d75076ab": "Ybodychange",
    "129c0f13482b99e2705f0e234b6bc0572a95c271": "Ybodychange",
    "814b51493375bb781713a992353b6babba12dd31": "Ybodychange",
    "ad17f89c4c29f0327c843cf5265e156d65743ab1": "Ybodychange",
    "8c806d361d63764e8523006944dde52aff70532c": "Ybodychange",
    "a9b1425f3f07021dae556e710b2bdfdc3812661b": "Ybodychange",
    "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814": "Yfilerename",
    "7419fc298dab9afe82fbdbb8b64854fa37f60817": "Ybodychange",
    "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f": "Yparameterchange",
    "1ca2bc19a5f667e10f9a2c2b10320b9c40921563": "Yfilerename",
    "9d7a03a5f7f03bc803d897baa590861154b39f5e": "Yfilerename",
    "7337743c93574823424ed6c399cfcf6bd75614f8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9caca0ce37d5a2763d476c6fa2471addcca710ca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HHH-9490 - Migrate from dom4j to jaxb for XML processing;\nHHH-9492 - Migrate to new bootstrap API (MetadataSources, etc);\nHHH-7078 - Split NamingStrategy into ImplicitNamingStrategy/PhysicalNamingStrategy;\nHHH-6005 - Better handling of implicit column naming with @ElementCollection of @Embeddables;\nHHH-9633 - Add tests that explicitly test the \"main\" NamingStrategy impls\n",
      "commitDate": "2015/3/11 上午5:53",
      "commitName": "9caca0ce37d5a2763d476c6fa2471addcca710ca",
      "commitAuthor": "Steve Ebersole",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HHH-9490 - Migrate from dom4j to jaxb for XML processing;\nHHH-9492 - Migrate to new bootstrap API (MetadataSources, etc);\nHHH-7078 - Split NamingStrategy into ImplicitNamingStrategy/PhysicalNamingStrategy;\nHHH-6005 - Better handling of implicit column naming with @ElementCollection of @Embeddables;\nHHH-9633 - Add tests that explicitly test the \"main\" NamingStrategy impls\n",
          "commitDate": "2015/3/11 上午5:53",
          "commitName": "9caca0ce37d5a2763d476c6fa2471addcca710ca",
          "commitAuthor": "Steve Ebersole",
          "commitDateOld": "2013/11/24 下午11:44",
          "commitNameOld": "cd590470c0059981537e558a5ff6d114fd24df61",
          "commitAuthorOld": "Steve Ebersole",
          "daysBetweenCommits": 471.26,
          "commitsBetweenForRepo": 399,
          "commitsBetweenForFile": 1,
          "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, MetadataBuildingContext context) {\n    if (queryAnn \u003d\u003d null) {\n        return;\n    }\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    context.getMetadataCollector().addNamedNativeQuery(query);\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n    }\n}",
          "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
          "functionStartLine": 159,
          "functionName": "bindNativeQuery",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,22 @@\n-public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n-    if (queryAnn \u003d\u003d null)\n+public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, MetadataBuildingContext context) {\n+    if (queryAnn \u003d\u003d null) {\n         return;\n+    }\n     if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n-    mappings.addSQLQuery(query.getName(), query);\n+    context.getMetadataCollector().addNamedNativeQuery(query);\n     if (LOG.isDebugEnabled()) {\n         LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[queryAnn-org.hibernate.annotations.NamedNativeQuery, mappings-Mappings]",
            "newValue": "[queryAnn-org.hibernate.annotations.NamedNativeQuery, context-MetadataBuildingContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HHH-9490 - Migrate from dom4j to jaxb for XML processing;\nHHH-9492 - Migrate to new bootstrap API (MetadataSources, etc);\nHHH-7078 - Split NamingStrategy into ImplicitNamingStrategy/PhysicalNamingStrategy;\nHHH-6005 - Better handling of implicit column naming with @ElementCollection of @Embeddables;\nHHH-9633 - Add tests that explicitly test the \"main\" NamingStrategy impls\n",
          "commitDate": "2015/3/11 上午5:53",
          "commitName": "9caca0ce37d5a2763d476c6fa2471addcca710ca",
          "commitAuthor": "Steve Ebersole",
          "commitDateOld": "2013/11/24 下午11:44",
          "commitNameOld": "cd590470c0059981537e558a5ff6d114fd24df61",
          "commitAuthorOld": "Steve Ebersole",
          "daysBetweenCommits": 471.26,
          "commitsBetweenForRepo": 399,
          "commitsBetweenForFile": 1,
          "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, MetadataBuildingContext context) {\n    if (queryAnn \u003d\u003d null) {\n        return;\n    }\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    context.getMetadataCollector().addNamedNativeQuery(query);\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n    }\n}",
          "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
          "functionStartLine": 159,
          "functionName": "bindNativeQuery",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,22 @@\n-public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n-    if (queryAnn \u003d\u003d null)\n+public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, MetadataBuildingContext context) {\n+    if (queryAnn \u003d\u003d null) {\n         return;\n+    }\n     if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n-    mappings.addSQLQuery(query.getName(), query);\n+    context.getMetadataCollector().addNamedNativeQuery(query);\n     if (LOG.isDebugEnabled()) {\n         LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3edb72db4844c10aa8490472c4b1af05d75076ab": {
      "type": "Ybodychange",
      "commitMessage": "HHH-7387 - Integrate Draft 6 of the JPA 2.1 spec : addNamedQuery support\n",
      "commitDate": "2012/7/19 上午5:52",
      "commitName": "3edb72db4844c10aa8490472c4b1af05d75076ab",
      "commitAuthor": "Steve Ebersole",
      "commitDateOld": "2012/5/30 下午11:25",
      "commitNameOld": "0c1569c4f4ade941398d749401f03fdf04306e35",
      "commitAuthorOld": "Strong Liu",
      "daysBetweenCommits": 49.27,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(query.getName(), query);\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n    }\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 174,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n     if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n-        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n-        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+        query \u003d new NamedSQLQueryDefinitionBuilder().setName(queryAnn.name()).setQuery(queryAnn.query()).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(queryAnn.cacheable()).setCacheRegion(BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion()).setTimeout(queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout()).setFetchSize(queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize()).setFlushMode(getFlushMode(queryAnn.flushMode())).setCacheMode(getCacheMode(queryAnn.cacheMode())).setReadOnly(queryAnn.readOnly()).setComment(BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment()).setParameterTypes(null).setCallable(queryAnn.callable()).createNamedQueryDefinition();\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(query.getName(), query);\n     if (LOG.isDebugEnabled()) {\n         LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "129c0f13482b99e2705f0e234b6bc0572a95c271": {
      "type": "Ybodychange",
      "commitMessage": "HHH-6732 more logging trace statements are missing guards against unneeded string creation\n",
      "commitDate": "2011/10/27 上午6:24",
      "commitName": "129c0f13482b99e2705f0e234b6bc0572a95c271",
      "commitAuthor": "Sanne Grinovero",
      "commitDateOld": "2011/10/24 下午4:26",
      "commitNameOld": "bdba5898c90ef7667e7c5df35e72d2e993e32556",
      "commitAuthorOld": "Strong Liu",
      "daysBetweenCommits": 2.58,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(query.getName(), query);\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n    }\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 158,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,21 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n-    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n+    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n+    }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(query.getName(), query);\n-    LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n+    if (LOG.isDebugEnabled()) {\n+        LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "814b51493375bb781713a992353b6babba12dd31": {
      "type": "Ybodychange",
      "commitMessage": "HHH-6110 : Integrate new metamodel into persisters\n",
      "commitDate": "2011/6/7 下午5:41",
      "commitName": "814b51493375bb781713a992353b6babba12dd31",
      "commitAuthor": "Gail Badner",
      "commitDateOld": "2011/5/5 上午6:15",
      "commitNameOld": "fb44ad936d8d54d311ecbaea1633683a8d809d04",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 33.48,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(query.getName(), query);\n    LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 151,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n     if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n-        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n-        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+        query \u003d new NamedSQLQueryDefinition(queryAnn.name(), queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n-    mappings.addSQLQuery(queryAnn.name(), query);\n-    LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", queryAnn.name(), queryAnn.query());\n+    mappings.addSQLQuery(query.getName(), query);\n+    LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", query.getName(), queryAnn.query());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad17f89c4c29f0327c843cf5265e156d65743ab1": {
      "type": "Ybodychange",
      "commitMessage": "HHH-6097 - Review log levels, especially related to i18n messages\n",
      "commitDate": "2011/4/12 下午10:07",
      "commitName": "ad17f89c4c29f0327c843cf5265e156d65743ab1",
      "commitAuthor": "Steve Ebersole",
      "commitDateOld": "2011/4/8 下午10:44",
      "commitNameOld": "6504cb6d78740d2a4695096463f40baf18c9af11",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", queryAnn.name(), queryAnn.query());\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 148,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n     if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(queryAnn.name(), query);\n-    LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n+    LOG.debugf(\"Binding named native query: %s \u003d\u003e %s\", queryAnn.name(), queryAnn.query());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8c806d361d63764e8523006944dde52aff70532c": {
      "type": "Ybodychange",
      "commitMessage": "Changes from requests at Hibernate meeting: message codes, use XXXf methods for debug and trace, use @Cause\n",
      "commitDate": "2011/2/9 上午3:55",
      "commitName": "8c806d361d63764e8523006944dde52aff70532c",
      "commitAuthor": "JPAV",
      "commitDateOld": "2011/1/19 上午6:00",
      "commitNameOld": "3712e1ad7efccd2ba0c24b3d7d3b23f84d948b9d",
      "commitAuthorOld": "JPAV",
      "daysBetweenCommits": 20.91,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 147,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,18 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n-    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n+    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n-    }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(queryAnn.name(), query);\n     LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a9b1425f3f07021dae556e710b2bdfdc3812661b": {
      "type": "Ybodychange",
      "commitMessage": "Replaced references to slf4j with references to new jboss.logging.Logger implementations and i18n\u0027d where it was clear how to do so.\n",
      "commitDate": "2011/1/19 上午5:35",
      "commitName": "a9b1425f3f07021dae556e710b2bdfdc3812661b",
      "commitAuthor": "JPAV",
      "commitDateOld": "2010/10/12 上午3:41",
      "commitNameOld": "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 99.08,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 154,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n     if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(queryAnn.name(), query);\n-    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n+    LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814": {
      "type": "Yfilerename",
      "commitMessage": "HHH-5616 - Switch to Gradle for builds\n",
      "commitDate": "2010/10/12 上午3:41",
      "commitName": "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814",
      "commitAuthor": "Steve Ebersole",
      "commitDateOld": "2010/10/12 上午2:51",
      "commitNameOld": "0bfe7869e41076fd0846ca7592740710876f2427",
      "commitAuthorOld": "Gail Badner",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n}",
      "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 151,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
        "newPath": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java"
      }
    },
    "7419fc298dab9afe82fbdbb8b64854fa37f60817": {
      "type": "Ybodychange",
      "commitMessage": "HHH-5205 - Renamed BinderHelper.isDefault() to BinderHelper.isEmptyAnnotationValue() , because this describes better what the function does. Also renamed VersionTest to OptimisitcLockAnnotationTest to better describe what gets tested.\n\ngit-svn-id: https://svn.jboss.org/repos/hibernate/core/trunk@20741 1b8cb986-b30d-0410-93ca-fae66ebed9b2\n",
      "commitDate": "2010/9/29 上午12:32",
      "commitName": "7419fc298dab9afe82fbdbb8b64854fa37f60817",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2010/8/13 上午3:13",
      "commitNameOld": "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 46.89,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n}",
      "path": "core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 151,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n-    if (BinderHelper.isDefault(queryAnn.name())) {\n+    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n-    if (!BinderHelper.isDefault(resultSetMapping)) {\n-        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n+        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n-        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isEmptyAnnotationValue(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isEmptyAnnotationValue(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(queryAnn.name(), query);\n     log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f": {
      "type": "Yparameterchange",
      "commitMessage": "HHH-5474 - Clean up usages of now deprecated ExtendedMappings\n\n\ngit-svn-id: https://svn.jboss.org/repos/hibernate/core/trunk@20136 1b8cb986-b30d-0410-93ca-fae66ebed9b2\n",
      "commitDate": "2010/8/13 上午3:13",
      "commitName": "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f",
      "commitAuthor": "Steve Ebersole",
      "commitDateOld": "2010/7/9 上午7:56",
      "commitNameOld": "df184979ed2f19887bbea46603148dd59d3bfd1f",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 34.8,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n}",
      "path": "core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 151,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n-public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, ExtendedMappings mappings) {\n+public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, Mappings mappings) {\n     if (queryAnn \u003d\u003d null)\n         return;\n     if (BinderHelper.isDefault(queryAnn.name())) {\n         throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n     }\n     NamedSQLQueryDefinition query;\n     String resultSetMapping \u003d queryAnn.resultSetMapping();\n     if (!BinderHelper.isDefault(resultSetMapping)) {\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else if (!void.class.equals(queryAnn.resultClass())) {\n         final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n         query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n     } else {\n         throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n     }\n     mappings.addSQLQuery(queryAnn.name(), query);\n     log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[queryAnn-org.hibernate.annotations.NamedNativeQuery, mappings-ExtendedMappings]",
        "newValue": "[queryAnn-org.hibernate.annotations.NamedNativeQuery, mappings-Mappings]"
      }
    },
    "1ca2bc19a5f667e10f9a2c2b10320b9c40921563": {
      "type": "Yfilerename",
      "commitMessage": "HHH-5367 - Move annotations module sources into core module\n\n\ngit-svn-id: https://svn.jboss.org/repos/hibernate/core/trunk@19921 1b8cb986-b30d-0410-93ca-fae66ebed9b2\n",
      "commitDate": "2010/7/9 上午7:41",
      "commitName": "1ca2bc19a5f667e10f9a2c2b10320b9c40921563",
      "commitAuthor": "Steve Ebersole",
      "commitDateOld": "2010/7/9 上午1:32",
      "commitNameOld": "cc3b41a09c983913594b16d6c909be0bfd41bd7a",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, ExtendedMappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n}",
      "path": "core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 151,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "annotations/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
        "newPath": "core/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java"
      }
    },
    "9d7a03a5f7f03bc803d897baa590861154b39f5e": {
      "type": "Yfilerename",
      "commitMessage": "HHH-3550 : import annotations into core\n\ngit-svn-id: https://svn.jboss.org/repos/hibernate/core/trunk@15418 1b8cb986-b30d-0410-93ca-fae66ebed9b2\n",
      "commitDate": "2008/10/29 上午2:53",
      "commitName": "9d7a03a5f7f03bc803d897baa590861154b39f5e",
      "commitAuthor": "Steve Ebersole",
      "commitDateOld": "2008/10/29 上午2:52",
      "commitNameOld": "c457f2b3258fc48ef4010a9e58cd2fc3baaca6cc",
      "commitAuthorOld": "Steve Ebersole",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, ExtendedMappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n}",
      "path": "annotations/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 129,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "annotations/src/java/org/hibernate/cfg/annotations/QueryBinder.java",
        "newPath": "annotations/src/main/java/org/hibernate/cfg/annotations/QueryBinder.java"
      }
    },
    "7337743c93574823424ed6c399cfcf6bd75614f8": {
      "type": "Yintroduced",
      "commitMessage": "HHH-3550 : import annotations into core\n\ngit-svn-id: https://svn.jboss.org/repos/hibernate/core/trunk@15415 1b8cb986-b30d-0410-93ca-fae66ebed9b2\n",
      "commitDate": "2008/10/29 上午2:41",
      "commitName": "7337743c93574823424ed6c399cfcf6bd75614f8",
      "commitAuthor": "Steve Ebersole",
      "diff": "@@ -0,0 +1,19 @@\n+public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, ExtendedMappings mappings) {\n+    if (queryAnn \u003d\u003d null)\n+        return;\n+    if (BinderHelper.isDefault(queryAnn.name())) {\n+        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n+    }\n+    NamedSQLQueryDefinition query;\n+    String resultSetMapping \u003d queryAnn.resultSetMapping();\n+    if (!BinderHelper.isDefault(resultSetMapping)) {\n+        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+    } else if (!void.class.equals(queryAnn.resultClass())) {\n+        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n+        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n+    } else {\n+        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n+    }\n+    mappings.addSQLQuery(queryAnn.name(), query);\n+    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery queryAnn, ExtendedMappings mappings) {\n    if (queryAnn \u003d\u003d null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping \u003d queryAnn.resultSetMapping();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), resultSetMapping, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn \u003d new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query \u003d new NamedSQLQueryDefinition(queryAnn.query(), new NativeSQLQueryReturn[] { entityQueryReturn }, null, queryAnn.cacheable(), BinderHelper.isDefault(queryAnn.cacheRegion()) ? null : queryAnn.cacheRegion(), queryAnn.timeout() \u003c 0 ? null : queryAnn.timeout(), queryAnn.fetchSize() \u003c 0 ? null : queryAnn.fetchSize(), getFlushMode(queryAnn.flushMode()), getCacheMode(queryAnn.cacheMode()), queryAnn.readOnly(), BinderHelper.isDefault(queryAnn.comment()) ? null : queryAnn.comment(), null, queryAnn.callable());\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    mappings.addSQLQuery(queryAnn.name(), query);\n    log.info(\"Binding named native query: {} \u003d\u003e {}\", queryAnn.name(), queryAnn.query());\n}",
      "path": "annotations/src/java/org/hibernate/cfg/annotations/QueryBinder.java",
      "functionStartLine": 129,
      "functionName": "bindNativeQuery",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}