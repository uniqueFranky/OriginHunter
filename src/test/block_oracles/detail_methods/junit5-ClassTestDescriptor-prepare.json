{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "ClassTestDescriptor.java",
  "functionName": "prepare",
  "functionId": "prepare___context-JupiterEngineExecutionContext",
  "sourceFilePath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 140,
  "functionEndLine": 172,
  "numCommitsSeen": 238,
  "timeTaken": 2789,
  "changeHistory": [
    "137f831bba9d0f45085d64fad47947cbc91a30e9",
    "4c55c3a6f31ab205ff426cbb1f5a4589a95f2776",
    "920f6ea401ff38d1d66b594ddddfedb98bc8b68c",
    "479491f2f417a553238f28ab196a23b9c2b9099e",
    "27ae8cf548cf70e4c671705d2e03777f3bf19d1a",
    "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314",
    "788ec1aa3ff5103aeb622c252a15036dd7fa70d4",
    "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55",
    "f750c85946939119d05966c65fc81ce68444b2b9",
    "6229d4cad76364862667f8f609f880fd9eed43eb",
    "17360a5a086050e41718aa11d7e7c19c02c79d72",
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
    "323dac88536a9768ea92183598e695b39da62a1a",
    "902d36a3e915aed15063764f108ace96a41140b4",
    "bf1e000a7f68076e2921ac4f020e5f8c24330e84",
    "c95005adbe2f754997a43009a47124f725496530",
    "babcc661bd906b38a272f287ac8779669268fc58",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "507e50872c6df8a66c32f45cb2153555f510c4b1",
    "65e0bd5483c8923393fa85955ddaf24d68fd8042",
    "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
    "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f",
    "b691e6a02b9436939bf1867156aa8d8cea4e3fbf",
    "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
    "b4957a135bb9b9eba12c8bcb154c8cfbfb4cc566",
    "0027ade00fd483e08714ece1021a7715bb1855da",
    "b90f9c883f8bb6c0ea212a8b0acae113e17fecfb",
    "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
    "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
    "e9d19c214a3117efdd9295bdb1b2ddb4f7e67987",
    "634890bff8f38128db31c244486d257b8ef729d7",
    "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
    "fc5ff8d87c124e43601f64da76668e516758a74a",
    "efb867427dd0722262fea5c869ac37cd64ea0070",
    "67ec62513564b48741925f79132f3fe6427e48b3",
    "fa681a536942811f712ca91be70f5510ca472020",
    "6c643a69bab0f405bdcd9db8318f991e1c88ef63",
    "470866bc19cac8717ac77b26efc1fe703bed264a",
    "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
    "28ffd5ee9d1e996133445cac2256407f28380e91"
  ],
  "changeHistoryShort": {
    "137f831bba9d0f45085d64fad47947cbc91a30e9": "Ybodychange",
    "4c55c3a6f31ab205ff426cbb1f5a4589a95f2776": "Ybodychange",
    "920f6ea401ff38d1d66b594ddddfedb98bc8b68c": "Ybodychange",
    "479491f2f417a553238f28ab196a23b9c2b9099e": "Ybodychange",
    "27ae8cf548cf70e4c671705d2e03777f3bf19d1a": "Ybodychange",
    "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314": "Ybodychange",
    "788ec1aa3ff5103aeb622c252a15036dd7fa70d4": "Ybodychange",
    "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55": "Ybodychange",
    "f750c85946939119d05966c65fc81ce68444b2b9": "Ybodychange",
    "6229d4cad76364862667f8f609f880fd9eed43eb": "Ybodychange",
    "17360a5a086050e41718aa11d7e7c19c02c79d72": "Ybodychange",
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": "Ybodychange",
    "323dac88536a9768ea92183598e695b39da62a1a": "Ybodychange",
    "902d36a3e915aed15063764f108ace96a41140b4": "Ybodychange",
    "bf1e000a7f68076e2921ac4f020e5f8c24330e84": "Ybodychange",
    "c95005adbe2f754997a43009a47124f725496530": "Ybodychange",
    "babcc661bd906b38a272f287ac8779669268fc58": "Ymultichange(Yparameterchange,Yreturntypechange)",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "507e50872c6df8a66c32f45cb2153555f510c4b1": "Yfilerename",
    "65e0bd5483c8923393fa85955ddaf24d68fd8042": "Ybodychange",
    "dfe33b0e7e22b64b712593ea3b635675edbd6f73": "Ybodychange",
    "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f": "Ybodychange",
    "b691e6a02b9436939bf1867156aa8d8cea4e3fbf": "Ybodychange",
    "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8": "Ybodychange",
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": "Ybodychange",
    "b4957a135bb9b9eba12c8bcb154c8cfbfb4cc566": "Ybodychange",
    "0027ade00fd483e08714ece1021a7715bb1855da": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
    "b90f9c883f8bb6c0ea212a8b0acae113e17fecfb": "Ybodychange",
    "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362": "Ymultichange(Yexceptionschange,Ybodychange)",
    "8db7e41d03b3d1f989c458e040f86f7e30e153d7": "Ybodychange",
    "e9d19c214a3117efdd9295bdb1b2ddb4f7e67987": "Ybodychange",
    "634890bff8f38128db31c244486d257b8ef729d7": "Ybodychange",
    "3f9c11b9326b7d3051cb2a50568cd91113a0c0da": "Ymultichange(Yparameterchange,Yreturntypechange)",
    "fc5ff8d87c124e43601f64da76668e516758a74a": "Ybodychange",
    "efb867427dd0722262fea5c869ac37cd64ea0070": "Ybodychange",
    "67ec62513564b48741925f79132f3fe6427e48b3": "Ybodychange",
    "fa681a536942811f712ca91be70f5510ca472020": "Ybodychange",
    "6c643a69bab0f405bdcd9db8318f991e1c88ef63": "Ybodychange",
    "470866bc19cac8717ac77b26efc1fe703bed264a": "Ymovefromfile",
    "57b31220d25f59bb4aa4903dfee4b8ec2be4525e": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "28ffd5ee9d1e996133445cac2256407f28380e91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "137f831bba9d0f45085d64fad47947cbc91a30e9": {
      "type": "Ybodychange",
      "commitMessage": "Make ThrowableCollector configurable\n\nThis commit generalizes `ThrowableCollector` to take a predicate that\nis used to decide whether a `Throwable` is aborted or failed execution.\nThe Jupiter engines uses a specialized implementation that treats OTA\u0027s\n`TestAbortedExceptions` as aborting and everything else as failing:\n`OpenTest4JAwareThrowableCollector`.\n\nIn addition, this commit introduces `ThrowableCollector.Factory` and\nlets `HierarchicalTestEngines` create them in order to allow the engine\nto decide how to configure its `ThrowableCollectors`. For backwards\ncompatibility, the default implementation returns a factory that\nalways creates instances of `OpenTest4JAwareThrowableCollector`.\n\nIssue: #1313\n",
      "commitDate": "2018/7/8 上午4:15",
      "commitName": "137f831bba9d0f45085d64fad47947cbc91a30e9",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2018/7/8 上午4:15",
      "commitNameOld": "c1d682aee5da5738fc3be071df45330c005f4cf1",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), this.testClass);\n    registerExtensionsFromFields(registry, this.testClass, null);\n    this.testInstanceFactory \u003d resolveTestInstanceFactory(registry);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n    ThrowableCollector throwableCollector \u003d new OpenTest4JAwareThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 140,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), this.testClass);\n     registerExtensionsFromFields(registry, this.testClass, null);\n     this.testInstanceFactory \u003d resolveTestInstanceFactory(registry);\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n-    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n+    ThrowableCollector throwableCollector \u003d new OpenTest4JAwareThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n     this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4c55c3a6f31ab205ff426cbb1f5a4589a95f2776": {
      "type": "Ybodychange",
      "commitMessage": "Resolve TestInstanceFactory at class level\n\nPrior to this commit, TestInstanceFactory extensions were resolved\nlazily on-demand. This led to the undesired side effect that\nconfiguration errors were reported for each test method when executing\nwith per-method lifecycle semantics. In addition, this also meant that\nan attempt was made to invoke all test methods even though the test\nclass could not be instantiated.\n\nThis commit addresses these issues by resolving the TestInstanceFactory\nduring the \"prepare\" phase for each ClassTestDescriptor.\n\nThis commit also introduces the following methods in ExtensionRegistry\nin order to make the above change possible.\n\n - getParent()\n - getLocalExtensions(Class)\n\nIssue: #672\n",
      "commitDate": "2018/7/2 下午10:33",
      "commitName": "4c55c3a6f31ab205ff426cbb1f5a4589a95f2776",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2018/7/2 上午1:08",
      "commitNameOld": "bdc9ef8db9c40d451e974828efb644cb3f6d3db7",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), this.testClass);\n    registerExtensionsFromFields(registry, this.testClass, null);\n    this.testInstanceFactory \u003d resolveTestInstanceFactory(registry);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 137,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), this.testClass);\n     registerExtensionsFromFields(registry, this.testClass, null);\n+    this.testInstanceFactory \u003d resolveTestInstanceFactory(registry);\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n     this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "920f6ea401ff38d1d66b594ddddfedb98bc8b68c": {
      "type": "Ybodychange",
      "commitMessage": "Extract ExtensionUtils and disallow private @RegisterExtension fields\n\nIssue: #497\n",
      "commitDate": "2018/1/21 上午1:40",
      "commitName": "920f6ea401ff38d1d66b594ddddfedb98bc8b68c",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2018/1/21 上午1:40",
      "commitNameOld": "479491f2f417a553238f28ab196a23b9c2b9099e",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), this.testClass);\n    registerExtensionsFromFields(registry, this.testClass, null);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 121,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n-    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n-    registerExtensionsFromFields(this.testClass, registry, null);\n+    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWithAnnotation(context.getExtensionRegistry(), this.testClass);\n+    registerExtensionsFromFields(registry, this.testClass, null);\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n     this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "479491f2f417a553238f28ab196a23b9c2b9099e": {
      "type": "Ybodychange",
      "commitMessage": "Support @RegisterExtension with @TestInstance(PER_CLASS) lifecycle mode\n\nIssue: #497\n",
      "commitDate": "2018/1/21 上午1:40",
      "commitName": "479491f2f417a553238f28ab196a23b9c2b9099e",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2018/1/21 上午1:40",
      "commitNameOld": "27ae8cf548cf70e4c671705d2e03777f3bf19d1a",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerExtensionsFromFields(this.testClass, registry, null);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "27ae8cf548cf70e4c671705d2e03777f3bf19d1a": {
      "type": "Ybodychange",
      "commitMessage": "Introduce instance-level support for @RegisterExtension in Jupiter\n\nIssue: #497\n",
      "commitDate": "2018/1/21 上午1:40",
      "commitName": "27ae8cf548cf70e4c671705d2e03777f3bf19d1a",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2018/1/12 下午9:20",
      "commitNameOld": "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 8.18,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerExtensionsFromFields(this.testClass, registry, null);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,13 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n+    registerExtensionsFromFields(this.testClass, registry, null);\n+    registerBeforeEachMethodAdapters(registry);\n+    registerAfterEachMethodAdapters(registry);\n     Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n     this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n-    registerBeforeEachMethodAdapters(registry);\n-    registerAfterEachMethodAdapters(registry);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314": {
      "type": "Ybodychange",
      "commitMessage": "Provide access to test instance lifecycle via ExtensionContext\n\nThis commit introduces a new getTestInstanceLifecycle() method in the\nExtensionContext API for JUnit Jupiter.\n\nIssue: #1187\n",
      "commitDate": "2018/1/12 下午9:20",
      "commitName": "65d54b1a0e9d73d0e4cb64cc219b7d6cb13be314",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2018/1/7 上午3:23",
      "commitNameOld": "6b4de716ba3b0b46c847e340e2f68954d0cc6192",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,12 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n-    Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n-    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n-    this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n-    this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n-    this.afterEachMethods \u003d findAfterEachMethods(testClass);\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n+    Lifecycle lifecycle \u003d getTestInstanceLifecycle(this.testClass, context.getConfigurationParameters());\n+    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n+    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, lifecycle, context.getConfigurationParameters(), throwableCollector);\n+    this.beforeAllMethods \u003d findBeforeAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n+    this.afterAllMethods \u003d findAfterAllMethods(this.testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n-    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, context.getConfigurationParameters(), throwableCollector);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "788ec1aa3ff5103aeb622c252a15036dd7fa70d4": {
      "type": "Ybodychange",
      "commitMessage": "Introduce method getConfigurationParameter() in ExtensionContext\n\nCloses #1196\n",
      "commitDate": "2017/12/23 下午10:19",
      "commitName": "788ec1aa3ff5103aeb622c252a15036dd7fa70d4",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/11/4 上午5:03",
      "commitNameOld": "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 49.72,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n    this.afterEachMethods \u003d findAfterEachMethods(testClass);\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, context.getConfigurationParameters(), throwableCollector);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 117,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n     this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n     this.afterEachMethods \u003d findAfterEachMethods(testClass);\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n+    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, context.getConfigurationParameters(), throwableCollector);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55": {
      "type": "Ybodychange",
      "commitMessage": "Simplify TestInstanceProvider creation\n\nIssue: #1103\n",
      "commitDate": "2017/11/4 上午5:03",
      "commitName": "5d7d85d0b0fb8b7e9e811b2dd28c955a891d4c55",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/11/4 上午5:03",
      "commitNameOld": "36b2b8b289263d52994cb820cdb93916f0815e1d",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n    this.afterEachMethods \u003d findAfterEachMethods(testClass);\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 117,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n     this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n     this.afterEachMethods \u003d findAfterEachMethods(testClass);\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext, lifecycle)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f750c85946939119d05966c65fc81ce68444b2b9": {
      "type": "Ybodychange",
      "commitMessage": "Introduce config param for default test instance lifecycle\n\nPrior to this commit, the test instance lifecycle mode could only be\nchanged from the default per-method value to per-class by annotating\nevery single test class or test interface with @TestInstance(PER_CLASS).\n\nThis commit addresses this issue by introducing a new configuration\nparameter that allows the default test instance lifecycle semantics to\nbe set on a per-project basis (e.g., for a build).\n\nSpecifically, the default test instance lifecycle mode can now be set\nvia a configuration parameter or JVM system property named\n`junit.jupiter.testinstance.lifecycle.default` with a value equal to\none of the enum constants in TestInstance.Lifecycle.\n\nIssue: #905\n",
      "commitDate": "2017/8/13 上午4:53",
      "commitName": "f750c85946939119d05966c65fc81ce68444b2b9",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/8/5 上午3:55",
      "commitNameOld": "362a4535b473654401befffce46cd268fad36e38",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 8.04,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n    this.afterEachMethods \u003d findAfterEachMethods(testClass);\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext, lifecycle)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 116,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n-    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, this.lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n-    this.afterAllMethods \u003d findAfterAllMethods(testClass, this.lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n+    Lifecycle lifecycle \u003d getTestInstanceLifecycle(testClass, context.getConfigurationParameters());\n+    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n+    this.afterAllMethods \u003d findAfterAllMethods(testClass, lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n     this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n     this.afterEachMethods \u003d findAfterEachMethods(testClass);\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext, lifecycle)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6229d4cad76364862667f8f609f880fd9eed43eb": {
      "type": "Ybodychange",
      "commitMessage": "Report lifecycle configuration errors during test execution\n\nPrior to this commit, configuration errors for lifecycle methods would\nresult in the entire test plan being aborted during the discovery phase.\nConsequently, no tests would be executed in such scenarios.\n\nThis commit addresses this issue by ensuring that configuration errors\nregarding lifecycle methods annotated with @BeforeAll, @AfterAll,\nBeforeEach, or @AfterEach are now reported during the execution of the\naffected test class.\n\nIssue: #971\n",
      "commitDate": "2017/7/22 上午4:22",
      "commitName": "6229d4cad76364862667f8f609f880fd9eed43eb",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/15 上午3:12",
      "commitNameOld": "4e4112523dd1cd15bdb74f92a76013cdaecb8495",
      "commitAuthorOld": "Stefan Birkner",
      "daysBetweenCommits": 7.05,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, this.lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.afterAllMethods \u003d findAfterAllMethods(testClass, this.lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n    this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n    this.afterEachMethods \u003d findAfterEachMethods(testClass);\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,13 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n+    this.beforeAllMethods \u003d findBeforeAllMethods(testClass, this.lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n+    this.afterAllMethods \u003d findAfterAllMethods(testClass, this.lifecycle \u003d\u003d Lifecycle.PER_METHOD);\n+    this.beforeEachMethods \u003d findBeforeEachMethods(testClass);\n+    this.afterEachMethods \u003d findAfterEachMethods(testClass);\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "17360a5a086050e41718aa11d7e7c19c02c79d72": {
      "type": "Ybodychange",
      "commitMessage": "Provide container-level exceptions to extensions via ExtensionContext\n\nIssue: #899\n",
      "commitDate": "2017/7/2 上午12:05",
      "commitName": "17360a5a086050e41718aa11d7e7c19c02c79d72",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/7/2 上午12:05",
      "commitNameOld": "943c53f20dace9e1fd6968e377ed4c9dc67f858d",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 127,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,9 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n-    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(new ThrowableCollector()).build();\n+    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n+    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this, throwableCollector);\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(throwableCollector).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": {
      "type": "Ybodychange",
      "commitMessage": "Remove TestExtensionContext and ContainerExtensionContext\n\nIssue: #901\n",
      "commitDate": "2017/7/1 下午7:45",
      "commitName": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "323dac88536a9768ea92183598e695b39da62a1a",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(new ThrowableCollector()).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 127,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n-    ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n+    ClassExtensionContext extensionContext \u003d new ClassExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, extensionContext)).withExtensionRegistry(registry).withExtensionContext(extensionContext).withThrowableCollector(new ThrowableCollector()).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323dac88536a9768ea92183598e695b39da62a1a": {
      "type": "Ybodychange",
      "commitMessage": "Polishing\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "323dac88536a9768ea92183598e695b39da62a1a",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "902d36a3e915aed15063764f108ace96a41140b4",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 129,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,8 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    TestInstanceProvider testInstanceProvider \u003d testInstanceProvider(context, registry, containerExtensionContext);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "902d36a3e915aed15063764f108ace96a41140b4": {
      "type": "Ybodychange",
      "commitMessage": "Remove duplication and simplify control flow by making it more explicit\n\nIssue: #419\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "902d36a3e915aed15063764f108ace96a41140b4",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "4422e64ef82a6e7f3800a7fa77cebeab9361085e",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    TestInstanceProvider testInstanceProvider \u003d testInstanceProvider(context, registry, containerExtensionContext);\n    return context.extend().withTestInstanceProvider(testInstanceProvider).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 129,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,9 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     TestInstanceProvider testInstanceProvider \u003d testInstanceProvider(context, registry, containerExtensionContext);\n-    Object testInstance \u003d (this.lifecycle \u003d\u003d Lifecycle.PER_CLASS ? testInstanceProvider.getTestInstance(Optional.empty()) : null);\n-    containerExtensionContext.setTestInstance(testInstance);\n     return context.extend().withTestInstanceProvider(testInstanceProvider).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bf1e000a7f68076e2921ac4f020e5f8c24330e84": {
      "type": "Ybodychange",
      "commitMessage": "Provide test instance to container level extensions\n\nIssue: #419\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "bf1e000a7f68076e2921ac4f020e5f8c24330e84",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "fdadf905479b4cd63f1987d08940eddfbf89d088",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    TestInstanceProvider testInstanceProvider \u003d testInstanceProvider(context, registry, containerExtensionContext);\n    Object testInstance \u003d (this.lifecycle \u003d\u003d Lifecycle.PER_CLASS ? testInstanceProvider.getTestInstance(Optional.empty()) : null);\n    containerExtensionContext.setTestInstance(testInstance);\n    return context.extend().withTestInstanceProvider(testInstanceProvider).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 129,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,11 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n-    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n+    ClassBasedContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n+    TestInstanceProvider testInstanceProvider \u003d testInstanceProvider(context, registry, containerExtensionContext);\n+    Object testInstance \u003d (this.lifecycle \u003d\u003d Lifecycle.PER_CLASS ? testInstanceProvider.getTestInstance(Optional.empty()) : null);\n+    containerExtensionContext.setTestInstance(testInstance);\n+    return context.extend().withTestInstanceProvider(testInstanceProvider).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c95005adbe2f754997a43009a47124f725496530": {
      "type": "Ybodychange",
      "commitMessage": "Share ThrowableCollector b/t ExecutionContexts \u0026 ExtensionContexts\n",
      "commitDate": "2016/6/27 上午12:04",
      "commitName": "c95005adbe2f754997a43009a47124f725496530",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/26 下午11:25",
      "commitNameOld": "41e5e579821975c222850105c911aeecb67af8cf",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 125,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n @Override\n public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).withThrowableCollector(new ThrowableCollector()).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "babcc661bd906b38a272f287ac8779669268fc58": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange)",
      "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午9:08",
      "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
      "commitAuthor": "JUnit Team",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
          "commitDate": "2016/6/20 下午9:08",
          "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
          "commitAuthor": "JUnit Team",
          "commitDateOld": "2016/6/20 下午4:59",
          "commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 125,
          "functionName": "prepare",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n @Override\n-public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n+public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JUnit5EngineExecutionContext]",
            "newValue": "[context-JupiterEngineExecutionContext]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
          "commitDate": "2016/6/20 下午9:08",
          "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
          "commitAuthor": "JUnit Team",
          "commitDateOld": "2016/6/20 下午4:59",
          "commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 125,
          "functionName": "prepare",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n @Override\n-public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n+public JupiterEngineExecutionContext prepare(JupiterEngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JUnit5EngineExecutionContext",
            "newValue": "JupiterEngineExecutionContext"
          }
        }
      ]
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午4:59",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午2:04",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 125,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
        "newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java"
      }
    },
    "507e50872c6df8a66c32f45cb2153555f510c4b1": {
      "type": "Yfilerename",
      "commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
      "commitDate": "2016/6/19 上午4:50",
      "commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/19 上午3:31",
      "commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 125,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
        "newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/ClassTestDescriptor.java"
      }
    },
    "65e0bd5483c8923393fa85955ddaf24d68fd8042": {
      "type": "Ybodychange",
      "commitMessage": "Apply InstancePostProcessor extensions for every test instance\n\nPrior to this commit, InstancePostProcessor extensions were only applied\nduring the execution of a MethodTestDescriptor instead of at the point\nwhen such an instance was physically instantiated. Consequently,\nInstancePostProcessor extensions were never applied to instances of\nouter classes when test methods in a nested class were executed, which\nlead to improperly initialized outer instances (e.g,\nNullPointerExceptions, etc.).\n\nThis commit fixes this bug by relocating the invocation of\nInstancePostProcessor extensions to places in the framework where test\ninstances are physically instantiated (i.e., in ClassTestDescriptor and\nNestedClassTestDescriptor).\n\nFurthermore, the argument list for the postProcessTestInstance() method\nin the InstancePostProcessor API has been modified to accept the test\ninstance and a generic ExtensionContext.\n\nIssue: #252\n",
      "commitDate": "2016/5/13 下午9:55",
      "commitName": "65e0bd5483c8923393fa85955ddaf24d68fd8042",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/3 上午6:18",
      "commitNameOld": "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 10.65,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 117,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context, registry, containerExtensionContext)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dfe33b0e7e22b64b712593ea3b635675edbd6f73": {
      "type": "Ybodychange",
      "commitMessage": "Polish JUnit 5 test descriptors\n",
      "commitDate": "2016/5/3 上午6:18",
      "commitName": "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/3 上午6:18",
      "commitNameOld": "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 115,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,8 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n-    context \u003d context.extend().withExtensionRegistry(registry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionRegistry(registry).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f": {
      "type": "Ybodychange",
      "commitMessage": "Eagerly load and validate @BeforeEach \u0026 @AfterEach methods\n\nWith this commit @BeforeEach and @AfterEach methods are looked up and\nvalidated eagerly during the discovery phase instead of late in the game\nduring the execution phase.\n\nThis commit also extracts a new LifecycleMethodUtils class from the\nClassTestDescriptor.\n\nIssue: #232\n",
      "commitDate": "2016/5/3 上午6:18",
      "commitName": "6b575f2ee5f02288a774ff0a85ce3a3e3cb6946f",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/3 上午12:58",
      "commitNameOld": "b691e6a02b9436939bf1867156aa8d8cea4e3fbf",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    context \u003d context.extend().withExtensionRegistry(registry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 115,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n-    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n+    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(this.testClass, context.getExtensionRegistry());\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     context \u003d context.extend().withExtensionRegistry(registry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b691e6a02b9436939bf1867156aa8d8cea4e3fbf": {
      "type": "Ybodychange",
      "commitMessage": "Do not synthesize @BeforeAll \u0026 @AfterAll methods as extensions\n\nThis commit avoids unnecessary streaming and synthesizing of extensions\nas lambda expressions for @BeforeAll and @AfterAll methods. Instead,\n@BeforeAll and @AfterAll methods are now invoked directly using\nstandard for-loops.\n\nIssue: #232\n",
      "commitDate": "2016/5/3 上午12:58",
      "commitName": "b691e6a02b9436939bf1867156aa8d8cea4e3fbf",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/2 下午11:30",
      "commitNameOld": "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    context \u003d context.extend().withExtensionRegistry(registry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 115,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,9 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n-    registerBeforeAllMethodAdapters(registry);\n-    registerAfterAllMethodAdapters(registry);\n     registerBeforeEachMethodAdapters(registry);\n     registerAfterEachMethodAdapters(registry);\n     context \u003d context.extend().withExtensionRegistry(registry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8": {
      "type": "Ybodychange",
      "commitMessage": "Do not mix execution of extensions and user code\n\nThis commit separates the execution of extensions and user code with\nregard to test lifecycle callbacks.\n\nIssue: #232\n",
      "commitDate": "2016/5/2 下午11:30",
      "commitName": "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/2 下午11:30",
      "commitNameOld": "36b132b0fc63a723ec0926e58921379020326c2b",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n    registerBeforeAllMethodAdapters(registry);\n    registerAfterAllMethodAdapters(registry);\n    registerBeforeEachMethodAdapters(registry);\n    registerAfterEachMethodAdapters(registry);\n    context \u003d context.extend().withExtensionRegistry(registry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 108,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n-    ExtensionRegistry newExtensionRegistry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n-    registerBeforeAllMethods(newExtensionRegistry);\n-    registerAfterAllMethods(newExtensionRegistry);\n-    registerBeforeEachMethods(newExtensionRegistry);\n-    registerAfterEachMethods(newExtensionRegistry);\n-    context \u003d context.extend().withExtensionRegistry(newExtensionRegistry).build();\n+    ExtensionRegistry registry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n+    registerBeforeAllMethodAdapters(registry);\n+    registerAfterAllMethodAdapters(registry);\n+    registerBeforeEachMethodAdapters(registry);\n+    registerAfterEachMethodAdapters(registry);\n+    context \u003d context.extend().withExtensionRegistry(registry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": {
      "type": "Ybodychange",
      "commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
      "commitDate": "2016/1/21 下午9:03",
      "commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/19 下午4:41",
      "commitNameOld": "2e70f575f1e3803fc3d934de6932524efca4fe8a",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    ExtensionRegistry newExtensionRegistry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n    registerBeforeAllMethods(newExtensionRegistry);\n    registerAfterAllMethods(newExtensionRegistry);\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 103,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n-    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n+    ExtensionRegistry newExtensionRegistry \u003d populateNewExtensionRegistryFromExtendWith(testClass, context.getExtensionRegistry());\n     registerBeforeAllMethods(newExtensionRegistry);\n     registerAfterAllMethods(newExtensionRegistry);\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n-    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n+    context \u003d context.extend().withExtensionRegistry(newExtensionRegistry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b4957a135bb9b9eba12c8bcb154c8cfbfb4cc566": {
      "type": "Ybodychange",
      "commitMessage": "Introduce extended reporting according to #57\n",
      "commitDate": "2016/1/14 下午10:33",
      "commitName": "b4957a135bb9b9eba12c8bcb154c8cfbfb4cc566",
      "commitAuthor": "Matthias Merdes",
      "commitDateOld": "2016/1/14 上午6:34",
      "commitNameOld": "9d0ea36067b38c05ca3fd5a0312881d3bb1f6bcf",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeAllMethods(newExtensionRegistry);\n    registerAfterAllMethods(newExtensionRegistry);\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 103,
      "functionName": "prepare",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n     registerBeforeAllMethods(newExtensionRegistry);\n     registerAfterAllMethods(newExtensionRegistry);\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n-    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n+    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), context.getExecutionListener(), this);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0027ade00fd483e08714ece1021a7715bb1855da": {
      "type": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
      "commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/22 下午5:34",
      "commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/22 下午5:34",
          "commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/20 下午4:28",
          "commitNameOld": "6e59ae2020944f3ec9715ce8f5c1ac36db3e89ef",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeAllMethods(newExtensionRegistry);\n    registerAfterAllMethods(newExtensionRegistry);\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 103,
          "functionName": "prepare",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,11 @@\n @Override\n-public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n+public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n     registerBeforeAllMethods(newExtensionRegistry);\n     registerAfterAllMethods(newExtensionRegistry);\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n-    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "beforeAll",
            "newValue": "prepare"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/22 下午5:34",
          "commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/20 下午4:28",
          "commitNameOld": "6e59ae2020944f3ec9715ce8f5c1ac36db3e89ef",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeAllMethods(newExtensionRegistry);\n    registerAfterAllMethods(newExtensionRegistry);\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 103,
          "functionName": "prepare",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,11 @@\n @Override\n-public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n+public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n     registerBeforeAllMethods(newExtensionRegistry);\n     registerAfterAllMethods(newExtensionRegistry);\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n-    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[Throwable]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/22 下午5:34",
          "commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/20 下午4:28",
          "commitNameOld": "6e59ae2020944f3ec9715ce8f5c1ac36db3e89ef",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeAllMethods(newExtensionRegistry);\n    registerAfterAllMethods(newExtensionRegistry);\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 103,
          "functionName": "prepare",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,11 @@\n @Override\n-public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n+public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context) {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n     registerBeforeAllMethods(newExtensionRegistry);\n     registerAfterAllMethods(newExtensionRegistry);\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n-    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b90f9c883f8bb6c0ea212a8b0acae113e17fecfb": {
      "type": "Ybodychange",
      "commitMessage": "BeforeAll and AfterAll methdos now also work.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/18 上午5:37",
      "commitName": "b90f9c883f8bb6c0ea212a8b0acae113e17fecfb",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/18 上午3:54",
      "commitNameOld": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeAllMethods(newExtensionRegistry);\n    registerAfterAllMethods(newExtensionRegistry);\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 102,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,12 @@\n @Override\n public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n+    registerBeforeAllMethods(newExtensionRegistry);\n+    registerAfterAllMethods(newExtensionRegistry);\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n     ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n     invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/18 上午3:54",
      "commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/18 上午3:54",
          "commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/17 下午8:48",
          "commitNameOld": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.3,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 95,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,10 @@\n @Override\n-public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n+public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n+    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n+    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Throwable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/18 上午3:54",
          "commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/17 下午8:48",
          "commitNameOld": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.3,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 95,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,10 @@\n @Override\n-public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n+public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n     registerBeforeEachMethods(newExtensionRegistry);\n     registerAfterEachMethods(newExtensionRegistry);\n     context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n+    ContainerExtensionContext containerExtensionContext \u003d new ClassBasedContainerExtensionContext(context.getExtensionContext(), this);\n+    invokeBeforeAllExtensionPoints(newExtensionRegistry, containerExtensionContext);\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(containerExtensionContext).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "8db7e41d03b3d1f989c458e040f86f7e30e153d7": {
      "type": "Ybodychange",
      "commitMessage": "BeforeEach and AfterEach methods are now registered as ExtensionPoints\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/17 下午8:48",
      "commitName": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/15 下午12:45",
      "commitNameOld": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 2.34,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n    registerBeforeEachMethods(newExtensionRegistry);\n    registerAfterEachMethods(newExtensionRegistry);\n    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 89,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,5 +1,8 @@\n @Override\n public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n-    context \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n+    TestExtensionRegistry newExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry());\n+    registerBeforeEachMethods(newExtensionRegistry);\n+    registerAfterEachMethods(newExtensionRegistry);\n+    context \u003d context.extend().withTestExtensionRegistry(newExtensionRegistry).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9d19c214a3117efdd9295bdb1b2ddb4f7e67987": {
      "type": "Ybodychange",
      "commitMessage": "Before- and AfterEachExtensionPoints added. Before/AfterEach method yet to come.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/14 上午4:41",
      "commitName": "e9d19c214a3117efdd9295bdb1b2ddb4f7e67987",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/13 上午12:55",
      "commitNameOld": "634890bff8f38128db31c244486d257b8ef729d7",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n    context \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 91,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,5 @@\n @Override\n public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n+    context \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "634890bff8f38128db31c244486d257b8ef729d7": {
      "type": "Ybodychange",
      "commitMessage": "Added ClassBasedExtensionContext and getParent implementations\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nsynyx GmbH \u0026 Co. KG (http://www.synyx.de) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/13 上午12:55",
      "commitName": "634890bff8f38128db31c244486d257b8ef729d7",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/10 下午9:39",
      "commitNameOld": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 2.14,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 87,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,4 @@\n @Override\n public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).withExtensionContext(new ClassBasedContainerExtensionContext(context.getExtensionContext(), this)).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3f9c11b9326b7d3051cb2a50568cd91113a0c0da": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange)",
      "commitMessage": "Group discussion renaming results\n",
      "commitDate": "2015/12/10 下午9:39",
      "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Group discussion renaming results\n",
          "commitDate": "2015/12/10 下午9:39",
          "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午6:17",
          "commitNameOld": "0e14ad4525a5ade99dacdd76d0ab27223f57ebd4",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.64,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 87,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n @Override\n-public JUnit5Context beforeAll(JUnit5Context context) {\n+public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JUnit5Context]",
            "newValue": "[context-JUnit5EngineExecutionContext]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Group discussion renaming results\n",
          "commitDate": "2015/12/10 下午9:39",
          "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午6:17",
          "commitNameOld": "0e14ad4525a5ade99dacdd76d0ab27223f57ebd4",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.64,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
          "functionStartLine": 87,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n @Override\n-public JUnit5Context beforeAll(JUnit5Context context) {\n+public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) {\n     return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JUnit5Context",
            "newValue": "JUnit5EngineExecutionContext"
          }
        }
      ]
    },
    "fc5ff8d87c124e43601f64da76668e516758a74a": {
      "type": "Ybodychange",
      "commitMessage": "Execute @AfterEach methods in AfterEachCallback\n",
      "commitDate": "2015/12/10 上午5:37",
      "commitName": "fc5ff8d87c124e43601f64da76668e516758a74a",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/10 上午5:16",
      "commitNameOld": "efb867427dd0722262fea5c869ac37cd64ea0070",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 84,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,4 @@\n @Override\n public JUnit5Context beforeAll(JUnit5Context context) {\n-    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withAfterEachCallback(afterEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "efb867427dd0722262fea5c869ac37cd64ea0070": {
      "type": "Ybodychange",
      "commitMessage": "Use Builder pattern to extend JUnit5Context\n",
      "commitDate": "2015/12/10 上午5:16",
      "commitName": "efb867427dd0722262fea5c869ac37cd64ea0070",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/10 上午4:34",
      "commitNameOld": "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 80,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,4 @@\n @Override\n public JUnit5Context beforeAll(JUnit5Context context) {\n-    return context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()));\n+    return context.extend().withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry())).build();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "67ec62513564b48741925f79132f3fe6427e48b3": {
      "type": "Ybodychange",
      "commitMessage": "Populate TestExtensionRegistry in JUnit5Context and call MethodParameterResolver\n",
      "commitDate": "2015/12/9 下午9:06",
      "commitName": "67ec62513564b48741925f79132f3fe6427e48b3",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/9 下午6:56",
      "commitNameOld": "fa681a536942811f712ca91be70f5510ca472020",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()));\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 80,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,4 @@\n @Override\n public JUnit5Context beforeAll(JUnit5Context context) {\n-    return context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context));\n+    return context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context)).withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testClass, context.getTestExtensionRegistry()));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fa681a536942811f712ca91be70f5510ca472020": {
      "type": "Ybodychange",
      "commitMessage": "Doubly nested @BeforeEach works\n",
      "commitDate": "2015/12/9 下午6:56",
      "commitName": "fa681a536942811f712ca91be70f5510ca472020",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/9 下午5:56",
      "commitNameOld": "6c643a69bab0f405bdcd9db8318f991e1c88ef63",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context));\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 80,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,4 @@\n @Override\n public JUnit5Context beforeAll(JUnit5Context context) {\n-    return context.withTestInstanceProvider(testInstanceProvider(context));\n+    return context.withTestInstanceProvider(testInstanceProvider(context)).withBeforeEachCallback(beforeEachCallback(context));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6c643a69bab0f405bdcd9db8318f991e1c88ef63": {
      "type": "Ybodychange",
      "commitMessage": "Test execution of @Nested test classes\n",
      "commitDate": "2015/12/9 下午5:56",
      "commitName": "6c643a69bab0f405bdcd9db8318f991e1c88ef63",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/9 下午5:08",
      "commitNameOld": "470866bc19cac8717ac77b26efc1fe703bed264a",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider(context));\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 74,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,4 @@\n @Override\n public JUnit5Context beforeAll(JUnit5Context context) {\n-    return context.withTestInstanceProvider(testInstanceProvider());\n+    return context.withTestInstanceProvider(testInstanceProvider(context));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "470866bc19cac8717ac77b26efc1fe703bed264a": {
      "type": "Ymovefromfile",
      "commitMessage": "Reincarnate existing SpecificationResolver\n",
      "commitDate": "2015/12/9 下午5:08",
      "commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2015/12/8 下午9:55",
      "commitNameOld": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider());\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
      "functionStartLine": 74,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5ClassDescriptor.java",
        "newPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/ClassTestDescriptor.java",
        "oldMethodName": "beforeAll",
        "newMethodName": "beforeAll"
      }
    },
    "57b31220d25f59bb4aa4903dfee4b8ec2be4525e": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "TestEngine-specific context using type parameter\n",
      "commitDate": "2015/12/8 下午9:55",
      "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "TestEngine-specific context using type parameter\n",
          "commitDate": "2015/12/8 下午9:55",
          "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/8 下午9:32",
          "commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider());\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5ClassDescriptor.java",
          "functionStartLine": 42,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n @Override\n-public Context beforeAll(Context context) {\n-    return context.with(\"TestInstanceProvider\", testInstanceProvider());\n+public JUnit5Context beforeAll(JUnit5Context context) {\n+    return context.withTestInstanceProvider(testInstanceProvider());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-Context]",
            "newValue": "[context-JUnit5Context]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "TestEngine-specific context using type parameter\n",
          "commitDate": "2015/12/8 下午9:55",
          "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/8 下午9:32",
          "commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider());\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5ClassDescriptor.java",
          "functionStartLine": 42,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n @Override\n-public Context beforeAll(Context context) {\n-    return context.with(\"TestInstanceProvider\", testInstanceProvider());\n+public JUnit5Context beforeAll(JUnit5Context context) {\n+    return context.withTestInstanceProvider(testInstanceProvider());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Context",
            "newValue": "JUnit5Context"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "TestEngine-specific context using type parameter\n",
          "commitDate": "2015/12/8 下午9:55",
          "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/8 下午9:32",
          "commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context beforeAll(JUnit5Context context) {\n    return context.withTestInstanceProvider(testInstanceProvider());\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5ClassDescriptor.java",
          "functionStartLine": 42,
          "functionName": "beforeAll",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,4 @@\n @Override\n-public Context beforeAll(Context context) {\n-    return context.with(\"TestInstanceProvider\", testInstanceProvider());\n+public JUnit5Context beforeAll(JUnit5Context context) {\n+    return context.withTestInstanceProvider(testInstanceProvider());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28ffd5ee9d1e996133445cac2256407f28380e91": {
      "type": "Yintroduced",
      "commitMessage": "Spike tree-based \"implementation\" of JUnit5 engine\n",
      "commitDate": "2015/12/8 下午9:32",
      "commitName": "28ffd5ee9d1e996133445cac2256407f28380e91",
      "commitAuthor": "Marc Philipp",
      "diff": "@@ -0,0 +1,4 @@\n+@Override\n+public Context beforeAll(Context context) {\n+    return context.with(\"TestInstanceProvider\", testInstanceProvider());\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic Context beforeAll(Context context) {\n    return context.with(\"TestInstanceProvider\", testInstanceProvider());\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5ClassDescriptor.java",
      "functionStartLine": 34,
      "functionName": "beforeAll",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}