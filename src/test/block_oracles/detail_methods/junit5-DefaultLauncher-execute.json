{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "DefaultLauncher.java",
  "functionName": "execute",
  "functionId": "execute___root-Root__configurationParameters-ConfigurationParameters__listeners-TestExecutionListener",
  "sourceFilePath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 142,
  "functionEndLine": 157,
  "numCommitsSeen": 263,
  "timeTaken": 1623,
  "changeHistory": [
    "2f3440e0f221255a83b28c42cf77407bde92a8b4",
    "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
    "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "4537bec58804c392a8bce296dced0337c8ec1a8d",
    "e273d6681b96509b0bd35916a82fcfada21f18c6",
    "5f6f33a074e8469211e5d648a4f98a3628be18a1",
    "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
    "a2e588e96c3a763553d764d5c35a44b9eea41d75",
    "961fd47344c55d21907607ec9672df6d4f3d2362",
    "93397066597b7ca8af35a77b9559bdc079d4f5d5",
    "9da25e126d174ba6e6ae02596afa538a7cafe17b",
    "9f7d082872c4b4109729a3a480f1dedad3083bad",
    "99aaaf56f401af1e08cccd0c013a8633c04eb22b",
    "e4c640078022076935caef8edd312ea547f3b9d1",
    "830b6d5976b6db01dad3866cfb3d54c6216b1252",
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
    "c2b82a7de0e755b137e595906f8dc415f1619727",
    "891efa3653cb899ca27afcd1abc385fc3fa663fa",
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
    "90557f5414831ca924bca50c1591dd348c1c7162",
    "5b99f734253c15189a88cd5704ec30ded2f24694",
    "2faf053a85fd24cb6f65e7b1258d7c507587866c",
    "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
    "487bbff85f6651921a4c4a3520a9e315b0f2b381",
    "b2854484a0f6076f623028376c9b0827ba6ee8fe",
    "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
    "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
    "62a0ab3e60e4a1c62c806934158444f901d8e22c",
    "db7c029008a0fab7fb6770078c1b54a175c35c6c",
    "36f0d62665a55a1250823ea1b7a7d9148efb27a8",
    "cbf97077bae0db71dc3a7cade28c3b00587a8699",
    "f6372b05546e29c74e6809f4e54a096f537bcd5d",
    "226ecd8efc45e4540bba43f6c604e891b5a94689",
    "75a91267a92e9fd4d171a3f18f2135e675687961"
  ],
  "changeHistoryShort": {
    "2f3440e0f221255a83b28c42cf77407bde92a8b4": "Ybodychange",
    "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb": "Ybodychange",
    "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4": "Ymultichange(Yparameterchange,Ybodychange)",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "4537bec58804c392a8bce296dced0337c8ec1a8d": "Yfilerename",
    "e273d6681b96509b0bd35916a82fcfada21f18c6": "Yfilerename",
    "5f6f33a074e8469211e5d648a4f98a3628be18a1": "Ybodychange",
    "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": "Ybodychange",
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": "Yfilerename",
    "a2e588e96c3a763553d764d5c35a44b9eea41d75": "Yfilerename",
    "961fd47344c55d21907607ec9672df6d4f3d2362": "Ymultichange(Yfilerename,Ybodychange)",
    "93397066597b7ca8af35a77b9559bdc079d4f5d5": "Ybodychange",
    "9da25e126d174ba6e6ae02596afa538a7cafe17b": "Yparameterchange",
    "9f7d082872c4b4109729a3a480f1dedad3083bad": "Ybodychange",
    "99aaaf56f401af1e08cccd0c013a8633c04eb22b": "Ybodychange",
    "e4c640078022076935caef8edd312ea547f3b9d1": "Ybodychange",
    "830b6d5976b6db01dad3866cfb3d54c6216b1252": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": "Ybodychange",
    "c2b82a7de0e755b137e595906f8dc415f1619727": "Ybodychange",
    "891efa3653cb899ca27afcd1abc385fc3fa663fa": "Ybodychange",
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c": "Ybodychange",
    "90557f5414831ca924bca50c1591dd348c1c7162": "Ybodychange",
    "5b99f734253c15189a88cd5704ec30ded2f24694": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2faf053a85fd24cb6f65e7b1258d7c507587866c": "Ybodychange",
    "b9a89c31681f519fcbe2c0ec5ce474f97aec5240": "Ybodychange",
    "487bbff85f6651921a4c4a3520a9e315b0f2b381": "Ybodychange",
    "b2854484a0f6076f623028376c9b0827ba6ee8fe": "Ybodychange",
    "cdc709cdb2651a16725ba16eb9c2470d617b5b85": "Ybodychange",
    "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776": "Ybodychange",
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534": "Ymultichange(Ymodifierchange,Ybodychange)",
    "62a0ab3e60e4a1c62c806934158444f901d8e22c": "Ybodychange",
    "db7c029008a0fab7fb6770078c1b54a175c35c6c": "Ybodychange",
    "36f0d62665a55a1250823ea1b7a7d9148efb27a8": "Ybodychange",
    "cbf97077bae0db71dc3a7cade28c3b00587a8699": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "f6372b05546e29c74e6809f4e54a096f537bcd5d": "Yexceptionschange",
    "226ecd8efc45e4540bba43f6c604e891b5a94689": "Ymultichange(Yparameterchange,Ybodychange)",
    "75a91267a92e9fd4d171a3f18f2135e675687961": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2f3440e0f221255a83b28c42cf77407bde92a8b4": {
      "type": "Ybodychange",
      "commitMessage": "Introduce support for parallel test execution\n\nThis commit adds opt-in support for parallel test execution and\ncapturing output to `System.out` and `System.err`. Both features are\ndisabled by default but can be enabled and configured using\nconfiguration parameters.\n\nThe implementation is based on the Fork/Join Framework and designed to\nbe reusable by other test engines that extend HierarchicalTestEngine.\n\nThe Jupiter API provides annotations to declare which shared resources a\ntest needs to access and in which way. Moreover, the execution mode of a\ntest can be influenced.\n\nIn addition, a number of TestExecutionListeners have been made\nthread-safe.\n\nThe documentation subproject is now configured to execute tests in\nparallel. All other subprojects will have to wait as Gradle currently\nblows up when used with parallel test execution.\n\nResolves #60. Closes #1461.\n\nCo-authored-by: Leonard Brünings \u003clord_damokles@gmx.net\u003e\nCo-authored-by: Christian Stein \u003csormuras@gmail.com\u003e\n",
      "commitDate": "2018/6/23 上午1:55",
      "commitName": "2f3440e0f221255a83b28c42cf77407bde92a8b4",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2018/6/8 下午6:56",
      "commitNameOld": "27ea0d42179039b2e761bd0d92a875a3edf42c3d",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 14.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n    withInterceptedStreams(configurationParameters, listenerRegistry, testExecutionListener -\u003e {\n        TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n        testExecutionListener.testPlanExecutionStarted(testPlan);\n        ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n        for (TestEngine testEngine : root.getTestEngines()) {\n            TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n            execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n        }\n        testExecutionListener.testPlanExecutionFinished(testPlan);\n    });\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 142,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,13 @@\n private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n     TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n-    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n-    testExecutionListener.testPlanExecutionStarted(testPlan);\n-    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n-    for (TestEngine testEngine : root.getTestEngines()) {\n-        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-        execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n-    }\n-    testExecutionListener.testPlanExecutionFinished(testPlan);\n+    withInterceptedStreams(configurationParameters, listenerRegistry, testExecutionListener -\u003e {\n+        TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n+        testExecutionListener.testPlanExecutionStarted(testPlan);\n+        ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n+        for (TestEngine testEngine : root.getTestEngines()) {\n+            TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n+            execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n+        }\n+        testExecutionListener.testPlanExecutionFinished(testPlan);\n+    });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb": {
      "type": "Ybodychange",
      "commitMessage": "Handle exceptions in test execution phase\n\nState: work-in-progress\n\nAddresses: #750\n",
      "commitDate": "2017/4/15 下午6:27",
      "commitName": "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/4/15 下午6:27",
      "commitNameOld": "c49b423f2d1c723a3724597049810416a91f5cba",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n     TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n+        execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add Launcher.execute(LauncherDiscoveryRequest, TestExecutionListener...)\n\nAddresses #628 by adding an overloaded execute(LauncherDiscoveryRequest,\nTestExecutionListener...) method that uses the supplied\nTestExecutionListeners in addition to already registered listeners but\nonly for the supplied LauncherDiscoveryRequest.\n",
      "commitDate": "2017/3/20 上午12:33",
      "commitName": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
      "commitAuthor": "Christian Stein",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add Launcher.execute(LauncherDiscoveryRequest, TestExecutionListener...)\n\nAddresses #628 by adding an overloaded execute(LauncherDiscoveryRequest,\nTestExecutionListener...) method that uses the supplied\nTestExecutionListeners in addition to already registered listeners but\nonly for the supplied LauncherDiscoveryRequest.\n",
          "commitDate": "2017/3/20 上午12:33",
          "commitName": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
          "commitAuthor": "Christian Stein",
          "commitDateOld": "2017/1/3 上午4:10",
          "commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 75.85,
          "commitsBetweenForRepo": 236,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
          "functionStartLine": 127,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,12 @@\n-private void execute(Root root, ConfigurationParameters configurationParameters) {\n+private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n+    TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Root, configurationParameters-ConfigurationParameters]",
            "newValue": "[root-Root, configurationParameters-ConfigurationParameters, listeners-TestExecutionListener]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add Launcher.execute(LauncherDiscoveryRequest, TestExecutionListener...)\n\nAddresses #628 by adding an overloaded execute(LauncherDiscoveryRequest,\nTestExecutionListener...) method that uses the supplied\nTestExecutionListeners in addition to already registered listeners but\nonly for the supplied LauncherDiscoveryRequest.\n",
          "commitDate": "2017/3/20 上午12:33",
          "commitName": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
          "commitAuthor": "Christian Stein",
          "commitDateOld": "2017/1/3 上午4:10",
          "commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 75.85,
          "commitsBetweenForRepo": 236,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
          "functionStartLine": 127,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,12 @@\n-private void execute(Root root, ConfigurationParameters configurationParameters) {\n+private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n+    TestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午4:59",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午2:04",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 116,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
        "newPath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
      }
    },
    "4537bec58804c392a8bce296dced0337c8ec1a8d": {
      "type": "Yfilerename",
      "commitMessage": "Rename remaining org.junit.gen5 base packages to org.junit.platform\n\nIssue: #286\n",
      "commitDate": "2016/6/20 上午1:22",
      "commitName": "4537bec58804c392a8bce296dced0337c8ec1a8d",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午12:25",
      "commitNameOld": "4dd821ac0cf681f17f14e1dcd383b10c99104e70",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 116,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
      }
    },
    "e273d6681b96509b0bd35916a82fcfada21f18c6": {
      "type": "Yfilerename",
      "commitMessage": "Rename launcher.main package to launcher.core\n",
      "commitDate": "2016/6/19 上午5:26",
      "commitName": "e273d6681b96509b0bd35916a82fcfada21f18c6",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/19 上午5:19",
      "commitNameOld": "d4fca2b705b1f05312a59e71d37853e15632c437",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
      "functionStartLine": 116,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java"
      }
    },
    "5f6f33a074e8469211e5d648a4f98a3628be18a1": {
      "type": "Ybodychange",
      "commitMessage": "Polish Javadoc for Engine and Launcher APIs\n\nIssue: #234\n",
      "commitDate": "2016/5/28 下午9:26",
      "commitName": "5f6f33a074e8469211e5d648a4f98a3628be18a1",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/14 上午12:47",
      "commitNameOld": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 14.86,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 109,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n private void execute(Root root, ConfigurationParameters configurationParameters) {\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "ConfigurationParameters object is passed into ExecutionRequest #233\n",
      "commitDate": "2016/5/14 上午12:47",
      "commitName": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "ConfigurationParameters object is passed into ExecutionRequest #233\n",
          "commitDate": "2016/5/14 上午12:47",
          "commitName": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016/5/13 下午11:49",
          "commitNameOld": "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
          "functionStartLine": 109,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-private void execute(Root root) {\n+private void execute(Root root, ConfigurationParameters configurationParameters) {\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n+        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Root]",
            "newValue": "[root-Root, configurationParameters-ConfigurationParameters]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "ConfigurationParameters object is passed into ExecutionRequest #233\n",
          "commitDate": "2016/5/14 上午12:47",
          "commitName": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016/5/13 下午11:49",
          "commitNameOld": "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
          "functionStartLine": 109,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-private void execute(Root root) {\n+private void execute(Root root, ConfigurationParameters configurationParameters) {\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n+        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": {
      "type": "Ybodychange",
      "commitMessage": "Simplify DefaultLauncher, remove TestEngineRegistry interface\n",
      "commitDate": "2016/1/22 下午6:32",
      "commitName": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016/1/22 下午6:26",
      "commitNameOld": "1f209b6b9e9c66c4931f34a5d83df8e11c1d6dea",
      "commitAuthorOld": "Matthias Merdes",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 93,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n private void execute(Root root) {\n     TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": {
      "type": "Yfilerename",
      "commitMessage": "Rename JUnit5Launcher to DefaultLauncher\n\nIssue: #129\n",
      "commitDate": "2016/1/21 上午1:52",
      "commitName": "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/21 上午1:47",
      "commitNameOld": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 95,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java"
      }
    },
    "a2e588e96c3a763553d764d5c35a44b9eea41d75": {
      "type": "Yfilerename",
      "commitMessage": "Convert Launcher class into an interface\n\nThis commit coverts the existing Launcher class into an interface and\nrenames the existing implementation to JUnit5Launcher.\n\nIn addition, this commit renames DiscoveryRequestBuilder to\nTestDiscoveryRequestBuilder.\n\nIssue: #129\n",
      "commitDate": "2016/1/21 上午1:47",
      "commitName": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016/1/21 上午1:27",
      "commitNameOld": "027bc980ad0a17a6130013aeec068296606bbfef",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
      "functionStartLine": 113,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java"
      }
    },
    "961fd47344c55d21907607ec9672df6d4f3d2362": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
      "commitDate": "2016/1/19 上午12:34",
      "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
          "commitDate": "2016/1/19 上午12:34",
          "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016/1/18 下午11:56",
          "commitNameOld": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
          "functionStartLine": 129,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n private void execute(Root root) {\n-    TestPlan testPlan \u003d TestPlan.from(root);\n+    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n     TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
            "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
          "commitDate": "2016/1/19 上午12:34",
          "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016/1/18 下午11:56",
          "commitNameOld": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
          "functionStartLine": 129,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n private void execute(Root root) {\n-    TestPlan testPlan \u003d TestPlan.from(root);\n+    TestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n     TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "93397066597b7ca8af35a77b9559bdc079d4f5d5": {
      "type": "Ybodychange",
      "commitMessage": "Cleanup JavaDoc and Polish\n\nIssue: #54\n",
      "commitDate": "2016/1/18 下午11:56",
      "commitName": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016/1/18 下午11:03",
      "commitNameOld": "ab12dc85ce90a941531d666e658dfaa0834fda31",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root);\n    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 123,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n private void execute(Root root) {\n     TestPlan testPlan \u003d TestPlan.from(root);\n-    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9da25e126d174ba6e6ae02596afa538a7cafe17b": {
      "type": "Yparameterchange",
      "commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
      "commitDate": "2016/1/18 下午10:57",
      "commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016/1/18 下午12:10",
      "commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(Root root) {\n    TestPlan testPlan \u003d TestPlan.from(root);\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 125,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n-private void execute(RootTestDescriptor root) {\n+private void execute(Root root) {\n     TestPlan testPlan \u003d TestPlan.from(root);\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n     for (TestEngine testEngine : root.getTestEngines()) {\n         TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n         testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[root-RootTestDescriptor]",
        "newValue": "[root-Root]"
      }
    },
    "9f7d082872c4b4109729a3a480f1dedad3083bad": {
      "type": "Ybodychange",
      "commitMessage": "Only execute engines with discovered descriptors\n\n- Looks clearer to me\n- Less usage of Optional\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/18 下午11:58",
      "commitName": "9f7d082872c4b4109729a3a480f1dedad3083bad",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/12 上午5:35",
      "commitNameOld": "f8a1c6b5ae5a144d1a3e85100a4d61b7f059822d",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(RootTestDescriptor root) {\n    TestPlan testPlan \u003d TestPlan.from(root);\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 65,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,11 @@\n private void execute(RootTestDescriptor root) {\n-    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     TestPlan testPlan \u003d TestPlan.from(root);\n+    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n-    for (TestEngine testEngine : getAvailableEngines()) {\n-        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n-        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n-            testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n-        });\n+    ExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan, testExecutionListener);\n+    for (TestEngine testEngine : root.getTestEngines()) {\n+        TestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n+        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "99aaaf56f401af1e08cccd0c013a8633c04eb22b": {
      "type": "Ybodychange",
      "commitMessage": "Delete listener methods for unsupported events\n\nIssue: #34\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks Netcetera AG\n(http://netcetera.com) for supporting the JUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/12 上午5:35",
      "commitName": "99aaaf56f401af1e08cccd0c013a8633c04eb22b",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/8 下午6:18",
      "commitNameOld": "e4c640078022076935caef8edd312ea547f3b9d1",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(RootTestDescriptor root) {\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan \u003d TestPlan.from(root);\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n            testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n        });\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 69,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,12 @@\n private void execute(RootTestDescriptor root) {\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     TestPlan testPlan \u003d TestPlan.from(root);\n     testExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : getAvailableEngines()) {\n         Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n         testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n-            testExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n             testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n-            testExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n     testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4c640078022076935caef8edd312ea547f3b9d1": {
      "type": "Ybodychange",
      "commitMessage": "TestExecutionListener uses TestIdentifier\n",
      "commitDate": "2015/12/8 下午6:18",
      "commitName": "e4c640078022076935caef8edd312ea547f3b9d1",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/8 下午6:18",
      "commitNameOld": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(RootTestDescriptor root) {\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan \u003d TestPlan.from(root);\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n            testExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n            testExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 69,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,14 @@\n private void execute(RootTestDescriptor root) {\n-    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     TestPlan testPlan \u003d TestPlan.from(root);\n-    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n+    testExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : getAvailableEngines()) {\n         Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n         testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n-            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n-            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n+            testExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n+            testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n+            testExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n-    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n+    testExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "830b6d5976b6db01dad3866cfb3d54c6216b1252": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
      "commitDate": "2015/12/8 下午6:18",
      "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(RootTestDescriptor root) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan \u003d TestPlan.from(root);\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 69,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,15 @@\n-public void execute(TestPlan testPlan) {\n+private void execute(RootTestDescriptor root) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    TestPlan testPlan \u003d TestPlan.from(root);\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : getAvailableEngines()) {\n-        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n         testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n             testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n             testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n             testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testPlan-TestPlan]",
            "newValue": "[root-RootTestDescriptor]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(RootTestDescriptor root) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan \u003d TestPlan.from(root);\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 69,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,15 @@\n-public void execute(TestPlan testPlan) {\n+private void execute(RootTestDescriptor root) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    TestPlan testPlan \u003d TestPlan.from(root);\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : getAvailableEngines()) {\n-        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n         testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n             testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n             testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n             testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(RootTestDescriptor root) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan \u003d TestPlan.from(root);\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 69,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,15 @@\n-public void execute(TestPlan testPlan) {\n+private void execute(RootTestDescriptor root) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    TestPlan testPlan \u003d TestPlan.from(root);\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : getAvailableEngines()) {\n-        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n         testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n             testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n             testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n             testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": {
      "type": "Ybodychange",
      "commitMessage": "#29: Refactored the TestEngine API\n- discoveryTests now returns the root testDescriptor and does not take and EngineDescriptor as argument\n- TestPlan holds a mapping for the engines and their corresponding root test descriptor\n",
      "commitDate": "2015/12/3 下午8:58",
      "commitName": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2015/12/3 下午6:42",
      "commitNameOld": "59a0a13262b73c398c05376448aad97e7582384d",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 53,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n public void execute(TestPlan testPlan) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n-    for (TestEngine testEngine : lookupAllTestEngines()) {\n-        Optional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n-        engineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n+    for (TestEngine testEngine : getAvailableEngines()) {\n+        Optional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+        testDescriptorOptional.ifPresent(testDescriptor -\u003e {\n             testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-            testEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n+            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n             testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c2b82a7de0e755b137e595906f8dc415f1619727": {
      "type": "Ybodychange",
      "commitMessage": "New test context object is handed through\n",
      "commitDate": "2015/11/14 下午6:26",
      "commitName": "c2b82a7de0e755b137e595906f8dc415f1619727",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/13 下午7:44",
      "commitNameOld": "6fe08b38bb3af3e528ce3f65b2f189169970ed1b",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        Optional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n        engineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 52,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n public void execute(TestPlan testPlan) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         Optional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n         engineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n             testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-            testEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n+            testEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n             testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n         });\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "891efa3653cb899ca27afcd1abc385fc3fa663fa": {
      "type": "Ybodychange",
      "commitMessage": "Class name filters work in a simple way\n",
      "commitDate": "2015/11/13 下午7:24",
      "commitName": "891efa3653cb899ca27afcd1abc385fc3fa663fa",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/9 下午10:50",
      "commitNameOld": "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 3.86,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        Optional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n        engineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 53,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,14 @@\n public void execute(TestPlan testPlan) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-        Optional\u003cEngineDescriptor\u003e engineDescriptor \u003d testPlan.getEngineDescriptorFor(testEngine);\n-        testEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n-        testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n+        Optional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n+        engineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n+            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n+            testEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n+            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n+        });\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c": {
      "type": "Ybodychange",
      "commitMessage": "changed TestEngine interface to only use engineDescriptor.addChild an no more return values.\ncompiles, but lots of tests failing\n",
      "commitDate": "2015/11/9 下午7:11",
      "commitName": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/8 下午5:46",
      "commitNameOld": "1105bef6877be1c036331d5b6d607d5e16c7463b",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n        Optional\u003cEngineDescriptor\u003e engineDescriptor \u003d testPlan.getEngineDescriptorFor(testEngine);\n        testEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n        testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 81,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n public void execute(TestPlan testPlan) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-        List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n-        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n+        Optional\u003cEngineDescriptor\u003e engineDescriptor \u003d testPlan.getEngineDescriptorFor(testEngine);\n+        testEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n         testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "90557f5414831ca924bca50c1591dd348c1c7162": {
      "type": "Ybodychange",
      "commitMessage": "Add TestEngine start/finish events to listener\n",
      "commitDate": "2015/10/31 上午4:41",
      "commitName": "90557f5414831ca924bca50c1591dd348c1c7162",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/30 下午11:12",
      "commitNameOld": "9d0819e13f70c9385836259aabb8077b5240fb2c",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n        List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n        testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 48,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,12 @@\n public void execute(TestPlan testPlan) {\n     TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n     TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n+        testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n         List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n         testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n+        testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n     }\n     testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b99f734253c15189a88cd5704ec30ded2f24694": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Added testplan to all listener methods and introduced composed listener in the registry\n",
      "commitDate": "2015/10/30 下午6:08",
      "commitName": "5b99f734253c15189a88cd5704ec30ded2f24694",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Added testplan to all listener methods and introduced composed listener in the registry\n",
          "commitDate": "2015/10/30 下午6:08",
          "commitName": "5b99f734253c15189a88cd5704ec30ded2f24694",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015/10/30 下午5:54",
          "commitNameOld": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 50,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,10 @@\n-private void execute(TestPlan testPlan) {\n-    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n-    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+public void execute(TestPlan testPlan) {\n+    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n+        List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n+        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n     }\n-    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added testplan to all listener methods and introduced composed listener in the registry\n",
          "commitDate": "2015/10/30 下午6:08",
          "commitName": "5b99f734253c15189a88cd5704ec30ded2f24694",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015/10/30 下午5:54",
          "commitNameOld": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 50,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,10 @@\n-private void execute(TestPlan testPlan) {\n-    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n-    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+public void execute(TestPlan testPlan) {\n+    TestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n+    TestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n+        List\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n+        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n     }\n-    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2faf053a85fd24cb6f65e7b1258d7c507587866c": {
      "type": "Ybodychange",
      "commitMessage": "Rename methods to be more specific\n",
      "commitDate": "2015/10/30 下午5:54",
      "commitName": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/30 下午5:34",
      "commitNameOld": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 50,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n private void execute(TestPlan testPlan) {\n     listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n     TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n+        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n     }\n     listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b9a89c31681f519fcbe2c0ec5ce474f97aec5240": {
      "type": "Ybodychange",
      "commitMessage": "Introduce EngineExecutionContext\n",
      "commitDate": "2015/10/30 下午5:34",
      "commitName": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/30 上午3:57",
      "commitNameOld": "169dab8739b8b51e52fc114ab797f2f540c2c257",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 50,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n private void execute(TestPlan testPlan) {\n     listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n     TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n+        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n     }\n     listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "487bbff85f6651921a4c4a3520a9e315b0f2b381": {
      "type": "Ybodychange",
      "commitMessage": "Pass TestPlan to TestPlanExecutionListener\n",
      "commitDate": "2015/10/29 下午9:23",
      "commitName": "487bbff85f6651921a4c4a3520a9e315b0f2b381",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/29 下午4:37",
      "commitNameOld": "f86a53c30ceac7ec806e398f1ff3be8a3a4bd6f3",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 47,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n private void execute(TestPlan testPlan) {\n-    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n+    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n     TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n     }\n     listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2854484a0f6076f623028376c9b0827ba6ee8fe": {
      "type": "Ybodychange",
      "commitMessage": "TestListenerRegistry cleaned up (a little bit)\n",
      "commitDate": "2015/10/28 下午10:58",
      "commitName": "b2854484a0f6076f623028376c9b0827ba6ee8fe",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/10/28 下午10:11",
      "commitNameOld": "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 36,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,8 @@\n private void execute(TestPlan testPlan) {\n     listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n-    TestExecutionListener compositeListener \u003d new TestExecutionListener() {\n-\n-        @Override\n-        public void dynamicTestFound(TestDescriptor testDescriptor) {\n-            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.dynamicTestFound(testDescriptor));\n-        }\n-\n-        @Override\n-        public void testStarted(TestDescriptor testDescriptor) {\n-            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testStarted(testDescriptor));\n-        }\n-\n-        @Override\n-        public void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n-            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testSkipped(testDescriptor, t));\n-        }\n-\n-        @Override\n-        public void testAborted(TestDescriptor testDescriptor, Throwable t) {\n-            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testAborted(testDescriptor, t));\n-        }\n-\n-        @Override\n-        public void testFailed(TestDescriptor testDescriptor, Throwable t) {\n-            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testFailed(testDescriptor, t));\n-        }\n-\n-        @Override\n-        public void testSucceeded(TestDescriptor testDescriptor) {\n-            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testSucceeded(testDescriptor));\n-        }\n-    };\n+    TestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n     }\n     listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cdc709cdb2651a16725ba16eb9c2470d617b5b85": {
      "type": "Ybodychange",
      "commitMessage": "test execution listener registry nicht mehr static\n",
      "commitDate": "2015/10/28 下午10:11",
      "commitName": "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/10/28 下午9:43",
      "commitNameOld": "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    TestExecutionListener compositeListener \u003d new TestExecutionListener() {\n\n        @Override\n        public void dynamicTestFound(TestDescriptor testDescriptor) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.dynamicTestFound(testDescriptor));\n        }\n\n        @Override\n        public void testStarted(TestDescriptor testDescriptor) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testStarted(testDescriptor));\n        }\n\n        @Override\n        public void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testSkipped(testDescriptor, t));\n        }\n\n        @Override\n        public void testAborted(TestDescriptor testDescriptor, Throwable t) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testAborted(testDescriptor, t));\n        }\n\n        @Override\n        public void testFailed(TestDescriptor testDescriptor, Throwable t) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testFailed(testDescriptor, t));\n        }\n\n        @Override\n        public void testSucceeded(TestDescriptor testDescriptor) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testSucceeded(testDescriptor));\n        }\n    };\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 36,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,39 @@\n private void execute(TestPlan testPlan) {\n     listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n+    TestExecutionListener compositeListener \u003d new TestExecutionListener() {\n+\n+        @Override\n+        public void dynamicTestFound(TestDescriptor testDescriptor) {\n+            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.dynamicTestFound(testDescriptor));\n+        }\n+\n+        @Override\n+        public void testStarted(TestDescriptor testDescriptor) {\n+            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testStarted(testDescriptor));\n+        }\n+\n+        @Override\n+        public void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n+            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testSkipped(testDescriptor, t));\n+        }\n+\n+        @Override\n+        public void testAborted(TestDescriptor testDescriptor, Throwable t) {\n+            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testAborted(testDescriptor, t));\n+        }\n+\n+        @Override\n+        public void testFailed(TestDescriptor testDescriptor, Throwable t) {\n+            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testFailed(testDescriptor, t));\n+        }\n+\n+        @Override\n+        public void testSucceeded(TestDescriptor testDescriptor) {\n+            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -\u003e testExecutionListener.testSucceeded(testDescriptor));\n+        }\n+    };\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n+        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n     }\n     listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776": {
      "type": "Ybodychange",
      "commitMessage": "Launcher API reworked\n",
      "commitDate": "2015/10/28 下午9:43",
      "commitName": "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/10/28 下午9:24",
      "commitNameOld": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 37,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,7 @@\n private void execute(TestPlan testPlan) {\n-    notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n+    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n-    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Launcher API umgebaut\n",
      "commitDate": "2015/10/28 下午9:24",
      "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Launcher API umgebaut\n",
          "commitDate": "2015/10/28 下午9:24",
          "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/10/28 下午7:12",
          "commitNameOld": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(TestPlan testPlan) {\n    notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 37,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,7 @@\n-public void execute(TestPlan testPlan) {\n-    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n+private void execute(TestPlan testPlan) {\n+    notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n     notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Launcher API umgebaut\n",
          "commitDate": "2015/10/28 下午9:24",
          "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/10/28 下午7:12",
          "commitNameOld": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private void execute(TestPlan testPlan) {\n    notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 37,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,7 @@\n-public void execute(TestPlan testPlan) {\n-    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n+private void execute(TestPlan testPlan) {\n+    notifyTestPlanExecutionListeners(testPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n     notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "62a0ab3e60e4a1c62c806934158444f901d8e22c": {
      "type": "Ybodychange",
      "commitMessage": "Split TestListener API into [TestPlan|Test]ExecutionListener\n",
      "commitDate": "2015/10/28 下午7:12",
      "commitName": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2015/10/28 下午6:58",
      "commitNameOld": "0f960f597c4d3909797a94e92f03ab52d346d318",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 32,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,7 @@\n public void execute(TestPlan testPlan) {\n-    notifyListeners(TestListener::testPlanExecutionStarted);\n+    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n-    notifyListeners(TestListener::testPlanExecutionFinished);\n+    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "db7c029008a0fab7fb6770078c1b54a175c35c6c": {
      "type": "Ybodychange",
      "commitMessage": "Rename listener methods that operate on TestPlan level\n",
      "commitDate": "2015/10/28 下午5:23",
      "commitName": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/28 下午5:23",
      "commitNameOld": "d10441a8f8130f3c71535c02f79e8135d4b64fc2",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    notifyListeners(TestListener::testPlanExecutionStarted);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyListeners(TestListener::testPlanExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 25,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,7 @@\n public void execute(TestPlan testPlan) {\n-    notifyListeners(TestListener::testExecutionStarted);\n+    notifyListeners(TestListener::testPlanExecutionStarted);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n-    notifyListeners(TestListener::testExecutionFinished);\n+    notifyListeners(TestListener::testPlanExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "36f0d62665a55a1250823ea1b7a7d9148efb27a8": {
      "type": "Ybodychange",
      "commitMessage": "- Added support for TestListeners in the JUnit5TestEngine\n- Test result is not reported to the listeners correctly\n- Currently, the TestListeners are registered using the ServiceLoader, this should be changed later on\n",
      "commitDate": "2015/10/28 下午5:23",
      "commitName": "36f0d62665a55a1250823ea1b7a7d9148efb27a8",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2015/10/28 下午5:23",
      "commitNameOld": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestPlan testPlan) {\n    notifyListeners(TestListener::testExecutionStarted);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyListeners(TestListener::testExecutionFinished);\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 23,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,7 @@\n public void execute(TestPlan testPlan) {\n+    notifyListeners(TestListener::testExecutionStarted);\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n-        testEngine.execute(tests);\n+        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n+    notifyListeners(TestListener::testExecutionFinished);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cbf97077bae0db71dc3a7cade28c3b00587a8699": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
      "commitDate": "2015/10/28 下午5:23",
      "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
          "commitDate": "2015/10/28 下午5:23",
          "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015/10/28 上午1:00",
          "commitNameOld": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n        testEngine.execute(tests);\n    }\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 21,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,6 @@\n-public void execute(TestExecutionPlan testPlan) throws Throwable {\n-    for (Engine engine : discoverEngines()) {\n-        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n-        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n-        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n-        for (TestIdentifier testIdentifier : filtered) {\n-            testDescriptions.add(lookup(engine, testIdentifier));\n-        }\n-        engine.execute(testDescriptions);\n+public void execute(TestPlan testPlan) {\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n+        testEngine.execute(tests);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testPlan-TestExecutionPlan]",
            "newValue": "[testPlan-TestPlan]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
          "commitDate": "2015/10/28 下午5:23",
          "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015/10/28 上午1:00",
          "commitNameOld": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n        testEngine.execute(tests);\n    }\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 21,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,6 @@\n-public void execute(TestExecutionPlan testPlan) throws Throwable {\n-    for (Engine engine : discoverEngines()) {\n-        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n-        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n-        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n-        for (TestIdentifier testIdentifier : filtered) {\n-            testDescriptions.add(lookup(engine, testIdentifier));\n-        }\n-        engine.execute(testDescriptions);\n+public void execute(TestPlan testPlan) {\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n+        testEngine.execute(tests);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[Throwable]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
          "commitDate": "2015/10/28 下午5:23",
          "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015/10/28 上午1:00",
          "commitNameOld": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n        testEngine.execute(tests);\n    }\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 21,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,6 @@\n-public void execute(TestExecutionPlan testPlan) throws Throwable {\n-    for (Engine engine : discoverEngines()) {\n-        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n-        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n-        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n-        for (TestIdentifier testIdentifier : filtered) {\n-            testDescriptions.add(lookup(engine, testIdentifier));\n-        }\n-        engine.execute(testDescriptions);\n+public void execute(TestPlan testPlan) {\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+        List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n+        testEngine.execute(tests);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f6372b05546e29c74e6809f4e54a096f537bcd5d": {
      "type": "Yexceptionschange",
      "commitMessage": "Copy over code from @bechte\n",
      "commitDate": "2015/10/28 上午1:00",
      "commitName": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/28 上午12:09",
      "commitNameOld": "226ecd8efc45e4540bba43f6c604e891b5a94689",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void execute(TestExecutionPlan testPlan) throws Throwable {\n    for (Engine engine : discoverEngines()) {\n        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 40,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n-public void execute(TestExecutionPlan testPlan) throws Exception {\n+public void execute(TestExecutionPlan testPlan) throws Throwable {\n     for (Engine engine : discoverEngines()) {\n         Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n         List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n         List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n         List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n         for (TestIdentifier testIdentifier : filtered) {\n             testDescriptions.add(lookup(engine, testIdentifier));\n         }\n         engine.execute(testDescriptions);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[Exception]",
        "newValue": "[Throwable]"
      }
    },
    "226ecd8efc45e4540bba43f6c604e891b5a94689": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Saved code from current master\n",
      "commitDate": "2015/10/28 上午12:09",
      "commitName": "226ecd8efc45e4540bba43f6c604e891b5a94689",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Saved code from current master\n",
          "commitDate": "2015/10/28 上午12:09",
          "commitName": "226ecd8efc45e4540bba43f6c604e891b5a94689",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/10/27 下午10:37",
          "commitNameOld": "75a91267a92e9fd4d171a3f18f2135e675687961",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestExecutionPlan testPlan) throws Exception {\n    for (Engine engine : discoverEngines()) {\n        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 39,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-public void execute(TestPlan testPlan) throws Exception {\n+public void execute(TestExecutionPlan testPlan) throws Exception {\n     for (Engine engine : discoverEngines()) {\n-        Map\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n+        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n         List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n         List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-        List\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n+        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n         for (TestIdentifier testIdentifier : filtered) {\n             testDescriptions.add(lookup(engine, testIdentifier));\n         }\n         engine.execute(testDescriptions);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testPlan-TestPlan]",
            "newValue": "[testPlan-TestExecutionPlan]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Saved code from current master\n",
          "commitDate": "2015/10/28 上午12:09",
          "commitName": "226ecd8efc45e4540bba43f6c604e891b5a94689",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/10/27 下午10:37",
          "commitNameOld": "75a91267a92e9fd4d171a3f18f2135e675687961",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void execute(TestExecutionPlan testPlan) throws Exception {\n    for (Engine engine : discoverEngines()) {\n        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 39,
          "functionName": "execute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-public void execute(TestPlan testPlan) throws Exception {\n+public void execute(TestExecutionPlan testPlan) throws Exception {\n     for (Engine engine : discoverEngines()) {\n-        Map\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n+        Map\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n         List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n         List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-        List\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n+        List\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n         for (TestIdentifier testIdentifier : filtered) {\n             testDescriptions.add(lookup(engine, testIdentifier));\n         }\n         engine.execute(testDescriptions);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "75a91267a92e9fd4d171a3f18f2135e675687961": {
      "type": "Yintroduced",
      "commitMessage": "Results of 1st mob programming session\n",
      "commitDate": "2015/10/27 下午10:37",
      "commitName": "75a91267a92e9fd4d171a3f18f2135e675687961",
      "commitAuthor": "Marc Philipp",
      "diff": "@@ -0,0 +1,12 @@\n+public void execute(TestPlan testPlan) throws Exception {\n+    for (Engine engine : discoverEngines()) {\n+        Map\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n+        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n+        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n+        List\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n+        for (TestIdentifier testIdentifier : filtered) {\n+            testDescriptions.add(lookup(engine, testIdentifier));\n+        }\n+        engine.execute(testDescriptions);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void execute(TestPlan testPlan) throws Exception {\n    for (Engine engine : discoverEngines()) {\n        Map\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine.get(engine.getId());\n        List\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n        List\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream().filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 39,
      "functionName": "execute",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}