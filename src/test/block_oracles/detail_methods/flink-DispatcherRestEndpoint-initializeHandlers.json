{
  "origin": "codeshovel",
  "repositoryName": "flink",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/flink/.git",
  "startCommitName": "9e936a5f8198b0059e9b5fba33163c2bbe3efbdd",
  "sourceFileName": "DispatcherRestEndpoint.java",
  "functionName": "initializeHandlers",
  "functionId": "initializeHandlers___restAddressFuture-CompletableFuture__String__",
  "sourceFilePath": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 83,
  "functionEndLine": 126,
  "numCommitsSeen": 57,
  "timeTaken": 13932,
  "changeHistory": [
    "0a5aebb0149d3660e549446a3d46df34ef1fb4d2",
    "a25cd3feddd19e75456db32a704ee5509e85dd47",
    "da3fc4fde2796af262dd275f3ea87a5b7bc69c5a",
    "fc0001c8585ff68f1d2568434727b29c8546d909",
    "ec752138b0d1352c6a18e116fd469bcc1ca4dd42",
    "ab8e9bdb8428b8c9b2c7a72ccd3f9e7b6e2dad58",
    "39df56d6aebb3911f19593dbf120d42789e8db5a",
    "a5105894b981e67631145d1921cd8cbf79fb2308",
    "c1280a5056196e2c20e50dc6c3631ca93c877e58",
    "7137d619456be401cb8a7b867daa98eb80f3838c",
    "0e3027d4b87cb5aff5c640ec809f2968b64be732",
    "b0bd65db9bb9d41ad85634d08dc8b9dae2cfa8dd",
    "9fc3c71f81a2728fd60c7ce26023c23fa2ced37a",
    "67aad88ee025ce02053ab560f2504762f53b87d9",
    "4daf9223a7b2ca8aec62fefd06b0152cbc2aa668",
    "97f6b63b12ba9f3fab119e997c738b38d3adbef9",
    "49a89960bc7010c6f5f9d28e7d7f26c94d517f16",
    "cb85640bb3da2e64eafbfc5c749aab7463702ebd",
    "1119c48c2470e280aaf3441ce170245070dd0986",
    "541fe43663d2a24b1ae66bc2b5228c49dfd43e7b",
    "fa967dfc0cddec0a5d0c7d76e564a8307ec3fb35",
    "f03393e807f51e6496f5bd54771987a64287b154",
    "34fdf569d7defb4393849fb9ecb2763b14532cc6",
    "712d4cfc0fb8591fb6ab7d27baede158cd227c60",
    "8086e3bee8be4614359041c14786140edff19666",
    "0c62c5278fc5581ea3485977a562df4445cf9dc9",
    "de201a6c0f8739c12918817d2ef571abb2898f37",
    "fdf684427165e8068d4229a340b8e03548e022ef",
    "def87816f376740902f0944a6aa5791a0a937e89",
    "eddb5b0a4c44443acc5ec2a07686a50b088303f8",
    "13488396f73f157373c576fc23d5c3fb12592215",
    "cb528a114b4f4bac04620f0dd6aeead773de0d0e",
    "660a45ca1a67ade234652482e8e41c79ab674d3d",
    "bc4638a3c96049de3ef615159cf83bbd88019575",
    "9829ca00dff201879724847b498fe0432219cb53",
    "0a286d0ff98afa68034daff4634f526eaaf97897",
    "ad380463d3d44cdd98302bf072bc5deba8696b5b",
    "ac82becd21b7766c18d16abfc7e08334c644507e",
    "b41f5a66cd6d62bf3c271f1d0bf9d8fa50a5d410",
    "172a64c1488bd6edda97473562c6871ae7f3364d",
    "40948d332489081572258a6c4cf7cc043f97c645",
    "adeab64ea0abdc892e51c6f630aa56dabf7e2c98",
    "8ea4db1a8b368b4e00dd310c0d07405fd2142b34",
    "2b0008c50d27640e5a8a8be491528f4c248fdf32",
    "97ff043fda06147bfd6441495d893fce7baf882e",
    "e585aed8ce751d769b56054fc1ffd4be24350e91",
    "c6243b8b1de6117623d3c4255f47f062d10c4602",
    "dbabdb1cc2c122dbf1e83ffb9960491eaf4914bb",
    "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239",
    "6a62f1455313ee8fae0ff79945da61fb67ec8edb"
  ],
  "changeHistoryShort": {
    "0a5aebb0149d3660e549446a3d46df34ef1fb4d2": "Ybodychange",
    "a25cd3feddd19e75456db32a704ee5509e85dd47": "Ybodychange",
    "da3fc4fde2796af262dd275f3ea87a5b7bc69c5a": "Ybodychange",
    "fc0001c8585ff68f1d2568434727b29c8546d909": "Ybodychange",
    "ec752138b0d1352c6a18e116fd469bcc1ca4dd42": "Ybodychange",
    "ab8e9bdb8428b8c9b2c7a72ccd3f9e7b6e2dad58": "Ybodychange",
    "39df56d6aebb3911f19593dbf120d42789e8db5a": "Ybodychange",
    "a5105894b981e67631145d1921cd8cbf79fb2308": "Ybodychange",
    "c1280a5056196e2c20e50dc6c3631ca93c877e58": "Ybodychange",
    "7137d619456be401cb8a7b867daa98eb80f3838c": "Ybodychange",
    "0e3027d4b87cb5aff5c640ec809f2968b64be732": "Ybodychange",
    "b0bd65db9bb9d41ad85634d08dc8b9dae2cfa8dd": "Ybodychange",
    "9fc3c71f81a2728fd60c7ce26023c23fa2ced37a": "Ybodychange",
    "67aad88ee025ce02053ab560f2504762f53b87d9": "Ybodychange",
    "4daf9223a7b2ca8aec62fefd06b0152cbc2aa668": "Ybodychange",
    "97f6b63b12ba9f3fab119e997c738b38d3adbef9": "Ybodychange",
    "49a89960bc7010c6f5f9d28e7d7f26c94d517f16": "Ybodychange",
    "cb85640bb3da2e64eafbfc5c749aab7463702ebd": "Ybodychange",
    "1119c48c2470e280aaf3441ce170245070dd0986": "Ybodychange",
    "541fe43663d2a24b1ae66bc2b5228c49dfd43e7b": "Ybodychange",
    "fa967dfc0cddec0a5d0c7d76e564a8307ec3fb35": "Ybodychange",
    "f03393e807f51e6496f5bd54771987a64287b154": "Ybodychange",
    "34fdf569d7defb4393849fb9ecb2763b14532cc6": "Ymultichange(Yreturntypechange,Ybodychange)",
    "712d4cfc0fb8591fb6ab7d27baede158cd227c60": "Ybodychange",
    "8086e3bee8be4614359041c14786140edff19666": "Ybodychange",
    "0c62c5278fc5581ea3485977a562df4445cf9dc9": "Ybodychange",
    "de201a6c0f8739c12918817d2ef571abb2898f37": "Ybodychange",
    "fdf684427165e8068d4229a340b8e03548e022ef": "Ybodychange",
    "def87816f376740902f0944a6aa5791a0a937e89": "Ybodychange",
    "eddb5b0a4c44443acc5ec2a07686a50b088303f8": "Ybodychange",
    "13488396f73f157373c576fc23d5c3fb12592215": "Ybodychange",
    "cb528a114b4f4bac04620f0dd6aeead773de0d0e": "Ybodychange",
    "660a45ca1a67ade234652482e8e41c79ab674d3d": "Ybodychange",
    "bc4638a3c96049de3ef615159cf83bbd88019575": "Ybodychange",
    "9829ca00dff201879724847b498fe0432219cb53": "Ybodychange",
    "0a286d0ff98afa68034daff4634f526eaaf97897": "Ybodychange",
    "ad380463d3d44cdd98302bf072bc5deba8696b5b": "Ybodychange",
    "ac82becd21b7766c18d16abfc7e08334c644507e": "Ybodychange",
    "b41f5a66cd6d62bf3c271f1d0bf9d8fa50a5d410": "Ybodychange",
    "172a64c1488bd6edda97473562c6871ae7f3364d": "Ybodychange",
    "40948d332489081572258a6c4cf7cc043f97c645": "Ybodychange",
    "adeab64ea0abdc892e51c6f630aa56dabf7e2c98": "Ybodychange",
    "8ea4db1a8b368b4e00dd310c0d07405fd2142b34": "Ybodychange",
    "2b0008c50d27640e5a8a8be491528f4c248fdf32": "Ybodychange",
    "97ff043fda06147bfd6441495d893fce7baf882e": "Ybodychange",
    "e585aed8ce751d769b56054fc1ffd4be24350e91": "Ybodychange",
    "c6243b8b1de6117623d3c4255f47f062d10c4602": "Ybodychange",
    "dbabdb1cc2c122dbf1e83ffb9960491eaf4914bb": "Ybodychange",
    "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "6a62f1455313ee8fae0ff79945da61fb67ec8edb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a5aebb0149d3660e549446a3d46df34ef1fb4d2": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-9842][rest] Pass actual configuration to BlobClient\n\nThis closes #6340.\n",
      "commitDate": "2018/7/16 下午8:09",
      "commitName": "0a5aebb0149d3660e549446a3d46df34ef1fb4d2",
      "commitAuthor": "zentol",
      "commitDateOld": "2018/7/4 上午3:08",
      "commitNameOld": "a25cd3feddd19e75456db32a704ee5509e85dd47",
      "commitAuthorOld": "zentol",
      "daysBetweenCommits": 12.71,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, executor, clusterConfiguration);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        try {\n            webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n            handlers.addAll(webSubmissionExtension.getHandlers());\n        } catch (FlinkException e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Failed to load web based job submission extension.\", e);\n            } else {\n                log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n            }\n        }\n    } else {\n        log.info(\"Web-based job submission is not enabled.\");\n    }\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 83,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n-    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, executor);\n+    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, executor, clusterConfiguration);\n     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n         try {\n             webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n             handlers.addAll(webSubmissionExtension.getHandlers());\n         } catch (FlinkException e) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Failed to load web based job submission extension.\", e);\n             } else {\n                 log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n             }\n         }\n     } else {\n         log.info(\"Web-based job submission is not enabled.\");\n     }\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a25cd3feddd19e75456db32a704ee5509e85dd47": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-9280][rest] Rework JobSubmitHandler to accept jar/artifact files\n\nThis closes #6203.\n",
      "commitDate": "2018/7/4 上午3:08",
      "commitName": "a25cd3feddd19e75456db32a704ee5509e85dd47",
      "commitAuthor": "zentol",
      "commitDateOld": "2018/3/23 下午7:32",
      "commitNameOld": "8809185b0ea791c641babe382db2bb7e753100bb",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 102.32,
      "commitsBetweenForRepo": 631,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, executor);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        try {\n            webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n            handlers.addAll(webSubmissionExtension.getHandlers());\n        } catch (FlinkException e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Failed to load web based job submission extension.\", e);\n            } else {\n                log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n            }\n        }\n    } else {\n        log.info(\"Web-based job submission is not enabled.\");\n    }\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 83,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,22 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n-    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n-    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n+    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, executor);\n     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n         try {\n             webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n             handlers.addAll(webSubmissionExtension.getHandlers());\n         } catch (FlinkException e) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Failed to load web based job submission extension.\", e);\n             } else {\n                 log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n             }\n         }\n     } else {\n         log.info(\"Web-based job submission is not enabled.\");\n     }\n-    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "da3fc4fde2796af262dd275f3ea87a5b7bc69c5a": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7521][flip6] Return HTTP 413 if request limit is exceeded.\n\nRemove unnecessary PipelineErrorHandler from RestClient.\nRename config keys for configuring request and response limits.\nSet response headers for all error responses.\n\nThis closes #5685.\n",
      "commitDate": "2018/3/14 下午4:37",
      "commitName": "da3fc4fde2796af262dd275f3ea87a5b7bc69c5a",
      "commitAuthor": "gyao",
      "commitDateOld": "2018/3/5 下午7:22",
      "commitNameOld": "fc0001c8585ff68f1d2568434727b29c8546d909",
      "commitAuthorOld": "Nico Kruber",
      "daysBetweenCommits": 8.89,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        try {\n            webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n            handlers.addAll(webSubmissionExtension.getHandlers());\n        } catch (FlinkException e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Failed to load web based job submission extension.\", e);\n            } else {\n                log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n            }\n        }\n    } else {\n        log.info(\"Web-based job submission is not enabled.\");\n    }\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 88,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,24 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n-    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n         try {\n             webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n             handlers.addAll(webSubmissionExtension.getHandlers());\n         } catch (FlinkException e) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Failed to load web based job submission extension.\", e);\n             } else {\n                 log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n             }\n         }\n     } else {\n         log.info(\"Web-based job submission is not enabled.\");\n     }\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc0001c8585ff68f1d2568434727b29c8546d909": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8769][flip6] do not print error causing exceptions without debugging\n\nIn DispatcherRestEndpoint and TaskExecutor, there were two places where without\nerrors (running a job inside an IDE) exceptions were logged. While for debugging\nthey may be useful, for normal operation it is enough to print the messages\nthemselves, especially since some more details were already logged before.\n\nThis closes #5611.\n",
      "commitDate": "2018/3/5 下午7:22",
      "commitName": "fc0001c8585ff68f1d2568434727b29c8546d909",
      "commitAuthor": "Nico Kruber",
      "commitDateOld": "2018/2/20 上午12:27",
      "commitNameOld": "ec752138b0d1352c6a18e116fd469bcc1ca4dd42",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 13.79,
      "commitsBetweenForRepo": 186,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        try {\n            webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n            handlers.addAll(webSubmissionExtension.getHandlers());\n        } catch (FlinkException e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Failed to load web based job submission extension.\", e);\n            } else {\n                log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n            }\n        }\n    } else {\n        log.info(\"Web-based job submission is not enabled.\");\n    }\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 89,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,25 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n         try {\n             webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n             handlers.addAll(webSubmissionExtension.getHandlers());\n         } catch (FlinkException e) {\n-            log.info(\"Failed to load web based job submission extension.\", e);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Failed to load web based job submission extension.\", e);\n+            } else {\n+                log.info(\"Failed to load web based job submission extension. \" + \"Probable reason: flink-runtime-web is not in the classpath.\");\n+            }\n         }\n     } else {\n         log.info(\"Web-based job submission is not enabled.\");\n     }\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ec752138b0d1352c6a18e116fd469bcc1ca4dd42": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7715] [flip6] Introduce WebSubmissionExtension for web submission handlers\n\nIntroduce a WebMonitorExtension interface which can be used to dynamically load\nweb monitor extensions. Web monitor extension provide channel inbound handlers\nwhich are added to the WebMonitorEndpoint. Furthermore, they offer a close and\ncloseAsync method to close their resources. That way they can be integrated in\nthe lifecycle of the WebMonitorEndpoint.\n",
      "commitDate": "2018/2/20 上午12:27",
      "commitName": "ec752138b0d1352c6a18e116fd469bcc1ca4dd42",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2018/2/19 下午11:04",
      "commitNameOld": "ab8e9bdb8428b8c9b2c7a72ccd3f9e7b6e2dad58",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        try {\n            webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n            handlers.addAll(webSubmissionExtension.getHandlers());\n        } catch (FlinkException e) {\n            log.info(\"Failed to load web based job submission extension.\", e);\n        }\n    } else {\n        log.info(\"Web-based job submission is not enabled.\");\n    }\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 89,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,21 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n-        handlers.addAll(WebMonitorUtils.tryLoadJarHandlers(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration));\n+        try {\n+            webSubmissionExtension \u003d WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration);\n+            handlers.addAll(webSubmissionExtension.getHandlers());\n+        } catch (FlinkException e) {\n+            log.info(\"Failed to load web based job submission extension.\", e);\n+        }\n+    } else {\n+        log.info(\"Web-based job submission is not enabled.\");\n     }\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab8e9bdb8428b8c9b2c7a72ccd3f9e7b6e2dad58": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7715][flip6] Implement JarRunHandler\n\nThis closes #5509.\n",
      "commitDate": "2018/2/19 下午11:04",
      "commitName": "ab8e9bdb8428b8c9b2c7a72ccd3f9e7b6e2dad58",
      "commitAuthor": "gyao",
      "commitDateOld": "2018/2/18 下午5:12",
      "commitNameOld": "ab8316f31a4de0648ab3ffa9f19fcd419aaa3bb9",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        handlers.addAll(WebMonitorUtils.tryLoadJarHandlers(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration));\n    }\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 83,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n-        handlers.addAll(WebMonitorUtils.tryLoadJarHandlers(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor));\n+        handlers.addAll(WebMonitorUtils.tryLoadJarHandlers(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor, clusterConfiguration));\n     }\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39df56d6aebb3911f19593dbf120d42789e8db5a": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7713][flip6] Implement JarUploadHandler\n\nThis closes #5442.\n",
      "commitDate": "2018/2/15 下午3:44",
      "commitName": "39df56d6aebb3911f19593dbf120d42789e8db5a",
      "commitAuthor": "gyao",
      "commitDateOld": "2018/2/15 下午3:44",
      "commitNameOld": "a5105894b981e67631145d1921cd8cbf79fb2308",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n        handlers.addAll(WebMonitorUtils.tryLoadJarHandlers(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor));\n    }\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 82,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,14 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n+    if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {\n+        handlers.addAll(WebMonitorUtils.tryLoadJarHandlers(leaderRetriever, restAddressFuture, timeout, responseHeaders, uploadDir, executor));\n+    }\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a5105894b981e67631145d1921cd8cbf79fb2308": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8604] [rest] Move JobTerminationHandler into WebMonitorEndpoint\n\nRegister the JobTerminationHandler at the WebMonitorEndpoint to make it accessible to\nall REST endpoints.\n\nThis closes #5429.\n",
      "commitDate": "2018/2/15 下午3:44",
      "commitName": "a5105894b981e67631145d1921cd8cbf79fb2308",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2018/2/6 下午8:36",
      "commitNameOld": "c1280a5056196e2c20e50dc6c3631ca93c877e58",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 8.8,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 74,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,11 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n-    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n-    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c1280a5056196e2c20e50dc6c3631ca93c877e58": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7856][flip6] Port JobVertexBackPressureHandler to REST endpoint\n\nThis closes #5397.\n",
      "commitDate": "2018/2/6 下午8:36",
      "commitName": "c1280a5056196e2c20e50dc6c3631ca93c877e58",
      "commitAuthor": "gyao",
      "commitDateOld": "2018/2/6 下午8:34",
      "commitNameOld": "7137d619456be401cb8a7b867daa98eb80f3838c",
      "commitAuthorOld": "zjureel",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 76,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,13 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n-    JobVertexBackPressureHandler jobVertexBackPressureHandler \u003d new JobVertexBackPressureHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexBackPressureHeaders.getInstance());\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n-    handlers.add(Tuple2.of(JobVertexBackPressureHeaders.getInstance(), jobVertexBackPressureHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7137d619456be401cb8a7b867daa98eb80f3838c": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7856][flip6] Port JobVertexBackPressureHandler to REST endpoint\n",
      "commitDate": "2018/2/6 下午8:34",
      "commitName": "7137d619456be401cb8a7b867daa98eb80f3838c",
      "commitAuthor": "zjureel",
      "commitDateOld": "2018/2/6 下午8:34",
      "commitNameOld": "5f573804f0f486db7cc594ae678adff5ae7f217c",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobVertexBackPressureHandler jobVertexBackPressureHandler \u003d new JobVertexBackPressureHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexBackPressureHeaders.getInstance());\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(JobVertexBackPressureHeaders.getInstance(), jobVertexBackPressureHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 78,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,15 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n+    JobVertexBackPressureHandler jobVertexBackPressureHandler \u003d new JobVertexBackPressureHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexBackPressureHeaders.getInstance());\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n+    handlers.add(Tuple2.of(JobVertexBackPressureHeaders.getInstance(), jobVertexBackPressureHandler));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e3027d4b87cb5aff5c640ec809f2968b64be732": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8029] Create WebMonitorEndpoint\n\nThe WebMonitorEndpoint is the common rest endpoint used for serving\nthe web frontend REST calls. It will be used by the Dispatcher and\nthe JobMaster to fuel the web frontend.\n\nThis closes #4987.\n",
      "commitDate": "2017/12/14 上午5:34",
      "commitName": "0e3027d4b87cb5aff5c640ec809f2968b64be732",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/12/1 上午12:57",
      "commitNameOld": "b0bd65db9bb9d41ad85634d08dc8b9dae2cfa8dd",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 13.19,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 67,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,68 +1,13 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n-    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n+    List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d super.initializeHandlers(restAddressFuture);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n-    ClusterOverviewHandler clusterOverviewHandler \u003d new ClusterOverviewHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n-    DashboardConfigHandler dashboardConfigHandler \u003d new DashboardConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n-    JobIdsHandler jobIdsHandler \u003d new JobIdsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n-    JobsOverviewHandler jobsOverviewHandler \u003d new JobsOverviewHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n-    ClusterConfigHandler clusterConfigurationHandler \u003d new ClusterConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n-    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n-    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n-    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n-    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n-    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n-    TaskManagersHandler taskManagersHandler \u003d new TaskManagersHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n-    TaskManagerDetailsHandler taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n-    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n-    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n-    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n-    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n-    final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n-    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n-    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n-    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n-    final File tmpDir \u003d restConfiguration.getTmpDir();\n-    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n-    try {\n-        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n-    } catch (IOException e) {\n-        log.warn(\"Could not load web content handler.\", e);\n-        optWebContent \u003d Optional.empty();\n-    }\n-    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n-    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n-    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n-    handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n-    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n-    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n-    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n-    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n-    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n-    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n-    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n-    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n-    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n-    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n-    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n-    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n-    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n-    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n-    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n-    handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n-    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n-    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n-    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n-    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b0bd65db9bb9d41ad85634d08dc8b9dae2cfa8dd": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8027] Generalize existing rest handlers to work with an arbitrary RestfulGateway\n\nBy letting the existing REST handlers work with an arbitrary RestfulGateway,\nthey can be used by the Dispatcher as well as the JobMaster, once it implements\nthe RestfulGateway.\n\nThis closes #4985.\n",
      "commitDate": "2017/12/1 上午12:57",
      "commitName": "b0bd65db9bb9d41ad85634d08dc8b9dae2cfa8dd",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/30 上午1:03",
      "commitNameOld": "9fc3c71f81a2728fd60c7ce26023c23fa2ced37a",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler clusterOverviewHandler \u003d new ClusterOverviewHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler dashboardConfigHandler \u003d new DashboardConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobIdsHandler jobIdsHandler \u003d new JobIdsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n    JobsOverviewHandler jobsOverviewHandler \u003d new JobsOverviewHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler clusterConfigurationHandler \u003d new ClusterConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler taskManagersHandler \u003d new TaskManagersHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 147,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,68 +1,68 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n-    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n-    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n-    JobIdsHandler\u003cDispatcherGateway\u003e jobIdsHandler \u003d new JobIdsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n-    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n-    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n+    ClusterOverviewHandler clusterOverviewHandler \u003d new ClusterOverviewHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n+    DashboardConfigHandler dashboardConfigHandler \u003d new DashboardConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n+    JobIdsHandler jobIdsHandler \u003d new JobIdsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n+    JobsOverviewHandler jobsOverviewHandler \u003d new JobsOverviewHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n+    ClusterConfigHandler clusterConfigurationHandler \u003d new ClusterConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n-    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n-    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n+    TaskManagersHandler taskManagersHandler \u003d new TaskManagersHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n+    TaskManagerDetailsHandler taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n     handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n     handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n     handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n     handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9fc3c71f81a2728fd60c7ce26023c23fa2ced37a": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7652] [flip6] Introduce JobIdWithStatus type for JobIdsWithStatusOverview\n\nInstead of storing the JobID and the JobStatus in a Tuple2 which is serialized\nas an array of values in JSON, this commit introduces the JobIdWithStatus which\nis serialized as a proper JSON object with an id and a status field.\n",
      "commitDate": "2017/11/30 上午1:03",
      "commitName": "9fc3c71f81a2728fd60c7ce26023c23fa2ced37a",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/30 上午1:03",
      "commitNameOld": "67aad88ee025ce02053ab560f2504762f53b87d9",
      "commitAuthorOld": "Tzu-Li (Gordon) Tai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobIdsHandler\u003cDispatcherGateway\u003e jobIdsHandler \u003d new JobIdsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 147,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,68 +1,68 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n-    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     JobIdsHandler\u003cDispatcherGateway\u003e jobIdsHandler \u003d new JobIdsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n+    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n-    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n+    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n     handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n     handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n     handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n     handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "67aad88ee025ce02053ab560f2504762f53b87d9": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7652] [flip6] Port CurrentJobIdsHandler to new REST endpoint\n\nThis closes #4734.\n",
      "commitDate": "2017/11/30 上午1:03",
      "commitName": "67aad88ee025ce02053ab560f2504762f53b87d9",
      "commitAuthor": "Tzu-Li (Gordon) Tai",
      "commitDateOld": "2017/11/29 下午9:52",
      "commitNameOld": "4daf9223a7b2ca8aec62fefd06b0152cbc2aa668",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    JobIdsHandler\u003cDispatcherGateway\u003e jobIdsHandler \u003d new JobIdsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 147,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,66 +1,68 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n+    JobIdsHandler\u003cDispatcherGateway\u003e jobIdsHandler \u003d new JobIdsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobIdsWithStatusesOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n+    handlers.add(Tuple2.of(JobIdsWithStatusesOverviewHeaders.getInstance(), jobIdsHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n     handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n     handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n     handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n     handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4daf9223a7b2ca8aec62fefd06b0152cbc2aa668": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7694][flip6] Migrate JobMetricsHandler to new RestServerEndpoint\n\nMigrate logic in\norg.apache.flink.runtime.rest.handler.legacy.metrics.JobMetrisHandler to new\nhandler, and add new handler to DispatcherRestEndpoint.\n\n[FLINK-7694][flip6] Use jobid path parameter constant in JobMetricsHandlerTest\n\nThis closes #5084.\n",
      "commitDate": "2017/11/29 下午9:52",
      "commitName": "4daf9223a7b2ca8aec62fefd06b0152cbc2aa668",
      "commitAuthor": "gyao",
      "commitDateOld": "2017/11/29 下午9:52",
      "commitNameOld": "97f6b63b12ba9f3fab119e997c738b38d3adbef9",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 145,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,64 +1,66 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n+    final JobMetricsHandler jobMetricsHandler \u003d new JobMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n+    handlers.add(Tuple2.of(JobMetricsHeaders.getInstance(), jobMetricsHandler));\n     handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n     handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n     handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "97f6b63b12ba9f3fab119e997c738b38d3adbef9": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8143][flip6] Migrate SubtaskMetricsHandler to new RestServerEndpoint\n\nMigrate logic from\norg.apache.flink.runtime.rest.handler.legacy.metrics.SubtaskMetricsHandler to\nnew handler. Add new handler to DispatcherRestEndpoint.\n\n[FLINK-8143][flip6] Assert that SubtaskIndexPathParameter is mandatory\n\n[FLINK-8143][flip6] Use path parameter constants in SubtaskMetricsHandlerTest\n\nThis closes #5082.\n",
      "commitDate": "2017/11/29 下午9:52",
      "commitName": "97f6b63b12ba9f3fab119e997c738b38d3adbef9",
      "commitAuthor": "gyao",
      "commitDateOld": "2017/11/29 下午9:52",
      "commitNameOld": "49a89960bc7010c6f5f9d28e7d7f26c94d517f16",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 143,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,62 +1,64 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n+    final SubtaskMetricsHandler subtaskMetricsHandler \u003d new SubtaskMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n+    handlers.add(Tuple2.of(SubtaskMetricsHeaders.getInstance(), subtaskMetricsHandler));\n     handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n     handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "49a89960bc7010c6f5f9d28e7d7f26c94d517f16": {
      "type": "Ybodychange",
      "commitMessage": "[FLIP-7716][flip6] Migrate JobManagerMetricsHandler to new RestServerEndpoint\n\nMigrate logic in\norg.apache.flink.runtime.rest.handler.legacy.metrics.JobManagerMetricsHandler\nto new handler and add new handler to DispatcherRestEndpoint.\n\n[FLINK-7716][Javadoc] Deprecate method MetricStore#getJobManager().\n\nThere is a semantically equivalent method in MetricStore.\n\nThis closes #5083.\n",
      "commitDate": "2017/11/29 下午9:52",
      "commitName": "49a89960bc7010c6f5f9d28e7d7f26c94d517f16",
      "commitAuthor": "gyao",
      "commitDateOld": "2017/11/29 下午9:52",
      "commitNameOld": "cb85640bb3da2e64eafbfc5c749aab7463702ebd",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 141,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,60 +1,62 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n+    final JobManagerMetricsHandler jobManagerMetricsHandler \u003d new JobManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n     handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n+    handlers.add(Tuple2.of(JobManagerMetricsHeaders.getInstance(), jobManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb85640bb3da2e64eafbfc5c749aab7463702ebd": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7717][flip6] Migrate TaskManagerMetricsHandler to new RestServerEndpoint\n\nMigrate logic in\norg.apache.flink.runtime.rest.handler.legacy.metrics.TaskManagerMetricsHandler\nto new handler, and add new handler to DispatcherRestEndpoint.\n\n[FLINK-7717][flip6] Use taskmanagerid constant in TaskManagerMetricsHandlerTest\n\nThis closes #5081.\n",
      "commitDate": "2017/11/29 下午9:52",
      "commitName": "cb85640bb3da2e64eafbfc5c749aab7463702ebd",
      "commitAuthor": "gyao",
      "commitDateOld": "2017/11/25 上午1:30",
      "commitNameOld": "1119c48c2470e280aaf3441ce170245070dd0986",
      "commitAuthorOld": "gyao",
      "daysBetweenCommits": 4.85,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 139,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,60 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n+    final TaskManagerMetricsHandler taskManagerMetricsHandler \u003d new TaskManagerMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n+    handlers.add(Tuple2.of(TaskManagerMetricsHeaders.getInstance(), taskManagerMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1119c48c2470e280aaf3441ce170245070dd0986": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7718] [flip6] Add JobVertexMetricsHandler to DispatcherRestEndpoint\n\nMigrate logic in\norg.apache.flink.runtime.rest.handler.legacy.metrics.JobVertexMetricsHandler to\nnew handler and add new handler to DispatcherRestEndpoint. Add common classes\nfor remaining implementations of\norg.apache.flink.runtime.rest.handler.legacy.metrics.AbstractMetricsHandler,\nwhich require migration as well.\n\n[FLINK-7718] [flip6] Clean up JobVertexMetricsHandlerHeaders\n\n[FLINK-7718] [flip6] Assert that HTTP code is 404 if metric is unknown\n\n[FLINK-7718] [flip6] Minor fixes in Javadocs\n\n[FLINK-7718] [flip6] Add unit test for AbstractMetricsHandlerHeaders\n\n[FLINK-7718] [flip6] Let unit tests inherit from TestLogger\n\n[FLINK-7718] [flip6] Re-format Metric constructor\n\n[FLINK-7718] [flip6] Fix mistake in Javadoc of AbstractMetricsHandlerHeaders\n\n[FLINK-7718] [flip6] Rename AbstractMetricsHandlerHeaders to AbstractMetricsHeaders\n\nStrip the term Handler from the Header class. Also rename its subclasses.\n\n[FLINK-7718] [flip6] No longer return HTTP 404 if metric is unknown\n\n[FLINK-7718] [flip6] Make JobVertexMetricsHeaders class final\n\n[FLINK-7718] [flip6] Introduce MetricsHandlerTestBase for future MetricHandlers\n\n[FLINK-7718] [flip6] Always return same MessageParameter objects in JobVertexMetricsMessageParameters\n\nThis closes #5055.\n",
      "commitDate": "2017/11/25 上午1:30",
      "commitName": "1119c48c2470e280aaf3441ce170245070dd0986",
      "commitAuthor": "gyao",
      "commitDateOld": "2017/11/9 下午5:48",
      "commitNameOld": "541fe43663d2a24b1ae66bc2b5228c49dfd43e7b",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 15.32,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 137,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,58 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n+    final JobVertexMetricsHandler jobVertexMetricsHandler \u003d new JobVertexMetricsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n+    handlers.add(Tuple2.of(JobVertexMetricsHeaders.getInstance(), jobVertexMetricsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "541fe43663d2a24b1ae66bc2b5228c49dfd43e7b": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8026] Let ClusterConfigHandler directly extend AbstractRestHandler\n\nThis closes #4984.\n",
      "commitDate": "2017/11/9 下午5:48",
      "commitName": "541fe43663d2a24b1ae66bc2b5228c49dfd43e7b",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/9 下午5:48",
      "commitNameOld": "fa967dfc0cddec0a5d0c7d76e564a8307ec3fb35",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 135,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,56 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n+    ClusterConfigHandler\u003cDispatcherGateway\u003e clusterConfigurationHandler \u003d new ClusterConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), clusterConfiguration);\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fa967dfc0cddec0a5d0c7d76e564a8307ec3fb35": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8025] Let DashboardConfigHandler directly extend AbstractRestHandler\n\nThis closes #4983.\n",
      "commitDate": "2017/11/9 下午5:48",
      "commitName": "fa967dfc0cddec0a5d0c7d76e564a8307ec3fb35",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/9 下午5:48",
      "commitNameOld": "f03393e807f51e6496f5bd54771987a64287b154",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 138,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,56 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n+    DashboardConfigHandler\u003cDispatcherGateway\u003e dashboardConfigHandler \u003d new DashboardConfigHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), restConfiguration.getRefreshInterval());\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n-    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n+    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f03393e807f51e6496f5bd54771987a64287b154": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-8024] Let ClusterOverviewHandler directly extend from AbstractRestHandler\n\nThis closes #4982.\n",
      "commitDate": "2017/11/9 下午5:48",
      "commitName": "f03393e807f51e6496f5bd54771987a64287b154",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/9 下午5:48",
      "commitNameOld": "34fdf569d7defb4393849fb9ecb2763b14532cc6",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 139,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,56 @@\n @Override\n protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n+    ClusterOverviewHandler\u003cDispatcherGateway\u003e clusterOverviewHandler \u003d new ClusterOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34fdf569d7defb4393849fb9ecb2763b14532cc6": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "[FLINK-8000] Sort Rest handler URLS in RestServerEndpoint\n\nIntroduce special RestHandlerUrlComparator to sort REST URLs such that\nURLs with path parameters are sorted after those without or fewer.\n\nE.g. the following order would be established\n\n/jobs\n/jobs/overview\n/jobs/:jobid\n/jobs/:jobid/config\n/:*\n\nThis closes #4958.\n",
      "commitDate": "2017/11/9 下午5:48",
      "commitName": "34fdf569d7defb4393849fb9ecb2763b14532cc6",
      "commitAuthor": "Till Rohrmann",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "[FLINK-8000] Sort Rest handler URLS in RestServerEndpoint\n\nIntroduce special RestHandlerUrlComparator to sort REST URLs such that\nURLs with path parameters are sorted after those without or fewer.\n\nE.g. the following order would be established\n\n/jobs\n/jobs/overview\n/jobs/:jobid\n/jobs/:jobid/config\n/:*\n\nThis closes #4958.\n",
          "commitDate": "2017/11/9 下午5:48",
          "commitName": "34fdf569d7defb4393849fb9ecb2763b14532cc6",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2017/11/7 下午10:07",
          "commitNameOld": "712d4cfc0fb8591fb6ab7d27baede158cd227c60",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.82,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
          "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
          "functionStartLine": 140,
          "functionName": "initializeHandlers",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,55 +1,56 @@\n @Override\n-protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n+protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n+    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Collection\u003cTuple2\u003cRestHandlerSpecification,ChannelInboundHandler\u003e\u003e",
            "newValue": "List\u003cTuple2\u003cRestHandlerSpecification,ChannelInboundHandler\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-8000] Sort Rest handler URLS in RestServerEndpoint\n\nIntroduce special RestHandlerUrlComparator to sort REST URLs such that\nURLs with path parameters are sorted after those without or fewer.\n\nE.g. the following order would be established\n\n/jobs\n/jobs/overview\n/jobs/:jobid\n/jobs/:jobid/config\n/:*\n\nThis closes #4958.\n",
          "commitDate": "2017/11/9 下午5:48",
          "commitName": "34fdf569d7defb4393849fb9ecb2763b14532cc6",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2017/11/7 下午10:07",
          "commitNameOld": "712d4cfc0fb8591fb6ab7d27baede158cd227c60",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 1.82,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
          "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
          "functionStartLine": 140,
          "functionName": "initializeHandlers",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,55 +1,56 @@\n @Override\n-protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n+protected List\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n+    handlers.add(Tuple2.of(SubtasksTimesHeaders.getInstance(), subtasksTimesHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "712d4cfc0fb8591fb6ab7d27baede158cd227c60": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7941][flip6] Port SubtasksTimesHandler to new REST endpoint\n\nThis closes #4930.\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "712d4cfc0fb8591fb6ab7d27baede158cd227c60",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/7 下午10:07",
      "commitNameOld": "8086e3bee8be4614359041c14786140edff19666",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 140,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,55 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n+    SubtasksTimesHandler subtasksTimesHandler \u003d new SubtasksTimesHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, SubtasksTimesHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8086e3bee8be4614359041c14786140edff19666": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7806] [flip6] Register CurrentJobsOverviewHandler under /jobs/overview\n\nRename CurrentJobsOverviewHandler to JobsOverviewHandler\n\nChange paths\n\nRemove joboverview/running and joboverview/completed from JobsOverviewHandler\n\nAdapt web ui files\n\nUpdate rest_api to reflect new REST call /jobs\n\nThis changes #4805.\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "8086e3bee8be4614359041c14786140edff19666",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/7 下午10:07",
      "commitNameOld": "0c62c5278fc5581ea3485977a562df4445cf9dc9",
      "commitAuthorOld": "yew1eb",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 138,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,54 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n+    JobsOverviewHandler\u003cDispatcherGateway\u003e jobsOverviewHandler \u003d new JobsOverviewHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobsOverviewHeaders.getInstance());\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n-    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n+    handlers.add(Tuple2.of(JobsOverviewHeaders.getInstance(), jobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0c62c5278fc5581ea3485977a562df4445cf9dc9": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7706] [flip6] Add JobAccumulatorsHandler for new REST endpoint\n\nThis closes #4898.\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "0c62c5278fc5581ea3485977a562df4445cf9dc9",
      "commitAuthor": "yew1eb",
      "commitDateOld": "2017/11/7 下午10:07",
      "commitNameOld": "de201a6c0f8739c12918817d2ef571abb2898f37",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 139,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,54 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n+    JobAccumulatorsHandler jobAccumulatorsHandler \u003d new JobAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n+    handlers.add(Tuple2.of(JobAccumulatorsHeaders.getInstance(), jobAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de201a6c0f8739c12918817d2ef571abb2898f37": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7705] Add JobDetailsHandler\n\nAdd JobID(De)Serializer and JobVertexID(De)Serializer for jackson\n\nThis closes #4884.\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "de201a6c0f8739c12918817d2ef571abb2898f37",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/7 下午10:07",
      "commitNameOld": "fdf684427165e8068d4229a340b8e03548e022ef",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 137,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,50 +1,52 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n+    final JobDetailsHandler jobDetailsHandler \u003d new JobDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobDetailsHeaders.getInstance(), executionGraphCache, executor, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n+    handlers.add(Tuple2.of(JobDetailsHeaders.getInstance(), jobDetailsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fdf684427165e8068d4229a340b8e03548e022ef": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7862] [flip6] Add TaskManagerDetailsHandler\n\nPass MetricQueryServiceRetriever to DispatcherRestEndpoint\n\nThis closes #4862.\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "fdf684427165e8068d4229a340b8e03548e022ef",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/7 下午10:07",
      "commitNameOld": "3f7f04a995587f78185710ce8472d1b2e8a536f3",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 135,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,50 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n+    TaskManagerDetailsHandler\u003cDispatcherGateway\u003e taskManagerDetailsHandler \u003d new TaskManagerDetailsHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagerDetailsHeaders.getInstance(), resourceManagerRetriever, metricFetcher);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n+    handlers.add(Tuple2.of(TaskManagerDetailsHeaders.getInstance(), taskManagerDetailsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "def87816f376740902f0944a6aa5791a0a937e89": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7648] [flip6] Add TaskManagersHandler\n\nSend dataPort and HardwareDescription to RM\n\nInstantiate RM leader retriever\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "def87816f376740902f0944a6aa5791a0a937e89",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/11/7 下午10:07",
      "commitNameOld": "eddb5b0a4c44443acc5ec2a07686a50b088303f8",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 122,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,48 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n+    TaskManagersHandler\u003cDispatcherGateway\u003e taskManagersHandler \u003d new TaskManagersHandler\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskManagersHeaders.getInstance(), resourceManagerRetriever);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n+    handlers.add(Tuple2.of(TaskManagersHeaders.getInstance(), taskManagersHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eddb5b0a4c44443acc5ec2a07686a50b088303f8": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7872] Allow to pass in additional HTTP headers\n\nHandlerUtils#sendResponse now accepts a map of additional http response headers\nand their values. This allows to set additional headers such as the\nACCESS_CONTROL_ALLOW_ORIGIN header and its value.\n\nThis closes #4859.\n",
      "commitDate": "2017/11/7 下午10:07",
      "commitName": "eddb5b0a4c44443acc5ec2a07686a50b088303f8",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/10/20 下午9:09",
      "commitNameOld": "13488396f73f157373c576fc23d5c3fb12592215",
      "commitAuthorOld": "zjureel",
      "daysBetweenCommits": 18.04,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 116,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,46 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n-    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n-    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n-    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n-    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n-    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n-    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n+    final Map\u003cString, String\u003e responseHeaders \u003d restConfiguration.getResponseHeaders();\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, responseHeaders, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n+    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobTerminationHeaders.getInstance());\n+    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n+    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n+    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n+    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n+    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n+    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n+    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout, responseHeaders);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n-    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n-    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "13488396f73f157373c576fc23d5c3fb12592215": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7855] [flip6] Port JobVertexAccumulatorsHandler to REST endpoint\n",
      "commitDate": "2017/10/20 下午9:09",
      "commitName": "13488396f73f157373c576fc23d5c3fb12592215",
      "commitAuthor": "zjureel",
      "commitDateOld": "2017/10/18 下午6:51",
      "commitNameOld": "cb528a114b4f4bac04620f0dd6aeead773de0d0e",
      "commitAuthorOld": "zjureel",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 115,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,45 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n+    JobVertexAccumulatorsHandler jobVertexAccumulatorsHandler \u003d new JobVertexAccumulatorsHandler(restAddressFuture, leaderRetriever, timeout, JobVertexAccumulatorsHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n+    handlers.add(Tuple2.of(JobVertexAccumulatorsHeaders.getInstance(), jobVertexAccumulatorsHandler));\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb528a114b4f4bac04620f0dd6aeead773de0d0e": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7703] Port JobExceptionsHandler to new REST endpoint\n\nThis closes #4834.\n",
      "commitDate": "2017/10/18 下午6:51",
      "commitName": "cb528a114b4f4bac04620f0dd6aeead773de0d0e",
      "commitAuthor": "zjureel",
      "commitDateOld": "2017/10/13 上午12:30",
      "commitNameOld": "660a45ca1a67ade234652482e8e41c79ab674d3d",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 5.76,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 113,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,43 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n+    JobExceptionsHandler jobExceptionsHandler \u003d new JobExceptionsHandler(restAddressFuture, leaderRetriever, timeout, JobExceptionsHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n+    handlers.add(Tuple2.of(JobExceptionsHeaders.getInstance(), jobExceptionsHandler));\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "660a45ca1a67ade234652482e8e41c79ab674d3d": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7653] Properly implement Dispatcher#requestClusterOverview\n\nThis commit implements the ClusterOverview generation on the Dispatcher. In\norder to do this, the Dispatcher requests the ResourceOverview from the\nResourceManager and the job status from all JobMasters. After receiving all\ninformation, it is compiled into the ClusterOverview.\n\nNote: StatusOverview has been renamed to ClusterOverview\n\nThis closes #4793.\n",
      "commitDate": "2017/10/13 上午12:30",
      "commitName": "660a45ca1a67ade234652482e8e41c79ab674d3d",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/10/11 下午8:41",
      "commitNameOld": "bc4638a3c96049de3ef615159cf83bbd88019575",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 111,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,41 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc4638a3c96049de3ef615159cf83bbd88019575": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7707] [flip6] Add TaskCheckpointStatisticDetailsHandler for new REST endpoint\n\nThis closes #4772.\n",
      "commitDate": "2017/10/11 下午8:41",
      "commitName": "bc4638a3c96049de3ef615159cf83bbd88019575",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/10/11 上午12:44",
      "commitNameOld": "9829ca00dff201879724847b498fe0432219cb53",
      "commitAuthorOld": "yew1eb",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 111,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,41 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n+    TaskCheckpointStatisticDetailsHandler taskCheckpointStatisticDetailsHandler \u003d new TaskCheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, TaskCheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n+    handlers.add(Tuple2.of(TaskCheckpointStatisticsHeaders.getInstance(), taskCheckpointStatisticDetailsHandler));\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9829ca00dff201879724847b498fe0432219cb53": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7704] [flip6] Add JobPlanHandler for new RestServerEndpoint\n\nThis closes #4768.\n",
      "commitDate": "2017/10/11 上午12:44",
      "commitName": "9829ca00dff201879724847b498fe0432219cb53",
      "commitAuthor": "yew1eb",
      "commitDateOld": "2017/10/10 下午11:34",
      "commitNameOld": "0a286d0ff98afa68034daff4634f526eaaf97897",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 109,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,39 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n+    JobPlanHandler jobPlanHandler \u003d new JobPlanHandler(restAddressFuture, leaderRetriever, timeout, JobPlanHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n+    handlers.add(Tuple2.of(JobPlanHeaders.getInstance(), jobPlanHandler));\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a286d0ff98afa68034daff4634f526eaaf97897": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7709] Add CheckpointStatisticDetailsHandler for new REST endpoint\n\nDisable failing when not all creator properties are known\n\nMove CheckpointStatsCache out of legacy package; Remove unused CheckpointingStatistics#generateCheckpointStatistics method\n\nRemove JsonInclude.Include.NON_NULL from CheckpointStatistics; Pull null check out of CheckpointStatistics#generateCheckpointStatistics; Make CheckpointStatistics#checkpointStatisticcsPerTask non nullable; Add fail on missing creator property\n\nThis closes #4763.\n",
      "commitDate": "2017/10/10 下午11:34",
      "commitName": "0a286d0ff98afa68034daff4634f526eaaf97897",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/10/10 上午1:11",
      "commitNameOld": "ad380463d3d44cdd98302bf072bc5deba8696b5b",
      "commitAuthorOld": "zentol",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 107,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,35 +1,37 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n-    CheckpointStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointingStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointingStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointingStatisticsHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointStatisticDetailsHandler checkpointStatisticDetailsHandler \u003d new CheckpointStatisticDetailsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticDetailsHeaders.getInstance(), executionGraphCache, executor, checkpointStatsCache);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n-    handlers.add(Tuple2.of(CheckpointStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n+    handlers.add(Tuple2.of(CheckpointingStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n+    handlers.add(Tuple2.of(CheckpointStatisticDetailsHeaders.getInstance(), checkpointStatisticDetailsHandler));\n     BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n     JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad380463d3d44cdd98302bf072bc5deba8696b5b": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7072] [REST] Define protocol for job submit/cancel/stop\n\n[FLINK-7072] [REST] Extend Dispatcher\n\n[FLINK-7072] [REST] Add handlers for job submit/cancel/stop\n\n[FLINK-7072] [REST] CLI integration\n\nuse ExecutorThradFactory + rebase(blobKey fix)\n\nadd \"Flink\" prefix to RestCC threads\n\nshutdown client for cancel/shutdown\n\nRework CliFrontEnd Stop/Cancel tests\n\nThese tests verified that the CLI was sending the correct messages and\nparameters to the JM actor. This is now handled by the ClusterClient, so\nthe tests were adjusted to verify that the correct methods on the\nClusterClient are being called.\n\nAdditional tests were added to the ClusterClientTest class to verify\nthat the correct messages and parameters are being sent.\n\nThis closes #4742.\n",
      "commitDate": "2017/10/10 上午1:11",
      "commitName": "ad380463d3d44cdd98302bf072bc5deba8696b5b",
      "commitAuthor": "zentol",
      "commitDateOld": "2017/10/3 上午1:59",
      "commitNameOld": "ac82becd21b7766c18d16abfc7e08334c644507e",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 100,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,35 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     handlers.add(Tuple2.of(CheckpointStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n+    BlobServerPortHandler blobServerPortHandler \u003d new BlobServerPortHandler(restAddressFuture, leaderRetriever, timeout);\n+    handlers.add(Tuple2.of(blobServerPortHandler.getMessageHeaders(), blobServerPortHandler));\n+    JobSubmitHandler jobSubmitHandler \u003d new JobSubmitHandler(restAddressFuture, leaderRetriever, timeout);\n+    handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac82becd21b7766c18d16abfc7e08334c644507e": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7710] [flip6] Add CheckpointStatisticsHandler for the new REST endpoint\n\nThis commit also makes the CheckpointStatsHistory object serializable by removing the\nCheckpointStatsHistoryIterable and replacing it with a static ArrayList.\n\nThis closes #4750.\n",
      "commitDate": "2017/10/3 上午1:59",
      "commitName": "ac82becd21b7766c18d16abfc7e08334c644507e",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/10/3 上午1:58",
      "commitNameOld": "b41f5a66cd6d62bf3c271f1d0bf9d8fa50a5d410",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    handlers.add(Tuple2.of(CheckpointStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 98,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,31 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointStatisticsHandler checkpointStatisticsHandler \u003d new CheckpointStatisticsHandler(restAddressFuture, leaderRetriever, timeout, CheckpointStatisticsHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n+    handlers.add(Tuple2.of(CheckpointStatisticsHeaders.getInstance(), checkpointStatisticsHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b41f5a66cd6d62bf3c271f1d0bf9d8fa50a5d410": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7708] [flip6] Add CheckpointConfigHandler for new REST endpoint\n\nThis commit implements the CheckpointConfigHandler which now returns a\nCheckpointConfigInfo object if checkpointing is enabled. In case that\ncheckpointing is disabled for a job, it will return a 404 response.\n\nThis closes #4744.\n",
      "commitDate": "2017/10/3 上午1:58",
      "commitName": "b41f5a66cd6d62bf3c271f1d0bf9d8fa50a5d410",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/10/3 上午1:58",
      "commitNameOld": "172a64c1488bd6edda97473562c6871ae7f3364d",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 96,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,29 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n+    CheckpointConfigHandler checkpointConfigHandler \u003d new CheckpointConfigHandler(restAddressFuture, leaderRetriever, timeout, CheckpointConfigHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n+    handlers.add(Tuple2.of(CheckpointConfigHeaders.getInstance(), checkpointConfigHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "172a64c1488bd6edda97473562c6871ae7f3364d": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7695] [flip6] Add JobConfigHandler for new RestServerEndpoint\n\nThis closes #4737.\n",
      "commitDate": "2017/10/3 上午1:58",
      "commitName": "172a64c1488bd6edda97473562c6871ae7f3364d",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/9/28 下午5:28",
      "commitNameOld": "40948d332489081572258a6c4cf7cc043f97c645",
      "commitAuthorOld": "zentol",
      "daysBetweenCommits": 4.35,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 94,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,27 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n+    JobConfigHandler jobConfigHandler \u003d new JobConfigHandler(restAddressFuture, leaderRetriever, timeout, JobConfigHeaders.getInstance(), executionGraphCache, executor);\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n+    handlers.add(Tuple2.of(JobConfigHeaders.getInstance(), jobConfigHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40948d332489081572258a6c4cf7cc043f97c645": {
      "type": "Ybodychange",
      "commitMessage": "[hotfix] [REST] Add note about placement of FileServerHandler\n",
      "commitDate": "2017/9/28 下午5:28",
      "commitName": "40948d332489081572258a6c4cf7cc043f97c645",
      "commitAuthor": "zentol",
      "commitDateOld": "2017/9/28 上午7:07",
      "commitNameOld": "adeab64ea0abdc892e51c6f630aa56dabf7e2c98",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 85,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "adeab64ea0abdc892e51c6f630aa56dabf7e2c98": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7649] [flip6] Extend JobTerminationHandler to support stop\n\nRename the JobCancellationHandler into JobTerminationHandler which is now responsible\nfor terminating jobs. Moreover, this commits adds two termination modes, cancel and stop,\nwhich are specified by providing a query parameter.\n\nThis closes #4700.\n",
      "commitDate": "2017/9/28 上午7:07",
      "commitName": "adeab64ea0abdc892e51c6f630aa56dabf7e2c98",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/9/28 上午7:06",
      "commitNameOld": "8ea4db1a8b368b4e00dd310c0d07405fd2142b34",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 85,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, EmptyResponseBody, JobMessageParameters\u003e jobCancellationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, JobCancellationHeaders.getInstance(), new JobCancellationHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n+    JobTerminationHandler jobTerminationHandler \u003d new JobTerminationHandler(restAddressFuture, leaderRetriever, timeout, JobTerminationHeaders.getInstance());\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n-    handlers.add(Tuple2.of(JobCancellationHeaders.getInstance(), jobCancellationHandler));\n+    handlers.add(Tuple2.of(JobTerminationHeaders.getInstance(), jobTerminationHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8ea4db1a8b368b4e00dd310c0d07405fd2142b34": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7650] [flip6] Port JobCancellationHandler to new REST endpoint\n\nLet the JobCancellationHandler implement the LegacyRestHandler interface. Moreover,\nthis commit adds the DELETE method to HttpMethodWrapper and the\nRestServerEndpoint#registerHandler method.\n\nAdd PATCH method\n\nThis closes #4697.\n",
      "commitDate": "2017/9/28 上午7:06",
      "commitName": "8ea4db1a8b368b4e00dd310c0d07405fd2142b34",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/9/27 上午12:04",
      "commitNameOld": "2b0008c50d27640e5a8a8be491528f4c248fdf32",
      "commitAuthorOld": "Tzu-Li (Gordon) Tai",
      "daysBetweenCommits": 1.29,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, EmptyResponseBody, JobMessageParameters\u003e jobCancellationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, JobCancellationHeaders.getInstance(), new JobCancellationHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    handlers.add(Tuple2.of(JobCancellationHeaders.getInstance(), jobCancellationHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 87,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,25 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, EmptyResponseBody, JobMessageParameters\u003e jobCancellationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, JobCancellationHeaders.getInstance(), new JobCancellationHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n+    handlers.add(Tuple2.of(JobCancellationHeaders.getInstance(), jobCancellationHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2b0008c50d27640e5a8a8be491528f4c248fdf32": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7647] [flip6] Rename JobManagerConfigHandler to ClusterConfigHandler\n\nThe original naming wouldn\u0027t make sense for the FLIP-6 redesign, since\nwe would have multiple per-job JobManagers for each cluster, which\nshares the same configuration.\n\nThe REST path is still left untouched and not part of this commit, as\nthat would involve more changes in flink-runtime-web.\n",
      "commitDate": "2017/9/27 上午12:04",
      "commitName": "2b0008c50d27640e5a8a8be491528f4c248fdf32",
      "commitAuthor": "Tzu-Li (Gordon) Tai",
      "commitDateOld": "2017/9/27 上午12:04",
      "commitNameOld": "97ff043fda06147bfd6441495d893fce7baf882e",
      "commitAuthorOld": "Tzu-Li (Gordon) Tai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 83,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n-    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new JobManagerConfigHandler(executor, clusterConfiguration));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new ClusterConfigHandler(executor, clusterConfiguration));\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "97ff043fda06147bfd6441495d893fce7baf882e": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7647] [flip6] Port JobManagerConfigHandler to new REST endpoint\n\nThis commit lets the JobManagerConfigHandler implement the\nLegacyRestHandler interface in order to be ported to the new REST\nendpoint. This includes the introduction of ClusterConfiguration\nresponse body and ClusterConfigurationHeaders.\n\nThe DispatcherRestEndpoint now also registers the\nJobManagerConfigHandler.\n",
      "commitDate": "2017/9/27 上午12:04",
      "commitName": "97ff043fda06147bfd6441495d893fce7baf882e",
      "commitAuthor": "Tzu-Li (Gordon) Tai",
      "commitDateOld": "2017/9/26 上午5:47",
      "commitNameOld": "e585aed8ce751d769b56054fc1ffd4be24350e91",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new JobManagerConfigHandler(executor, clusterConfiguration));\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 83,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,23 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, ClusterConfigurationInfo, EmptyMessageParameters\u003e clusterConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterConfigurationInfoHeaders.getInstance(), new JobManagerConfigHandler(executor, clusterConfiguration));\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n+    handlers.add(Tuple2.of(ClusterConfigurationInfoHeaders.getInstance(), clusterConfigurationHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e585aed8ce751d769b56054fc1ffd4be24350e91": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7638] [flip6] Port CurrentJobsOverviewHandler to new REST endpoint\n\nPorts the CurrentJobsOverviewHandler to the new REST endpoint by letting it implement\nthe LegacyRestHandler interface. This commit changes the JobDetails JSON such that it\nnow contains the number of tasks for each ExecutionState, including SCHEDULED,\nDEPLOYING, CREATED and RECONCILING. These state will now also be displayed in the\nweb frontend.\n\nChange MultipleJobsDetails to store a Collection\u003cJobDetails\u003e instead of JobDetails[]\n\nUse MultipleJobsDetails#FIELD_NAME_ for serialization in CurrentJobsOverviewHandler\n\nThis closes #4688.\n",
      "commitDate": "2017/9/26 上午5:47",
      "commitName": "e585aed8ce751d769b56054fc1ffd4be24350e91",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/9/21 下午3:30",
      "commitNameOld": "c6243b8b1de6117623d3c4255f47f062d10c4602",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 4.59,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 76,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,21 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n     ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n     final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, MultipleJobsDetails, EmptyMessageParameters\u003e currentJobsOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, CurrentJobsOverviewHandlerHeaders.getInstance(), new CurrentJobsOverviewHandler(executor, timeout, true, true));\n     final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n     handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n+    handlers.add(Tuple2.of(CurrentJobsOverviewHandlerHeaders.getInstance(), currentJobsOverviewHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c6243b8b1de6117623d3c4255f47f062d10c4602": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7535] Port DashboardConfigHandler to new REST endpoint\n\nLets DashboardConfigHandler implement the LegacyRestHandler. Moreover, this\ncommit defines the appropriate DashboardConfigurationHeaders.\n\nThe DispatcherRestEndpoint registers the DashboardConfigHandler.\n\nThis closes #4604.\n",
      "commitDate": "2017/9/21 下午3:30",
      "commitName": "c6243b8b1de6117623d3c4255f47f062d10c4602",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/9/20 下午11:50",
      "commitNameOld": "dbabdb1cc2c122dbf1e83ffb9960491eaf4914bb",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n    final Time timeout \u003d restConfiguration.getTimeout();\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n    final File tmpDir \u003d restConfiguration.getTmpDir();\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 73,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,19 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n-    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(2);\n+    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(3);\n+    final Time timeout \u003d restConfiguration.getTimeout();\n     LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n-    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, DashboardConfiguration, EmptyMessageParameters\u003e dashboardConfigurationHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, DashboardConfigurationHeaders.getInstance(), new DashboardConfigHandler(executor, restConfiguration.getRefreshInterval()));\n+    final File tmpDir \u003d restConfiguration.getTmpDir();\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n+    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n+    handlers.add(Tuple2.of(DashboardConfigurationHeaders.getInstance(), dashboardConfigurationHandler));\n     optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n     return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dbabdb1cc2c122dbf1e83ffb9960491eaf4914bb": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7534] Create LegacyRestHandlerAdapter for old REST handlers\n\nIntroduce LegacyRestHandler interface which the old REST handler have to implement\nin order to make them usable for the RestServerEndpoint in combination with the\nLegacyRestHandlerAdapter. The LegacyRestHandlerAdapter extends the AbstractRestHandler\nand runs the LegacyRestHandler implementation.\n\nAs an example, this commit ports the ClusterOverviewHandler to the new interface. The\nDispatcher side still has to be properly implemented.\n\nThis closes #4603.\n",
      "commitDate": "2017/9/20 下午11:50",
      "commitName": "dbabdb1cc2c122dbf1e83ffb9960491eaf4914bb",
      "commitAuthor": "Till Rohrmann",
      "commitDateOld": "2017/9/20 下午4:35",
      "commitNameOld": "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239",
      "commitAuthorOld": "Till Rohrmann",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(2);\n    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n    return handlers;\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 72,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,15 @@\n @Override\n protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n+    ArrayList\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e handlers \u003d new ArrayList\u003c\u003e(2);\n+    LegacyRestHandlerAdapter\u003cDispatcherGateway, StatusOverviewWithVersion, EmptyMessageParameters\u003e clusterOverviewHandler \u003d new LegacyRestHandlerAdapter\u003c\u003e(restAddressFuture, leaderRetriever, timeout, ClusterOverviewHeaders.getInstance(), new ClusterOverviewHandler(executor, timeout));\n+    handlers.add(Tuple2.of(ClusterOverviewHeaders.getInstance(), clusterOverviewHandler));\n     Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n     try {\n         optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n     } catch (IOException e) {\n         log.warn(\"Could not load web content handler.\", e);\n         optWebContent \u003d Optional.empty();\n     }\n-    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n+    optWebContent.ifPresent(webContent -\u003e handlers.add(Tuple2.of(WebContentHandlerSpecification.getInstance(), webContent)));\n+    return handlers;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "[FLINK-7532] Add web content handler to DispatcherRestEndpoint\n\nAdds the StaticFileContentHandler to the DispatcherRestEndpoint if the\nflink-runtime-web dependency is in the classpath. In order to setup the\nrespective channel handler, this commit introduces the setupChannelHandlers\nmethod to the RestServerEndpoint.\n\nRefactor RestServerEndpoint#initializeHandler to support StaticFileServerHandler registration\n\nThis closes #4601.\n",
      "commitDate": "2017/9/20 下午4:35",
      "commitName": "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239",
      "commitAuthor": "Till Rohrmann",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[FLINK-7532] Add web content handler to DispatcherRestEndpoint\n\nAdds the StaticFileContentHandler to the DispatcherRestEndpoint if the\nflink-runtime-web dependency is in the classpath. In order to setup the\nrespective channel handler, this commit introduces the setupChannelHandlers\nmethod to the RestServerEndpoint.\n\nRefactor RestServerEndpoint#initializeHandler to support StaticFileServerHandler registration\n\nThis closes #4601.\n",
          "commitDate": "2017/9/20 下午4:35",
          "commitName": "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2017/9/20 上午6:34",
          "commitNameOld": "6a62f1455313ee8fae0ff79945da61fb67ec8edb",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n}",
          "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
          "functionStartLine": 63,
          "functionName": "initializeHandlers",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,11 @@\n @Override\n-protected Collection\u003cAbstractRestHandler\u003c?, ?, ?, ?\u003e\u003e initializeHandlers() {\n-    return Collections.emptySet();\n+protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n+    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n+    try {\n+        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n+    } catch (IOException e) {\n+        log.warn(\"Could not load web content handler.\", e);\n+        optWebContent \u003d Optional.empty();\n+    }\n+    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[restAddressFuture-CompletableFuture\u003cString\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "[FLINK-7532] Add web content handler to DispatcherRestEndpoint\n\nAdds the StaticFileContentHandler to the DispatcherRestEndpoint if the\nflink-runtime-web dependency is in the classpath. In order to setup the\nrespective channel handler, this commit introduces the setupChannelHandlers\nmethod to the RestServerEndpoint.\n\nRefactor RestServerEndpoint#initializeHandler to support StaticFileServerHandler registration\n\nThis closes #4601.\n",
          "commitDate": "2017/9/20 下午4:35",
          "commitName": "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2017/9/20 上午6:34",
          "commitNameOld": "6a62f1455313ee8fae0ff79945da61fb67ec8edb",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n}",
          "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
          "functionStartLine": 63,
          "functionName": "initializeHandlers",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,11 @@\n @Override\n-protected Collection\u003cAbstractRestHandler\u003c?, ?, ?, ?\u003e\u003e initializeHandlers() {\n-    return Collections.emptySet();\n+protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n+    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n+    try {\n+        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n+    } catch (IOException e) {\n+        log.warn(\"Could not load web content handler.\", e);\n+        optWebContent \u003d Optional.empty();\n+    }\n+    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Collection\u003cAbstractRestHandler\u003c?,?,?,?\u003e\u003e",
            "newValue": "Collection\u003cTuple2\u003cRestHandlerSpecification,ChannelInboundHandler\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-7532] Add web content handler to DispatcherRestEndpoint\n\nAdds the StaticFileContentHandler to the DispatcherRestEndpoint if the\nflink-runtime-web dependency is in the classpath. In order to setup the\nrespective channel handler, this commit introduces the setupChannelHandlers\nmethod to the RestServerEndpoint.\n\nRefactor RestServerEndpoint#initializeHandler to support StaticFileServerHandler registration\n\nThis closes #4601.\n",
          "commitDate": "2017/9/20 下午4:35",
          "commitName": "55b76d54f0dcc4bdaa96eaa463ce0bfcad23d239",
          "commitAuthor": "Till Rohrmann",
          "commitDateOld": "2017/9/20 上午6:34",
          "commitNameOld": "6a62f1455313ee8fae0ff79945da61fb67ec8edb",
          "commitAuthorOld": "Till Rohrmann",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n    try {\n        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n    } catch (IOException e) {\n        log.warn(\"Could not load web content handler.\", e);\n        optWebContent \u003d Optional.empty();\n    }\n    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n}",
          "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
          "functionStartLine": 63,
          "functionName": "initializeHandlers",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,11 @@\n @Override\n-protected Collection\u003cAbstractRestHandler\u003c?, ?, ?, ?\u003e\u003e initializeHandlers() {\n-    return Collections.emptySet();\n+protected Collection\u003cTuple2\u003cRestHandlerSpecification, ChannelInboundHandler\u003e\u003e initializeHandlers(CompletableFuture\u003cString\u003e restAddressFuture) {\n+    Optional\u003cStaticFileServerHandler\u003cDispatcherGateway\u003e\u003e optWebContent;\n+    try {\n+        optWebContent \u003d WebMonitorUtils.tryLoadWebContent(leaderRetriever, restAddressFuture, timeout, tmpDir);\n+    } catch (IOException e) {\n+        log.warn(\"Could not load web content handler.\", e);\n+        optWebContent \u003d Optional.empty();\n+    }\n+    return optWebContent.map(webContent -\u003e Collections.singleton(Tuple2.\u003cRestHandlerSpecification, ChannelInboundHandler\u003eof(WebContentHandlerSpecification.getInstance(), webContent))).orElseGet(() -\u003e Collections.emptySet());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6a62f1455313ee8fae0ff79945da61fb67ec8edb": {
      "type": "Yintroduced",
      "commitMessage": "[FLINK-7528] Create DispatcherRestEndpoint and integrate with Dispatcher\n\nThis commit creates the DispatcherRestEndpoint and integrates it with the\nDispatcher. The DispatcherRestEndpoint is created in the SessionClusterEntrypoint\nand its address is passed to the Dispatcher such that it can answer the\nrequestRestAddress RPC.\n\nThis closes #4598.\n",
      "commitDate": "2017/9/20 上午6:34",
      "commitName": "6a62f1455313ee8fae0ff79945da61fb67ec8edb",
      "commitAuthor": "Till Rohrmann",
      "diff": "@@ -0,0 +1,4 @@\n+@Override\n+protected Collection\u003cAbstractRestHandler\u003c?, ?, ?, ?\u003e\u003e initializeHandlers() {\n+    return Collections.emptySet();\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected Collection\u003cAbstractRestHandler\u003c?, ?, ?, ?\u003e\u003e initializeHandlers() {\n    return Collections.emptySet();\n}",
      "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/DispatcherRestEndpoint.java",
      "functionStartLine": 38,
      "functionName": "initializeHandlers",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}