{
  "origin": "codeshovel",
  "repositoryName": "junit4",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit4/.git",
  "startCommitName": "02c328028b4d32c15bbf0becc9838e54ecbafcbf",
  "sourceFileName": "Parameterized.java",
  "functionName": "createRunnersForParameters",
  "functionId": "$createRunnersForParameters___allParameters-Iterable__Object____namePattern-String__runnerFactory-ParametersRunnerFactory",
  "sourceFilePath": "src/main/java/org/junit/runners/Parameterized.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 439,
  "functionEndLine": 454,
  "numCommitsSeen": 219,
  "timeTaken": 719,
  "changeHistory": [
    "1bf8438b65858565dbb64736bfe13aae9cfc1b5a",
    "c391c25b230e880289484202f3dc3aa81c373a1c",
    "cb6abf6fc729f07c5d60b0756e91af444400b4b5",
    "f6a3d7405b72966d3714355804e1b3c14b1425cb",
    "68b4e393388627201265eb3924f3628b1c27e6ff",
    "ede492496de0f3c0872216ac9c9b88a00fdef09e",
    "61badf2f7f147d6e782e1700b24da4ac06ce070c",
    "e0cddcdfa8ec823da136af500cce0910a1dd2264",
    "5475e12b57f5af0140deffa7f45c75dc47803167"
  ],
  "changeHistoryShort": {
    "1bf8438b65858565dbb64736bfe13aae9cfc1b5a": "Ybodychange",
    "c391c25b230e880289484202f3dc3aa81c373a1c": "Yexceptionschange",
    "cb6abf6fc729f07c5d60b0756e91af444400b4b5": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "f6a3d7405b72966d3714355804e1b3c14b1425cb": "Ymultichange(Yparameterchange,Ybodychange)",
    "68b4e393388627201265eb3924f3628b1c27e6ff": "Ybodychange",
    "ede492496de0f3c0872216ac9c9b88a00fdef09e": "Ymultichange(Yreturntypechange,Ybodychange)",
    "61badf2f7f147d6e782e1700b24da4ac06ce070c": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e0cddcdfa8ec823da136af500cce0910a1dd2264": "Ymultichange(Yparameterchange,Ybodychange)",
    "5475e12b57f5af0140deffa7f45c75dc47803167": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1bf8438b65858565dbb64736bfe13aae9cfc1b5a": {
      "type": "Ybodychange",
      "commitMessage": "@BeforeParam/@AfterParam for Parameterized runner (#1435)\n\nCloses #45 ",
      "commitDate": "2017/4/21 上午8:19",
      "commitName": "1bf8438b65858565dbb64736bfe13aae9cfc1b5a",
      "commitAuthor": "Alex Panchenko",
      "commitDateOld": "2015/4/15 上午2:27",
      "commitNameOld": "9f87b7819a63b53aae70e79fb72cc00e1837a3b6",
      "commitAuthorOld": "Dmitry Baev",
      "daysBetweenCommits": 737.24,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws Exception {\n    try {\n        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (TestWithParameters test : tests) {\n            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType(testClass, parametersMethod);\n    }\n}",
      "path": "src/main/java/org/junit/runners/Parameterized.java",
      "functionStartLine": 399,
      "functionName": "createRunnersForParameters",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws Exception {\n     try {\n         List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n         List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n         for (TestWithParameters test : tests) {\n             runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n         }\n         return runners;\n     } catch (ClassCastException e) {\n-        throw parametersMethodReturnedWrongType();\n+        throw parametersMethodReturnedWrongType(testClass, parametersMethod);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c391c25b230e880289484202f3dc3aa81c373a1c": {
      "type": "Yexceptionschange",
      "commitMessage": "Remove redundant exception from method signature.\n\nA more general exception is already part of the signature.\n",
      "commitDate": "2014/11/14 上午7:14",
      "commitName": "c391c25b230e880289484202f3dc3aa81c373a1c",
      "commitAuthor": "Stefan Birkner",
      "commitDateOld": "2014/6/25 上午3:30",
      "commitNameOld": "4eecfb1eff9aa5304f6b30874a26734124ac902d",
      "commitAuthorOld": "vimil",
      "daysBetweenCommits": 142.16,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws Exception {\n    try {\n        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (TestWithParameters test : tests) {\n            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
      "path": "src/main/java/org/junit/runners/Parameterized.java",
      "functionStartLine": 302,
      "functionName": "createRunnersForParameters",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n-private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws Exception {\n     try {\n         List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n         List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n         for (TestWithParameters test : tests) {\n             runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n         }\n         return runners;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[InitializationError, Exception]",
        "newValue": "[Exception]"
      }
    },
    "cb6abf6fc729f07c5d60b0756e91af444400b4b5": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Use a ParametersRunnerFactory for creating the test for a set of parameters.\n\nThere\u0027s now an explicit component for creating the runner of a single set of parameters. IMHO this is a better extension point than overriding a method.\n\nThe factory can be specified by the @UseParametersRunnerFactory\nannotation or you can subclass the Parameterized class and provide\nthe factory to its constructor.\n",
      "commitDate": "2014/2/27 上午2:58",
      "commitName": "cb6abf6fc729f07c5d60b0756e91af444400b4b5",
      "commitAuthor": "Stefan Birkner",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Use a ParametersRunnerFactory for creating the test for a set of parameters.\n\nThere\u0027s now an explicit component for creating the runner of a single set of parameters. IMHO this is a better extension point than overriding a method.\n\nThe factory can be specified by the @UseParametersRunnerFactory\nannotation or you can subclass the Parameterized class and provide\nthe factory to its constructor.\n",
          "commitDate": "2014/2/27 上午2:58",
          "commitName": "cb6abf6fc729f07c5d60b0756e91af444400b4b5",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2014/2/27 上午2:58",
          "commitNameOld": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7",
          "commitAuthorOld": "Stefan Birkner",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n    try {\n        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (TestWithParameters test : tests) {\n            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 301,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n     try {\n-        int i \u003d 0;\n-        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n-        for (Object parametersOfSingleTest : allParameters) {\n-            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n+        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n+        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n+        for (TestWithParameters test : tests) {\n+            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n         }\n-        return children;\n+        return runners;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[allParameters-Iterable\u003cObject\u003e, namePattern-String]",
            "newValue": "[allParameters-Iterable\u003cObject\u003e, namePattern-String, runnerFactory-ParametersRunnerFactory]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Use a ParametersRunnerFactory for creating the test for a set of parameters.\n\nThere\u0027s now an explicit component for creating the runner of a single set of parameters. IMHO this is a better extension point than overriding a method.\n\nThe factory can be specified by the @UseParametersRunnerFactory\nannotation or you can subclass the Parameterized class and provide\nthe factory to its constructor.\n",
          "commitDate": "2014/2/27 上午2:58",
          "commitName": "cb6abf6fc729f07c5d60b0756e91af444400b4b5",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2014/2/27 上午2:58",
          "commitNameOld": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7",
          "commitAuthorOld": "Stefan Birkner",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n    try {\n        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (TestWithParameters test : tests) {\n            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 301,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n     try {\n-        int i \u003d 0;\n-        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n-        for (Object parametersOfSingleTest : allParameters) {\n-            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n+        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n+        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n+        for (TestWithParameters test : tests) {\n+            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n         }\n-        return children;\n+        return runners;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[Exception]",
            "newValue": "[InitializationError, Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use a ParametersRunnerFactory for creating the test for a set of parameters.\n\nThere\u0027s now an explicit component for creating the runner of a single set of parameters. IMHO this is a better extension point than overriding a method.\n\nThe factory can be specified by the @UseParametersRunnerFactory\nannotation or you can subclass the Parameterized class and provide\nthe factory to its constructor.\n",
          "commitDate": "2014/2/27 上午2:58",
          "commitName": "cb6abf6fc729f07c5d60b0756e91af444400b4b5",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2014/2/27 上午2:58",
          "commitNameOld": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7",
          "commitAuthorOld": "Stefan Birkner",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n    try {\n        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (TestWithParameters test : tests) {\n            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 301,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern, ParametersRunnerFactory runnerFactory) throws InitializationError, Exception {\n     try {\n-        int i \u003d 0;\n-        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n-        for (Object parametersOfSingleTest : allParameters) {\n-            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n+        List\u003cTestWithParameters\u003e tests \u003d createTestsForParameters(allParameters, namePattern);\n+        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n+        for (TestWithParameters test : tests) {\n+            runners.add(runnerFactory.createRunnerForTestWithParameters(test));\n         }\n-        return children;\n+        return runners;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f6a3d7405b72966d3714355804e1b3c14b1425cb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Support more return types for the @Parameters method. Fixes #700.\n\nSupport the return types Iterator\u003c? extends Object\u003e, Object[] and Object[][]. You don\u0027t have to wrap arrays with Iterables and single parameters with Object arrays.\n",
      "commitDate": "2013/7/14 上午12:19",
      "commitName": "f6a3d7405b72966d3714355804e1b3c14b1425cb",
      "commitAuthor": "Stefan Birkner",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Support more return types for the @Parameters method. Fixes #700.\n\nSupport the return types Iterator\u003c? extends Object\u003e, Object[] and Object[][]. You don\u0027t have to wrap arrays with Iterables and single parameters with Object arrays.\n",
          "commitDate": "2013/7/14 上午12:19",
          "commitName": "f6a3d7405b72966d3714355804e1b3c14b1425cb",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2013/7/3 上午4:13",
          "commitNameOld": "334bd9ce923cf0293cbca49be4ae5947abf51897",
          "commitAuthorOld": "Tibor Digana",
          "daysBetweenCommits": 10.84,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n        for (Object parametersOfSingleTest : allParameters) {\n            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n        }\n        return children;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 353,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n         List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n-        for (Object[] parametersOfSingleTest : allParameters) {\n-            children.add(createRunner(namePattern, i++, parametersOfSingleTest));\n+        for (Object parametersOfSingleTest : allParameters) {\n+            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n         }\n         return children;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[allParameters-Iterable\u003cObject[]\u003e, namePattern-String]",
            "newValue": "[allParameters-Iterable\u003cObject\u003e, namePattern-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Support more return types for the @Parameters method. Fixes #700.\n\nSupport the return types Iterator\u003c? extends Object\u003e, Object[] and Object[][]. You don\u0027t have to wrap arrays with Iterables and single parameters with Object arrays.\n",
          "commitDate": "2013/7/14 上午12:19",
          "commitName": "f6a3d7405b72966d3714355804e1b3c14b1425cb",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2013/7/3 上午4:13",
          "commitNameOld": "334bd9ce923cf0293cbca49be4ae5947abf51897",
          "commitAuthorOld": "Tibor Digana",
          "daysBetweenCommits": 10.84,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n        for (Object parametersOfSingleTest : allParameters) {\n            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n        }\n        return children;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 353,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,12 @@\n-private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n         List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n-        for (Object[] parametersOfSingleTest : allParameters) {\n-            children.add(createRunner(namePattern, i++, parametersOfSingleTest));\n+        for (Object parametersOfSingleTest : allParameters) {\n+            children.add(createRunnerWithNotNormalizedParameters(namePattern, i++, parametersOfSingleTest));\n         }\n         return children;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "68b4e393388627201265eb3924f3628b1c27e6ff": {
      "type": "Ybodychange",
      "commitMessage": "shorten line, renamed var, removed unnecessary empty array in varargs.\n",
      "commitDate": "2013/6/8 下午5:24",
      "commitName": "68b4e393388627201265eb3924f3628b1c27e6ff",
      "commitAuthor": "Tibor Digana",
      "commitDateOld": "2013/6/4 上午8:19",
      "commitNameOld": "ede492496de0f3c0872216ac9c9b88a00fdef09e",
      "commitAuthorOld": "Tibor Digana",
      "daysBetweenCommits": 4.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n        for (Object[] parametersOfSingleTest : allParameters) {\n            children.add(createRunner(namePattern, i++, parametersOfSingleTest));\n        }\n        return children;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
      "path": "src/main/java/org/junit/runners/Parameterized.java",
      "functionStartLine": 311,
      "functionName": "createRunnersForParameters",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n-        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n+        List\u003cRunner\u003e children \u003d new ArrayList\u003cRunner\u003e();\n         for (Object[] parametersOfSingleTest : allParameters) {\n-            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n+            children.add(createRunner(namePattern, i++, parametersOfSingleTest));\n         }\n-        return runners;\n+        return children;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ede492496de0f3c0872216ac9c9b88a00fdef09e": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "changes with unmodifiable collections\n",
      "commitDate": "2013/6/4 上午8:19",
      "commitName": "ede492496de0f3c0872216ac9c9b88a00fdef09e",
      "commitAuthor": "Tibor Digana",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "changes with unmodifiable collections\n",
          "commitDate": "2013/6/4 上午8:19",
          "commitName": "ede492496de0f3c0872216ac9c9b88a00fdef09e",
          "commitAuthor": "Tibor Digana",
          "commitDateOld": "2013/4/12 上午7:11",
          "commitNameOld": "83a25d440d118b7d10779a884d35f31045949e27",
          "commitAuthorOld": "Tibor Digana",
          "daysBetweenCommits": 53.05,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (Object[] parametersOfSingleTest : allParameters) {\n            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 311,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,12 @@\n-private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n+        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n         for (Object[] parametersOfSingleTest : allParameters) {\n             runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n         }\n+        return runners;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "List\u003cRunner\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "changes with unmodifiable collections\n",
          "commitDate": "2013/6/4 上午8:19",
          "commitName": "ede492496de0f3c0872216ac9c9b88a00fdef09e",
          "commitAuthor": "Tibor Digana",
          "commitDateOld": "2013/4/12 上午7:11",
          "commitNameOld": "83a25d440d118b7d10779a884d35f31045949e27",
          "commitAuthorOld": "Tibor Digana",
          "daysBetweenCommits": 53.05,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n        for (Object[] parametersOfSingleTest : allParameters) {\n            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n        }\n        return runners;\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 311,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,12 @@\n-private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n+private List\u003cRunner\u003e createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n+        List\u003cRunner\u003e runners \u003d new ArrayList\u003cRunner\u003e();\n         for (Object[] parametersOfSingleTest : allParameters) {\n             runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n         }\n+        return runners;\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "61badf2f7f147d6e782e1700b24da4ac06ce070c": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "allow configurable creation of child runners of parameterized suites\n",
      "commitDate": "2012/12/4 下午9:17",
      "commitName": "61badf2f7f147d6e782e1700b24da4ac06ce070c",
      "commitAuthor": "Francesco Mari",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "allow configurable creation of child runners of parameterized suites\n",
          "commitDate": "2012/12/4 下午9:17",
          "commitName": "61badf2f7f147d6e782e1700b24da4ac06ce070c",
          "commitAuthor": "Francesco Mari",
          "commitDateOld": "2012/11/19 下午11:24",
          "commitNameOld": "70e2f2e369829a7443e96c29f922be9e04da93dd",
          "commitAuthorOld": "Matthew Farwell",
          "daysBetweenCommits": 14.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        for (Object[] parametersOfSingleTest : allParameters) {\n            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n        }\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 322,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,10 @@\n-private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws InitializationError, Exception {\n+private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n         for (Object[] parametersOfSingleTest : allParameters) {\n-            String name \u003d nameFor(namePattern, i, parametersOfSingleTest);\n-            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, name);\n-            runners.add(runner);\n-            ++i;\n+            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n         }\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[InitializationError, Exception]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "allow configurable creation of child runners of parameterized suites\n",
          "commitDate": "2012/12/4 下午9:17",
          "commitName": "61badf2f7f147d6e782e1700b24da4ac06ce070c",
          "commitAuthor": "Francesco Mari",
          "commitDateOld": "2012/11/19 下午11:24",
          "commitNameOld": "70e2f2e369829a7443e96c29f922be9e04da93dd",
          "commitAuthorOld": "Matthew Farwell",
          "daysBetweenCommits": 14.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n    try {\n        int i \u003d 0;\n        for (Object[] parametersOfSingleTest : allParameters) {\n            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n        }\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 322,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,10 @@\n-private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws InitializationError, Exception {\n+private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws Exception {\n     try {\n         int i \u003d 0;\n         for (Object[] parametersOfSingleTest : allParameters) {\n-            String name \u003d nameFor(namePattern, i, parametersOfSingleTest);\n-            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, name);\n-            runners.add(runner);\n-            ++i;\n+            runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\n         }\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e0cddcdfa8ec823da136af500cce0910a1dd2264": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add names for parameterized tests. Fixes #24 and #44.\n\nIn order that you can easily identify individual test, you may provide\na name for the Parameters annotation.\n @Parameters(name\u003d\"my test\")\nThis name is allowed to contain placeholders, which are replaced at\nruntime. The placeholders are\n* {index} - the current parameter index\n* {0} - the first parameter\n* {1} - the second parameter\n* ... - the other parameters\nIf you don\u0027t use the name parameter, then the current parameter index\nis used as name.\n\nExample:\nWhen you use @Parameters(name\u003d\"fib({0})\u003d{1}\") with the Fibonacci\nexample, then you get test names like \"fib(3)\u003d2\".\n\nThis feature is based on the work of Dimitar Dimitrov (pull request\n#145).\nThank\nyou.",
      "commitDate": "2012/3/3 上午6:18",
      "commitName": "e0cddcdfa8ec823da136af500cce0910a1dd2264",
      "commitAuthor": "Stefan Birkner",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add names for parameterized tests. Fixes #24 and #44.\n\nIn order that you can easily identify individual test, you may provide\na name for the Parameters annotation.\n @Parameters(name\u003d\"my test\")\nThis name is allowed to contain placeholders, which are replaced at\nruntime. The placeholders are\n* {index} - the current parameter index\n* {0} - the first parameter\n* {1} - the second parameter\n* ... - the other parameters\nIf you don\u0027t use the name parameter, then the current parameter index\nis used as name.\n\nExample:\nWhen you use @Parameters(name\u003d\"fib({0})\u003d{1}\") with the Fibonacci\nexample, then you get test names like \"fib(3)\u003d2\".\n\nThis feature is based on the work of Dimitar Dimitrov (pull request\n#145).\nThank\nyou.",
          "commitDate": "2012/3/3 上午6:18",
          "commitName": "e0cddcdfa8ec823da136af500cce0910a1dd2264",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2011/10/21 上午7:29",
          "commitNameOld": "5475e12b57f5af0140deffa7f45c75dc47803167",
          "commitAuthorOld": "Stefan Birkner",
          "daysBetweenCommits": 133.95,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws InitializationError, Exception {\n    try {\n        int i \u003d 0;\n        for (Object[] parametersOfSingleTest : allParameters) {\n            String name \u003d nameFor(namePattern, i, parametersOfSingleTest);\n            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, name);\n            runners.add(runner);\n            ++i;\n        }\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 196,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,13 @@\n-private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters) throws InitializationError, Exception {\n+private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws InitializationError, Exception {\n     try {\n         int i \u003d 0;\n         for (Object[] parametersOfSingleTest : allParameters) {\n-            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, i);\n+            String name \u003d nameFor(namePattern, i, parametersOfSingleTest);\n+            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, name);\n             runners.add(runner);\n             ++i;\n         }\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[allParameters-Iterable\u003cObject[]\u003e]",
            "newValue": "[allParameters-Iterable\u003cObject[]\u003e, namePattern-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add names for parameterized tests. Fixes #24 and #44.\n\nIn order that you can easily identify individual test, you may provide\na name for the Parameters annotation.\n @Parameters(name\u003d\"my test\")\nThis name is allowed to contain placeholders, which are replaced at\nruntime. The placeholders are\n* {index} - the current parameter index\n* {0} - the first parameter\n* {1} - the second parameter\n* ... - the other parameters\nIf you don\u0027t use the name parameter, then the current parameter index\nis used as name.\n\nExample:\nWhen you use @Parameters(name\u003d\"fib({0})\u003d{1}\") with the Fibonacci\nexample, then you get test names like \"fib(3)\u003d2\".\n\nThis feature is based on the work of Dimitar Dimitrov (pull request\n#145).\nThank\nyou.",
          "commitDate": "2012/3/3 上午6:18",
          "commitName": "e0cddcdfa8ec823da136af500cce0910a1dd2264",
          "commitAuthor": "Stefan Birkner",
          "commitDateOld": "2011/10/21 上午7:29",
          "commitNameOld": "5475e12b57f5af0140deffa7f45c75dc47803167",
          "commitAuthorOld": "Stefan Birkner",
          "daysBetweenCommits": 133.95,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws InitializationError, Exception {\n    try {\n        int i \u003d 0;\n        for (Object[] parametersOfSingleTest : allParameters) {\n            String name \u003d nameFor(namePattern, i, parametersOfSingleTest);\n            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, name);\n            runners.add(runner);\n            ++i;\n        }\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
          "path": "src/main/java/org/junit/runners/Parameterized.java",
          "functionStartLine": 196,
          "functionName": "createRunnersForParameters",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,13 @@\n-private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters) throws InitializationError, Exception {\n+private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters, String namePattern) throws InitializationError, Exception {\n     try {\n         int i \u003d 0;\n         for (Object[] parametersOfSingleTest : allParameters) {\n-            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, i);\n+            String name \u003d nameFor(namePattern, i, parametersOfSingleTest);\n+            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, name);\n             runners.add(runner);\n             ++i;\n         }\n     } catch (ClassCastException e) {\n         throw parametersMethodReturnedWrongType();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5475e12b57f5af0140deffa7f45c75dc47803167": {
      "type": "Yintroduced",
      "commitMessage": "Use Iterable for the parameters of Parameterized (fixes #104).\n\nThe method annotated with @Parameterized returns an Iterable\u003cObject[]\u003e\n(was List\u003cObject[]\u003e before). The test fails with a meaningful exception\notherwise.\n",
      "commitDate": "2011/10/21 上午7:29",
      "commitName": "5475e12b57f5af0140deffa7f45c75dc47803167",
      "commitAuthor": "Stefan Birkner",
      "diff": "@@ -0,0 +1,12 @@\n+private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters) throws InitializationError, Exception {\n+    try {\n+        int i \u003d 0;\n+        for (Object[] parametersOfSingleTest : allParameters) {\n+            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, i);\n+            runners.add(runner);\n+            ++i;\n+        }\n+    } catch (ClassCastException e) {\n+        throw parametersMethodReturnedWrongType();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void createRunnersForParameters(Iterable\u003cObject[]\u003e allParameters) throws InitializationError, Exception {\n    try {\n        int i \u003d 0;\n        for (Object[] parametersOfSingleTest : allParameters) {\n            TestClassRunnerForParameters runner \u003d new TestClassRunnerForParameters(getTestClass().getJavaClass(), parametersOfSingleTest, i);\n            runners.add(runner);\n            ++i;\n        }\n    } catch (ClassCastException e) {\n        throw parametersMethodReturnedWrongType();\n    }\n}",
      "path": "src/main/java/org/junit/runners/Parameterized.java",
      "functionStartLine": 154,
      "functionName": "createRunnersForParameters",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}