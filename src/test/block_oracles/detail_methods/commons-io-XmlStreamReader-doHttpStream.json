{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "XmlStreamReader.java",
  "functionName": "doHttpStream",
  "functionId": "doHttpStream___bom-BOMInputStream(modifiers-final)__pis-BOMInputStream(modifiers-final)__httpContentType-String(modifiers-final)__lenient-boolean(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
  "functionAnnotation": "",
  "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
  "functionStartLine": 449,
  "functionEndLine": 463,
  "numCommitsSeen": 54,
  "timeTaken": 922,
  "changeHistory": [
    "8993c0060e4eb2d5bca20e3529a829a9dd90efdf",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "97191772383bc267d16497c884a1c8b90033911b",
    "294c570fcae9ca62e3157a9e7b8293a08e68dae2",
    "8a1529917f7aa5604fbdaa689b086c04848779af",
    "7264eea73bc0f9560520ed6c423ff62f18ab4940",
    "e4540bba7aebd88d3d4b22e68a6a916ddfc48890",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
    "5a21350fb904af0f0e0f8d1cc5ce484c7183dd13",
    "50d5aeea6180c582b788aedc44c3ae2c3c441eff",
    "a2800c889834ee30b5e8c0971cd1efbfa980bf9a",
    "2fbbf47aaf12f3efc333caf06bb61d63472d610e",
    "5b75cf83b2db408f8228b26910a8d3d3633cd54f"
  ],
  "changeHistoryShort": {
    "8993c0060e4eb2d5bca20e3529a829a9dd90efdf": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "97191772383bc267d16497c884a1c8b90033911b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "294c570fcae9ca62e3157a9e7b8293a08e68dae2": "Ymultichange(Yreturntypechange,Ybodychange,Ydocchange)",
    "8a1529917f7aa5604fbdaa689b086c04848779af": "Ybodychange",
    "7264eea73bc0f9560520ed6c423ff62f18ab4940": "Ybodychange",
    "e4540bba7aebd88d3d4b22e68a6a916ddfc48890": "Ybodychange",
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": "Yfilerename",
    "5a21350fb904af0f0e0f8d1cc5ce484c7183dd13": "Ybodychange",
    "50d5aeea6180c582b788aedc44c3ae2c3c441eff": "Ybodychange",
    "a2800c889834ee30b5e8c0971cd1efbfa980bf9a": "Ydocchange",
    "2fbbf47aaf12f3efc333caf06bb61d63472d610e": "Ybodychange",
    "5b75cf83b2db408f8228b26910a8d3d3633cd54f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8993c0060e4eb2d5bca20e3529a829a9dd90efdf": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t need to nest else clause. Refactor magic numbers into constants.",
      "commitDate": "2018/3/7 上午1:00",
      "commitName": "8993c0060e4eb2d5bca20e3529a829a9dd90efdf",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "2018/1/14 下午6:39",
      "commitNameOld": "d19259a7774e23ebdaac4af5ee4def8602fe2969",
      "commitAuthorOld": "luccioman",
      "daysBetweenCommits": 51.26,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private String doHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n    final String bomEnc \u003d bom.getBOMCharsetName();\n    final String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    final String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (final XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, ex);\n        }\n        throw ex;\n    }\n}",
      "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 449,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "@@ -1,14 +1,13 @@\n private String doHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n     final String bomEnc \u003d bom.getBOMCharsetName();\n     final String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     final String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n         return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (final XmlStreamReaderException ex) {\n         if (lenient) {\n             return doLenientDetection(httpContentType, ex);\n-        } else {\n-            throw ex;\n         }\n+        throw ex;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/12/1 上午4:51",
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2012/12/1 上午4:51",
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "2012/6/5 下午10:48",
          "commitNameOld": "e4c65e5424fe7a7c9795348fc855d42a247f0c00",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 178.25,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n    final String bomEnc \u003d bom.getBOMCharsetName();\n    final String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    final String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (final XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 450,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,14 +1,14 @@\n-private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n-    String bomEnc \u003d bom.getBOMCharsetName();\n-    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n-    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n+private String doHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n+    final String bomEnc \u003d bom.getBOMCharsetName();\n+    final String xmlGuessEnc \u003d pis.getBOMCharsetName();\n+    final String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n         return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n-    } catch (XmlStreamReaderException ex) {\n+    } catch (final XmlStreamReaderException ex) {\n         if (lenient) {\n             return doLenientDetection(httpContentType, ex);\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2012/12/1 上午4:51",
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "2012/6/5 下午10:48",
          "commitNameOld": "e4c65e5424fe7a7c9795348fc855d42a247f0c00",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 178.25,
          "commitsBetweenForRepo": 86,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n    final String bomEnc \u003d bom.getBOMCharsetName();\n    final String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    final String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (final XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 450,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,14 +1,14 @@\n-private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n-    String bomEnc \u003d bom.getBOMCharsetName();\n-    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n-    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n+private String doHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n+    final String bomEnc \u003d bom.getBOMCharsetName();\n+    final String xmlGuessEnc \u003d pis.getBOMCharsetName();\n+    final String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n         return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n-    } catch (XmlStreamReaderException ex) {\n+    } catch (final XmlStreamReaderException ex) {\n         if (lenient) {\n             return doLenientDetection(httpContentType, ex);\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[bom-BOMInputStream, pis-BOMInputStream, httpContentType-String, lenient-boolean]",
            "newValue": "[bom-BOMInputStream(modifiers-final), pis-BOMInputStream(modifiers-final), httpContentType-String(modifiers-final), lenient-boolean(modifiers-final)]"
          }
        }
      ]
    },
    "97191772383bc267d16497c884a1c8b90033911b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "IO-258 - Fix XmlStreamReader consumes the stream during encoding detection\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1052161 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/12/23 上午11:12",
      "commitName": "97191772383bc267d16497c884a1c8b90033911b",
      "commitAuthor": "Niall Pemberton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "IO-258 - Fix XmlStreamReader consumes the stream during encoding detection\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1052161 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2010/12/23 上午11:12",
          "commitName": "97191772383bc267d16497c884a1c8b90033911b",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": "2010/10/13 上午2:49",
          "commitNameOld": "f04a6d47557933a7fb855c1646c350c856def37d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 71.35,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 437,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,16 +1,14 @@\n-private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n-    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n-    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n+private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n         return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (XmlStreamReaderException ex) {\n         if (lenient) {\n-            return doLenientDetection(httpContentType, is, ex);\n+            return doLenientDetection(httpContentType, ex);\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[is-InputStream, httpContentType-String, lenient-boolean]",
            "newValue": "[bom-BOMInputStream, pis-BOMInputStream, httpContentType-String, lenient-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IO-258 - Fix XmlStreamReader consumes the stream during encoding detection\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1052161 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2010/12/23 上午11:12",
          "commitName": "97191772383bc267d16497c884a1c8b90033911b",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": "2010/10/13 上午2:49",
          "commitNameOld": "f04a6d47557933a7fb855c1646c350c856def37d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 71.35,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 437,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,16 +1,14 @@\n-private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n-    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n-    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n+private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n         return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (XmlStreamReaderException ex) {\n         if (lenient) {\n-            return doLenientDetection(httpContentType, is, ex);\n+            return doLenientDetection(httpContentType, ex);\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "IO-258 - Fix XmlStreamReader consumes the stream during encoding detection\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1052161 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2010/12/23 上午11:12",
          "commitName": "97191772383bc267d16497c884a1c8b90033911b",
          "commitAuthor": "Niall Pemberton",
          "commitDateOld": "2010/10/13 上午2:49",
          "commitNameOld": "f04a6d47557933a7fb855c1646c350c856def37d",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 71.35,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 437,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,16 +1,14 @@\n-private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n-    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n-    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n+private String doHttpStream(BOMInputStream bom, BOMInputStream pis, String httpContentType, boolean lenient) throws IOException {\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n         return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (XmlStreamReaderException ex) {\n         if (lenient) {\n-            return doLenientDetection(httpContentType, is, ex);\n+            return doLenientDetection(httpContentType, ex);\n         } else {\n             throw ex;\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
            "newValue": "Process a HTTP stream.\n\n@param bom BOMInputStream to detect byte order marks\n@param pis BOMInputStream to guess XML encoding\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n"
          }
        }
      ]
    },
    "294c570fcae9ca62e3157a9e7b8293a08e68dae2": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Make reader and encoding fields immutable\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004882 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/6 上午10:36",
      "commitName": "294c570fcae9ca62e3157a9e7b8293a08e68dae2",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Make reader and encoding fields immutable\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004882 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2010/10/6 上午10:36",
          "commitName": "294c570fcae9ca62e3157a9e7b8293a08e68dae2",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2010/10/6 上午10:23",
          "commitNameOld": "ec9c918889a17312effbd8b555489103da1df04e",
          "commitAuthorOld": "Niall Pemberton",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, is, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 463,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,17 +1,16 @@\n-private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n+private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n-        this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (XmlStreamReaderException ex) {\n         if (lenient) {\n-            this.encoding \u003d doLenientDetection(httpContentType, is, ex);\n+            return doLenientDetection(httpContentType, is, ex);\n         } else {\n             throw ex;\n         }\n     }\n-    this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Make reader and encoding fields immutable\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004882 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2010/10/6 上午10:36",
          "commitName": "294c570fcae9ca62e3157a9e7b8293a08e68dae2",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2010/10/6 上午10:23",
          "commitNameOld": "ec9c918889a17312effbd8b555489103da1df04e",
          "commitAuthorOld": "Niall Pemberton",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, is, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 463,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,17 +1,16 @@\n-private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n+private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n-        this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (XmlStreamReaderException ex) {\n         if (lenient) {\n-            this.encoding \u003d doLenientDetection(httpContentType, is, ex);\n+            return doLenientDetection(httpContentType, is, ex);\n         } else {\n             throw ex;\n         }\n     }\n-    this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Make reader and encoding fields immutable\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004882 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2010/10/6 上午10:36",
          "commitName": "294c570fcae9ca62e3157a9e7b8293a08e68dae2",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2010/10/6 上午10:23",
          "commitNameOld": "ec9c918889a17312effbd8b555489103da1df04e",
          "commitAuthorOld": "Niall Pemberton",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            return doLenientDetection(httpContentType, is, ex);\n        } else {\n            throw ex;\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
          "functionStartLine": 463,
          "functionName": "doHttpStream",
          "functionAnnotation": "",
          "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n",
          "diff": "@@ -1,17 +1,16 @@\n-private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n+private String doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     try {\n-        this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+        return calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     } catch (XmlStreamReaderException ex) {\n         if (lenient) {\n-            this.encoding \u003d doLenientDetection(httpContentType, is, ex);\n+            return doLenientDetection(httpContentType, is, ex);\n         } else {\n             throw ex;\n         }\n     }\n-    this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
            "newValue": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@return the encoding to be used\n@throws IOException thrown if there is a problem reading the stream.\n"
          }
        }
      ]
    },
    "8a1529917f7aa5604fbdaa689b086c04848779af": {
      "type": "Ybodychange",
      "commitMessage": "IO-162 Refactor lenient processing - simplifies the code and avoids reprocessing the stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004871 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/6 上午9:20",
      "commitName": "8a1529917f7aa5604fbdaa689b086c04848779af",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/6 上午6:33",
      "commitNameOld": "3fb12de7946abf01216f303bd97e1ec051a65d2e",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    try {\n        this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    } catch (XmlStreamReaderException ex) {\n        if (lenient) {\n            this.encoding \u003d doLenientDetection(httpContentType, is, ex);\n        } else {\n            throw ex;\n        }\n    }\n    this.reader \u003d new InputStreamReader(is, encoding);\n}",
      "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 445,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "@@ -1,9 +1,17 @@\n private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n-    this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+    try {\n+        this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+    } catch (XmlStreamReaderException ex) {\n+        if (lenient) {\n+            this.encoding \u003d doLenientDetection(httpContentType, is, ex);\n+        } else {\n+            throw ex;\n+        }\n+    }\n     this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7264eea73bc0f9560520ed6c423ff62f18ab4940": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring - move mine/encoding content type detection into the calculateHttpEncoding() method where its used\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004514 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/5 上午10:58",
      "commitName": "7264eea73bc0f9560520ed6c423ff62f18ab4940",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/5 上午10:49",
      "commitNameOld": "e4540bba7aebd88d3d4b22e68a6a916ddfc48890",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    this.reader \u003d new InputStreamReader(is, encoding);\n}",
      "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 464,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "@@ -1,11 +1,9 @@\n private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n-    String cTMime \u003d getContentTypeMime(httpContentType);\n-    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n-    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+    this.encoding \u003d calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4540bba7aebd88d3d4b22e68a6a916ddfc48890": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring to remove the InputStream from XmlStreamReaderException in r1004109 means we don\u0027t need to pass the InputStream to the calculateRawEncoding() and calculateHttpEncoding() methods \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004512 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/5 上午10:49",
      "commitName": "e4540bba7aebd88d3d4b22e68a6a916ddfc48890",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/5 上午10:40",
      "commitNameOld": "305062404737ecf9a3ff561bca985513cee818ad",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n    this.reader \u003d new InputStreamReader(is, encoding);\n}",
      "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 464,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String cTMime \u003d getContentTypeMime(httpContentType);\n     String cTEnc \u003d getContentTypeEncoding(httpContentType);\n     String bomEnc \u003d bom.getBOMCharsetName();\n     String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n-    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n+    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n     this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a": {
      "type": "Yfilerename",
      "commitMessage": "Build changes - re-organize to standard m2 layout, remove useless JIRA report and fix some Ant issues\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004358 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/5 上午2:54",
      "commitName": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/5 上午1:54",
      "commitNameOld": "19f48eb1711427a43a5e10c84bbbf1218a08bdd2",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n    this.reader \u003d new InputStreamReader(is, encoding);\n}",
      "path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 466,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
        "newPath": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
      }
    },
    "5a21350fb904af0f0e0f8d1cc5ce484c7183dd13": {
      "type": "Ybodychange",
      "commitMessage": "IO-162 and IO-178 Minor refactoring to simplify\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004123 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/4 下午2:15",
      "commitName": "5a21350fb904af0f0e0f8d1cc5ce484c7183dd13",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/4 下午2:06",
      "commitNameOld": "1056d5ded9d19c3ee8c013d35fa5679163935935",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d bom.getBOMCharsetName();\n    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n    this.reader \u003d new InputStreamReader(is, encoding);\n}",
      "path": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 466,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n     BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n     BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String cTMime \u003d getContentTypeMime(httpContentType);\n     String cTEnc \u003d getContentTypeEncoding(httpContentType);\n-    String bomEnc \u003d (bom.hasBOM() ? bom.getBOM().getCharsetName() : null);\n-    String xmlGuessEnc \u003d (pis.hasBOM() ? pis.getBOM().getCharsetName() : null);\n+    String bomEnc \u003d bom.getBOMCharsetName();\n+    String xmlGuessEnc \u003d pis.getBOMCharsetName();\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n     this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "50d5aeea6180c582b788aedc44c3ae2c3c441eff": {
      "type": "Ybodychange",
      "commitMessage": "IO-162 Slight refactoring to simplify\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004121 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/4 下午1:39",
      "commitName": "50d5aeea6180c582b788aedc44c3ae2c3c441eff",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/4 下午12:48",
      "commitNameOld": "5b4212d98988e6798d1ced601a2036f7e98b70e0",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d (bom.hasBOM() ? bom.getBOM().getCharsetName() : null);\n    String xmlGuessEnc \u003d (pis.hasBOM() ? pis.getBOM().getCharsetName() : null);\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n    this.reader \u003d new InputStreamReader(is, encoding);\n}",
      "path": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 466,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "@@ -1,11 +1,11 @@\n private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n-    BOMInputStream bom \u003d createBomStream(new BufferedInputStream(is, BUFFER_SIZE));\n-    BOMInputStream pis \u003d createXmlStream(bom);\n+    BOMInputStream bom \u003d new BOMInputStream(new BufferedInputStream(is, BUFFER_SIZE), false, BOMS);\n+    BOMInputStream pis \u003d new BOMInputStream(bom, true, XML_GUESS_BYTES);\n     String cTMime \u003d getContentTypeMime(httpContentType);\n     String cTEnc \u003d getContentTypeEncoding(httpContentType);\n     String bomEnc \u003d (bom.hasBOM() ? bom.getBOM().getCharsetName() : null);\n     String xmlGuessEnc \u003d (pis.hasBOM() ? pis.getBOM().getCharsetName() : null);\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n-    String encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n-    prepareReader(pis, encoding);\n+    this.encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n+    this.reader \u003d new InputStreamReader(is, encoding);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2800c889834ee30b5e8c0971cd1efbfa980bf9a": {
      "type": "Ydocchange",
      "commitMessage": "IO-162 Javadocs improvements and add @Override tags\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/4 下午12:01",
      "commitName": "a2800c889834ee30b5e8c0971cd1efbfa980bf9a",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/4 上午11:04",
      "commitNameOld": "2fbbf47aaf12f3efc333caf06bb61d63472d610e",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d createBomStream(new BufferedInputStream(is, BUFFER_SIZE));\n    BOMInputStream pis \u003d createXmlStream(bom);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d (bom.hasBOM() ? bom.getBOM().getCharsetName() : null);\n    String xmlGuessEnc \u003d (pis.hasBOM() ? pis.getBOM().getCharsetName() : null);\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    String encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n    prepareReader(pis, encoding);\n}",
      "path": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 462,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Process a HTTP stream.\n\n@param is InputStream to create the reader from.\n@param httpContentType The HTTP content type\n@param lenient indicates if the charset encoding detection should be\n       relaxed.\n@throws IOException thrown if there is a problem reading the stream.\n"
      }
    },
    "2fbbf47aaf12f3efc333caf06bb61d63472d610e": {
      "type": "Ybodychange",
      "commitMessage": "Replace BOM detection and XML guess logic with BOMInputStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004092 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/4 上午11:04",
      "commitName": "2fbbf47aaf12f3efc333caf06bb61d63472d610e",
      "commitAuthor": "Niall Pemberton",
      "commitDateOld": "2010/10/4 上午10:59",
      "commitNameOld": "5b75cf83b2db408f8228b26910a8d3d3633cd54f",
      "commitAuthorOld": "Niall Pemberton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BOMInputStream bom \u003d createBomStream(new BufferedInputStream(is, BUFFER_SIZE));\n    BOMInputStream pis \u003d createXmlStream(bom);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d (bom.hasBOM() ? bom.getBOM().getCharsetName() : null);\n    String xmlGuessEnc \u003d (pis.hasBOM() ? pis.getBOM().getCharsetName() : null);\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    String encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n    prepareReader(pis, encoding);\n}",
      "path": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 426,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,11 @@\n private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n-    BufferedInputStream pis \u003d new BufferedInputStream(is, BUFFER_SIZE);\n+    BOMInputStream bom \u003d createBomStream(new BufferedInputStream(is, BUFFER_SIZE));\n+    BOMInputStream pis \u003d createXmlStream(bom);\n     String cTMime \u003d getContentTypeMime(httpContentType);\n     String cTEnc \u003d getContentTypeEncoding(httpContentType);\n-    String bomEnc \u003d getBOMEncoding(pis);\n-    String xmlGuessEnc \u003d getXMLGuessEncoding(pis);\n+    String bomEnc \u003d (bom.hasBOM() ? bom.getBOM().getCharsetName() : null);\n+    String xmlGuessEnc \u003d (pis.hasBOM() ? pis.getBOM().getCharsetName() : null);\n     String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n     String encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n     prepareReader(pis, encoding);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b75cf83b2db408f8228b26910a8d3d3633cd54f": {
      "type": "Yintroduced",
      "commitMessage": "IO-162 add Xml(Stream)Reader/Writer from ROME - thanks to Hervé Boutemy for the patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1004090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/10/4 上午10:59",
      "commitName": "5b75cf83b2db408f8228b26910a8d3d3633cd54f",
      "commitAuthor": "Niall Pemberton",
      "diff": "@@ -0,0 +1,10 @@\n+private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n+    BufferedInputStream pis \u003d new BufferedInputStream(is, BUFFER_SIZE);\n+    String cTMime \u003d getContentTypeMime(httpContentType);\n+    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n+    String bomEnc \u003d getBOMEncoding(pis);\n+    String xmlGuessEnc \u003d getXMLGuessEncoding(pis);\n+    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n+    String encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n+    prepareReader(pis, encoding);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void doHttpStream(InputStream is, String httpContentType, boolean lenient) throws IOException {\n    BufferedInputStream pis \u003d new BufferedInputStream(is, BUFFER_SIZE);\n    String cTMime \u003d getContentTypeMime(httpContentType);\n    String cTEnc \u003d getContentTypeEncoding(httpContentType);\n    String bomEnc \u003d getBOMEncoding(pis);\n    String xmlGuessEnc \u003d getXMLGuessEncoding(pis);\n    String xmlEnc \u003d getXmlProlog(pis, xmlGuessEnc);\n    String encoding \u003d calculateHttpEncoding(cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc, pis, lenient);\n    prepareReader(pis, encoding);\n}",
      "path": "src/java/org/apache/commons/io/input/XmlStreamReader.java",
      "functionStartLine": 417,
      "functionName": "doHttpStream",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}