{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "TestFactoryTestDescriptor.java",
  "functionName": "invokeTestMethod",
  "functionId": "invokeTestMethod___context-JupiterEngineExecutionContext__dynamicTestExecutor-DynamicTestExecutor",
  "sourceFilePath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 81,
  "functionEndLine": 104,
  "numCommitsSeen": 67,
  "timeTaken": 2276,
  "changeHistory": [
    "5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316",
    "fbbd70b7cbbe299b01794446dfa251b3b9e727ad",
    "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
    "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
    "a97e4d3088f97b58031b139c006a98c8e0f49422",
    "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
    "47f824eb5602822093a2cd4fe31c5209ee1e5cbb",
    "fdadf905479b4cd63f1987d08940eddfbf89d088",
    "ee8cb2e44a92c511bc73553f2005ecc890bec141",
    "afcec01a9c1c8302a81785dc2ad22e01ddb249b7",
    "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080",
    "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01",
    "3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb",
    "9838fabf19e19b0e6cc80da85aeac94b427867d5",
    "21b61f5b1b5337625a505cd28dd2761f09a35536",
    "fc3c61b41f014a2500f176e23fe8ad2989d20565",
    "4b41518fa052b28a953e99b087d505603a22c175",
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
    "babcc661bd906b38a272f287ac8779669268fc58",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "507e50872c6df8a66c32f45cb2153555f510c4b1",
    "502a023f5c878321f08ab83bfe9e9395599cbb4e",
    "e0e131335d2117a2a1630db22260a258e47d8c4d",
    "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
    "24339be6d3fcc499da1c7623cfb8f8b08c183727",
    "64b948139b96395899f2852d3cab932a852ed5d8",
    "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
    "abcdd7d3b4e072923ac92a2ed99dbc6ce0954319",
    "ac7bb522519cd8a600324aa909a5c17a110cb97f"
  ],
  "changeHistoryShort": {
    "5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316": "Ybodychange",
    "fbbd70b7cbbe299b01794446dfa251b3b9e727ad": "Ybodychange",
    "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96": "Ybodychange",
    "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff": "Ybodychange",
    "a97e4d3088f97b58031b139c006a98c8e0f49422": "Ybodychange",
    "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023": "Ybodychange",
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": "Ybodychange",
    "47f824eb5602822093a2cd4fe31c5209ee1e5cbb": "Ybodychange",
    "fdadf905479b4cd63f1987d08940eddfbf89d088": "Ybodychange",
    "ee8cb2e44a92c511bc73553f2005ecc890bec141": "Ybodychange",
    "afcec01a9c1c8302a81785dc2ad22e01ddb249b7": "Ybodychange",
    "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080": "Ybodychange",
    "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01": "Ybodychange",
    "3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb": "Ybodychange",
    "9838fabf19e19b0e6cc80da85aeac94b427867d5": "Ybodychange",
    "21b61f5b1b5337625a505cd28dd2761f09a35536": "Ybodychange",
    "fc3c61b41f014a2500f176e23fe8ad2989d20565": "Yparameterchange",
    "4b41518fa052b28a953e99b087d505603a22c175": "Ymultichange(Yparameterchange,Ybodychange)",
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": "Ymultichange(Yparameterchange,Ybodychange)",
    "babcc661bd906b38a272f287ac8779669268fc58": "Yparameterchange",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "507e50872c6df8a66c32f45cb2153555f510c4b1": "Yfilerename",
    "502a023f5c878321f08ab83bfe9e9395599cbb4e": "Ybodychange",
    "e0e131335d2117a2a1630db22260a258e47d8c4d": "Ybodychange",
    "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb": "Ybodychange",
    "24339be6d3fcc499da1c7623cfb8f8b08c183727": "Ybodychange",
    "64b948139b96395899f2852d3cab932a852ed5d8": "Ybodychange",
    "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d": "Ymultichange(Yfilerename,Ybodychange)",
    "abcdd7d3b4e072923ac92a2ed99dbc6ce0954319": "Ybodychange",
    "ac7bb522519cd8a600324aa909a5c17a110cb97f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316": {
      "type": "Ybodychange",
      "commitMessage": "Polishing\n\nIssue: #1178\n",
      "commitDate": "2018/6/14 下午3:12",
      "commitName": "5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2018/6/14 下午3:12",
      "commitNameOld": "54f11a279cd14d909409a0ee4943ce32af343bcd",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource defaultTestSource \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                Optional\u003cJupiterTestDescriptor\u003e descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, defaultTestSource, getDynamicDescendantFilter());\n                descriptor.ifPresent(dynamicTestExecutor::execute);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 77,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     ExtensionContext extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d extensionContext.getRequiredTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n-        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n+        TestSource defaultTestSource \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n-                Optional\u003cJupiterTestDescriptor\u003e descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source, getDynamicDescendantFilter());\n+                Optional\u003cJupiterTestDescriptor\u003e descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, defaultTestSource, getDynamicDescendantFilter());\n                 descriptor.ifPresent(dynamicTestExecutor::execute);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fbbd70b7cbbe299b01794446dfa251b3b9e727ad": {
      "type": "Ybodychange",
      "commitMessage": "Allow executing dynamic tests/test template invocations by unique ID\n\nResolves #1025.\n",
      "commitDate": "2018/1/14 上午3:47",
      "commitName": "fbbd70b7cbbe299b01794446dfa251b3b9e727ad",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2018/1/14 上午3:35",
      "commitNameOld": "931892b1b4c61de968fd324a8825bc88e834bfc2",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                Optional\u003cJupiterTestDescriptor\u003e descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source, getDynamicDescendantFilter());\n                descriptor.ifPresent(dynamicTestExecutor::execute);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 76,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     ExtensionContext extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d extensionContext.getRequiredTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n-                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n-                dynamicTestExecutor.execute(descriptor);\n+                Optional\u003cJupiterTestDescriptor\u003e descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source, getDynamicDescendantFilter());\n+                descriptor.ifPresent(dynamicTestExecutor::execute);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getRequired*() methods in the ExtensionContext API\n\nThis commit introduces new getRequiredTestClass(),\ngetRequiredTestInstance(), and getRequiredTestMethod() convenience\nmethods in the ExtensionContext API which provide extension authors\nshortcuts for retrieving the test class, test instance, and test method\nin use cases for which such elements are required to be present.\n\nIssue: #913\n",
      "commitDate": "2017/7/11 上午12:34",
      "commitName": "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/4 下午7:30",
      "commitNameOld": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     ExtensionContext extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d getRequiredTestInstance(extensionContext);\n+        Object instance \u003d extensionContext.getRequiredTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getRequiredTestInstance() in JupiterTestDescriptor\n\nIssue: #419\n",
      "commitDate": "2017/7/4 下午7:30",
      "commitName": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/4 下午7:00",
      "commitNameOld": "a97e4d3088f97b58031b139c006a98c8e0f49422",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d getRequiredTestInstance(extensionContext);\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     ExtensionContext extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n+        Object instance \u003d getRequiredTestInstance(extensionContext);\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a97e4d3088f97b58031b139c006a98c8e0f49422": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Introduce getRequiredTestInstance() in AbstractExtensionContext\"\n\nThis reverts commit 0836f8f28601d1d27d07ad302c6aa1ef9f2ab023.\n",
      "commitDate": "2017/7/4 下午7:00",
      "commitName": "a97e4d3088f97b58031b139c006a98c8e0f49422",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/4 下午6:36",
      "commitNameOld": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-    AbstractExtensionContext\u003c?\u003e extensionContext \u003d context.getExtensionContext();\n+    ExtensionContext extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d extensionContext.getRequiredTestInstance();\n+        Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getRequiredTestInstance() in AbstractExtensionContext\n\nIssue: #910\n",
      "commitDate": "2017/7/4 下午6:36",
      "commitName": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/1 下午7:45",
      "commitNameOld": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    AbstractExtensionContext\u003c?\u003e extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-    ExtensionContext extensionContext \u003d context.getExtensionContext();\n+    AbstractExtensionContext\u003c?\u003e extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n+        Object instance \u003d extensionContext.getRequiredTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": {
      "type": "Ybodychange",
      "commitMessage": "Remove TestExtensionContext and ContainerExtensionContext\n\nIssue: #901\n",
      "commitDate": "2017/7/1 下午7:45",
      "commitName": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "47f824eb5602822093a2cd4fe31c5209ee1e5cbb",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    ExtensionContext extensionContext \u003d context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n-        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n+        Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n+        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "47f824eb5602822093a2cd4fe31c5209ee1e5cbb": {
      "type": "Ybodychange",
      "commitMessage": "Polishing\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "47f824eb5602822093a2cd4fe31c5209ee1e5cbb",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "fdadf905479b4cd63f1987d08940eddfbf89d088",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n-        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n+        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Illegal state: TestSource must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fdadf905479b4cd63f1987d08940eddfbf89d088": {
      "type": "Ybodychange",
      "commitMessage": "Avoid NoSuchElementException when retrieving test instance\n\nIssue: #419\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "fdadf905479b4cd63f1987d08940eddfbf89d088",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d testExtensionContext.getTestInstance().get();\n+        Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ee8cb2e44a92c511bc73553f2005ecc890bec141": {
      "type": "Ybodychange",
      "commitMessage": "Move getTestInstance() to ExtensionContext\n\nIssue: #419\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/6/18 下午8:54",
      "commitNameOld": "4752af0ce450d3b35b2e12b61bec5e8e3e3cea85",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 12.14,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance().get();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Object instance \u003d testExtensionContext.getTestInstance();\n+        Object instance \u003d testExtensionContext.getTestInstance().get();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n         try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "afcec01a9c1c8302a81785dc2ad22e01ddb249b7": {
      "type": "Ybodychange",
      "commitMessage": "Revert accidental changes to TestFactoryTestDescriptor 🙈\n",
      "commitDate": "2017/5/10 下午10:40",
      "commitName": "afcec01a9c1c8302a81785dc2ad22e01ddb249b7",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/5/10 下午10:34",
      "commitNameOld": "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n-        try (BaseStream\u003cDynamicNode, ?\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n+        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080": {
      "type": "Ybodychange",
      "commitMessage": "Support DoubleStream, IntStream, and LongStream for argument providers\n\nRelated issue: #851\n",
      "commitDate": "2017/5/10 下午10:34",
      "commitName": "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/5/3 下午7:39",
      "commitNameOld": "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 7.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n        try (BaseStream\u003cDynamicNode, ?\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n         TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n-        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n+        try (BaseStream\u003cDynamicNode, ?\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n             int index \u003d 1;\n             Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n             while (iterator.hasNext()) {\n                 DynamicNode dynamicNode \u003d iterator.next();\n                 JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                 dynamicTestExecutor.execute(descriptor);\n             }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01": {
      "type": "Ybodychange",
      "commitMessage": "Add DynamicContainer support\n\nPrior to this commit only a flat collection of dynamically generated\ntests was allowed as the return type of a @TestFactory annotated\nmethod. The collection entry type was set to `DynamicTest`.\n\nThis commit introduces the abstract base class `DynamicNode` and a\n`DynamicContainer` class collecting node instance. @TestFactory\nannotated methods are now allowed to return a collection of nodes --\nwhich can be a test or a named container of tests.\nCreating a dynamic tree of tests like that gives users the ability to\nbetter structure the generated tests.\n\nThe old behaviour, returning only instances of `DynamicTest`, is preserved.\n",
      "commitDate": "2017/5/3 下午7:39",
      "commitName": "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/5/3 下午5:52",
      "commitNameOld": "a3e4b97efb03bd7b52d18c17b9dc185d112a04e8",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n            int index \u003d 1;\n            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode \u003d iterator.next();\n                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,20 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n-        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult)) {\n-            AtomicInteger index \u003d new AtomicInteger();\n-            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n+        TestSource source \u003d getSource().orElseThrow(() -\u003e new JUnitException(\"Test source must be present\"));\n+        try (Stream\u003cDynamicNode\u003e dynamicNodeStream \u003d toDynamicNodeStream(testFactoryMethodResult)) {\n+            int index \u003d 1;\n+            Iterator\u003cDynamicNode\u003e iterator \u003d dynamicNodeStream.iterator();\n+            while (iterator.hasNext()) {\n+                DynamicNode dynamicNode \u003d iterator.next();\n+                JupiterTestDescriptor descriptor \u003d createDynamicDescriptor(this, dynamicNode, index++, source);\n+                dynamicTestExecutor.execute(descriptor);\n+            }\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused argument in TestFactoryTestDescriptor.toDynamicTestStream()\n",
      "commitDate": "2017/3/12 下午9:43",
      "commitName": "3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/3/12 上午5:41",
      "commitNameOld": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult)) {\n            AtomicInteger index \u003d new AtomicInteger();\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 72,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n-        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n+        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult)) {\n             AtomicInteger index \u003d new AtomicInteger();\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9838fabf19e19b0e6cc80da85aeac94b427867d5": {
      "type": "Ybodychange",
      "commitMessage": "Introduce CollectionUtils.toStream to remove duplication\n",
      "commitDate": "2017/3/12 上午5:41",
      "commitName": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/2/27 上午2:57",
      "commitNameOld": "21b61f5b1b5337625a505cd28dd2761f09a35536",
      "commitAuthorOld": "Liam Clark",
      "daysBetweenCommits": 13.11,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n            AtomicInteger index \u003d new AtomicInteger();\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 72,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,14 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n-        Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n-        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n+        Object testFactoryMethodResult \u003d executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n         try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n             AtomicInteger index \u003d new AtomicInteger();\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n         } catch (ClassCastException ex) {\n-            throw invalidReturnTypeException(testExtensionContext);\n+            throw invalidReturnTypeException(ex);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "21b61f5b1b5337625a505cd28dd2761f09a35536": {
      "type": "Ybodychange",
      "commitMessage": "Close Streams of DynamicTests returned by @TestFactory methods\n\n- Bad weather test for closing TestFactory Streams of incompatible types\n- Document the closing guarantee for TestFactory streams\n\nFixes #683.\n",
      "commitDate": "2017/2/27 上午2:57",
      "commitName": "21b61f5b1b5337625a505cd28dd2761f09a35536",
      "commitAuthor": "Liam Clark",
      "commitDateOld": "2017/2/25 上午4:20",
      "commitNameOld": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n            AtomicInteger index \u003d new AtomicInteger();\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 75,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n-        try {\n+        try (Stream\u003cDynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n             AtomicInteger index \u003d new AtomicInteger();\n-            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n+            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc3c61b41f014a2500f176e23fe8ad2989d20565": {
      "type": "Yparameterchange",
      "commitMessage": "Replace Consumer\u003cTestDescriptor\u003e with custom interface\n\nIssue: #14\n",
      "commitDate": "2017/2/25 上午4:20",
      "commitName": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/2/25 上午4:20",
      "commitNameOld": "4b41518fa052b28a953e99b087d505603a22c175",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 75,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n-protected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     context.getThrowableCollector().execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         try {\n             AtomicInteger index \u003d new AtomicInteger();\n             toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer\u003cTestDescriptor\u003e]",
        "newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-DynamicTestExecutor]"
      }
    },
    "4b41518fa052b28a953e99b087d505603a22c175": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
      "commitDate": "2017/2/25 上午4:20",
      "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
          "commitDate": "2017/2/25 上午4:20",
          "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2017/1/3 上午4:10",
          "commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 53.01,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
          "functionStartLine": 76,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,16 +1,15 @@\n @Override\n-protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n-    EngineExecutionListener listener \u003d context.getExecutionListener();\n     context.getThrowableCollector().execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         try {\n             AtomicInteger index \u003d new AtomicInteger();\n-            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JupiterEngineExecutionContext]",
            "newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer\u003cTestDescriptor\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
          "commitDate": "2017/2/25 上午4:20",
          "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2017/1/3 上午4:10",
          "commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 53.01,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
          "functionStartLine": 76,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,16 +1,15 @@\n @Override\n-protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n-    EngineExecutionListener listener \u003d context.getExecutionListener();\n     context.getThrowableCollector().execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         try {\n             AtomicInteger index \u003d new AtomicInteger();\n-            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
      "commitDate": "2016/6/26 上午4:02",
      "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
      "commitAuthor": "Sam Brannen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
          "commitDate": "2016/6/26 上午4:02",
          "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/6/20 下午9:08",
          "commitNameOld": "babcc661bd906b38a272f287ac8779669268fc58",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 5.29,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    context.getThrowableCollector().execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
          "functionStartLine": 79,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,16 @@\n @Override\n-protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n-    throwableCollector.execute(() -\u003e {\n+    context.getThrowableCollector().execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         try {\n             AtomicInteger index \u003d new AtomicInteger();\n             toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
            "newValue": "[context-JupiterEngineExecutionContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
          "commitDate": "2016/6/26 上午4:02",
          "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/6/20 下午9:08",
          "commitNameOld": "babcc661bd906b38a272f287ac8779669268fc58",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 5.29,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    context.getThrowableCollector().execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
          "functionStartLine": 79,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,16 @@\n @Override\n-protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n-    throwableCollector.execute(() -\u003e {\n+    context.getThrowableCollector().execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         try {\n             AtomicInteger index \u003d new AtomicInteger();\n             toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "babcc661bd906b38a272f287ac8779669268fc58": {
      "type": "Yparameterchange",
      "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午9:08",
      "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 下午4:59",
      "commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 80,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n-protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         try {\n             AtomicInteger index \u003d new AtomicInteger();\n             toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[context-JUnit5EngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
        "newValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
      }
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午4:59",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午2:04",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 80,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
        "newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java"
      }
    },
    "507e50872c6df8a66c32f45cb2153555f510c4b1": {
      "type": "Yfilerename",
      "commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
      "commitDate": "2016/6/19 上午4:50",
      "commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/19 上午3:31",
      "commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 80,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
        "newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestFactoryTestDescriptor.java"
      }
    },
    "502a023f5c878321f08ab83bfe9e9395599cbb4e": {
      "type": "Ybodychange",
      "commitMessage": "Polish TestFactoryTestDescriptor\n",
      "commitDate": "2016/6/1 下午8:12",
      "commitName": "502a023f5c878321f08ab83bfe9e9395599cbb4e",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/1 下午8:02",
      "commitNameOld": "3d5bf7756991a5a6b5036cfda914fca3e92cb021",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index \u003d new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 66,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,15 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n         Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n-        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n-        AtomicInteger index \u003d new AtomicInteger();\n         try {\n-            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n-        } catch (ClassCastException cce) {\n+            AtomicInteger index \u003d new AtomicInteger();\n+            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+        } catch (ClassCastException ex) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e0e131335d2117a2a1630db22260a258e47d8c4d": {
      "type": "Ybodychange",
      "commitMessage": "Make ExecutableInvoker stateless\n",
      "commitDate": "2016/5/29 上午1:02",
      "commitName": "e0e131335d2117a2a1630db22260a258e47d8c4d",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/26 下午8:42",
      "commitNameOld": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,16 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         Method method \u003d testExtensionContext.getTestMethod().get();\n         Object instance \u003d testExtensionContext.getTestInstance();\n-        ExecutableInvoker methodInvoker \u003d new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry());\n-        Object testFactoryMethodResult \u003d methodInvoker.invoke(method, instance);\n+        Object testFactoryMethodResult \u003d executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n         try {\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException cce) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb": {
      "type": "Ybodychange",
      "commitMessage": "Convert MethodInvoker to generic ExecutableInvoker\n\nPrior to this commit, MethodInvoker was limited to method invocations.\nWith the recent generalization of the ParameterResolver API, it is now\npossible to convert MethodInvoker to a generic ExecutableInvoker that\ncan be applied to constructors or methods, serving as a building block\nfor possible constructor injection support.\n\nThis commit converts MethodInvoker to a generic ExecutableInvoker that\ncan be used to invoke both methods and constructors with dynamic\nparameter resolution via registered ParameterResolvers.\n\nSpecifically, this commit includes the following changes.\n\n - Renamed MethodInvoker to ExecutableInvoker\n - Refactored ExecutableInvoker to support parameter resolution for any\n   java.lang.reflect.Executable\n - Introduced newInstance(Constructor\u003cT\u003e, Object...) in ReflectionUtils\n - Introduced invoke(Constructor), invoke(Method), and\n   invoke(Method, Object) in ExecutableInvoker\n - Removed MethodInvocationContext and MethodInvocationContextFactory\n - Removed ConstructorInvoker proof of concept\n\nIssue: #267\n",
      "commitDate": "2016/5/26 下午8:42",
      "commitName": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/26 上午3:50",
      "commitNameOld": "067620c65061755653ee09f11c2ecaac17b206d1",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        Method method \u003d testExtensionContext.getTestMethod().get();\n        Object instance \u003d testExtensionContext.getTestInstance();\n        ExecutableInvoker methodInvoker \u003d new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult \u003d methodInvoker.invoke(method, instance);\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 64,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n-        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n-        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n-        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n+        Method method \u003d testExtensionContext.getTestMethod().get();\n+        Object instance \u003d testExtensionContext.getTestInstance();\n+        ExecutableInvoker methodInvoker \u003d new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry());\n+        Object testFactoryMethodResult \u003d methodInvoker.invoke(method, instance);\n         Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n         try {\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException cce) {\n             throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "24339be6d3fcc499da1c7623cfb8f8b08c183727": {
      "type": "Ybodychange",
      "commitMessage": "Improve exception messages in TestFactoryTestDescriptor\n",
      "commitDate": "2016/5/25 上午7:15",
      "commitName": "24339be6d3fcc499da1c7623cfb8f8b08c183727",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/25 上午5:32",
      "commitNameOld": "64b948139b96395899f2852d3cab932a852ed5d8",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n         MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n         Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n-        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n+        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n         try {\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException cce) {\n-            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n+            throw invalidReturnTypeException(testExtensionContext);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "64b948139b96395899f2852d3cab932a852ed5d8": {
      "type": "Ybodychange",
      "commitMessage": "Revise DynamicTest support regarding display names\n\nIssue: #153\n",
      "commitDate": "2016/5/25 上午5:32",
      "commitName": "64b948139b96395899f2852d3cab932a852ed5d8",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/24 下午3:45",
      "commitNameOld": "d51f874a1250f2ebde26f0963f29a6f4fdab75fb",
      "commitAuthorOld": "Matthias Merdes",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
      "functionStartLine": 65,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n-        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n         MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n         Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n         Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n         try {\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException cce) {\n             throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Renamed @Dynamic to avoid confusion between factory and products (#58)\n",
      "commitDate": "2016/5/24 上午4:36",
      "commitName": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
      "commitAuthor": "Matthias Merdes",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Renamed @Dynamic to avoid confusion between factory and products (#58)\n",
          "commitDate": "2016/5/24 上午4:36",
          "commitName": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
          "commitAuthor": "Matthias Merdes",
          "commitDateOld": "2016/5/24 上午4:34",
          "commitNameOld": "e8eeefa4d56ccdfd7b4cce4bb26778940f7a5106",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
          "functionStartLine": 57,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,16 +1,16 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n-        Object dynamicMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n-        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(dynamicMethodResult);\n+        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n+        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n         try {\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException cce) {\n             throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/DynamicMethodTestDescriptor.java",
            "newPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed @Dynamic to avoid confusion between factory and products (#58)\n",
          "commitDate": "2016/5/24 上午4:36",
          "commitName": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
          "commitAuthor": "Matthias Merdes",
          "commitDateOld": "2016/5/24 上午4:34",
          "commitNameOld": "e8eeefa4d56ccdfd7b4cce4bb26778940f7a5106",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/TestFactoryTestDescriptor.java",
          "functionStartLine": 57,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,16 +1,16 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n-        Object dynamicMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n-        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(dynamicMethodResult);\n+        Object testFactoryMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n+        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(testFactoryMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n         try {\n             dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n         } catch (ClassCastException cce) {\n             throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "abcdd7d3b4e072923ac92a2ed99dbc6ce0954319": {
      "type": "Ybodychange",
      "commitMessage": "Dynamic test factory supports Iterable and Iterator (#58)\n\n- Simplify DynamicTestsDemo\n",
      "commitDate": "2016/5/24 上午4:16",
      "commitName": "abcdd7d3b4e072923ac92a2ed99dbc6ce0954319",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016/5/24 上午3:28",
      "commitNameOld": "11850fce68fddb5fdcf6ae67a0474fb827710918",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object dynamicMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(dynamicMethodResult);\n        AtomicInteger index \u003d new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/DynamicMethodTestDescriptor.java",
      "functionStartLine": 57,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,16 @@\n @Override\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     EngineExecutionListener listener \u003d context.getExecutionListener();\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        Stream\u003cDynamicTest\u003e dynamicTestStream \u003d (Stream\u003cDynamicTest\u003e) new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n+        MethodInvoker methodInvoker \u003d new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n+        Object dynamicMethodResult \u003d methodInvoker.invoke(methodInvocationContext);\n+        Stream\u003c? extends DynamicTest\u003e dynamicTestStream \u003d toDynamicTestStream(dynamicMethodResult);\n         AtomicInteger index \u003d new AtomicInteger();\n-        dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+        try {\n+            dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+        } catch (ClassCastException cce) {\n+            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n+        }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac7bb522519cd8a600324aa909a5c17a110cb97f": {
      "type": "Yintroduced",
      "commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
      "commitDate": "2016/5/24 上午3:21",
      "commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
      "commitAuthor": "Johannes Link",
      "diff": "@@ -0,0 +1,10 @@\n+@Override\n+protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+    EngineExecutionListener listener \u003d context.getExecutionListener();\n+    throwableCollector.execute(() -\u003e {\n+        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        Stream\u003cDynamicTest\u003e dynamicTestStream \u003d (Stream\u003cDynamicTest\u003e) new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n+        AtomicInteger index \u003d new AtomicInteger();\n+        dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n+    });\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener \u003d context.getExecutionListener();\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        Stream\u003cDynamicTest\u003e dynamicTestStream \u003d (Stream\u003cDynamicTest\u003e) new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        AtomicInteger index \u003d new AtomicInteger();\n        dynamicTestStream.forEach(dynamicTest -\u003e registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/DynamicMethodTestDescriptor.java",
      "functionStartLine": 51,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}