{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/hadoop/.git",
  "startCommitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "getRunningAggregateAppResourceUsage",
  "functionId": "getRunningAggregateAppResourceUsage",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1080,
  "functionEndLine": 1103,
  "numCommitsSeen": 98,
  "timeTaken": 3492,
  "changeHistory": [
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8"
  ],
  "changeHistoryShort": {
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymodifierchange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "2017/9/13 上午12:19",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "2017/9/13 上午12:19",
      "commitNameOld": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n        Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n        for (RMContainer rmContainer : this.liveContainers.values()) {\n            long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n            Resource resource \u003d rmContainer.getContainer().getResource();\n            for (ResourceInformation entry : resource.getResources()) {\n                long value \u003d RMServerUtils.getOrDefault(resourceSecondsMap, entry.getName(), 0L);\n                value +\u003d entry.getValue() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n                resourceSecondsMap.put(entry.getName(), value);\n            }\n        }\n        lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n        lastResourceSecondsMap \u003d resourceSecondsMap;\n    }\n    return new AggregateAppResourceUsage(lastResourceSecondsMap);\n}",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "functionStartLine": 999,
      "functionName": "getRunningAggregateAppResourceUsage",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n         Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n         for (RMContainer rmContainer : this.liveContainers.values()) {\n             long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n             Resource resource \u003d rmContainer.getContainer().getResource();\n-            for (Map.Entry\u003cString, ResourceInformation\u003e entry : resource.getResources().entrySet()) {\n-                long value \u003d RMServerUtils.getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n-                value +\u003d entry.getValue().getValue() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n-                resourceSecondsMap.put(entry.getKey(), value);\n+            for (ResourceInformation entry : resource.getResources()) {\n+                long value \u003d RMServerUtils.getOrDefault(resourceSecondsMap, entry.getName(), 0L);\n+                value +\u003d entry.getValue() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+                resourceSecondsMap.put(entry.getName(), value);\n             }\n         }\n         lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n         lastResourceSecondsMap \u003d resourceSecondsMap;\n     }\n     return new AggregateAppResourceUsage(lastResourceSecondsMap);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "2017/9/13 上午12:19",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "2017/9/12 上午11:52",
      "commitNameOld": "e74d1be04be47969943b0501a4f335b0b5188287",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n        Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n        for (RMContainer rmContainer : this.liveContainers.values()) {\n            long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n            Resource resource \u003d rmContainer.getContainer().getResource();\n            for (Map.Entry\u003cString, ResourceInformation\u003e entry : resource.getResources().entrySet()) {\n                long value \u003d RMServerUtils.getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n                value +\u003d entry.getValue().getValue() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n                resourceSecondsMap.put(entry.getKey(), value);\n            }\n        }\n        lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n        lastResourceSecondsMap \u003d resourceSecondsMap;\n    }\n    return new AggregateAppResourceUsage(lastResourceSecondsMap);\n}",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "functionStartLine": 999,
      "functionName": "getRunningAggregateAppResourceUsage",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n-        long memorySeconds \u003d 0;\n-        long vcoreSeconds \u003d 0;\n+        Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n         for (RMContainer rmContainer : this.liveContainers.values()) {\n             long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n             Resource resource \u003d rmContainer.getContainer().getResource();\n-            memorySeconds +\u003d resource.getMemorySize() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n-            vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+            for (Map.Entry\u003cString, ResourceInformation\u003e entry : resource.getResources().entrySet()) {\n+                long value \u003d RMServerUtils.getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n+                value +\u003d entry.getValue().getValue() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+                resourceSecondsMap.put(entry.getKey(), value);\n+            }\n         }\n         lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n-        lastMemorySeconds \u003d memorySeconds;\n-        lastVcoreSeconds \u003d vcoreSeconds;\n+        lastResourceSecondsMap \u003d resourceSecondsMap;\n     }\n-    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n+    return new AggregateAppResourceUsage(lastResourceSecondsMap);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "2016/9/19 下午5:08",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "commitDateOld": "2016/8/31 上午6:52",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 19.43,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n        long memorySeconds \u003d 0;\n        long vcoreSeconds \u003d 0;\n        for (RMContainer rmContainer : this.liveContainers.values()) {\n            long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n            Resource resource \u003d rmContainer.getContainer().getResource();\n            memorySeconds +\u003d resource.getMemorySize() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n            vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        }\n        lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n        lastMemorySeconds \u003d memorySeconds;\n        lastVcoreSeconds \u003d vcoreSeconds;\n    }\n    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n}",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "functionStartLine": 819,
      "functionName": "getRunningAggregateAppResourceUsage",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n-synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n+private AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n         long memorySeconds \u003d 0;\n         long vcoreSeconds \u003d 0;\n         for (RMContainer rmContainer : this.liveContainers.values()) {\n             long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n             Resource resource \u003d rmContainer.getContainer().getResource();\n             memorySeconds +\u003d resource.getMemorySize() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n             vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         }\n         lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n         lastMemorySeconds \u003d memorySeconds;\n         lastVcoreSeconds \u003d vcoreSeconds;\n     }\n     return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[synchronized]",
        "newValue": "[private]"
      }
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "2016/5/29 下午11:54",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "2016/5/6 上午3:56",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 23.83,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "actualSource": "synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n        long memorySeconds \u003d 0;\n        long vcoreSeconds \u003d 0;\n        for (RMContainer rmContainer : this.liveContainers.values()) {\n            long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n            Resource resource \u003d rmContainer.getContainer().getResource();\n            memorySeconds +\u003d resource.getMemorySize() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n            vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        }\n        lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n        lastMemorySeconds \u003d memorySeconds;\n        lastVcoreSeconds \u003d vcoreSeconds;\n    }\n    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n}",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "functionStartLine": 674,
      "functionName": "getRunningAggregateAppResourceUsage",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n         long memorySeconds \u003d 0;\n         long vcoreSeconds \u003d 0;\n         for (RMContainer rmContainer : this.liveContainers.values()) {\n             long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n             Resource resource \u003d rmContainer.getContainer().getResource();\n-            memorySeconds +\u003d resource.getMemory() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+            memorySeconds +\u003d resource.getMemorySize() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n             vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         }\n         lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n         lastMemorySeconds \u003d memorySeconds;\n         lastVcoreSeconds \u003d vcoreSeconds;\n     }\n     return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "2014/9/11 上午9:20",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,17 @@\n+synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n+    long currentTimeMillis \u003d System.currentTimeMillis();\n+    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n+        long memorySeconds \u003d 0;\n+        long vcoreSeconds \u003d 0;\n+        for (RMContainer rmContainer : this.liveContainers.values()) {\n+            long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n+            Resource resource \u003d rmContainer.getContainer().getResource();\n+            memorySeconds +\u003d resource.getMemory() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+            vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+        }\n+        lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n+        lastMemorySeconds \u003d memorySeconds;\n+        lastVcoreSeconds \u003d vcoreSeconds;\n+    }\n+    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n+}\n\\ No newline at end of file\n",
      "actualSource": "synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage() {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    if ((currentTimeMillis - lastMemoryAggregateAllocationUpdateTime) \u003e MEM_AGGREGATE_ALLOCATION_CACHE_MSECS) {\n        long memorySeconds \u003d 0;\n        long vcoreSeconds \u003d 0;\n        for (RMContainer rmContainer : this.liveContainers.values()) {\n            long usedMillis \u003d currentTimeMillis - rmContainer.getCreationTime();\n            Resource resource \u003d rmContainer.getContainer().getResource();\n            memorySeconds +\u003d resource.getMemory() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n            vcoreSeconds +\u003d resource.getVirtualCores() * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        }\n        lastMemoryAggregateAllocationUpdateTime \u003d currentTimeMillis;\n        lastMemorySeconds \u003d memorySeconds;\n        lastVcoreSeconds \u003d vcoreSeconds;\n    }\n    return new AggregateAppResourceUsage(lastMemorySeconds, lastVcoreSeconds);\n}",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "functionStartLine": 516,
      "functionName": "getRunningAggregateAppResourceUsage",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}