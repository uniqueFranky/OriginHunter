{
  "origin": "codeshovel",
  "repositoryName": "spring-framework",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/spring-framework/.git",
  "startCommitName": "b325c74216fd9564a36602158fa1269e2e832874",
  "sourceFileName": "ServletHttpHandlerAdapter.java",
  "functionName": "service",
  "functionId": "service___request-ServletRequest__response-ServletResponse",
  "sourceFilePath": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 158,
  "functionEndLine": 195,
  "numCommitsSeen": 105,
  "timeTaken": 8722,
  "changeHistory": [
    "5dc49b16ea21ebac20d124d929f872d5aa060254",
    "900bc8a2e341277296a463c7b5db4abb944e14d7",
    "8d157cb5b54c8fc2af116ef62831ef35a4a95a65",
    "0de36d2883124ef52ea1040a3e0022dcaa57f4e2",
    "40127bd9adde6f44963c47edd3ed57c623980c26",
    "f05175586e32e660ff190311f0b102c2b3b3a398",
    "6ee1af27c61c015461f79f95f1e4f89db911be0c",
    "4f3db9b822bf9769d5f2be5e66f0eca3d7f74370",
    "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20",
    "f716c8e9bc8ada04b4060e21680aca793e315cd0",
    "c0f2017262f8d3e784007d5e0134e696c1adfcf7",
    "57d2fcef557882097e7fea4b603c437488546988",
    "a2aaa05592fb29d0fa61a69bc61ef35c235423f0",
    "383375c35f12ff4aec67560b77e00f332b54a36c",
    "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
    "aea3a750189977ca231172db87408f03979bace6",
    "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
    "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
    "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d",
    "7e9437738272a31e1d764972291de42936194ab1",
    "5d1b5426982332cbbd5671b00fbc4ded5d69a656",
    "56e50d6d6811d4f921f7e79f4ae8ce0823bd6d25",
    "f82f17d7f762bb0fd10cd813c334ac9a0b62355e",
    "e64907eed8b4accdda53c6be0145087017eae820",
    "b0de99bc8cb0a2e20c49e7f627139204bfc13a13",
    "52325a21ffb76d30d8f9253934fec621f4e3f121",
    "d36286c7d1b5ffd13d847e3b97f4da2d8df66d74",
    "35e511b03fd00c96f00f48eafcfd0ae16e888e16",
    "7f786ce4d7a8b51a02133d7db404d9f038d5a927",
    "361707c448f41612b018f2e50452dfb185fbbd5e",
    "51a90465d40168ed27e9ea93220b7e6f35bc203b",
    "225179bc6f0b4c705a869a03b81df5f41345b6f7",
    "8ef7e2ff77f913773e30b1463d4657368db700e5",
    "0aade73c88d5bbde5e6f7383560eeae017045bae",
    "da98becf72fbeef836dba366431be2a652e5e001",
    "df80ffbf2814c8f0a95bce9095921d53f2786a11",
    "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
    "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
    "c0dff3d2bb2277429f4e387d18deb75b0797a375",
    "202825554c022e4262fe3bd20a34faf01ab9d620",
    "f020a1add19b3761f2fd8e01fe5e96ce1b8d45c7",
    "2cb32a0fd69c528d55d3d53ae98bf886dcb4a5f9",
    "74a29ac146280a399d88680d187c8dbeb2b85328",
    "f518d76a771def7289ac4f85ddc66812f428a16f"
  ],
  "changeHistoryShort": {
    "5dc49b16ea21ebac20d124d929f872d5aa060254": "Ybodychange",
    "900bc8a2e341277296a463c7b5db4abb944e14d7": "Ybodychange",
    "8d157cb5b54c8fc2af116ef62831ef35a4a95a65": "Ybodychange",
    "0de36d2883124ef52ea1040a3e0022dcaa57f4e2": "Ybodychange",
    "40127bd9adde6f44963c47edd3ed57c623980c26": "Ybodychange",
    "f05175586e32e660ff190311f0b102c2b3b3a398": "Ymultichange(Yexceptionschange,Ybodychange)",
    "6ee1af27c61c015461f79f95f1e4f89db911be0c": "Ybodychange",
    "4f3db9b822bf9769d5f2be5e66f0eca3d7f74370": "Ybodychange",
    "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20": "Ybodychange",
    "f716c8e9bc8ada04b4060e21680aca793e315cd0": "Ybodychange",
    "c0f2017262f8d3e784007d5e0134e696c1adfcf7": "Ybodychange",
    "57d2fcef557882097e7fea4b603c437488546988": "Ybodychange",
    "a2aaa05592fb29d0fa61a69bc61ef35c235423f0": "Ybodychange",
    "383375c35f12ff4aec67560b77e00f332b54a36c": "Ybodychange",
    "5a2906979816ce1268a8dfe56c5f0a89ad720b99": "Ymultichange(Yparameterchange,Ybodychange)",
    "aea3a750189977ca231172db87408f03979bace6": "Ybodychange",
    "b92d541ba0934052769d0bcf08fec7d8c44d2c2d": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "25e7cd577d6855bd56c463ad0ce4ae20bf33d541": "Ybodychange",
    "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d": "Ybodychange",
    "7e9437738272a31e1d764972291de42936194ab1": "Ybodychange",
    "5d1b5426982332cbbd5671b00fbc4ded5d69a656": "Yfilerename",
    "56e50d6d6811d4f921f7e79f4ae8ce0823bd6d25": "Ybodychange",
    "f82f17d7f762bb0fd10cd813c334ac9a0b62355e": "Ybodychange",
    "e64907eed8b4accdda53c6be0145087017eae820": "Ybodychange",
    "b0de99bc8cb0a2e20c49e7f627139204bfc13a13": "Ybodychange",
    "52325a21ffb76d30d8f9253934fec621f4e3f121": "Ybodychange",
    "d36286c7d1b5ffd13d847e3b97f4da2d8df66d74": "Ybodychange",
    "35e511b03fd00c96f00f48eafcfd0ae16e888e16": "Ybodychange",
    "7f786ce4d7a8b51a02133d7db404d9f038d5a927": "Ybodychange",
    "361707c448f41612b018f2e50452dfb185fbbd5e": "Ybodychange",
    "51a90465d40168ed27e9ea93220b7e6f35bc203b": "Ybodychange",
    "225179bc6f0b4c705a869a03b81df5f41345b6f7": "Ybodychange",
    "8ef7e2ff77f913773e30b1463d4657368db700e5": "Ybodychange",
    "0aade73c88d5bbde5e6f7383560eeae017045bae": "Ymultichange(Yparameterchange,Ybodychange)",
    "da98becf72fbeef836dba366431be2a652e5e001": "Ymultichange(Yfilerename,Ybodychange)",
    "df80ffbf2814c8f0a95bce9095921d53f2786a11": "Yfilerename",
    "e9e4bcdc599634ae8879815a33a8b4e41b909f61": "Ymultichange(Yfilerename,Ybodychange)",
    "81867fa4237643ca3eae24a8f085bc4b5f9443b3": "Yfilerename",
    "c0dff3d2bb2277429f4e387d18deb75b0797a375": "Ybodychange",
    "202825554c022e4262fe3bd20a34faf01ab9d620": "Ybodychange",
    "f020a1add19b3761f2fd8e01fe5e96ce1b8d45c7": "Yfilerename",
    "2cb32a0fd69c528d55d3d53ae98bf886dcb4a5f9": "Ybodychange",
    "74a29ac146280a399d88680d187c8dbeb2b85328": "Yfilerename",
    "f518d76a771def7289ac4f85ddc66812f428a16f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5dc49b16ea21ebac20d124d929f872d5aa060254": {
      "type": "Ybodychange",
      "commitMessage": "Correlated messages at HTTP adapter + WebSocket level\n\nIssue: SPR-16966\n",
      "commitDate": "2018/7/7 上午3:44",
      "commitName": "5dc49b16ea21ebac20d124d929f872d5aa060254",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2018/6/28 下午4:28",
      "commitNameOld": "e0480f75ac4e0367a053eabd3a07c3fa34eccf61",
      "commitAuthorOld": "Phillip Webb",
      "daysBetweenCommits": 8.47,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        throw new ServletException(\"Failed to create response content\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServletServerHttpRequest httpRequest;\n    try {\n        httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    } catch (URISyntaxException ex) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Failed to get request  URL: \" + ex.getMessage());\n        }\n        ((HttpServletResponse) response).setStatus(400);\n        asyncContext.complete();\n        return;\n    }\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext, httpRequest);\n    if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted, httpRequest);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted, httpRequest);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 158,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n     if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n         Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n         throw new ServletException(\"Failed to create response content\", ex);\n     }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n-    ServerHttpRequest httpRequest;\n+    ServletServerHttpRequest httpRequest;\n     try {\n         httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     } catch (URISyntaxException ex) {\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"Failed to get request  URL: \" + ex.getMessage());\n         }\n         ((HttpServletResponse) response).setStatus(400);\n         asyncContext.complete();\n         return;\n     }\n-    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n+    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext, httpRequest);\n     if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n     AtomicBoolean isCompleted \u003d new AtomicBoolean();\n-    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n+    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted, httpRequest);\n     asyncContext.addListener(listener);\n-    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n+    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted, httpRequest);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "900bc8a2e341277296a463c7b5db4abb944e14d7": {
      "type": "Ybodychange",
      "commitMessage": "Logging improvements for WebFlux\n\nIssue: SPR-16898\n",
      "commitDate": "2018/6/23 上午10:44",
      "commitName": "900bc8a2e341277296a463c7b5db4abb944e14d7",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2018/5/1 上午9:02",
      "commitNameOld": "8d157cb5b54c8fc2af116ef62831ef35a4a95a65",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 53.07,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        throw new ServletException(\"Failed to create response content\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest;\n    try {\n        httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    } catch (URISyntaxException ex) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Failed to get request  URL: \" + ex.getMessage());\n        }\n        ((HttpServletResponse) response).setStatus(400);\n        asyncContext.complete();\n        return;\n    }\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 158,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n     if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n         Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n-        throw new ServletException(\"Write publisher error\", ex);\n+        throw new ServletException(\"Failed to create response content\", ex);\n     }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest;\n     try {\n         httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     } catch (URISyntaxException ex) {\n-        if (logger.isWarnEnabled()) {\n-            logger.warn(\"Invalid URL for incoming request: \" + ex.getMessage());\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Failed to get request  URL: \" + ex.getMessage());\n         }\n         ((HttpServletResponse) response).setStatus(400);\n         asyncContext.complete();\n         return;\n     }\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n     AtomicBoolean isCompleted \u003d new AtomicBoolean();\n     HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n     asyncContext.addListener(listener);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8d157cb5b54c8fc2af116ef62831ef35a4a95a65": {
      "type": "Ybodychange",
      "commitMessage": "Consistent handling of URISyntaxException\n\nIssue: SPR-16778\n",
      "commitDate": "2018/5/1 上午9:02",
      "commitName": "8d157cb5b54c8fc2af116ef62831ef35a4a95a65",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2018/4/27 下午4:40",
      "commitNameOld": "75a41db071a4fb0a07bf95e4db48c8e93c9dd2d0",
      "commitAuthorOld": "sdeleuze",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        throw new ServletException(\"Write publisher error\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest;\n    try {\n        httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    } catch (URISyntaxException ex) {\n        if (logger.isWarnEnabled()) {\n            logger.warn(\"Invalid URL for incoming request: \" + ex.getMessage());\n        }\n        ((HttpServletResponse) response).setStatus(400);\n        asyncContext.complete();\n        return;\n    }\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 158,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,29 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n     if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n         Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n         throw new ServletException(\"Write publisher error\", ex);\n     }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n-    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n+    ServerHttpRequest httpRequest;\n+    try {\n+        httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n+    } catch (URISyntaxException ex) {\n+        if (logger.isWarnEnabled()) {\n+            logger.warn(\"Invalid URL for incoming request: \" + ex.getMessage());\n+        }\n+        ((HttpServletResponse) response).setStatus(400);\n+        asyncContext.complete();\n+        return;\n+    }\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n     AtomicBoolean isCompleted \u003d new AtomicBoolean();\n     HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n     asyncContext.addListener(listener);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0de36d2883124ef52ea1040a3e0022dcaa57f4e2": {
      "type": "Ybodychange",
      "commitMessage": "Consistent HttpMethod identity comparisons\n",
      "commitDate": "2018/2/19 上午5:01",
      "commitName": "0de36d2883124ef52ea1040a3e0022dcaa57f4e2",
      "commitAuthor": "Juergen Hoeller",
      "commitDateOld": "2018/2/14 上午6:00",
      "commitNameOld": "45e520ed866dbf9fbd29fefc51eadf403959fa3b",
      "commitAuthorOld": "igor-suhorukov",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        throw new ServletException(\"Write publisher error\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 158,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n     if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n         Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n         throw new ServletException(\"Write publisher error\", ex);\n     }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n-    if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n+    if (httpRequest.getMethod() \u003d\u003d HttpMethod.HEAD) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n     AtomicBoolean isCompleted \u003d new AtomicBoolean();\n     HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n     asyncContext.addListener(listener);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40127bd9adde6f44963c47edd3ed57c623980c26": {
      "type": "Ybodychange",
      "commitMessage": "Polishing\n",
      "commitDate": "2018/1/19 下午7:30",
      "commitName": "40127bd9adde6f44963c47edd3ed57c623980c26",
      "commitAuthor": "Juergen Hoeller",
      "commitDateOld": "2017/12/13 上午3:51",
      "commitNameOld": "f05175586e32e660ff190311f0b102c2b3b3a398",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 37.65,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        throw new ServletException(\"Write publisher error\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 158,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,19 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n     if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n         Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n-        Assert.notNull(ex, \"Unexpected async dispatch\");\n-        throw new NestedServletException(\"Write publisher error\", ex);\n+        throw new ServletException(\"Write publisher error\", ex);\n     }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n     AtomicBoolean isCompleted \u003d new AtomicBoolean();\n     HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n     asyncContext.addListener(listener);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f05175586e32e660ff190311f0b102c2b3b3a398": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Refine behavior on error after response committed\n\nIf the response is set and we can\u0027t change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051\n",
      "commitDate": "2017/12/13 上午3:51",
      "commitName": "f05175586e32e660ff190311f0b102c2b3b3a398",
      "commitAuthor": "Rossen Stoyanchev",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Refine behavior on error after response committed\n\nIf the response is set and we can\u0027t change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051\n",
          "commitDate": "2017/12/13 上午3:51",
          "commitName": "f05175586e32e660ff190311f0b102c2b3b3a398",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2017/11/5 下午11:23",
          "commitNameOld": "e5c1deea637ca8b2ab4352857615e53b4cb07e87",
          "commitAuthorOld": "Juergen Hoeller",
          "daysBetweenCommits": 37.19,
          "commitsBetweenForRepo": 144,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        Assert.notNull(ex, \"Unexpected async dispatch\");\n        throw new NestedServletException(\"Write publisher error\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 159,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,20 @@\n @Override\n-public void service(ServletRequest request, ServletResponse response) throws IOException {\n+public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n+    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n+        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n+        Assert.notNull(ex, \"Unexpected async dispatch\");\n+        throw new NestedServletException(\"Write publisher error\", ex);\n+    }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n-    asyncContext.addListener(ERROR_LISTENER);\n-    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n+    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n+    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n+    asyncContext.addListener(listener);\n+    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[ServletException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refine behavior on error after response committed\n\nIf the response is set and we can\u0027t change the status through\nServerHttpResponse any more, allow the error signal to propagate and\nlet the individual server adapters handle it. Ultimately that should\nresult in closing the connection.\n\nOn Servlet containers, we check one last time if the response is\ncommitted (we may not have filled the buffer). If not then save\nthe exception as a request attribute, dispatch, and re-throw it on the\ncontainer thread.\n\nOn Undertow access the connection and close it.\n\nOn Netty just let the error through to Reactor Netty.\n\nIssue: SPR-16051\n",
          "commitDate": "2017/12/13 上午3:51",
          "commitName": "f05175586e32e660ff190311f0b102c2b3b3a398",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2017/11/5 下午11:23",
          "commitNameOld": "e5c1deea637ca8b2ab4352857615e53b4cb07e87",
          "commitAuthorOld": "Juergen Hoeller",
          "daysBetweenCommits": 37.19,
          "commitsBetweenForRepo": 144,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n        Assert.notNull(ex, \"Unexpected async dispatch\");\n        throw new NestedServletException(\"Write publisher error\", ex);\n    }\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n    asyncContext.addListener(listener);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 159,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,20 @@\n @Override\n-public void service(ServletRequest request, ServletResponse response) throws IOException {\n+public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n+    if (DispatcherType.ASYNC.equals(request.getDispatcherType())) {\n+        Throwable ex \u003d (Throwable) request.getAttribute(WRITE_ERROR_ATTRIBUTE_NAME);\n+        Assert.notNull(ex, \"Unexpected async dispatch\");\n+        throw new NestedServletException(\"Write publisher error\", ex);\n+    }\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n         httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n     }\n-    asyncContext.addListener(ERROR_LISTENER);\n-    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n+    AtomicBoolean isCompleted \u003d new AtomicBoolean();\n+    HandlerResultAsyncListener listener \u003d new HandlerResultAsyncListener(isCompleted);\n+    asyncContext.addListener(listener);\n+    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext, isCompleted);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6ee1af27c61c015461f79f95f1e4f89db911be0c": {
      "type": "Ybodychange",
      "commitMessage": "WebFlux supports HTTP HEAD\n\nIssue: SPR-15994\n",
      "commitDate": "2017/9/28 上午3:25",
      "commitName": "6ee1af27c61c015461f79f95f1e4f89db911be0c",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2017/5/27 下午2:57",
      "commitNameOld": "87598f48e41d483745aba56cbf4e998c6f6d680c",
      "commitAuthorOld": "Sebastien Deleuze",
      "daysBetweenCommits": 123.52,
      "commitsBetweenForRepo": 631,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n    }\n    asyncContext.addListener(ERROR_LISTENER);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 106,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,13 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n     asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n+    if (HttpMethod.HEAD.equals(httpRequest.getMethod())) {\n+        httpResponse \u003d new HttpHeadResponseDecorator(httpResponse);\n+    }\n     asyncContext.addListener(ERROR_LISTENER);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4f3db9b822bf9769d5f2be5e66f0eca3d7f74370": {
      "type": "Ybodychange",
      "commitMessage": "Disable Servlet async request timeout in WebFlux\n\nIssue: SPR-15463\n",
      "commitDate": "2017/4/26 上午4:28",
      "commitName": "4f3db9b822bf9769d5f2be5e66f0eca3d7f74370",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2017/4/6 上午12:41",
      "commitNameOld": "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 20.16,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    asyncContext.setTimeout(-1);\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    asyncContext.addListener(ERROR_LISTENER);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 104,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,10 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n+    asyncContext.setTimeout(-1);\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n-    asyncContext.addListener(TIMEOUT_HANDLER);\n+    asyncContext.addListener(ERROR_LISTENER);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20": {
      "type": "Ybodychange",
      "commitMessage": "Revert recent change causing issue in Boot on WildFly\n",
      "commitDate": "2017/4/6 上午12:41",
      "commitName": "e83fdaa2ddd9f5ace2ae2376b7da2427fc1ecd20",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2017/4/5 上午4:30",
      "commitNameOld": "f716c8e9bc8ada04b4060e21680aca793e315cd0",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    asyncContext.addListener(TIMEOUT_HANDLER);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 104,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n+    asyncContext.addListener(TIMEOUT_HANDLER);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    asyncContext.addListener(subscriber);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f716c8e9bc8ada04b4060e21680aca793e315cd0": {
      "type": "Ybodychange",
      "commitMessage": "Consistently check if AsyncContext already completed\n\nRelated to SPR-15412\n",
      "commitDate": "2017/4/5 上午4:30",
      "commitName": "f716c8e9bc8ada04b4060e21680aca793e315cd0",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2017/4/5 上午3:33",
      "commitNameOld": "c0f2017262f8d3e784007d5e0134e696c1adfcf7",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    asyncContext.addListener(subscriber);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 104,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n-    asyncContext.addListener(TIMEOUT_LISTENER);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n+    asyncContext.addListener(subscriber);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c0f2017262f8d3e784007d5e0134e696c1adfcf7": {
      "type": "Ybodychange",
      "commitMessage": "Polish\n",
      "commitDate": "2017/4/5 上午3:33",
      "commitName": "c0f2017262f8d3e784007d5e0134e696c1adfcf7",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2017/4/5 上午2:45",
      "commitNameOld": "ece481545987ebcd13552b5db1b56be929a9ae78",
      "commitAuthorOld": "Violeta Georgieva",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    asyncContext.addListener(TIMEOUT_LISTENER);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 104,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,9 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n+    asyncContext.addListener(TIMEOUT_LISTENER);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57d2fcef557882097e7fea4b603c437488546988": {
      "type": "Ybodychange",
      "commitMessage": "Extract CompositeHttpHandler functionality\n\nExtract CompositeHttpHandler to a package private class and add direct\nsupport via `HttpHandler.of(...)`. This removes the need for the\n`HttpHandlerAdapterSupport` class.\n",
      "commitDate": "2017/3/16 上午5:05",
      "commitName": "57d2fcef557882097e7fea4b603c437488546988",
      "commitAuthor": "Phillip Webb",
      "commitDateOld": "2017/1/31 上午5:15",
      "commitNameOld": "1b2dc3638f90508dbc98dcd8a518153fb0db62d0",
      "commitAuthorOld": "Juergen Hoeller",
      "daysBetweenCommits": 43.99,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 102,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n     ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n     ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n+    this.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2aaa05592fb29d0fa61a69bc61ef35c235423f0": {
      "type": "Ybodychange",
      "commitMessage": "Polish\n",
      "commitDate": "2017/1/26 下午8:25",
      "commitName": "a2aaa05592fb29d0fa61a69bc61ef35c235423f0",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2017/1/26 下午7:21",
      "commitNameOld": "383375c35f12ff4aec67560b77e00f332b54a36c",
      "commitAuthorOld": "Violeta Georgieva",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 96,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n-    ServerHttpRequest httpRequest \u003d createServletServerHttpRequest(((HttpServletRequest) request), asyncContext);\n-    ServerHttpResponse httpResponse \u003d createServletServerHttpResponse(((HttpServletResponse) response), asyncContext);\n+    ServerHttpRequest httpRequest \u003d createRequest(((HttpServletRequest) request), asyncContext);\n+    ServerHttpResponse httpResponse \u003d createResponse(((HttpServletResponse) response), asyncContext);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n     getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "383375c35f12ff4aec67560b77e00f332b54a36c": {
      "type": "Ybodychange",
      "commitMessage": "Use separate reactive HttpHandler for Tomcat/Jetty\n\nIntroduce separate adapters TomcatHttpHandlerAdapter/JettyHttpHandlerAdapter\nso that each adapter can use the Tomcat/Jetty APIs for reading/writing\nwith ByteBuffer.\n",
      "commitDate": "2017/1/26 下午7:21",
      "commitName": "383375c35f12ff4aec67560b77e00f332b54a36c",
      "commitAuthor": "Violeta Georgieva",
      "commitDateOld": "2016/12/15 上午4:34",
      "commitNameOld": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 42.62,
      "commitsBetweenForRepo": 281,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d createServletServerHttpRequest(((HttpServletRequest) request), asyncContext);\n    ServerHttpResponse httpResponse \u003d createServletServerHttpResponse(((HttpServletResponse) response), asyncContext);\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 96,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,8 @@\n @Override\n public void service(ServletRequest request, ServletResponse response) throws IOException {\n     AsyncContext asyncContext \u003d request.startAsync();\n-    ServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n-    ServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n+    ServerHttpRequest httpRequest \u003d createServletServerHttpRequest(((HttpServletRequest) request), asyncContext);\n+    ServerHttpResponse httpResponse \u003d createServletServerHttpResponse(((HttpServletResponse) response), asyncContext);\n     HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n     getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5a2906979816ce1268a8dfe56c5f0a89ad720b99": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response.\n",
      "commitDate": "2016/12/15 上午4:34",
      "commitName": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
      "commitAuthor": "Rossen Stoyanchev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response.\n",
          "commitDate": "2016/12/15 上午4:34",
          "commitName": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2016/10/22 上午4:19",
          "commitNameOld": "aea3a750189977ca231172db87408f03979bace6",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 54.01,
          "commitsBetweenForRepo": 281,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n    ServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 96,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,8 @@\n @Override\n-public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n-    AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n-    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n+public void service(ServletRequest request, ServletResponse response) throws IOException {\n+    AsyncContext asyncContext \u003d request.startAsync();\n+    ServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n+    ServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n+    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n+    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[servletRequest-ServletRequest, servletResponse-ServletResponse]",
            "newValue": "[request-ServletRequest, response-ServletResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactor AsyncListener registration + polish\n\nInstead of registering an AsyncListener in ServletHttpHandlerAdapter\nwe now register an AsyncListener in each of the request and response\nwhere the events need to be handled anyway. This allows removing the\npackage private delegation methods in the request and response.\n",
          "commitDate": "2016/12/15 上午4:34",
          "commitName": "5a2906979816ce1268a8dfe56c5f0a89ad720b99",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2016/10/22 上午4:19",
          "commitNameOld": "aea3a750189977ca231172db87408f03979bace6",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 54.01,
          "commitsBetweenForRepo": 281,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest request, ServletResponse response) throws IOException {\n    AsyncContext asyncContext \u003d request.startAsync();\n    ServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n    ServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 96,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,8 @@\n @Override\n-public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n-    AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n-    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n+public void service(ServletRequest request, ServletResponse response) throws IOException {\n+    AsyncContext asyncContext \u003d request.startAsync();\n+    ServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());\n+    ServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());\n+    HandlerResultSubscriber subscriber \u003d new HandlerResultSubscriber(asyncContext);\n+    getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "aea3a750189977ca231172db87408f03979bace6": {
      "type": "Ybodychange",
      "commitMessage": "Fix failing tests\n\nIssue: SPR-14772, SPR-14803\n",
      "commitDate": "2016/10/22 上午4:19",
      "commitName": "aea3a750189977ca231172db87408f03979bace6",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2016/10/21 上午5:42",
      "commitNameOld": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 91,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+    AsyncContext asyncContext \u003d servletRequest.startAsync();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n-    AsyncContext asyncContext \u003d servletRequest.startAsync();\n     asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b92d541ba0934052769d0bcf08fec7d8c44d2c2d": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler\u0027s under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map\u003cString, HttpHandler\u003e.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
      "commitDate": "2016/10/21 上午5:42",
      "commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
      "commitAuthor": "Rossen Stoyanchev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler\u0027s under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map\u003cString, HttpHandler\u003e.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
          "commitDate": "2016/10/21 上午5:42",
          "commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2016/10/20 上午2:28",
          "commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
          "commitAuthorOld": "Violeta Georgieva",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 91,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n @Override\n-protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n+public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n     asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    this.handler.handle(request, response).subscribe(resultSubscriber);\n+    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[servletRequest-HttpServletRequest, servletResponse-HttpServletResponse]",
            "newValue": "[servletRequest-ServletRequest, servletResponse-ServletResponse]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler\u0027s under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map\u003cString, HttpHandler\u003e.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
          "commitDate": "2016/10/21 上午5:42",
          "commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2016/10/20 上午2:28",
          "commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
          "commitAuthorOld": "Violeta Georgieva",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 91,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n @Override\n-protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n+public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n     asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    this.handler.handle(request, response).subscribe(resultSubscriber);\n+    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler\u0027s under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map\u003cString, HttpHandler\u003e.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
          "commitDate": "2016/10/21 上午5:42",
          "commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2016/10/20 上午2:28",
          "commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
          "commitAuthorOld": "Violeta Georgieva",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 91,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n @Override\n-protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n+public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n     asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    this.handler.handle(request, response).subscribe(resultSubscriber);\n+    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ServletException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add contextPath support for reactive web applications\n\nThis commit introduces support for running multiple HttpHandler\u0027s under\ndistinct context paths which effectively allows running multiple\napplications on the same server. ContextPathIntegrationTests contains\nan example of two applications with different context paths.\n\nIn order to support this the HttpHandler adapters for all supported\nruntimes now have a common base class HttpHandlerAdapterSupport\nwhich has two constructor choices -- one with a single HttpHandler and\nanother with a Map\u003cString, HttpHandler\u003e.\n\nNote that in addition to the contextPath under which an HttpHandler is\nconfigured there may also be a \"native\" contextPath under which the\nnative runtime adapter is configured (e.g. Servlet containers). In such\ncases the contextPath is a combination of the native contextPath and\nthe contextPath assigned to the HttpHandler. See for example\nHttpHandlerAdapterSupportTests.\n\nIssue: SPR-14726\n",
          "commitDate": "2016/10/21 上午5:42",
          "commitName": "b92d541ba0934052769d0bcf08fec7d8c44d2c2d",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2016/10/20 上午2:28",
          "commitNameOld": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
          "commitAuthorOld": "Violeta Georgieva",
          "daysBetweenCommits": 1.13,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n}",
          "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 91,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n @Override\n-protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n+public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n     asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n-    this.handler.handle(request, response).subscribe(resultSubscriber);\n+    getHttpHandler().handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "25e7cd577d6855bd56c463ad0ce4ae20bf33d541": {
      "type": "Ybodychange",
      "commitMessage": "Handle AsyncListener.onComplete in Servlet adapter\n\nTypically the Mono\u003cVoid\u003e from the HttpHandler also reflects the\ncompletion of the request and response body processors and at that\npoint invoking AsyncContext#complete() from HandlerResultSubscriber\nshould be sufficient.\n\nThis commit explicitly propagates the AsyncListener.onComplete event\nto the request and response body processors for added safety.\nTechnically as mentioned those processors should have completed but\ndepending on how the controller is written there is a possibility\nthe body processors may not have completed.\n\nIssue: SPR-14772\n",
      "commitDate": "2016/10/20 上午2:28",
      "commitName": "25e7cd577d6855bd56c463ad0ce4ae20bf33d541",
      "commitAuthor": "Violeta Georgieva",
      "commitDateOld": "2016/10/14 上午4:31",
      "commitNameOld": "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 5.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 86,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n-    asyncContext.addListener(new ErrorHandlingAsyncListener(request, response));\n+    asyncContext.addListener(new EventHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d": {
      "type": "Ybodychange",
      "commitMessage": "Polish AsyncListener in ServletHttpHandlerAdapter\n",
      "commitDate": "2016/10/14 上午4:31",
      "commitName": "c1e5e3a87e4f0f8296a9da7907066b9ba5733e0d",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2016/10/14 上午4:14",
      "commitNameOld": "7e9437738272a31e1d764972291de42936194ab1",
      "commitAuthorOld": "Violeta Georgieva",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n    asyncContext.addListener(new ErrorHandlingAsyncListener(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 86,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n-    asyncContext.addListener(new HandlerAsyncEvent(request, response));\n+    asyncContext.addListener(new ErrorHandlingAsyncListener(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7e9437738272a31e1d764972291de42936194ab1": {
      "type": "Ybodychange",
      "commitMessage": "Handle async operation events\n\nProblem:\nThe following exception is observed on an async timeout:\n\"java.lang.IllegalStateException: It is invalid to call\nisReady() when the response has not been put into non-blocking mode\"\n\nCurrent Implementation:\nThe async operation events sent by the web container are not propagated\nto the internal implementation. When timeout/error happens and if the\napplication does not complete the async operation, the web container\nwill complete it. At that point if the application tries to read/write,\nthe operation will fail with an exception (above) that there is not\nasync operation started.\n\nProposed Solution:\nOn async timeout or error, make calls to:\n- AbstractRequestBodyPublisher.onError,\n- AbstractResponseBodyProcessor.onError,\n- AbstractResponseBodyFlushProcessor.onError\nAs a result of these calls the async operation will be completed and no\nmore invocations of read/write will be made.\n",
      "commitDate": "2016/10/14 上午4:14",
      "commitName": "7e9437738272a31e1d764972291de42936194ab1",
      "commitAuthor": "Violeta Georgieva",
      "commitDateOld": "2016/10/5 上午5:00",
      "commitNameOld": "cfa0f6c84bbd4fe890b753aefa7e57a57cb1d9d2",
      "commitAuthorOld": "Juergen Hoeller",
      "daysBetweenCommits": 8.97,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n    asyncContext.addListener(new HandlerAsyncEvent(request, response));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 86,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,9 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n+    asyncContext.addListener(new HandlerAsyncEvent(request, response));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d1b5426982332cbbd5671b00fbc4ded5d69a656": {
      "type": "Yfilerename",
      "commitMessage": "Move spring-web-reactive classes to spring-web\n",
      "commitDate": "2016/7/15 上午12:30",
      "commitName": "5d1b5426982332cbbd5671b00fbc4ded5d69a656",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2016/7/15 上午12:30",
      "commitNameOld": "2e8326220b3929534e6621acf0ba0e4ac0bd910c",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 72,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
        "newPath": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java"
      }
    },
    "56e50d6d6811d4f921f7e79f4ae8ce0823bd6d25": {
      "type": "Ybodychange",
      "commitMessage": "Moved body processor to writeWithInternal()\n\nMoved ResponseBodyProcessor creation from constructor to\nwriteWithInternal(), in preparation of supporting both\nPublisher\u003cDataBuffer\u003e as well as Publisher\u003cPublisher\u003cDataBuffer\u003e\u003e.\n",
      "commitDate": "2016/7/13 下午6:04",
      "commitName": "56e50d6d6811d4f921f7e79f4ae8ce0823bd6d25",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/7/13 下午3:53",
      "commitNameOld": "f82f17d7f762bb0fd10cd813c334ac9a0b62355e",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 71,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,8 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n-    request.registerListener();\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n-    response.registerListener();\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f82f17d7f762bb0fd10cd813c334ac9a0b62355e": {
      "type": "Ybodychange",
      "commitMessage": "Moved Servlet Publisher and Processor\n\nIn preparation of supporting both Publisher\u003cDataBuffer\u003e and\nPublisher\u003cPublisher\u003cDataBuffer\u003e\u003e as response body, moved\nRequestBodyPublisher and ResponseBodyProcessor into\nServletServerHttpRequest and ServletServerHttpResponse respectively.\n",
      "commitDate": "2016/7/13 下午3:53",
      "commitName": "f82f17d7f762bb0fd10cd813c334ac9a0b62355e",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/7/13 下午3:53",
      "commitNameOld": "392a1660a4fcc1e2eab734a21beda71f9fd8ba6b",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n    request.registerListener();\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n    response.registerListener();\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 71,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,10 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext asyncContext \u003d servletRequest.startAsync();\n-    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(servletRequest.getInputStream(), this.dataBufferFactory, this.bufferSize);\n-    requestBody.registerListener();\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n-    ResponseBodyProcessor responseBody \u003d new ResponseBodyProcessor(servletResponse.getOutputStream(), this.bufferSize);\n-    responseBody.registerListener();\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e {\n-        publisher.subscribe(responseBody);\n-        responseBody.subscribe(subscriber);\n-    }));\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, this.dataBufferFactory, this.bufferSize);\n+    request.registerListener();\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, this.bufferSize);\n+    response.registerListener();\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e64907eed8b4accdda53c6be0145087017eae820": {
      "type": "Ybodychange",
      "commitMessage": "Removed ServletAsyncContextSynchronizer\n",
      "commitDate": "2016/7/13 下午3:53",
      "commitName": "e64907eed8b4accdda53c6be0145087017eae820",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/7/13 下午3:53",
      "commitNameOld": "d2fce24eb4d685e89ce6e818ac584cfafecbd703",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext asyncContext \u003d servletRequest.startAsync();\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(servletRequest.getInputStream(), this.dataBufferFactory, this.bufferSize);\n    requestBody.registerListener();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    ResponseBodyProcessor responseBody \u003d new ResponseBodyProcessor(servletResponse.getOutputStream(), this.bufferSize);\n    responseBody.registerListener();\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e {\n        publisher.subscribe(responseBody);\n        responseBody.subscribe(subscriber);\n    }));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 78,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,15 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n-    AsyncContext context \u003d servletRequest.startAsync();\n-    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, this.dataBufferFactory, this.bufferSize);\n+    AsyncContext asyncContext \u003d servletRequest.startAsync();\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(servletRequest.getInputStream(), this.dataBufferFactory, this.bufferSize);\n     requestBody.registerListener();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n-    ResponseBodyProcessor responseBody \u003d new ResponseBodyProcessor(synchronizer, this.bufferSize);\n+    ResponseBodyProcessor responseBody \u003d new ResponseBodyProcessor(servletResponse.getOutputStream(), this.bufferSize);\n     responseBody.registerListener();\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e {\n         publisher.subscribe(responseBody);\n         responseBody.subscribe(subscriber);\n     }));\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(asyncContext);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b0de99bc8cb0a2e20c49e7f627139204bfc13a13": {
      "type": "Ybodychange",
      "commitMessage": "Refactor ResponseBodySubscriber to Processor\n\nThis commit changes the AbstractResponseBodySubscriber into a\nAbstractResponseBodyProcessor\u003cDataBuffer, Void\u003e, so that the processor\ncan be used as a return value for writeWith.\n\nAdditional, this commit no longer closes the response after an eror\noccurred.\n\nThis fixes #59.\n",
      "commitDate": "2016/7/6 下午7:18",
      "commitName": "b0de99bc8cb0a2e20c49e7f627139204bfc13a13",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/7/6 下午3:14",
      "commitNameOld": "7763391e8430e3091be560f490d20aeb22db21fb",
      "commitAuthorOld": "Violeta Georgieva",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, this.dataBufferFactory, this.bufferSize);\n    requestBody.registerListener();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    ResponseBodyProcessor responseBody \u003d new ResponseBodyProcessor(synchronizer, this.bufferSize);\n    responseBody.registerListener();\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e {\n        publisher.subscribe(responseBody);\n        responseBody.subscribe(subscriber);\n    }));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 80,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,16 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n     RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, this.dataBufferFactory, this.bufferSize);\n     requestBody.registerListener();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n-    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, this.bufferSize);\n+    ResponseBodyProcessor responseBody \u003d new ResponseBodyProcessor(synchronizer, this.bufferSize);\n     responseBody.registerListener();\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e {\n+        publisher.subscribe(responseBody);\n+        responseBody.subscribe(subscriber);\n+    }));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "52325a21ffb76d30d8f9253934fec621f4e3f121": {
      "type": "Ybodychange",
      "commitMessage": "Fixed Undertow flush support\n\nReactored Servlet 3.1 and Undertow response support into an\nAbstractResponseBodySubscriber that uses an internal state machine,\nmaking thread-safity a lot easier.\n",
      "commitDate": "2016/6/24 下午9:28",
      "commitName": "52325a21ffb76d30d8f9253934fec621f4e3f121",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/6/24 下午9:28",
      "commitNameOld": "81496624a9cb718d330a3e72f01006951735188c",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, this.dataBufferFactory, this.bufferSize);\n    requestBody.registerListener();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, this.bufferSize);\n    responseBody.registerListener();\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 81,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, dataBufferFactory, bufferSize);\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, this.dataBufferFactory, this.bufferSize);\n     requestBody.registerListener();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n-    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, bufferSize);\n+    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, this.bufferSize);\n     responseBody.registerListener();\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, this.dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d36286c7d1b5ffd13d847e3b97f4da2d8df66d74": {
      "type": "Ybodychange",
      "commitMessage": "Renamed DataBufferAllocator to DataBufferFactory\n",
      "commitDate": "2016/5/27 下午3:51",
      "commitName": "d36286c7d1b5ffd13d847e3b97f4da2d8df66d74",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/4/26 下午9:08",
      "commitNameOld": "72b66c9715035d8263a55ca726d90426afca1fff",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 30.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, dataBufferFactory, bufferSize);\n    requestBody.registerListener();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, bufferSize);\n    responseBody.registerListener();\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 83,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, bufferSize);\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, dataBufferFactory, bufferSize);\n     requestBody.registerListener();\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n     ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, bufferSize);\n     responseBody.registerListener();\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, allocator, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, dataBufferFactory, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "35e511b03fd00c96f00f48eafcfd0ae16e888e16": {
      "type": "Ybodychange",
      "commitMessage": "Resolved comments from review\n\nThis commit resolves a few comments brought forward during a review\nmeeting, specifically:\n\n- It renames AbstractResponseBodyPublisher to\n  AbstractRequestBodyPublisher.\n- It separates out registration logic into a register method.\n- It moves the RequestBodyPublisher and ResponseBodySubscriber for the\n  Servlet 3.1 support back into ServletHttpHandlerAdapter.\n",
      "commitDate": "2016/3/24 上午12:04",
      "commitName": "35e511b03fd00c96f00f48eafcfd0ae16e888e16",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/3/18 下午11:14",
      "commitNameOld": "7f786ce4d7a8b51a02133d7db404d9f038d5a927",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 5.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, bufferSize);\n    requestBody.registerListener();\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, bufferSize);\n    responseBody.registerListener();\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, allocator, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 82,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,13 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(synchronizer, this.allocator, this.bufferSize);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(synchronizer, this.bufferSize, this.allocator);\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, bufferSize);\n+    requestBody.registerListener();\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n+    ResponseBodySubscriber responseBody \u003d new ResponseBodySubscriber(synchronizer, bufferSize);\n+    responseBody.registerListener();\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, allocator, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBody)));\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f786ce4d7a8b51a02133d7db404d9f038d5a927": {
      "type": "Ybodychange",
      "commitMessage": "Added DataBufferAllocator property to ReactiveHttpOutputMessage, and use that to pass on to Encoder.encode().\n",
      "commitDate": "2016/3/18 下午11:14",
      "commitName": "7f786ce4d7a8b51a02133d7db404d9f038d5a927",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/2/23 下午9:35",
      "commitNameOld": "361707c448f41612b018f2e50452dfb185fbbd5e",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 24.07,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(synchronizer, this.allocator, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(synchronizer, this.bufferSize, this.allocator);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 74,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(synchronizer, this.allocator, this.bufferSize);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(synchronizer, this.bufferSize);\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(synchronizer, this.bufferSize, this.allocator);\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "361707c448f41612b018f2e50452dfb185fbbd5e": {
      "type": "Ybodychange",
      "commitMessage": "Servlet 3.1 support cleanup\n\nClaneup of the Servlet 3.1 support:\n\n - moved RequestBodyPublisher to ServletServerHttpRequest\n - moved ResponseBodySubscribera to ServletServerHttpResponse\n - response body is now copied to ServletOutputStream in chunks, rather\n   than one big byte[]\n",
      "commitDate": "2016/2/23 下午9:35",
      "commitName": "361707c448f41612b018f2e50452dfb185fbbd5e",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/2/23 下午5:24",
      "commitNameOld": "51a90465d40168ed27e9ea93220b7e6f35bc203b",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(synchronizer, this.allocator, this.bufferSize);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(synchronizer, this.bufferSize);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 74,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,9 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n-    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n-    servletRequest.getInputStream().setReadListener(requestBody);\n-    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n-    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(synchronizer, this.allocator, this.bufferSize);\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(synchronizer, this.bufferSize);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51a90465d40168ed27e9ea93220b7e6f35bc203b": {
      "type": "Ybodychange",
      "commitMessage": "Polishing\n",
      "commitDate": "2016/2/23 下午5:24",
      "commitName": "51a90465d40168ed27e9ea93220b7e6f35bc203b",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/1/27 下午11:04",
      "commitNameOld": "225179bc6f0b4c705a869a03b81df5f41345b6f7",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 26.76,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    servletRequest.getInputStream().setReadListener(requestBody);\n    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 73,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n     RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n     servletRequest.getInputStream().setReadListener(requestBody);\n-    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer, allocator);\n+    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n     servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "225179bc6f0b4c705a869a03b81df5f41345b6f7": {
      "type": "Ybodychange",
      "commitMessage": "Updated http and web packages to use DataBuffer\n",
      "commitDate": "2016/1/27 下午11:04",
      "commitName": "225179bc6f0b4c705a869a03b81df5f41345b6f7",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2016/1/20 上午4:18",
      "commitNameOld": "198e31641247061d0e02f8103b6d5b4583b1c619",
      "commitAuthorOld": "Stephane Maldini",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    servletRequest.getInputStream().setReadListener(requestBody);\n    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer, allocator);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 71,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, allocator, BUFFER_SIZE);\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n     servletRequest.getInputStream().setReadListener(requestBody);\n-    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n+    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer, allocator);\n     ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n     servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8ef7e2ff77f913773e30b1463d4657368db700e5": {
      "type": "Ybodychange",
      "commitMessage": "Use Reactor 2.5 Flux and Mono Rx light API\n\nFlux and Mono are used both for implementation and exposed at API\nlevel to express 1 versus N semantic and to provide default Rx\noperators:\n- Flux\u003cT\u003e for multiple values Publisher (issue #48)\n- Mono\u003cT\u003e for single value Publisher (issue #50)\n- Mono\u003cVoid\u003e for Publisher with no value (issue #49)\n",
      "commitDate": "2016/1/7 下午6:14",
      "commitName": "8ef7e2ff77f913773e30b1463d4657368db700e5",
      "commitAuthor": "Sebastien Deleuze",
      "commitDateOld": "2016/1/1 上午1:55",
      "commitNameOld": "0aade73c88d5bbde5e6f7383560eeae017045bae",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 6.68,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    servletRequest.getInputStream().setReadListener(requestBody);\n    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
      "functionStartLine": 65,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n     AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n     RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n     ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n     servletRequest.getInputStream().setReadListener(requestBody);\n     ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n-    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e subscriber -\u003e publisher.subscribe(responseBodySubscriber));\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e Mono.from(subscriber -\u003e publisher.subscribe(responseBodySubscriber)));\n     servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n     this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0aade73c88d5bbde5e6f7383560eeae017045bae": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Update Servlet + Undertow req \u0026 resp implementations\n\nFor those runtimes that don\u0027t directly support Reacitve Streams this\ncommit separates more formally Reactive Streams bridge code out of\nthe request and response implementations which become simple adapters\nto the ServerHttpRequest/Response contracts like their RxNetty and\nReactor Net counterparts.\n",
      "commitDate": "2016/1/1 上午1:55",
      "commitName": "0aade73c88d5bbde5e6f7383560eeae017045bae",
      "commitAuthor": "Rossen Stoyanchev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Update Servlet + Undertow req \u0026 resp implementations\n\nFor those runtimes that don\u0027t directly support Reacitve Streams this\ncommit separates more formally Reactive Streams bridge code out of\nthe request and response implementations which become simple adapters\nto the ServerHttpRequest/Response contracts like their RxNetty and\nReactor Net counterparts.\n",
          "commitDate": "2016/1/1 上午1:55",
          "commitName": "0aade73c88d5bbde5e6f7383560eeae017045bae",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2015/12/3 上午6:46",
          "commitNameOld": "da98becf72fbeef836dba366431be2a652e5e001",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 28.8,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    servletRequest.getInputStream().setReadListener(requestBody);\n    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e subscriber -\u003e publisher.subscribe(responseBodySubscriber));\n    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
          "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 64,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,13 @@\n @Override\n-protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-    AsyncContext context \u003d request.startAsync();\n+protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n+    AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, synchronizer);\n-    request.getInputStream().setReadListener(httpRequest.getReadListener());\n-    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, synchronizer);\n-    response.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n-    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n+    servletRequest.getInputStream().setReadListener(requestBody);\n+    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e subscriber -\u003e publisher.subscribe(responseBodySubscriber));\n+    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n+    this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[request-HttpServletRequest, response-HttpServletResponse]",
            "newValue": "[servletRequest-HttpServletRequest, servletResponse-HttpServletResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Update Servlet + Undertow req \u0026 resp implementations\n\nFor those runtimes that don\u0027t directly support Reacitve Streams this\ncommit separates more formally Reactive Streams bridge code out of\nthe request and response implementations which become simple adapters\nto the ServerHttpRequest/Response contracts like their RxNetty and\nReactor Net counterparts.\n",
          "commitDate": "2016/1/1 上午1:55",
          "commitName": "0aade73c88d5bbde5e6f7383560eeae017045bae",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2015/12/3 上午6:46",
          "commitNameOld": "da98becf72fbeef836dba366431be2a652e5e001",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 28.8,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n    AsyncContext context \u003d servletRequest.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n    servletRequest.getInputStream().setReadListener(requestBody);\n    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e subscriber -\u003e publisher.subscribe(responseBodySubscriber));\n    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n    this.handler.handle(request, response).subscribe(resultSubscriber);\n}",
          "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 64,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,13 @@\n @Override\n-protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n-    AsyncContext context \u003d request.startAsync();\n+protected void service(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {\n+    AsyncContext context \u003d servletRequest.startAsync();\n     ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n-    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, synchronizer);\n-    request.getInputStream().setReadListener(httpRequest.getReadListener());\n-    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, synchronizer);\n-    response.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n-    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n+    RequestBodyPublisher requestBody \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n+    ServletServerHttpRequest request \u003d new ServletServerHttpRequest(servletRequest, requestBody);\n+    servletRequest.getInputStream().setReadListener(requestBody);\n+    ResponseBodySubscriber responseBodySubscriber \u003d new ResponseBodySubscriber(synchronizer);\n+    ServletServerHttpResponse response \u003d new ServletServerHttpResponse(servletResponse, publisher -\u003e subscriber -\u003e publisher.subscribe(responseBodySubscriber));\n+    servletResponse.getOutputStream().setWriteListener(responseBodySubscriber);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, response);\n+    this.handler.handle(request, response).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "da98becf72fbeef836dba366431be2a652e5e001": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Move http.server to http.server.reactive\n",
      "commitDate": "2015/12/3 上午6:46",
      "commitName": "da98becf72fbeef836dba366431be2a652e5e001",
      "commitAuthor": "Rossen Stoyanchev",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Move http.server to http.server.reactive\n",
          "commitDate": "2015/12/3 上午6:46",
          "commitName": "da98becf72fbeef836dba366431be2a652e5e001",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2015/12/2 上午7:19",
          "commitNameOld": "382c98f9680fab9a0c2ad50de18e3385f9cba5c1",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, synchronizer);\n    request.getInputStream().setReadListener(httpRequest.getReadListener());\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, synchronizer);\n    response.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
          "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 53,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,11 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n-    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n-    request.getInputStream().setReadListener(requestPublisher);\n-    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n-    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n-    response.getOutputStream().setWriteListener(responseSubscriber);\n-    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n+    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n+    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, synchronizer);\n+    request.getInputStream().setReadListener(httpRequest.getReadListener());\n+    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, synchronizer);\n+    response.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n     this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/HttpHandlerServlet.java",
            "newPath": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move http.server to http.server.reactive\n",
          "commitDate": "2015/12/3 上午6:46",
          "commitName": "da98becf72fbeef836dba366431be2a652e5e001",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2015/12/2 上午7:19",
          "commitNameOld": "382c98f9680fab9a0c2ad50de18e3385f9cba5c1",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, synchronizer);\n    request.getInputStream().setReadListener(httpRequest.getReadListener());\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, synchronizer);\n    response.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
          "path": "spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java",
          "functionStartLine": 53,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,11 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n-    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n-    request.getInputStream().setReadListener(requestPublisher);\n-    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n-    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n-    response.getOutputStream().setWriteListener(responseSubscriber);\n-    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n+    ServletAsyncContextSynchronizer synchronizer \u003d new ServletAsyncContextSynchronizer(context);\n+    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, synchronizer);\n+    request.getInputStream().setReadListener(httpRequest.getReadListener());\n+    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, synchronizer);\n+    response.getOutputStream().setWriteListener(httpResponse.getWriteListener());\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n     this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "df80ffbf2814c8f0a95bce9095921d53f2786a11": {
      "type": "Yfilerename",
      "commitMessage": "Spring-consistent naming in server.http package\n\nThis change also removes reactor-stream variants of the request and\nresponse since the request and response aren\u0027t used directly by\napplication code and get passed through reactor.Publishers anyway.\n",
      "commitDate": "2015/12/2 上午7:09",
      "commitName": "df80ffbf2814c8f0a95bce9095921d53f2786a11",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2015/12/2 上午12:51",
      "commitNameOld": "b9a52d5f7c454ab7de0bc9eddc8e35c7c1f51906",
      "commitAuthorOld": "Stephane Maldini",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/HttpHandlerServlet.java",
      "functionStartLine": 56,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/Servlet31HttpHandlerAdapter.java",
        "newPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/HttpHandlerServlet.java"
      }
    },
    "e9e4bcdc599634ae8879815a33a8b4e41b909f61": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Move ~.web.reactive.server to ~.http.server\n",
      "commitDate": "2015/11/21 上午2:10",
      "commitName": "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
      "commitAuthor": "Rossen Stoyanchev",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Move ~.web.reactive.server to ~.http.server\n",
          "commitDate": "2015/11/21 上午2:10",
          "commitName": "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2015/11/14 上午6:49",
          "commitNameOld": "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 6.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
          "path": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/Servlet31HttpHandlerAdapter.java",
          "functionStartLine": 56,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n     AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n     RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n     request.getInputStream().setReadListener(requestPublisher);\n-    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n+    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n     ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n     response.getOutputStream().setWriteListener(responseSubscriber);\n-    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n+    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n     this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "spring-web-reactive/src/main/java/org/springframework/web/reactive/server/servlet/HttpHandlerServlet.java",
            "newPath": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/Servlet31HttpHandlerAdapter.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Move ~.web.reactive.server to ~.http.server\n",
          "commitDate": "2015/11/21 上午2:10",
          "commitName": "e9e4bcdc599634ae8879815a33a8b4e41b909f61",
          "commitAuthor": "Rossen Stoyanchev",
          "commitDateOld": "2015/11/14 上午6:49",
          "commitNameOld": "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
          "commitAuthorOld": "Rossen Stoyanchev",
          "daysBetweenCommits": 6.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
          "path": "spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/Servlet31HttpHandlerAdapter.java",
          "functionStartLine": 56,
          "functionName": "service",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n     AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n     RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n     request.getInputStream().setReadListener(requestPublisher);\n-    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n+    Servlet31ServerHttpRequest httpRequest \u003d new Servlet31ServerHttpRequest(request, requestPublisher);\n     ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n     response.getOutputStream().setWriteListener(responseSubscriber);\n-    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n+    Servlet31ServerHttpResponse httpResponse \u003d new Servlet31ServerHttpResponse(response, responseSubscriber);\n     HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n     this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "81867fa4237643ca3eae24a8f085bc4b5f9443b3": {
      "type": "Yfilerename",
      "commitMessage": "Refactor package structure for web\n\nThe web related code is now under org.springframework.web.reactive.\nThis is parallel to org.springframework.web (the top-level package of\nspring-webmvc).\n",
      "commitDate": "2015/11/14 上午6:49",
      "commitName": "81867fa4237643ca3eae24a8f085bc4b5f9443b3",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2015/11/14 上午6:23",
      "commitNameOld": "54ce20a5e04275835b40f2cd1453db778264191e",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/web/reactive/server/servlet/HttpHandlerServlet.java",
      "functionStartLine": 56,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java",
        "newPath": "spring-web-reactive/src/main/java/org/springframework/web/reactive/server/servlet/HttpHandlerServlet.java"
      }
    },
    "c0dff3d2bb2277429f4e387d18deb75b0797a375": {
      "type": "Ybodychange",
      "commitMessage": "Comply with Spring Framework code style\n\nhttps://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style\n",
      "commitDate": "2015/10/31 上午5:22",
      "commitName": "c0dff3d2bb2277429f4e387d18deb75b0797a375",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2015/10/30 下午4:24",
      "commitNameOld": "6006fa6ec2c811dca36ec49a884c6028eb9b81a7",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java",
      "functionStartLine": 56,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n-    AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n-    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n+    AsyncContextSynchronizer synchronizer \u003d new AsyncContextSynchronizer(context);\n+    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(synchronizer, BUFFER_SIZE);\n     request.getInputStream().setReadListener(requestPublisher);\n     ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n-    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n+    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(synchronizer);\n     response.getOutputStream().setWriteListener(responseSubscriber);\n     ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer, httpResponse);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(synchronizer, httpResponse);\n     this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "202825554c022e4262fe3bd20a34faf01ab9d620": {
      "type": "Ybodychange",
      "commitMessage": "Add basic support for @RequestMapping\n\nJust enough for a test with an @ResponseBody method that accepts an\n@RequestParam String arg and returning Publisher\u003cString\u003e or String.\n\nSee RequestMappingIntegrationTests.\n",
      "commitDate": "2015/8/26 上午12:45",
      "commitName": "202825554c022e4262fe3bd20a34faf01ab9d620",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2015/8/25 上午5:33",
      "commitNameOld": "bc7a5acd509f1d66039bac742a71d9b1b8474127",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer, httpResponse);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java",
      "functionStartLine": 56,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n     AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n     RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n     request.getInputStream().setReadListener(requestPublisher);\n     ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n     ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n     response.getOutputStream().setWriteListener(responseSubscriber);\n     ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n-    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer, httpResponse);\n     this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f020a1add19b3761f2fd8e01fe5e96ce1b8d45c7": {
      "type": "Yfilerename",
      "commitMessage": "Refactor package structure\n\nIntroduce http and dispatch packages under org.springframework.web to\nseparate HTTP-specific adapter code from higher level web framework\ncode. Move classes into their respective locations.\n",
      "commitDate": "2015/8/25 上午2:41",
      "commitName": "f020a1add19b3761f2fd8e01fe5e96ce1b8d45c7",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2015/8/25 上午2:03",
      "commitNameOld": "56d69404858d2170e2e177ce9a3fd453b70f2d67",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java",
      "functionStartLine": 55,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java",
        "newPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/http/servlet/HttpHandlerServlet.java"
      }
    },
    "2cb32a0fd69c528d55d3d53ae98bf886dcb4a5f9": {
      "type": "Ybodychange",
      "commitMessage": "Add ServerHttpRequest \u0026 ServerHttpResponse\n\nThis commit introduces HTTP request and response abstractions along\nwith Servlet-based implementations similar to the ones in the http\npackage of spring-web but using Reactive Streams.\n\nIn turn HttpHandler now accepts the request and response types and\nreturns Publisher\u003cVoid\u003e that reflects the end of handling.\n\nThe write method on the response also returns Publisher\u003cVoid\u003e allowing\ndeferred writing. At the moment however the underlying Servlet 3.1\nsupport only supports a single publisher after which the connection\nis closed.\n\nOnly simple byte[] is supported for reading and writing.\n",
      "commitDate": "2015/8/12 上午4:09",
      "commitName": "2cb32a0fd69c528d55d3d53ae98bf886dcb4a5f9",
      "commitAuthor": "Rossen Stoyanchev",
      "commitDateOld": "2015/8/8 下午3:57",
      "commitNameOld": "e770b7de419df2d24d93711fe413d9d42e55f8e1",
      "commitAuthorOld": "Rossen Stoyanchev",
      "daysBetweenCommits": 3.51,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer);\n    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java",
      "functionStartLine": 55,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,13 @@\n @Override\n protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n     AsyncContext context \u003d request.startAsync();\n-    final AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n+    AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n     RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n     request.getInputStream().setReadListener(requestPublisher);\n+    ServletServerHttpRequest httpRequest \u003d new ServletServerHttpRequest(request, requestPublisher);\n     ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n     response.getOutputStream().setWriteListener(responseSubscriber);\n-    Publisher\u003cbyte[]\u003e responsePublisher \u003d this.handler.handle(requestPublisher);\n-    responsePublisher.subscribe(responseSubscriber);\n+    ServletServerHttpResponse httpResponse \u003d new ServletServerHttpResponse(response, responseSubscriber);\n+    HandlerResultSubscriber resultSubscriber \u003d new HandlerResultSubscriber(contextSynchronizer);\n+    this.handler.handle(httpRequest, httpResponse).subscribe(resultSubscriber);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "74a29ac146280a399d88680d187c8dbeb2b85328": {
      "type": "Yfilerename",
      "commitMessage": "Renamed \u0027rx\u0027 package to \u0027reactive\u0027\n",
      "commitDate": "2015/7/9 下午7:42",
      "commitName": "74a29ac146280a399d88680d187c8dbeb2b85328",
      "commitAuthor": "Arjen Poutsma",
      "commitDateOld": "2015/7/7 下午6:53",
      "commitNameOld": "f518d76a771def7289ac4f85ddc66812f428a16f",
      "commitAuthorOld": "Arjen Poutsma",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    final AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    Publisher\u003cbyte[]\u003e responsePublisher \u003d this.handler.handle(requestPublisher);\n    responsePublisher.subscribe(responseSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java",
      "functionStartLine": 46,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-web-reactive/src/main/java/org/springframework/rx/web/servlet/HttpHandlerServlet.java",
        "newPath": "spring-web-reactive/src/main/java/org/springframework/reactive/web/servlet/HttpHandlerServlet.java"
      }
    },
    "f518d76a771def7289ac4f85ddc66812f428a16f": {
      "type": "Yintroduced",
      "commitMessage": "Working version of Servlet 3.1 \u003c-\u003e RS bridge.\n",
      "commitDate": "2015/7/7 下午6:53",
      "commitName": "f518d76a771def7289ac4f85ddc66812f428a16f",
      "commitAuthor": "Arjen Poutsma",
      "diff": "@@ -0,0 +1,11 @@\n+@Override\n+protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+    AsyncContext context \u003d request.startAsync();\n+    final AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n+    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n+    request.getInputStream().setReadListener(requestPublisher);\n+    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n+    response.getOutputStream().setWriteListener(responseSubscriber);\n+    Publisher\u003cbyte[]\u003e responsePublisher \u003d this.handler.handle(requestPublisher);\n+    responsePublisher.subscribe(responseSubscriber);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    AsyncContext context \u003d request.startAsync();\n    final AsyncContextSynchronizer contextSynchronizer \u003d new AsyncContextSynchronizer(context);\n    RequestBodyPublisher requestPublisher \u003d new RequestBodyPublisher(contextSynchronizer, BUFFER_SIZE);\n    request.getInputStream().setReadListener(requestPublisher);\n    ResponseBodySubscriber responseSubscriber \u003d new ResponseBodySubscriber(contextSynchronizer);\n    response.getOutputStream().setWriteListener(responseSubscriber);\n    Publisher\u003cbyte[]\u003e responsePublisher \u003d this.handler.handle(requestPublisher);\n    responsePublisher.subscribe(responseSubscriber);\n}",
      "path": "spring-web-reactive/src/main/java/org/springframework/rx/web/servlet/HttpHandlerServlet.java",
      "functionStartLine": 44,
      "functionName": "service",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}