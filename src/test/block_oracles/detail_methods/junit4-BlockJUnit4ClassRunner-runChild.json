{
  "origin": "codeshovel",
  "repositoryName": "junit4",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit4/.git",
  "startCommitName": "02c328028b4d32c15bbf0becc9838e54ecbafcbf",
  "sourceFileName": "BlockJUnit4ClassRunner.java",
  "functionName": "runChild",
  "functionId": "runChild___method-FrameworkMethod(modifiers-final)__notifier-RunNotifier",
  "sourceFilePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 92,
  "functionEndLine": 105,
  "numCommitsSeen": 184,
  "timeTaken": 1227,
  "changeHistory": [
    "3f736cf514b0421a82383db74188f6c0e3dfef1a",
    "a90b496a6595856066504baf4f737fb853a6e45d",
    "5cdd702717c5ca7dd3002e95847232681c445127",
    "4f7ed2bdf1856b0582e9b982aa0ba594498c6b45",
    "bed58a573c373d57d64fa369f58b2a8f0dbee3d7",
    "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
    "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
    "ca6d91f41d566b21b643b013e843732e1315652f",
    "30a039854fd7f8cda135222054b247c158b91fa7",
    "1fcd990f60518c941a44bae2596392021614a20b",
    "c96215c5d025336d8ab1d7d2ab57daee20869cea",
    "8e3f361443ddf8bca21c3db661c75d374fe78dba",
    "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15",
    "078e45bd31a9920e00633ad6ce658e22529304f2",
    "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9",
    "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c",
    "8bed6c9278517d9fb13f274bc5a6ade358a39745",
    "24a5aad1f49b4decf946f1df701e354a18544132",
    "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
    "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
    "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
    "f0ef837a40922ac08c608661385abf71732975d3",
    "b333208ccfbef77c556a270bd4385586523dcafc",
    "44e7458b19d5cd1900a765a440c96e85b81d25fc",
    "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
    "57302f0df76fba83ba72a676bd660efeb5881af6",
    "43b0fe352d5bced0c341640d0c630d23f2022a7e",
    "79d696c81cb996e6a199b062c0ae1f53408d5ebd",
    "6acc164b4125da775cccd4035c1b99e9d404bacd",
    "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f",
    "5751178d6c4485afb11f4b14b9804dc954faa5ee",
    "3d7fee93ddc21a6e849c36d5ae58b37b3d189665",
    "88f0fe3ced24506ddf9791f7a088163f4e7b1f20",
    "40cc52cf5f5dc1dd1ee513410536bdc11422307d",
    "c73e37759ed5119900f1ddf3f50dac5bb3ae19be",
    "478f7f9217cf5da219a7ba298e3a87f405378194"
  ],
  "changeHistoryShort": {
    "3f736cf514b0421a82383db74188f6c0e3dfef1a": "Ybodychange",
    "a90b496a6595856066504baf4f737fb853a6e45d": "Ybodychange",
    "5cdd702717c5ca7dd3002e95847232681c445127": "Ybodychange",
    "4f7ed2bdf1856b0582e9b982aa0ba594498c6b45": "Ybodychange",
    "bed58a573c373d57d64fa369f58b2a8f0dbee3d7": "Ymultichange(Ybodychange,Yparametermetachange)",
    "86abf33f863fee1db3ba7dd8ee3e9910f105f57d": "Ymodifierchange",
    "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ca6d91f41d566b21b643b013e843732e1315652f": "Ybodychange",
    "30a039854fd7f8cda135222054b247c158b91fa7": "Ybodychange",
    "1fcd990f60518c941a44bae2596392021614a20b": "Ybodychange",
    "c96215c5d025336d8ab1d7d2ab57daee20869cea": "Ybodychange",
    "8e3f361443ddf8bca21c3db661c75d374fe78dba": "Ybodychange",
    "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15": "Yfilerename",
    "078e45bd31a9920e00633ad6ce658e22529304f2": "Ymovefromfile",
    "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9": "Yfilerename",
    "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c": "Yannotationchange",
    "8bed6c9278517d9fb13f274bc5a6ade358a39745": "Yparameterchange",
    "24a5aad1f49b4decf946f1df701e354a18544132": "Ymultichange(Yrename,Ybodychange)",
    "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2": "Ybodychange",
    "0dbe9eefa369da78ca67bf5487797a8de5b2d631": "Ybodychange",
    "0e1c92693e70e52ad9af23ee6180500c74fc9c95": "Ybodychange",
    "f0ef837a40922ac08c608661385abf71732975d3": "Ybodychange",
    "b333208ccfbef77c556a270bd4385586523dcafc": "Ybodychange",
    "44e7458b19d5cd1900a765a440c96e85b81d25fc": "Yrename",
    "576377b9ad44028dc84c2f8487cfe8dbccb8c252": "Ymultichange(Yparameterchange,Ybodychange)",
    "57302f0df76fba83ba72a676bd660efeb5881af6": "Ybodychange",
    "43b0fe352d5bced0c341640d0c630d23f2022a7e": "Ybodychange",
    "79d696c81cb996e6a199b062c0ae1f53408d5ebd": "Ybodychange",
    "6acc164b4125da775cccd4035c1b99e9d404bacd": "Ybodychange",
    "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f": "Yfilerename",
    "5751178d6c4485afb11f4b14b9804dc954faa5ee": "Ybodychange",
    "3d7fee93ddc21a6e849c36d5ae58b37b3d189665": "Ybodychange",
    "88f0fe3ced24506ddf9791f7a088163f4e7b1f20": "Ybodychange",
    "40cc52cf5f5dc1dd1ee513410536bdc11422307d": "Yfilerename",
    "c73e37759ed5119900f1ddf3f50dac5bb3ae19be": "Ybodychange",
    "478f7f9217cf5da219a7ba298e3a87f405378194": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3f736cf514b0421a82383db74188f6c0e3dfef1a": {
      "type": "Ybodychange",
      "commitMessage": "Call methodBlock() after fireTestStarted() (#1463)\n\nFixes #1462\r\n",
      "commitDate": "2017/6/9 上午12:05",
      "commitName": "3f736cf514b0421a82383db74188f6c0e3dfef1a",
      "commitAuthor": "Alex Panchenko",
      "commitDateOld": "2017/5/26 上午12:19",
      "commitNameOld": "9d2fe4efd5db64f47f3f8d1e1e8b10634f99e95d",
      "commitAuthorOld": "Kevin Cooney",
      "daysBetweenCommits": 13.99,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    if (isIgnored(method)) {\n        notifier.fireTestIgnored(description);\n    } else {\n        Statement statement \u003d new Statement() {\n\n            @Override\n            public void evaluate() throws Throwable {\n                methodBlock(method).evaluate();\n            }\n        };\n        runLeaf(statement, description, notifier);\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 90,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,16 @@\n @Override\n protected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n     Description description \u003d describeChild(method);\n     if (isIgnored(method)) {\n         notifier.fireTestIgnored(description);\n     } else {\n-        Statement statement;\n-        try {\n-            statement \u003d methodBlock(method);\n-        } catch (Throwable ex) {\n-            statement \u003d new Fail(ex);\n-        }\n+        Statement statement \u003d new Statement() {\n+\n+            @Override\n+            public void evaluate() throws Throwable {\n+                methodBlock(method).evaluate();\n+            }\n+        };\n         runLeaf(statement, description, notifier);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a90b496a6595856066504baf4f737fb853a6e45d": {
      "type": "Ybodychange",
      "commitMessage": "Ensure exceptions from methodBlock() don\u0027t result in unrooted tests.\n\nThe introduction of the runLeaf() method in BlockJUnit4ClassRunner in\nJUnit 4.9 introduced a regression with regard to exception handling.\n\nSpecifically, the invocation of methodBlock() is no longer executed\nwithin a try-catch block as was the case in previous versions of JUnit.\n\nCustom modifications to methodBlock() or the methods it invokes may in\nfact throw exceptions. In such cases, exceptions thrown from\nmethodBlock() cause the current test execution to abort immediately. As\na result, the failing test method is unrooted in test reports, and\nsubsequent test methods are never invoked. Furthermore, RunListeners\nregistered with JUnit are not notified.\n\nThis commit addresses this issue by wrapping the invocation of\nmethodBlock() within a try-catch block. If an exception is not thrown,\nthe resulting Statement is passed to runLeaf(). If an exception is\nthrown, it is wrapped in a Fail statement which is passed to runLeaf().\n\nCloses #1066\nCloses #1082\n",
      "commitDate": "2015/3/2 上午12:54",
      "commitName": "a90b496a6595856066504baf4f737fb853a6e45d",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2015/1/26 上午3:37",
      "commitNameOld": "0f0152a8cd6dcbdb9f9cbb6ec5ca1cf2629dc12a",
      "commitAuthorOld": "Kevin Cooney",
      "daysBetweenCommits": 34.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    if (isIgnored(method)) {\n        notifier.fireTestIgnored(description);\n    } else {\n        Statement statement;\n        try {\n            statement \u003d methodBlock(method);\n        } catch (Throwable ex) {\n            statement \u003d new Fail(ex);\n        }\n        runLeaf(statement, description, notifier);\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 75,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,15 @@\n @Override\n protected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n     Description description \u003d describeChild(method);\n     if (isIgnored(method)) {\n         notifier.fireTestIgnored(description);\n     } else {\n-        runLeaf(methodBlock(method), description, notifier);\n+        Statement statement;\n+        try {\n+            statement \u003d methodBlock(method);\n+        } catch (Throwable ex) {\n+            statement \u003d new Fail(ex);\n+        }\n+        runLeaf(statement, description, notifier);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5cdd702717c5ca7dd3002e95847232681c445127": {
      "type": "Ybodychange",
      "commitMessage": "Moved isIgnored-check from FrameworkMethod to BlockJUnit4ClassRunner -\nthe method overrides an empty default implementation in ParentRunner.",
      "commitDate": "2013/10/24 上午5:16",
      "commitName": "5cdd702717c5ca7dd3002e95847232681c445127",
      "commitAuthor": "flpa",
      "commitDateOld": "2013/10/20 下午10:47",
      "commitNameOld": "4f7ed2bdf1856b0582e9b982aa0ba594498c6b45",
      "commitAuthorOld": "flpa",
      "daysBetweenCommits": 3.27,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    if (isIgnored(method)) {\n        notifier.fireTestIgnored(description);\n    } else {\n        runLeaf(methodBlock(method), description, notifier);\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 71,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n protected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n     Description description \u003d describeChild(method);\n-    if (method.isIgnored()) {\n+    if (isIgnored(method)) {\n         notifier.fireTestIgnored(description);\n     } else {\n         runLeaf(methodBlock(method), description, notifier);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4f7ed2bdf1856b0582e9b982aa0ba594498c6b45": {
      "type": "Ybodychange",
      "commitMessage": "simplified isIgnored check in Framework, using it in\nBlockJUnit4ClassRuner",
      "commitDate": "2013/10/20 下午10:47",
      "commitName": "4f7ed2bdf1856b0582e9b982aa0ba594498c6b45",
      "commitAuthor": "flpa",
      "commitDateOld": "2013/6/4 上午12:53",
      "commitNameOld": "238eaa7617d3e53a47ef00cd91fc43c1ed918113",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 138.91,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    if (method.isIgnored()) {\n        notifier.fireTestIgnored(description);\n    } else {\n        runLeaf(methodBlock(method), description, notifier);\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 70,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n protected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n     Description description \u003d describeChild(method);\n-    if (method.getAnnotation(Ignore.class) !\u003d null) {\n+    if (method.isIgnored()) {\n         notifier.fireTestIgnored(description);\n     } else {\n         runLeaf(methodBlock(method), description, notifier);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bed58a573c373d57d64fa369f58b2a8f0dbee3d7": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Add runLeaf() to ParentRunner.\nThis makes it easier to write a custom runner that supports\nMultipleFailureException and AssumptionViolatedException\nwithout depending on internal classes.\n",
      "commitDate": "2011/1/6 上午4:53",
      "commitName": "bed58a573c373d57d64fa369f58b2a8f0dbee3d7",
      "commitAuthor": "Kevin Cooney",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Add runLeaf() to ParentRunner.\nThis makes it easier to write a custom runner that supports\nMultipleFailureException and AssumptionViolatedException\nwithout depending on internal classes.\n",
          "commitDate": "2011/1/6 上午4:53",
          "commitName": "bed58a573c373d57d64fa369f58b2a8f0dbee3d7",
          "commitAuthor": "Kevin Cooney",
          "commitDateOld": "2011/1/5 下午1:09",
          "commitNameOld": "8ff0b44e3fb0c1c56a1dc6290c3b6828a5a8f9bf",
          "commitAuthorOld": "Kevin Cooney",
          "daysBetweenCommits": 0.66,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        notifier.fireTestIgnored(description);\n    } else {\n        runLeaf(methodBlock(method), description, notifier);\n    }\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 64,
          "functionName": "runChild",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n @Override\n-protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n-    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n+protected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n+    Description description \u003d describeChild(method);\n     if (method.getAnnotation(Ignore.class) !\u003d null) {\n-        runIgnored(eachNotifier);\n+        notifier.fireTestIgnored(description);\n     } else {\n-        runNotIgnored(method, eachNotifier);\n+        runLeaf(methodBlock(method), description, notifier);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Add runLeaf() to ParentRunner.\nThis makes it easier to write a custom runner that supports\nMultipleFailureException and AssumptionViolatedException\nwithout depending on internal classes.\n",
          "commitDate": "2011/1/6 上午4:53",
          "commitName": "bed58a573c373d57d64fa369f58b2a8f0dbee3d7",
          "commitAuthor": "Kevin Cooney",
          "commitDateOld": "2011/1/5 下午1:09",
          "commitNameOld": "8ff0b44e3fb0c1c56a1dc6290c3b6828a5a8f9bf",
          "commitAuthorOld": "Kevin Cooney",
          "daysBetweenCommits": 0.66,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        notifier.fireTestIgnored(description);\n    } else {\n        runLeaf(methodBlock(method), description, notifier);\n    }\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 64,
          "functionName": "runChild",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n @Override\n-protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n-    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n+protected void runChild(final FrameworkMethod method, RunNotifier notifier) {\n+    Description description \u003d describeChild(method);\n     if (method.getAnnotation(Ignore.class) !\u003d null) {\n-        runIgnored(eachNotifier);\n+        notifier.fireTestIgnored(description);\n     } else {\n-        runNotIgnored(method, eachNotifier);\n+        runLeaf(methodBlock(method), description, notifier);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-FrameworkMethod, notifier-RunNotifier]",
            "newValue": "[method-FrameworkMethod(modifiers-final), notifier-RunNotifier]"
          }
        }
      ]
    },
    "86abf33f863fee1db3ba7dd8ee3e9910f105f57d": {
      "type": "Ymodifierchange",
      "commitMessage": "test for multi-level category application\n",
      "commitDate": "2010/1/22 上午5:30",
      "commitName": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
      "commitAuthor": "David Saff",
      "commitDateOld": "2009/12/18 下午10:05",
      "commitNameOld": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 34.31,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        runIgnored(eachNotifier);\n    } else {\n        runNotIgnored(method, eachNotifier);\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 67,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n @Override\n-public void runChild(FrameworkMethod method, RunNotifier notifier) {\n+protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n     if (method.getAnnotation(Ignore.class) !\u003d null) {\n         runIgnored(eachNotifier);\n     } else {\n         runNotIgnored(method, eachNotifier);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[protected]"
      }
    },
    "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Big refactor\n",
      "commitDate": "2009/12/18 下午10:05",
      "commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
      "commitAuthor": "David Saff",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Big refactor\n",
          "commitDate": "2009/12/18 下午10:05",
          "commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
          "commitAuthor": "David Saff",
          "commitDateOld": "2009/9/23 上午10:32",
          "commitNameOld": "a68ae0886c1c6274943e6f99d70816d162273d9c",
          "commitAuthorOld": "KentBeck",
          "daysBetweenCommits": 86.48,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        runIgnored(eachNotifier);\n    } else {\n        runNotIgnored(method, eachNotifier);\n    }\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 68,
          "functionName": "runChild",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,9 @@\n @Override\n-protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n+public void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n     if (method.getAnnotation(Ignore.class) !\u003d null) {\n-        eachNotifier.fireTestIgnored();\n-        return;\n-    }\n-    eachNotifier.fireTestStarted();\n-    try {\n-        methodBlock(method).evaluate();\n-    } catch (AssumptionViolatedException e) {\n-        eachNotifier.addFailedAssumption(e);\n-    } catch (Throwable e) {\n-        eachNotifier.addFailure(e);\n-    } finally {\n-        eachNotifier.fireTestFinished();\n+        runIgnored(eachNotifier);\n+    } else {\n+        runNotIgnored(method, eachNotifier);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Big refactor\n",
          "commitDate": "2009/12/18 下午10:05",
          "commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
          "commitAuthor": "David Saff",
          "commitDateOld": "2009/9/23 上午10:32",
          "commitNameOld": "a68ae0886c1c6274943e6f99d70816d162273d9c",
          "commitAuthorOld": "KentBeck",
          "daysBetweenCommits": 86.48,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        runIgnored(eachNotifier);\n    } else {\n        runNotIgnored(method, eachNotifier);\n    }\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 68,
          "functionName": "runChild",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,9 @@\n @Override\n-protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n+public void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n     if (method.getAnnotation(Ignore.class) !\u003d null) {\n-        eachNotifier.fireTestIgnored();\n-        return;\n-    }\n-    eachNotifier.fireTestStarted();\n-    try {\n-        methodBlock(method).evaluate();\n-    } catch (AssumptionViolatedException e) {\n-        eachNotifier.addFailedAssumption(e);\n-    } catch (Throwable e) {\n-        eachNotifier.addFailure(e);\n-    } finally {\n-        eachNotifier.fireTestFinished();\n+        runIgnored(eachNotifier);\n+    } else {\n+        runNotIgnored(method, eachNotifier);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ca6d91f41d566b21b643b013e843732e1315652f": {
      "type": "Ybodychange",
      "commitMessage": "Failing assumptions can be listened for.\n",
      "commitDate": "2008/7/31 下午10:57",
      "commitName": "ca6d91f41d566b21b643b013e843732e1315652f",
      "commitAuthor": "dsaff",
      "commitDateOld": "2008/7/31 下午10:20",
      "commitNameOld": "095d3f8df0708f98d41f5894a892388b6985c44f",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        eachNotifier.fireTestIgnored();\n        return;\n    }\n    eachNotifier.fireTestStarted();\n    try {\n        methodBlock(method).evaluate();\n    } catch (AssumptionViolatedException e) {\n        eachNotifier.addFailedAssumption(e);\n    } catch (Throwable e) {\n        eachNotifier.addFailure(e);\n    } finally {\n        eachNotifier.fireTestFinished();\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 64,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n @Override\n protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n     if (method.getAnnotation(Ignore.class) !\u003d null) {\n         eachNotifier.fireTestIgnored();\n         return;\n     }\n     eachNotifier.fireTestStarted();\n     try {\n         methodBlock(method).evaluate();\n     } catch (AssumptionViolatedException e) {\n+        eachNotifier.addFailedAssumption(e);\n     } catch (Throwable e) {\n         eachNotifier.addFailure(e);\n     } finally {\n         eachNotifier.fireTestFinished();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30a039854fd7f8cda135222054b247c158b91fa7": {
      "type": "Ybodychange",
      "commitMessage": "All javadoc added\n",
      "commitDate": "2008/7/31 上午4:28",
      "commitName": "30a039854fd7f8cda135222054b247c158b91fa7",
      "commitAuthor": "dsaff",
      "commitDateOld": "2008/7/31 上午3:23",
      "commitNameOld": "5d957024be0d1b181879d48b7915b3b8aad8f5d5",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.getAnnotation(Ignore.class) !\u003d null) {\n        eachNotifier.fireTestIgnored();\n        return;\n    }\n    eachNotifier.fireTestStarted();\n    try {\n        methodBlock(method).evaluate();\n    } catch (AssumptionViolatedException e) {\n    } catch (Throwable e) {\n        eachNotifier.addFailure(e);\n    } finally {\n        eachNotifier.fireTestFinished();\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 65,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n @Override\n protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n-    if (method.isIgnored()) {\n+    if (method.getAnnotation(Ignore.class) !\u003d null) {\n         eachNotifier.fireTestIgnored();\n         return;\n     }\n     eachNotifier.fireTestStarted();\n     try {\n         methodBlock(method).evaluate();\n     } catch (AssumptionViolatedException e) {\n     } catch (Throwable e) {\n         eachNotifier.addFailure(e);\n     } finally {\n         eachNotifier.fireTestFinished();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1fcd990f60518c941a44bae2596392021614a20b": {
      "type": "Ybodychange",
      "commitMessage": "Javadoc and various cleanup\n",
      "commitDate": "2008/7/30 上午2:55",
      "commitName": "1fcd990f60518c941a44bae2596392021614a20b",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/7/30 上午1:12",
      "commitNameOld": "979e8abbe974e8847668f5887403da78a6165ebc",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.isIgnored()) {\n        eachNotifier.fireTestIgnored();\n        return;\n    }\n    eachNotifier.fireTestStarted();\n    try {\n        methodBlock(method).evaluate();\n    } catch (AssumptionViolatedException e) {\n    } catch (Throwable e) {\n        eachNotifier.addFailure(e);\n    } finally {\n        eachNotifier.fireTestFinished();\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 63,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n @Override\n protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n     if (method.isIgnored()) {\n         eachNotifier.fireTestIgnored();\n         return;\n     }\n     eachNotifier.fireTestStarted();\n     try {\n-        childBlock(method).evaluate();\n+        methodBlock(method).evaluate();\n     } catch (AssumptionViolatedException e) {\n     } catch (Throwable e) {\n         eachNotifier.addFailure(e);\n     } finally {\n         eachNotifier.fireTestFinished();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c96215c5d025336d8ab1d7d2ab57daee20869cea": {
      "type": "Ybodychange",
      "commitMessage": "Preparing for 4.5 release. Published InitializationError and FrameworkMethod. Reverted failed assumptions so they work as in 4.4, counted as passing (later we\u0027ll give them their own category or typed events with callback).\n",
      "commitDate": "2008/7/23 上午1:43",
      "commitName": "c96215c5d025336d8ab1d7d2ab57daee20869cea",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/7/16 上午8:21",
      "commitNameOld": "8e3f361443ddf8bca21c3db661c75d374fe78dba",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 6.72,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.isIgnored()) {\n        eachNotifier.fireTestIgnored();\n        return;\n    }\n    eachNotifier.fireTestStarted();\n    try {\n        childBlock(method).evaluate();\n    } catch (AssumptionViolatedException e) {\n    } catch (Throwable e) {\n        eachNotifier.addFailure(e);\n    } finally {\n        eachNotifier.fireTestFinished();\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 80,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,17 @@\n @Override\n protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n     if (method.isIgnored()) {\n         eachNotifier.fireTestIgnored();\n         return;\n     }\n     eachNotifier.fireTestStarted();\n     try {\n         childBlock(method).evaluate();\n     } catch (AssumptionViolatedException e) {\n-        eachNotifier.fireTestIgnored();\n     } catch (Throwable e) {\n         eachNotifier.addFailure(e);\n     } finally {\n         eachNotifier.fireTestFinished();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8e3f361443ddf8bca21c3db661c75d374fe78dba": {
      "type": "Ybodychange",
      "commitMessage": "Refactored to eliminate Notifier and its subclasses. You don\u0027t pull your weight around here and you\u0027re history.\n",
      "commitDate": "2008/7/16 上午8:21",
      "commitName": "8e3f361443ddf8bca21c3db661c75d374fe78dba",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/7/11 上午4:48",
      "commitNameOld": "29f117914afa33c2538479c785f349daa787bf60",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 5.15,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n    if (method.isIgnored()) {\n        eachNotifier.fireTestIgnored();\n        return;\n    }\n    eachNotifier.fireTestStarted();\n    try {\n        childBlock(method).evaluate();\n    } catch (AssumptionViolatedException e) {\n        eachNotifier.fireTestIgnored();\n    } catch (Throwable e) {\n        eachNotifier.addFailure(e);\n    } finally {\n        eachNotifier.fireTestFinished();\n    }\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 82,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,18 @@\n @Override\n protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n-    Description description \u003d describeChild(method);\n-    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n-    notifying(method, childBlock(method)).run(eachNotifier);\n+    EachTestNotifier eachNotifier \u003d makeNotifier(method, notifier);\n+    if (method.isIgnored()) {\n+        eachNotifier.fireTestIgnored();\n+        return;\n+    }\n+    eachNotifier.fireTestStarted();\n+    try {\n+        childBlock(method).evaluate();\n+    } catch (AssumptionViolatedException e) {\n+        eachNotifier.fireTestIgnored();\n+    } catch (Throwable e) {\n+        eachNotifier.addFailure(e);\n+    } finally {\n+        eachNotifier.fireTestFinished();\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15": {
      "type": "Yfilerename",
      "commitMessage": "Reorganizing visibility to publish BlockJUnit4ClassRunner and friends. Not sure if this is done. Check with Structure 101?\n",
      "commitDate": "2008/7/2 上午2:29",
      "commitName": "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/7/2 上午1:01",
      "commitNameOld": "eb2750d861ac1ecf2dbd0425e457fe833468a169",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 87,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
        "newPath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java"
      }
    },
    "078e45bd31a9920e00633ad6ce658e22529304f2": {
      "type": "Ymovefromfile",
      "commitMessage": "Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner.\n",
      "commitDate": "2008/6/17 上午1:52",
      "commitName": "078e45bd31a9920e00633ad6ce658e22529304f2",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/6/11 上午3:50",
      "commitNameOld": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 5.92,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
      "path": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 88,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java",
        "newPath": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
        "oldMethodName": "runChild",
        "newMethodName": "runChild"
      }
    },
    "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9": {
      "type": "Yfilerename",
      "commitMessage": "- Moved src directory into two directories, similar to a maven layout, to simplify build, and make it easier for maven-familiar developers to find the tests.\n\n- Improved display of ignored tests, so that build results are hopefully not confusing\n",
      "commitDate": "2007/12/7 下午11:43",
      "commitName": "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/12/5 下午11:47",
      "commitNameOld": "804f76fdf00c9f9fcbef58f03bbeda1f80b3ad8e",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
      "path": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 56,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
        "newPath": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java"
      }
    },
    "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c": {
      "type": "Yannotationchange",
      "commitMessage": "Pull classBlock up into ParentRunner\n",
      "commitDate": "2007/11/27 上午1:07",
      "commitName": "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/11/15 上午2:21",
      "commitNameOld": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 11.95,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 57,
      "functionName": "runChild",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,5 +1,6 @@\n+@Override\n protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     Description description \u003d describeChild(method);\n     EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n     notifying(method, childBlock(method)).run(eachNotifier);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "8bed6c9278517d9fb13f274bc5a6ade358a39745": {
      "type": "Yparameterchange",
      "commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
      "commitDate": "2007/11/15 上午2:21",
      "commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/31 下午9:57",
      "commitNameOld": "24a5aad1f49b4decf946f1df701e354a18544132",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 14.18,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 67,
      "functionName": "runChild",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,5 +1,5 @@\n-protected void runChild(TestMethod method, RunNotifier notifier) {\n+protected void runChild(FrameworkMethod method, RunNotifier notifier) {\n     Description description \u003d describeChild(method);\n     EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n     notifying(method, childBlock(method)).run(eachNotifier);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[method-TestMethod, notifier-RunNotifier]",
        "newValue": "[method-FrameworkMethod, notifier-RunNotifier]"
      }
    },
    "24a5aad1f49b4decf946f1df701e354a18544132": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Progress on ParentRunner\n",
      "commitDate": "2007/10/31 下午9:57",
      "commitName": "24a5aad1f49b4decf946f1df701e354a18544132",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Progress on ParentRunner\n",
          "commitDate": "2007/10/31 下午9:57",
          "commitName": "24a5aad1f49b4decf946f1df701e354a18544132",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/13 上午3:12",
          "commitNameOld": "4e1018a940699a38673b1861977110e6b558afb1",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 18.78,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void runChild(TestMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 66,
          "functionName": "runChild",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,5 +1,5 @@\n-protected void runMethod(TestMethod method, RunNotifier notifier) {\n-    Description description \u003d methodDescription(method);\n+protected void runChild(TestMethod method, RunNotifier notifier) {\n+    Description description \u003d describeChild(method);\n     EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n-    notifying(method, chain(method)).run(eachNotifier);\n+    notifying(method, childBlock(method)).run(eachNotifier);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "runMethod",
            "newValue": "runChild"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Progress on ParentRunner\n",
          "commitDate": "2007/10/31 下午9:57",
          "commitName": "24a5aad1f49b4decf946f1df701e354a18544132",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/13 上午3:12",
          "commitNameOld": "4e1018a940699a38673b1861977110e6b558afb1",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 18.78,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void runChild(TestMethod method, RunNotifier notifier) {\n    Description description \u003d describeChild(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, childBlock(method)).run(eachNotifier);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 66,
          "functionName": "runChild",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,5 +1,5 @@\n-protected void runMethod(TestMethod method, RunNotifier notifier) {\n-    Description description \u003d methodDescription(method);\n+protected void runChild(TestMethod method, RunNotifier notifier) {\n+    Description description \u003d describeChild(method);\n     EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n-    notifying(method, chain(method)).run(eachNotifier);\n+    notifying(method, childBlock(method)).run(eachNotifier);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2": {
      "type": "Ybodychange",
      "commitMessage": "Theory classes can take constructor parameters\n",
      "commitDate": "2007/10/13 上午1:27",
      "commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/13 上午12:58",
      "commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n    notifying(method, chain(method)).run(eachNotifier);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 74,
      "functionName": "runMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,5 @@\n protected void runMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n-    Object test;\n-    try {\n-        test \u003d new ReflectiveCallable() {\n-\n-            @Override\n-            protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n-            }\n-        }.run();\n-    } catch (Throwable e) {\n-        notifier.testAborted(description, e);\n-        return;\n-    }\n-    EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n-    run(roadie, method, test);\n+    EachTestNotifier eachNotifier \u003d new EachTestNotifier(notifier, description);\n+    notifying(method, chain(method)).run(eachNotifier);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0dbe9eefa369da78ca67bf5487797a8de5b2d631": {
      "type": "Ybodychange",
      "commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
      "commitDate": "2007/10/12 下午10:49",
      "commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/11 上午1:15",
      "commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n    run(roadie, method, test);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 74,
      "functionName": "runMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,5 +1,18 @@\n protected void runMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        notifier.testAborted(description, e);\n+        return;\n+    }\n     EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n-    notifying(method, chain(method), roadie).run(roadie);\n+    run(roadie, method, test);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e1c92693e70e52ad9af23ee6180500c74fc9c95": {
      "type": "Ybodychange",
      "commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
      "commitDate": "2007/10/11 上午1:15",
      "commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/10 下午11:57",
      "commitNameOld": "f0ef837a40922ac08c608661385abf71732975d3",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n    notifying(method, chain(method), roadie).run(roadie);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 72,
      "functionName": "runMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,5 @@\n protected void runMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n-    Object test;\n-    try {\n-        test \u003d new ReflectiveCallable() {\n-\n-            @Override\n-            protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n-            }\n-        }.run();\n-    } catch (Throwable e) {\n-        notifier.testAborted(description, e);\n-        return;\n-    }\n     EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n-    chain(method, test, roadie).run(roadie);\n+    notifying(method, chain(method), roadie).run(roadie);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0ef837a40922ac08c608661385abf71732975d3": {
      "type": "Ybodychange",
      "commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
      "commitDate": "2007/10/10 下午11:57",
      "commitName": "f0ef837a40922ac08c608661385abf71732975d3",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/10 上午9:57",
      "commitNameOld": "a4c68872a91681139d404825c2bb04bd5ba804dd",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n    chain(method, test, roadie).run(roadie);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 71,
      "functionName": "runMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n protected void runMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n     EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n-    run(roadie, method, test);\n+    chain(method, test, roadie).run(roadie);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b333208ccfbef77c556a270bd4385586523dcafc": {
      "type": "Ybodychange",
      "commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
      "commitDate": "2007/10/10 上午2:20",
      "commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/10 上午12:25",
      "commitNameOld": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n    run(roadie, method, test);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 72,
      "functionName": "runMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n protected void runMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n-    run(new Roadie(notifier, description, test), method);\n+    EachTestNotifier roadie \u003d new EachTestNotifier(notifier, description);\n+    run(roadie, method, test);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "44e7458b19d5cd1900a765a440c96e85b81d25fc": {
      "type": "Yrename",
      "commitMessage": "- Renamed link classes.\n  Absolute actions are verbs: IgnoreTest, Invoke.\n  ActionModifiers are modifying phrases: ExpectingException, WithTimeout, etc.\n\n- Moved isShadowedBy(List) to TestMethod\n",
      "commitDate": "2007/10/9 上午5:07",
      "commitName": "44e7458b19d5cd1900a765a440c96e85b81d25fc",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/9 上午3:40",
      "commitNameOld": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void runMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    run(new Roadie(notifier, description, test), method);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 72,
      "functionName": "runMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n-protected void invokeTestMethod(TestMethod method, RunNotifier notifier) {\n+protected void runMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n     run(new Roadie(notifier, description, test), method);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "invokeTestMethod",
        "newValue": "runMethod"
      }
    },
    "576377b9ad44028dc84c2f8487cfe8dbccb8c252": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
      "commitDate": "2007/10/9 上午3:40",
      "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
          "commitDate": "2007/10/9 上午3:40",
          "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/6 上午4:47",
          "commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    run(new Roadie(notifier, description, test), method);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 97,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,17 @@\n-protected void invokeTestMethod(Method method, RunNotifier notifier) {\n+protected void invokeTestMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n-        test \u003d createTest();\n-    } catch (InvocationTargetException e) {\n-        notifier.testAborted(description, e.getCause());\n-        return;\n-    } catch (Exception e) {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n-    JUnit4MethodRunner testMethod \u003d wrapMethod(method);\n-    testMethod.run(new Roadie(notifier, description, test));\n+    run(new Roadie(notifier, description, test), method);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-Method, notifier-RunNotifier]",
            "newValue": "[method-TestMethod, notifier-RunNotifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
          "commitDate": "2007/10/9 上午3:40",
          "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/6 上午4:47",
          "commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(TestMethod method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    run(new Roadie(notifier, description, test), method);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 97,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,17 @@\n-protected void invokeTestMethod(Method method, RunNotifier notifier) {\n+protected void invokeTestMethod(TestMethod method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n-        test \u003d createTest();\n-    } catch (InvocationTargetException e) {\n-        notifier.testAborted(description, e.getCause());\n-        return;\n-    } catch (Exception e) {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n-    JUnit4MethodRunner testMethod \u003d wrapMethod(method);\n-    testMethod.run(new Roadie(notifier, description, test));\n+    run(new Roadie(notifier, description, test), method);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "57302f0df76fba83ba72a676bd660efeb5881af6": {
      "type": "Ybodychange",
      "commitMessage": "Further refinement--I got rid of the Link/Anchor distinction. The bits of functionality are all Links at the moment. I also took error reporting out of Timeout (Roadie.runAfters() reports multiple errors without engaging the Link). There still seem to be some loose ends to tie up--naming, duplication, getting rid of dependencies on the enclosing instance as part of making the Links top-level classes, repackaging.\n",
      "commitDate": "2007/10/6 上午4:47",
      "commitName": "57302f0df76fba83ba72a676bd660efeb5881af6",
      "commitAuthor": "kbeck",
      "commitDateOld": "2007/10/3 下午10:42",
      "commitNameOld": "43b0fe352d5bced0c341640d0c630d23f2022a7e",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        notifier.testAborted(description, e.getCause());\n        return;\n    } catch (Exception e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    JUnit4MethodRunner testMethod \u003d wrapMethod(method);\n    testMethod.run(new Roadie(notifier, description, test));\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 75,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "43b0fe352d5bced0c341640d0c630d23f2022a7e": {
      "type": "Ybodychange",
      "commitMessage": "Rename TestMethod -\u003e JUnit4MethodRunner\nRename methods in JUnit4MethodRunner to make run order clear\n",
      "commitDate": "2007/10/3 下午10:42",
      "commitName": "43b0fe352d5bced0c341640d0c630d23f2022a7e",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/7/21 上午5:00",
      "commitNameOld": "79d696c81cb996e6a199b062c0ae1f53408d5ebd",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 74.74,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        notifier.testAborted(description, e.getCause());\n        return;\n    } catch (Exception e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    JUnit4MethodRunner testMethod \u003d wrapMethod(method);\n    testMethod.run(new Roadie(notifier, description, test));\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 75,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n         test \u003d createTest();\n     } catch (InvocationTargetException e) {\n         notifier.testAborted(description, e.getCause());\n         return;\n     } catch (Exception e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n-    TestMethod testMethod \u003d wrapMethod(method);\n+    JUnit4MethodRunner testMethod \u003d wrapMethod(method);\n     testMethod.run(new Roadie(notifier, description, test));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "79d696c81cb996e6a199b062c0ae1f53408d5ebd": {
      "type": "Ybodychange",
      "commitMessage": "- `@Before` and `@After` methods are run before and after each set of attempted parameters\n  on a Theory\n\n- Refactoring removed duplication that used to exist in classes MethodRoadie and ClassRoadie\n",
      "commitDate": "2007/7/21 上午5:00",
      "commitName": "79d696c81cb996e6a199b062c0ae1f53408d5ebd",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/7/3 上午2:10",
      "commitNameOld": "6acc164b4125da775cccd4035c1b99e9d404bacd",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 18.12,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        notifier.testAborted(description, e.getCause());\n        return;\n    } catch (Exception e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    TestMethod testMethod \u003d wrapMethod(method);\n    testMethod.run(new Roadie(notifier, description, test));\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 75,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n     Description description \u003d methodDescription(method);\n     Object test;\n     try {\n         test \u003d createTest();\n     } catch (InvocationTargetException e) {\n         notifier.testAborted(description, e.getCause());\n         return;\n     } catch (Exception e) {\n         notifier.testAborted(description, e);\n         return;\n     }\n     TestMethod testMethod \u003d wrapMethod(method);\n-    new MethodRoadie(test, testMethod, notifier, description).run();\n+    testMethod.run(new Roadie(notifier, description, test));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6acc164b4125da775cccd4035c1b99e9d404bacd": {
      "type": "Ybodychange",
      "commitMessage": "- The hamcrest-core-1.1 library is now included in the JUnit distribution.  For more hamcrest matchers, see the hamcrest-library jar from http://code.google.com/p/hamcrest\n- The Popper Theory runner (http://popper.tigris.org) has been absorbed into the JUnit project, under the package name org.junit.experimental.theories\n- Several additional libraries used in the theories tests have been added in a new testlib directory\n\n- New \"assertThat\" statement to work with hamcrest matchers:\n\n// same as assertEquals(3, x)\nassertThat(x, is(3));\n\n// same as assertNull(y)\nassertThat(y, nullValue());\n\n- New feature: assumeThat.  A failed assumption will cause the test to pass, without further execution.  (The behavior of assumeThat may change in the future to allow richer reporting of tests that are skipped because of failed assumptions)\n\n// pass on any non-Windows system\n@Test public void getRootDrive() {\n  assumeThat(getOsString(), is(\"Windows\"));\n  getFile(\"C:\\\");\n  // ...\n}\n\n- Convenience assumption functions:\n\n// none of these are null\nassumeNotNull(a, b, c);\nassumeTrue(everythingOk());\n\ntry {\n  getDatabaseConnection();\n} catch (Exception e) {\n  assumeNoException(e);\n}\n\n- Documentation fixed for many assertEquals array methods\n\n- Two bugs in numeric equality fixed:\n\n1718905: assertEquals does not compare float correctly\n1715326: assertEquals does not compare java.math.BigDecimal properly\n\n- The protocol for overriding JUnit4ClassRunner has changed again.  Please see the source for details.\n\n- Extenders can now extend TestMethod to describe the behavior of running methods that do not have a @Test annotation.\n\n- Adding Annotations to Description caused a binary compatibility problem with clients compiled on previous JUnit versions.  This has been fixed.\n",
      "commitDate": "2007/7/3 上午2:10",
      "commitName": "6acc164b4125da775cccd4035c1b99e9d404bacd",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/4/27 上午3:56",
      "commitNameOld": "dabf9f919413ef7f86c95140502792bcaa2b842a",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 66.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Description description \u003d methodDescription(method);\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        notifier.testAborted(description, e.getCause());\n        return;\n    } catch (Exception e) {\n        notifier.testAborted(description, e);\n        return;\n    }\n    TestMethod testMethod \u003d wrapMethod(method);\n    new MethodRoadie(test, testMethod, notifier, description).run();\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 75,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,15 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n+    Description description \u003d methodDescription(method);\n     Object test;\n     try {\n         test \u003d createTest();\n     } catch (InvocationTargetException e) {\n-        notifier.testAborted(methodDescription(method), e.getCause());\n+        notifier.testAborted(description, e.getCause());\n         return;\n     } catch (Exception e) {\n-        notifier.testAborted(methodDescription(method), e);\n+        notifier.testAborted(description, e);\n         return;\n     }\n-    createMethodRunner(test, method, notifier).run();\n+    TestMethod testMethod \u003d wrapMethod(method);\n+    new MethodRoadie(test, testMethod, notifier, description).run();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f": {
      "type": "Yfilerename",
      "commitMessage": "Runner rearchitecting to begin 4.4 development\n",
      "commitDate": "2007/3/20 下午10:43",
      "commitName": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/3/20 下午10:12",
      "commitNameOld": "db89759c22060a89f6750e2e92ce93072eace561",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        notifier.testAborted(methodDescription(method), e.getCause());\n        return;\n    } catch (Exception e) {\n        notifier.testAborted(methodDescription(method), e);\n        return;\n    }\n    createMethodRunner(test, method, notifier).run();\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 66,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/org/junit/internal/runners/TestClassMethodsRunner.java",
        "newPath": "src/org/junit/internal/runners/JUnit4ClassRunner.java"
      }
    },
    "5751178d6c4485afb11f4b14b9804dc954faa5ee": {
      "type": "Ybodychange",
      "commitMessage": "Moved duplicated code to RunNotifier.testAborted()\n",
      "commitDate": "2007/3/3 上午12:19",
      "commitName": "5751178d6c4485afb11f4b14b9804dc954faa5ee",
      "commitAuthor": "kbeck",
      "commitDateOld": "2007/1/25 上午12:32",
      "commitNameOld": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 36.99,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        notifier.testAborted(methodDescription(method), e.getCause());\n        return;\n    } catch (Exception e) {\n        notifier.testAborted(methodDescription(method), e);\n        return;\n    }\n    createMethodRunner(test, method, notifier).run();\n}",
      "path": "src/org/junit/internal/runners/TestClassMethodsRunner.java",
      "functionStartLine": 55,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n     Object test;\n     try {\n         test \u003d createTest();\n     } catch (InvocationTargetException e) {\n-        testAborted(notifier, methodDescription(method), e.getCause());\n+        notifier.testAborted(methodDescription(method), e.getCause());\n         return;\n     } catch (Exception e) {\n-        testAborted(notifier, methodDescription(method), e);\n+        notifier.testAborted(methodDescription(method), e);\n         return;\n     }\n     createMethodRunner(test, method, notifier).run();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d7fee93ddc21a6e849c36d5ae58b37b3d189665": {
      "type": "Ybodychange",
      "commitMessage": "Can @Ignore classes\nassertArrayEquals added\n",
      "commitDate": "2007/1/25 上午12:32",
      "commitName": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665",
      "commitAuthor": "dsaff",
      "commitDateOld": "2006/12/28 上午6:27",
      "commitNameOld": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 27.75,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        testAborted(notifier, methodDescription(method), e.getCause());\n        return;\n    } catch (Exception e) {\n        testAborted(notifier, methodDescription(method), e);\n        return;\n    }\n    createMethodRunner(test, method, notifier).run();\n}",
      "path": "src/org/junit/internal/runners/TestClassMethodsRunner.java",
      "functionStartLine": 64,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,13 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n     Object test;\n     try {\n         test \u003d createTest();\n     } catch (InvocationTargetException e) {\n-        testAborted(notifier, method, e.getCause());\n+        testAborted(notifier, methodDescription(method), e.getCause());\n         return;\n-    } catch (Throwable e) {\n-        testAborted(notifier, method, e);\n-        return;\n-    }\n-    TestMethod testMethod \u003d new TestMethod(test, method, methodDescription(method));\n-    try {\n-        MethodRunner runner \u003d testMethod.findCustomRunner(this);\n-        if (runner \u003d\u003d null)\n-            createMethodRunner(test, method, notifier).run();\n-        else {\n-            runner.run(testMethod, notifier);\n-        }\n     } catch (Exception e) {\n-        Throwable exception \u003d new RuntimeException(\"Exception creating custom method runner\", e);\n-        testAborted(notifier, method, exception);\n+        testAborted(notifier, methodDescription(method), e);\n+        return;\n     }\n+    createMethodRunner(test, method, notifier).run();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "88f0fe3ced24506ddf9791f7a088163f4e7b1f20": {
      "type": "Ybodychange",
      "commitMessage": "Another potential enhancement.  RunMethodWith allows individual test methods to be run with different runners.\n",
      "commitDate": "2006/12/28 上午6:27",
      "commitName": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20",
      "commitAuthor": "dsaff",
      "commitDateOld": "2006/11/22 上午2:53",
      "commitNameOld": "40cc52cf5f5dc1dd1ee513410536bdc11422307d",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 36.15,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        testAborted(notifier, method, e.getCause());\n        return;\n    } catch (Throwable e) {\n        testAborted(notifier, method, e);\n        return;\n    }\n    TestMethod testMethod \u003d new TestMethod(test, method, methodDescription(method));\n    try {\n        MethodRunner runner \u003d testMethod.findCustomRunner(this);\n        if (runner \u003d\u003d null)\n            createMethodRunner(test, method, notifier).run();\n        else {\n            runner.run(testMethod, notifier);\n        }\n    } catch (Exception e) {\n        Throwable exception \u003d new RuntimeException(\"Exception creating custom method runner\", e);\n        testAborted(notifier, method, exception);\n    }\n}",
      "path": "src/org/junit/internal/runners/TestClassMethodsRunner.java",
      "functionStartLine": 69,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,24 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n     Object test;\n     try {\n         test \u003d createTest();\n     } catch (InvocationTargetException e) {\n-        testAborted(notifier, methodDescription(method), e.getCause());\n+        testAborted(notifier, method, e.getCause());\n         return;\n-    } catch (Exception e) {\n-        testAborted(notifier, methodDescription(method), e);\n+    } catch (Throwable e) {\n+        testAborted(notifier, method, e);\n         return;\n     }\n-    createMethodRunner(test, method, notifier).run();\n+    TestMethod testMethod \u003d new TestMethod(test, method, methodDescription(method));\n+    try {\n+        MethodRunner runner \u003d testMethod.findCustomRunner(this);\n+        if (runner \u003d\u003d null)\n+            createMethodRunner(test, method, notifier).run();\n+        else {\n+            runner.run(testMethod, notifier);\n+        }\n+    } catch (Exception e) {\n+        Throwable exception \u003d new RuntimeException(\"Exception creating custom method runner\", e);\n+        testAborted(notifier, method, exception);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40cc52cf5f5dc1dd1ee513410536bdc11422307d": {
      "type": "Yfilerename",
      "commitMessage": "Created a separate src folder for sources, and adjusted Eclipse classpath and build file accordingly\n",
      "commitDate": "2006/11/22 上午2:53",
      "commitName": "40cc52cf5f5dc1dd1ee513410536bdc11422307d",
      "commitAuthor": "dsaff",
      "commitDateOld": "2006/11/20 下午10:03",
      "commitNameOld": "64f4559a7b6099ff4f71281aab4029473ca9f469",
      "commitAuthorOld": "cmschmidt",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        testAborted(notifier, methodDescription(method), e.getCause());\n        return;\n    } catch (Exception e) {\n        testAborted(notifier, methodDescription(method), e);\n        return;\n    }\n    createMethodRunner(test, method, notifier).run();\n}",
      "path": "src/org/junit/internal/runners/TestClassMethodsRunner.java",
      "functionStartLine": 64,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "org/junit/internal/runners/TestClassMethodsRunner.java",
        "newPath": "src/org/junit/internal/runners/TestClassMethodsRunner.java"
      }
    },
    "c73e37759ed5119900f1ddf3f50dac5bb3ae19be": {
      "type": "Ybodychange",
      "commitMessage": "Fixed various defects.\n",
      "commitDate": "2006/8/4 上午6:03",
      "commitName": "c73e37759ed5119900f1ddf3f50dac5bb3ae19be",
      "commitAuthor": "kbeck",
      "commitDateOld": "2006/2/16 上午6:55",
      "commitNameOld": "478f7f9217cf5da219a7ba298e3a87f405378194",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 168.96,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (InvocationTargetException e) {\n        testAborted(notifier, methodDescription(method), e.getCause());\n        return;\n    } catch (Exception e) {\n        testAborted(notifier, methodDescription(method), e);\n        return;\n    }\n    createMethodRunner(test, method, notifier).run();\n}",
      "path": "org/junit/internal/runners/TestClassMethodsRunner.java",
      "functionStartLine": 64,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,13 @@\n protected void invokeTestMethod(Method method, RunNotifier notifier) {\n     Object test;\n     try {\n         test \u003d createTest();\n+    } catch (InvocationTargetException e) {\n+        testAborted(notifier, methodDescription(method), e.getCause());\n+        return;\n     } catch (Exception e) {\n-        testAborted(notifier, methodDescription(method));\n+        testAborted(notifier, methodDescription(method), e);\n         return;\n     }\n     createMethodRunner(test, method, notifier).run();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "478f7f9217cf5da219a7ba298e3a87f405378194": {
      "type": "Yintroduced",
      "commitMessage": "Merged with branch, Kent will make final changes and launch.\n",
      "commitDate": "2006/2/16 上午6:55",
      "commitName": "478f7f9217cf5da219a7ba298e3a87f405378194",
      "commitAuthor": "dsaff",
      "diff": "@@ -0,0 +1,10 @@\n+protected void invokeTestMethod(Method method, RunNotifier notifier) {\n+    Object test;\n+    try {\n+        test \u003d createTest();\n+    } catch (Exception e) {\n+        testAborted(notifier, methodDescription(method));\n+        return;\n+    }\n+    createMethodRunner(test, method, notifier).run();\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void invokeTestMethod(Method method, RunNotifier notifier) {\n    Object test;\n    try {\n        test \u003d createTest();\n    } catch (Exception e) {\n        testAborted(notifier, methodDescription(method));\n        return;\n    }\n    createMethodRunner(test, method, notifier).run();\n}",
      "path": "org/junit/internal/runners/TestClassMethodsRunner.java",
      "functionStartLine": 63,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}