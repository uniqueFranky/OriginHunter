{
  "origin": "codeshovel",
  "repositoryName": "jetty.project",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/jetty.project/.git",
  "startCommitName": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af",
  "sourceFileName": "HttpTransportOverHTTP2.java",
  "functionName": "send",
  "functionId": "send___info-MetaData.Response__isHeadRequest-boolean__content-ByteBuffer__lastContent-boolean__callback-Callback",
  "sourceFilePath": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 88,
  "functionEndLine": 186,
  "numCommitsSeen": 99,
  "timeTaken": 3878,
  "changeHistory": [
    "50c44f229786ada3706065772d3d8e876e10b9eb",
    "06454f64098e01b42347841211afed229d8798a0",
    "c285d6f8bbd839906e8c39d23db2f343be22c6ca",
    "6d485b2777b116ca4e09672ac8db8c4eadd46297",
    "705a68dfc41d512c813b7e40076462f5e9caf26d",
    "98c328fb23493025036665ac1ad82849e01c8f70",
    "65b11654c5635a0da71add52bb9e2f374ef451b1",
    "279e56d3366498c23a497656658d9e330a1aa866",
    "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
    "31e448ffd677d9360c4132a63b08fe53c860cf7c",
    "418a493337a8837172032e62a53587e478f21c86",
    "0acee9851f3853883960edc91ebca6dd3ddc3c51",
    "3e602117b477ea8ed33d2104e85a64184fcc604f",
    "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
    "17c03385d68fbf1baa4b8a8c8273a704df1928b6",
    "86b0d7733803040f0b0a40c5864ca776c8872ef6",
    "ad034f4d54aa4d6ce04c6fe3da8e8f48f63b21e5",
    "c1247ff6779c78917598a149d36e773702c490d5"
  ],
  "changeHistoryShort": {
    "50c44f229786ada3706065772d3d8e876e10b9eb": "Ybodychange",
    "06454f64098e01b42347841211afed229d8798a0": "Ybodychange",
    "c285d6f8bbd839906e8c39d23db2f343be22c6ca": "Ybodychange",
    "6d485b2777b116ca4e09672ac8db8c4eadd46297": "Ybodychange",
    "705a68dfc41d512c813b7e40076462f5e9caf26d": "Ybodychange",
    "98c328fb23493025036665ac1ad82849e01c8f70": "Ybodychange",
    "65b11654c5635a0da71add52bb9e2f374ef451b1": "Ybodychange",
    "279e56d3366498c23a497656658d9e330a1aa866": "Ybodychange",
    "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5": "Ymultichange(Yparameterchange,Ybodychange)",
    "31e448ffd677d9360c4132a63b08fe53c860cf7c": "Ymultichange(Yparameterchange,Ybodychange)",
    "418a493337a8837172032e62a53587e478f21c86": "Ybodychange",
    "0acee9851f3853883960edc91ebca6dd3ddc3c51": "Ybodychange",
    "3e602117b477ea8ed33d2104e85a64184fcc604f": "Ybodychange",
    "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8": "Ybodychange",
    "17c03385d68fbf1baa4b8a8c8273a704df1928b6": "Ybodychange",
    "86b0d7733803040f0b0a40c5864ca776c8872ef6": "Ybodychange",
    "ad034f4d54aa4d6ce04c6fe3da8e8f48f63b21e5": "Ybodychange",
    "c1247ff6779c78917598a149d36e773702c490d5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "50c44f229786ada3706065772d3d8e876e10b9eb": {
      "type": "Ybodychange",
      "commitMessage": "Fixes #2454 - Avoid sending empty DATA frame in case of HTTP/2 trailers.\n\nUpdated the logic to avoid sending an empty data frame\nwhen only sending the trailers in HttpTransportOverHTTP2.send().\n\nSigned-off-by: Simone Bordet \u003csimone.bordet@gmail.com\u003e\n",
      "commitDate": "2018/4/18 下午8:19",
      "commitName": "50c44f229786ada3706065772d3d8e876e10b9eb",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2018/4/7 下午6:25",
      "commitNameOld": "06454f64098e01b42347841211afed229d8798a0",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 11.08,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        metaData \u003d info;\n        int status \u003d info.getStatus();\n        boolean interimResponse \u003d status \u003d\u003d HttpStatus.CONTINUE_100 || status \u003d\u003d HttpStatus.PROCESSING_102;\n        if (interimResponse) {\n            if (hasContent) {\n                callback.failed(new IllegalStateException(\"Interim response cannot have content\"));\n            } else {\n                if (transportCallback.start(callback, false))\n                    sendHeadersFrame(info, false, transportCallback);\n            }\n        } else {\n            if (commit.compareAndSet(false, true)) {\n                if (hasContent) {\n                    Callback commitCallback \u003d new Callback.Nested(callback) {\n\n                        @Override\n                        public void succeeded() {\n                            if (lastContent) {\n                                Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                                if (transportCallback.start(new SendTrailers(getCallback(), trailers), false))\n                                    sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n                            } else {\n                                if (transportCallback.start(getCallback(), false))\n                                    sendDataFrame(content, false, false, transportCallback);\n                            }\n                        }\n                    };\n                    if (transportCallback.start(commitCallback, true))\n                        sendHeadersFrame(info, false, transportCallback);\n                } else {\n                    if (lastContent) {\n                        Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                        if (transportCallback.start(new SendTrailers(callback, trailers), true))\n                            sendHeadersFrame(info, trailers \u003d\u003d null, transportCallback);\n                    } else {\n                        if (transportCallback.start(callback, true))\n                            sendHeadersFrame(info, false, transportCallback);\n                    }\n                }\n            } else {\n                callback.failed(new IllegalStateException(\"committed\"));\n            }\n        }\n    } else {\n        if (hasContent || lastContent) {\n            if (lastContent) {\n                Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n                SendTrailers sendTrailers \u003d new SendTrailers(callback, trailers);\n                if (hasContent || trailers \u003d\u003d null) {\n                    if (transportCallback.start(sendTrailers, false))\n                        sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n                } else {\n                    sendTrailers.succeeded();\n                }\n            } else {\n                if (transportCallback.start(callback, false))\n                    sendDataFrame(content, false, false, transportCallback);\n            }\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 88,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,62 +1,67 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         metaData \u003d info;\n         int status \u003d info.getStatus();\n         boolean interimResponse \u003d status \u003d\u003d HttpStatus.CONTINUE_100 || status \u003d\u003d HttpStatus.PROCESSING_102;\n         if (interimResponse) {\n             if (hasContent) {\n                 callback.failed(new IllegalStateException(\"Interim response cannot have content\"));\n             } else {\n                 if (transportCallback.start(callback, false))\n                     sendHeadersFrame(info, false, transportCallback);\n             }\n         } else {\n             if (commit.compareAndSet(false, true)) {\n                 if (hasContent) {\n                     Callback commitCallback \u003d new Callback.Nested(callback) {\n \n                         @Override\n                         public void succeeded() {\n                             if (lastContent) {\n                                 Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                                 if (transportCallback.start(new SendTrailers(getCallback(), trailers), false))\n                                     sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n                             } else {\n                                 if (transportCallback.start(getCallback(), false))\n                                     sendDataFrame(content, false, false, transportCallback);\n                             }\n                         }\n                     };\n                     if (transportCallback.start(commitCallback, true))\n                         sendHeadersFrame(info, false, transportCallback);\n                 } else {\n                     if (lastContent) {\n                         Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                         if (transportCallback.start(new SendTrailers(callback, trailers), true))\n                             sendHeadersFrame(info, trailers \u003d\u003d null, transportCallback);\n                     } else {\n                         if (transportCallback.start(callback, true))\n                             sendHeadersFrame(info, false, transportCallback);\n                     }\n                 }\n             } else {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n     } else {\n         if (hasContent || lastContent) {\n             if (lastContent) {\n                 Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n-                if (transportCallback.start(new SendTrailers(callback, trailers), false))\n-                    sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n+                SendTrailers sendTrailers \u003d new SendTrailers(callback, trailers);\n+                if (hasContent || trailers \u003d\u003d null) {\n+                    if (transportCallback.start(sendTrailers, false))\n+                        sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n+                } else {\n+                    sendTrailers.succeeded();\n+                }\n             } else {\n                 if (transportCallback.start(callback, false))\n                     sendDataFrame(content, false, false, transportCallback);\n             }\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "06454f64098e01b42347841211afed229d8798a0": {
      "type": "Ybodychange",
      "commitMessage": "Fixes #2420 - Simplify HttpTransportOverHTTP2.\n\nRemoved usage of ternary expressions in favor of if/else statements\nto improve readability of the logic for the send() method.\n\nSigned-off-by: Simone Bordet \u003csimone.bordet@gmail.com\u003e\n",
      "commitDate": "2018/4/7 下午6:25",
      "commitName": "06454f64098e01b42347841211afed229d8798a0",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2018/3/29 下午6:31",
      "commitNameOld": "072442a5e5d451680eeefb9b19df720c789ff5b3",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 9.0,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        metaData \u003d info;\n        int status \u003d info.getStatus();\n        boolean interimResponse \u003d status \u003d\u003d HttpStatus.CONTINUE_100 || status \u003d\u003d HttpStatus.PROCESSING_102;\n        if (interimResponse) {\n            if (hasContent) {\n                callback.failed(new IllegalStateException(\"Interim response cannot have content\"));\n            } else {\n                if (transportCallback.start(callback, false))\n                    sendHeadersFrame(info, false, transportCallback);\n            }\n        } else {\n            if (commit.compareAndSet(false, true)) {\n                if (hasContent) {\n                    Callback commitCallback \u003d new Callback.Nested(callback) {\n\n                        @Override\n                        public void succeeded() {\n                            if (lastContent) {\n                                Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                                if (transportCallback.start(new SendTrailers(getCallback(), trailers), false))\n                                    sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n                            } else {\n                                if (transportCallback.start(getCallback(), false))\n                                    sendDataFrame(content, false, false, transportCallback);\n                            }\n                        }\n                    };\n                    if (transportCallback.start(commitCallback, true))\n                        sendHeadersFrame(info, false, transportCallback);\n                } else {\n                    if (lastContent) {\n                        Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                        if (transportCallback.start(new SendTrailers(callback, trailers), true))\n                            sendHeadersFrame(info, trailers \u003d\u003d null, transportCallback);\n                    } else {\n                        if (transportCallback.start(callback, true))\n                            sendHeadersFrame(info, false, transportCallback);\n                    }\n                }\n            } else {\n                callback.failed(new IllegalStateException(\"committed\"));\n            }\n        }\n    } else {\n        if (hasContent || lastContent) {\n            if (lastContent) {\n                Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n                if (transportCallback.start(new SendTrailers(callback, trailers), false))\n                    sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n            } else {\n                if (transportCallback.start(callback, false))\n                    sendDataFrame(content, false, false, transportCallback);\n            }\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 88,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,62 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         metaData \u003d info;\n         int status \u003d info.getStatus();\n-        boolean informational \u003d HttpStatus.isInformational(status) \u0026\u0026 status !\u003d HttpStatus.SWITCHING_PROTOCOLS_101;\n-        if (informational) {\n-            if (transportCallback.start(callback, false))\n-                sendHeaders(info, false, transportCallback);\n+        boolean interimResponse \u003d status \u003d\u003d HttpStatus.CONTINUE_100 || status \u003d\u003d HttpStatus.PROCESSING_102;\n+        if (interimResponse) {\n+            if (hasContent) {\n+                callback.failed(new IllegalStateException(\"Interim response cannot have content\"));\n+            } else {\n+                if (transportCallback.start(callback, false))\n+                    sendHeadersFrame(info, false, transportCallback);\n+            }\n         } else {\n-            boolean needsCommit \u003d commit.compareAndSet(false, true);\n-            if (needsCommit) {\n-                Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n+            if (commit.compareAndSet(false, true)) {\n                 if (hasContent) {\n-                    Callback nested \u003d trailers \u003d\u003d null || !lastContent ? callback : new SendTrailers(callback);\n-                    Callback commitCallback \u003d new Callback.Nested(nested) {\n+                    Callback commitCallback \u003d new Callback.Nested(callback) {\n \n                         @Override\n                         public void succeeded() {\n-                            if (transportCallback.start(nested, false))\n-                                sendContent(content, lastContent, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n+                            if (lastContent) {\n+                                Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n+                                if (transportCallback.start(new SendTrailers(getCallback(), trailers), false))\n+                                    sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n+                            } else {\n+                                if (transportCallback.start(getCallback(), false))\n+                                    sendDataFrame(content, false, false, transportCallback);\n+                            }\n                         }\n                     };\n                     if (transportCallback.start(commitCallback, true))\n-                        sendHeaders(info, false, transportCallback);\n+                        sendHeadersFrame(info, false, transportCallback);\n                 } else {\n-                    Callback nested \u003d trailers \u003d\u003d null ? callback : new SendTrailers(callback);\n-                    if (transportCallback.start(nested, true))\n-                        sendHeaders(info, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n+                    if (lastContent) {\n+                        Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n+                        if (transportCallback.start(new SendTrailers(callback, trailers), true))\n+                            sendHeadersFrame(info, trailers \u003d\u003d null, transportCallback);\n+                    } else {\n+                        if (transportCallback.start(callback, true))\n+                            sendHeadersFrame(info, false, transportCallback);\n+                    }\n                 }\n             } else {\n                 callback.failed(new IllegalStateException(\"committed\"));\n             }\n         }\n     } else {\n         if (hasContent || lastContent) {\n-            Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n-            Callback nested \u003d trailers \u003d\u003d null ? callback : new SendTrailers(callback);\n-            if (transportCallback.start(nested, false))\n-                sendContent(content, lastContent, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n+            if (lastContent) {\n+                Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n+                if (transportCallback.start(new SendTrailers(callback, trailers), false))\n+                    sendDataFrame(content, true, trailers \u003d\u003d null, transportCallback);\n+            } else {\n+                if (transportCallback.start(callback, false))\n+                    sendDataFrame(content, false, false, transportCallback);\n+            }\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c285d6f8bbd839906e8c39d23db2f343be22c6ca": {
      "type": "Ybodychange",
      "commitMessage": "Fixes #612 - Support HTTP Trailer.\n\nAdded support on both the server and the client, for HTTP/1 and HTTP/2.\n",
      "commitDate": "2017/4/4 上午4:25",
      "commitName": "c285d6f8bbd839906e8c39d23db2f343be22c6ca",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2017/1/20 上午2:26",
      "commitNameOld": "0c8273f2ca1f9bf2064cd9c4c939d2546443f759",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 74.08,
      "commitsBetweenForRepo": 194,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        metaData \u003d info;\n        int status \u003d info.getStatus();\n        boolean informational \u003d HttpStatus.isInformational(status) \u0026\u0026 status !\u003d HttpStatus.SWITCHING_PROTOCOLS_101;\n        if (informational) {\n            if (transportCallback.start(callback, false))\n                sendHeaders(info, false, transportCallback);\n        } else {\n            boolean needsCommit \u003d commit.compareAndSet(false, true);\n            if (needsCommit) {\n                Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n                if (hasContent) {\n                    Callback nested \u003d trailers \u003d\u003d null || !lastContent ? callback : new SendTrailers(callback);\n                    Callback commitCallback \u003d new Callback.Nested(nested) {\n\n                        @Override\n                        public void succeeded() {\n                            if (transportCallback.start(nested, false))\n                                sendContent(content, lastContent, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n                        }\n                    };\n                    if (transportCallback.start(commitCallback, true))\n                        sendHeaders(info, false, transportCallback);\n                } else {\n                    Callback nested \u003d trailers \u003d\u003d null ? callback : new SendTrailers(callback);\n                    if (transportCallback.start(nested, true))\n                        sendHeaders(info, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n                }\n            } else {\n                callback.failed(new IllegalStateException(\"committed\"));\n            }\n        }\n    } else {\n        if (hasContent || lastContent) {\n            Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n            Callback nested \u003d trailers \u003d\u003d null ? callback : new SendTrailers(callback);\n            if (transportCallback.start(nested, false))\n                sendContent(content, lastContent, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 88,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,46 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n+        metaData \u003d info;\n         int status \u003d info.getStatus();\n         boolean informational \u003d HttpStatus.isInformational(status) \u0026\u0026 status !\u003d HttpStatus.SWITCHING_PROTOCOLS_101;\n-        boolean committed \u003d false;\n-        if (!informational)\n-            committed \u003d commit.compareAndSet(false, true);\n-        if (committed || informational) {\n-            if (hasContent) {\n-                Callback commitCallback \u003d new Callback.Nested(callback) {\n-\n-                    @Override\n-                    public void succeeded() {\n-                        if (transportCallback.start(callback, false))\n-                            send(content, lastContent, transportCallback);\n-                    }\n-                };\n-                if (transportCallback.start(commitCallback, true))\n-                    commit(info, false, transportCallback);\n-            } else {\n-                if (transportCallback.start(callback, false))\n-                    commit(info, lastContent, transportCallback);\n-            }\n+        if (informational) {\n+            if (transportCallback.start(callback, false))\n+                sendHeaders(info, false, transportCallback);\n         } else {\n-            callback.failed(new IllegalStateException(\"committed\"));\n+            boolean needsCommit \u003d commit.compareAndSet(false, true);\n+            if (needsCommit) {\n+                Supplier\u003cHttpFields\u003e trailers \u003d info.getTrailerSupplier();\n+                if (hasContent) {\n+                    Callback nested \u003d trailers \u003d\u003d null || !lastContent ? callback : new SendTrailers(callback);\n+                    Callback commitCallback \u003d new Callback.Nested(nested) {\n+\n+                        @Override\n+                        public void succeeded() {\n+                            if (transportCallback.start(nested, false))\n+                                sendContent(content, lastContent, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n+                        }\n+                    };\n+                    if (transportCallback.start(commitCallback, true))\n+                        sendHeaders(info, false, transportCallback);\n+                } else {\n+                    Callback nested \u003d trailers \u003d\u003d null ? callback : new SendTrailers(callback);\n+                    if (transportCallback.start(nested, true))\n+                        sendHeaders(info, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n+                }\n+            } else {\n+                callback.failed(new IllegalStateException(\"committed\"));\n+            }\n         }\n     } else {\n         if (hasContent || lastContent) {\n-            if (transportCallback.start(callback, false))\n-                send(content, lastContent, transportCallback);\n+            Supplier\u003cHttpFields\u003e trailers \u003d metaData.getTrailerSupplier();\n+            Callback nested \u003d trailers \u003d\u003d null ? callback : new SendTrailers(callback);\n+            if (transportCallback.start(nested, false))\n+                sendContent(content, lastContent, trailers \u003d\u003d null \u0026\u0026 lastContent, transportCallback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d485b2777b116ca4e09672ac8db8c4eadd46297": {
      "type": "Ybodychange",
      "commitMessage": "Fixes #902 - Expect: 100-Continue does not work with HTTP/2.\n\nImproved handling of the 100 status code in both client and server.\n",
      "commitDate": "2016/9/6 下午6:01",
      "commitName": "6d485b2777b116ca4e09672ac8db8c4eadd46297",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2016/9/6 上午1:13",
      "commitNameOld": "705a68dfc41d512c813b7e40076462f5e9caf26d",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        int status \u003d info.getStatus();\n        boolean informational \u003d HttpStatus.isInformational(status) \u0026\u0026 status !\u003d HttpStatus.SWITCHING_PROTOCOLS_101;\n        boolean committed \u003d false;\n        if (!informational)\n            committed \u003d commit.compareAndSet(false, true);\n        if (committed || informational) {\n            if (hasContent) {\n                Callback commitCallback \u003d new Callback.Nested(callback) {\n\n                    @Override\n                    public void succeeded() {\n                        if (transportCallback.start(callback, false))\n                            send(content, lastContent, transportCallback);\n                    }\n                };\n                if (transportCallback.start(commitCallback, true))\n                    commit(info, false, transportCallback);\n            } else {\n                if (transportCallback.start(callback, false))\n                    commit(info, lastContent, transportCallback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            if (transportCallback.start(callback, false))\n                send(content, lastContent, transportCallback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 85,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,37 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n-        if (commit.compareAndSet(false, true)) {\n+        int status \u003d info.getStatus();\n+        boolean informational \u003d HttpStatus.isInformational(status) \u0026\u0026 status !\u003d HttpStatus.SWITCHING_PROTOCOLS_101;\n+        boolean committed \u003d false;\n+        if (!informational)\n+            committed \u003d commit.compareAndSet(false, true);\n+        if (committed || informational) {\n             if (hasContent) {\n                 Callback commitCallback \u003d new Callback.Nested(callback) {\n \n                     @Override\n                     public void succeeded() {\n                         if (transportCallback.start(callback, false))\n                             send(content, lastContent, transportCallback);\n                     }\n                 };\n                 if (transportCallback.start(commitCallback, true))\n                     commit(info, false, transportCallback);\n             } else {\n                 if (transportCallback.start(callback, false))\n                     commit(info, lastContent, transportCallback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             if (transportCallback.start(callback, false))\n                 send(content, lastContent, transportCallback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "705a68dfc41d512c813b7e40076462f5e9caf26d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #845 - Improve blocking IO for data rate limiting.\n\nMoved tests to run HTTP and HTTP/2 tests, and added more test cases.\n",
      "commitDate": "2016/9/6 上午1:13",
      "commitName": "705a68dfc41d512c813b7e40076462f5e9caf26d",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2016/7/21 下午11:43",
      "commitNameOld": "78d27c9a28cfd1c6ee2b6dff666894d547bae366",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 46.06,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                Callback commitCallback \u003d new Callback.Nested(callback) {\n\n                    @Override\n                    public void succeeded() {\n                        if (transportCallback.start(callback, false))\n                            send(content, lastContent, transportCallback);\n                    }\n                };\n                if (transportCallback.start(commitCallback, true))\n                    commit(info, false, transportCallback);\n            } else {\n                if (transportCallback.start(callback, false))\n                    commit(info, lastContent, transportCallback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            if (transportCallback.start(callback, false))\n                send(content, lastContent, transportCallback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 84,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,32 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n-                commit(info, false, commitCallback);\n-                send(content, lastContent, callback);\n+                Callback commitCallback \u003d new Callback.Nested(callback) {\n+\n+                    @Override\n+                    public void succeeded() {\n+                        if (transportCallback.start(callback, false))\n+                            send(content, lastContent, transportCallback);\n+                    }\n+                };\n+                if (transportCallback.start(commitCallback, true))\n+                    commit(info, false, transportCallback);\n             } else {\n-                commit(info, lastContent, callback);\n+                if (transportCallback.start(callback, false))\n+                    commit(info, lastContent, transportCallback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n-            send(content, lastContent, callback);\n+            if (transportCallback.start(callback, false))\n+                send(content, lastContent, transportCallback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "98c328fb23493025036665ac1ad82849e01c8f70": {
      "type": "Ybodychange",
      "commitMessage": "Jetty 9.4.x 572 (#614)\n\n* Issue #572 Scheduling Strategy Deadlocks\r\n\r\nImplemented dual strategy idea from #572 discussion\r\n\r\nSigned-off-by: Greg Wilkins \u003cgregw@webtide.com\u003e\r\n\r\n* fixed http2 strategy choice\r\n\r\nSigned-off-by: Greg Wilkins \u003cgregw@webtide.com\u003e\r\n\r\n* code cleanups\r\n\r\nSigned-off-by: Greg Wilkins \u003cgregw@webtide.com\u003e\r\n\r\n* clean up seelctor actions/products\r\n\r\nSigned-off-by: Greg Wilkins \u003cgregw@webtide.com\u003e\r\n\r\n* cleanups\r\n",
      "commitDate": "2016/6/3 上午7:07",
      "commitName": "98c328fb23493025036665ac1ad82849e01c8f70",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2016/5/11 下午7:57",
      "commitNameOld": "d8961139f31a41485bd499a9ddde311be38e64e0",
      "commitAuthorOld": "",
      "daysBetweenCommits": 22.47,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, new Callback() {\n\n                    @Override\n                    public InvocationType getInvocationType() {\n                        return InvocationType.NON_BLOCKING;\n                    }\n\n                    @Override\n                    public void succeeded() {\n                        if (LOG.isDebugEnabled())\n                            LOG.debug(\"HTTP2 Response #{}/{} committed\", stream.getId(), Integer.toHexString(stream.getSession().hashCode()));\n                        send(content, lastContent, callback);\n                    }\n\n                    @Override\n                    public void failed(Throwable x) {\n                        if (LOG.isDebugEnabled())\n                            LOG.debug(\"HTTP2 Response #\" + stream.getId() + \"/\" + Integer.toHexString(stream.getSession().hashCode()) + \" failed to commit\", x);\n                        callback.failed(x);\n                    }\n                });\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 85,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,41 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n-                commit(info, false, new Callback.NonBlocking() {\n+                commit(info, false, new Callback() {\n+\n+                    @Override\n+                    public InvocationType getInvocationType() {\n+                        return InvocationType.NON_BLOCKING;\n+                    }\n \n                     @Override\n                     public void succeeded() {\n                         if (LOG.isDebugEnabled())\n                             LOG.debug(\"HTTP2 Response #{}/{} committed\", stream.getId(), Integer.toHexString(stream.getSession().hashCode()));\n                         send(content, lastContent, callback);\n                     }\n \n                     @Override\n                     public void failed(Throwable x) {\n                         if (LOG.isDebugEnabled())\n                             LOG.debug(\"HTTP2 Response #\" + stream.getId() + \"/\" + Integer.toHexString(stream.getSession().hashCode()) + \" failed to commit\", x);\n                         callback.failed(x);\n                     }\n                 });\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65b11654c5635a0da71add52bb9e2f374ef451b1": {
      "type": "Ybodychange",
      "commitMessage": "Improved logging.\n",
      "commitDate": "2016/2/29 下午6:56",
      "commitName": "65b11654c5635a0da71add52bb9e2f374ef451b1",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2016/1/5 上午5:34",
      "commitNameOld": "ac24196b0d341534793308d585161381d5bca4ac",
      "commitAuthorOld": "",
      "daysBetweenCommits": 55.56,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, new Callback() {\n\n                    @Override\n                    public void succeeded() {\n                        if (LOG.isDebugEnabled())\n                            LOG.debug(\"HTTP2 Response #{}/{} committed\", stream.getId(), Integer.toHexString(stream.getSession().hashCode()));\n                        send(content, lastContent, callback);\n                    }\n\n                    @Override\n                    public void failed(Throwable x) {\n                        if (LOG.isDebugEnabled())\n                            LOG.debug(\"HTTP2 Response #\" + stream.getId() + \"/\" + Integer.toHexString(stream.getSession().hashCode()) + \" failed to commit\", x);\n                        callback.failed(x);\n                    }\n                });\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 84,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,36 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n                 commit(info, false, new Callback() {\n \n                     @Override\n                     public void succeeded() {\n                         if (LOG.isDebugEnabled())\n-                            LOG.debug(\"HTTP2 Response #{} committed\", stream.getId());\n+                            LOG.debug(\"HTTP2 Response #{}/{} committed\", stream.getId(), Integer.toHexString(stream.getSession().hashCode()));\n                         send(content, lastContent, callback);\n                     }\n \n                     @Override\n                     public void failed(Throwable x) {\n                         if (LOG.isDebugEnabled())\n-                            LOG.debug(\"HTTP2 Response #\" + stream.getId() + \" failed to commit\", x);\n+                            LOG.debug(\"HTTP2 Response #\" + stream.getId() + \"/\" + Integer.toHexString(stream.getSession().hashCode()) + \" failed to commit\", x);\n                         callback.failed(x);\n                     }\n                 });\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "279e56d3366498c23a497656658d9e330a1aa866": {
      "type": "Ybodychange",
      "commitMessage": "481718 - Improve stream interleaving.\n\nIntroduced the constraint in the API that Stream.headers() and\nStream.data() calls cannot be invoked if the previous operation did\nnot complete.\n\nImproved interleaving by appending unfinished DATA frames at the end\nof the queue, rather than prepending them.\n",
      "commitDate": "2015/11/10 上午4:58",
      "commitName": "279e56d3366498c23a497656658d9e330a1aa866",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2015/7/22 下午3:31",
      "commitNameOld": "607239028c0be8ef80dbabdb229eb44b3778d630",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 110.56,
      "commitsBetweenForRepo": 360,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, new Callback() {\n\n                    @Override\n                    public void succeeded() {\n                        if (LOG.isDebugEnabled())\n                            LOG.debug(\"HTTP2 Response #{} committed\", stream.getId());\n                        send(content, lastContent, callback);\n                    }\n\n                    @Override\n                    public void failed(Throwable x) {\n                        if (LOG.isDebugEnabled())\n                            LOG.debug(\"HTTP2 Response #\" + stream.getId() + \" failed to commit\", x);\n                        callback.failed(x);\n                    }\n                });\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 84,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,36 @@\n @Override\n public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n-                commit(info, false, commitCallback);\n-                send(content, lastContent, callback);\n+                commit(info, false, new Callback() {\n+\n+                    @Override\n+                    public void succeeded() {\n+                        if (LOG.isDebugEnabled())\n+                            LOG.debug(\"HTTP2 Response #{} committed\", stream.getId());\n+                        send(content, lastContent, callback);\n+                    }\n+\n+                    @Override\n+                    public void failed(Throwable x) {\n+                        if (LOG.isDebugEnabled())\n+                            LOG.debug(\"HTTP2 Response #\" + stream.getId() + \" failed to commit\", x);\n+                        callback.failed(x);\n+                    }\n+                });\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
      "commitDate": "2014/12/19 上午12:14",
      "commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
      "commitAuthor": "Simone Bordet",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
          "commitDate": "2014/12/19 上午12:14",
          "commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
          "commitAuthor": "Simone Bordet",
          "commitDateOld": "2014/12/9 下午7:27",
          "commitNameOld": "dfe9dc3115c148e6f8a47034fda5e2f62d1dbc9d",
          "commitAuthorOld": "Greg Wilkins",
          "daysBetweenCommits": 9.2,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 76,
          "functionName": "send",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,22 @@\n @Override\n-public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback) {\n-    boolean isHeadRequest \u003d head;\n+public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n                 commit(info, false, commitCallback);\n                 send(content, lastContent, callback);\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[info-MetaData.Response, head-boolean, content-ByteBuffer, lastContent-boolean, callback-Callback]",
            "newValue": "[info-MetaData.Response, isHeadRequest-boolean, content-ByteBuffer, lastContent-boolean, callback-Callback]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented dispatch to the application using an ExecutionStrategy.\n\nNow instead of having the channel to dispatch when it detects that it\nhas to call the application (upon receiving a HEADERS frame, or upon\na push \"fake\" request), now the whole mechanism is controlled by an\nExecutionStrategy.\n",
          "commitDate": "2014/12/19 上午12:14",
          "commitName": "e35c51eb7d91d099e7e84e308d30010ecaa6a0c5",
          "commitAuthor": "Simone Bordet",
          "commitDateOld": "2014/12/9 下午7:27",
          "commitNameOld": "dfe9dc3115c148e6f8a47034fda5e2f62d1dbc9d",
          "commitAuthorOld": "Greg Wilkins",
          "daysBetweenCommits": 9.2,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 76,
          "functionName": "send",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,22 @@\n @Override\n-public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback) {\n-    boolean isHeadRequest \u003d head;\n+public void send(MetaData.Response info, boolean isHeadRequest, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n                 commit(info, false, commitCallback);\n                 send(content, lastContent, callback);\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "31e448ffd677d9360c4132a63b08fe53c860cf7c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Removed duplication of HttpGenerator$Info vs http.MetaData\n\nUse MetaData throughout code base\n",
      "commitDate": "2014/10/24 下午12:51",
      "commitName": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
      "commitAuthor": "Greg Wilkins",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Removed duplication of HttpGenerator$Info vs http.MetaData\n\nUse MetaData throughout code base\n",
          "commitDate": "2014/10/24 下午12:51",
          "commitName": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
          "commitAuthor": "Greg Wilkins",
          "commitDateOld": "2014/9/18 下午5:50",
          "commitNameOld": "418a493337a8837172032e62a53587e478f21c86",
          "commitAuthorOld": "Simone Bordet",
          "daysBetweenCommits": 35.79,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean isHeadRequest \u003d head;\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 67,
          "functionName": "send",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,23 @@\n @Override\n-public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n-    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n+public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback) {\n+    boolean isHeadRequest \u003d head;\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n                 commit(info, false, commitCallback);\n                 send(content, lastContent, callback);\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[info-HttpGenerator.ResponseInfo, content-ByteBuffer, lastContent-boolean, callback-Callback]",
            "newValue": "[info-MetaData.Response, head-boolean, content-ByteBuffer, lastContent-boolean, callback-Callback]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removed duplication of HttpGenerator$Info vs http.MetaData\n\nUse MetaData throughout code base\n",
          "commitDate": "2014/10/24 下午12:51",
          "commitName": "31e448ffd677d9360c4132a63b08fe53c860cf7c",
          "commitAuthor": "Greg Wilkins",
          "commitDateOld": "2014/9/18 下午5:50",
          "commitNameOld": "418a493337a8837172032e62a53587e478f21c86",
          "commitAuthorOld": "Simone Bordet",
          "daysBetweenCommits": 35.79,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean isHeadRequest \u003d head;\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
          "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
          "functionStartLine": 67,
          "functionName": "send",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,23 @@\n @Override\n-public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n-    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n+public void send(MetaData.Response info, boolean head, ByteBuffer content, boolean lastContent, Callback callback) {\n+    boolean isHeadRequest \u003d head;\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (hasContent) {\n                 commit(info, false, commitCallback);\n                 send(content, lastContent, callback);\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "418a493337a8837172032e62a53587e478f21c86": {
      "type": "Ybodychange",
      "commitMessage": "More simplifications for the send() implementation.\n",
      "commitDate": "2014/9/18 下午5:50",
      "commitName": "418a493337a8837172032e62a53587e478f21c86",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/9/18 下午4:23",
      "commitNameOld": "0acee9851f3853883960edc91ebca6dd3ddc3c51",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (hasContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (hasContent || lastContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 67,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,23 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n-    boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n-            if (sendContent) {\n+            if (hasContent) {\n                 commit(info, false, commitCallback);\n                 send(content, lastContent, callback);\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n             callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n-        if (sendContent) {\n+        if (hasContent || lastContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0acee9851f3853883960edc91ebca6dd3ddc3c51": {
      "type": "Ybodychange",
      "commitMessage": "minor cleanups of exceptions\n",
      "commitDate": "2014/9/18 下午4:23",
      "commitName": "0acee9851f3853883960edc91ebca6dd3ddc3c51",
      "commitAuthor": "Greg Wilkins",
      "commitDateOld": "2014/9/18 上午12:07",
      "commitNameOld": "3e602117b477ea8ed33d2104e85a64184fcc604f",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (sendContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException(\"committed\"));\n        }\n    } else {\n        if (sendContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 67,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,24 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             if (sendContent) {\n                 commit(info, false, commitCallback);\n                 send(content, lastContent, callback);\n             } else {\n                 commit(info, lastContent, callback);\n             }\n         } else {\n-            callback.failed(new IllegalStateException());\n+            callback.failed(new IllegalStateException(\"committed\"));\n         }\n     } else {\n         if (sendContent) {\n             send(content, lastContent, callback);\n         } else {\n             callback.succeeded();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e602117b477ea8ed33d2104e85a64184fcc604f": {
      "type": "Ybodychange",
      "commitMessage": "Improved send() implementation to be more clear, and covered also a\nmissing case where the callback may have not been notified.\n",
      "commitDate": "2014/9/18 上午12:07",
      "commitName": "3e602117b477ea8ed33d2104e85a64184fcc604f",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/8/21 下午5:54",
      "commitNameOld": "75c1322adc7255cf7916a3e928f19875401db157",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 27.26,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            if (sendContent) {\n                commit(info, false, commitCallback);\n                send(content, lastContent, callback);\n            } else {\n                commit(info, lastContent, callback);\n            }\n        } else {\n            callback.failed(new IllegalStateException());\n        }\n    } else {\n        if (sendContent) {\n            send(content, lastContent, callback);\n        } else {\n            callback.succeeded();\n        }\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 67,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,24 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n     boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n-            boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n-            commit(info, endStream, sendContent ? commitCallback : callback);\n+            if (sendContent) {\n+                commit(info, false, commitCallback);\n+                send(content, lastContent, callback);\n+            } else {\n+                commit(info, lastContent, callback);\n+            }\n         } else {\n             callback.failed(new IllegalStateException());\n         }\n-    }\n-    if (sendContent) {\n-        send(content, lastContent, callback);\n+    } else {\n+        if (sendContent) {\n+            send(content, lastContent, callback);\n+        } else {\n+            callback.succeeded();\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8": {
      "type": "Ybodychange",
      "commitMessage": "Implemented HTTP/2 push functionality.\n\nA PushCacheFilter contains the logic to associate secondary resources\nto primary resources.\nPushCacheFilter calls a Jetty-specific API on the request dispatcher:\nDispatcher.push(ServletRequest). This is a technology preview of the\npush functionality slated for Servlet 4.0.\nThe push() invocation arrives to the transport and it is converted to\nHTTP/2 specific PUSH_PROMISE, along with the mechanism to simulate\nthe request for the secondary resource.\n",
      "commitDate": "2014/8/15 上午5:05",
      "commitName": "48b1f9f3f1e472588b1f4118e8fda101bfe3a1c8",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/8/6 上午8:50",
      "commitNameOld": "b5971484a57212a39af6f70267ea00a24fdbf100",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 8.84,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n            commit(info, endStream, sendContent ? commitCallback : callback);\n        } else {\n            callback.failed(new IllegalStateException());\n        }\n    }\n    if (sendContent) {\n        send(content, lastContent, callback);\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 65,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,17 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n-    MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n-    boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n+    boolean isHeadRequest \u003d HttpMethod.HEAD.is(request.getMethod());\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n     if (info !\u003d null) {\n         if (commit.compareAndSet(false, true)) {\n             boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n             commit(info, endStream, sendContent ? commitCallback : callback);\n         } else {\n             callback.failed(new IllegalStateException());\n         }\n     }\n     if (sendContent) {\n         send(content, lastContent, callback);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "17c03385d68fbf1baa4b8a8c8273a704df1928b6": {
      "type": "Ybodychange",
      "commitMessage": "Fixed send() by properly handling all cases.\n",
      "commitDate": "2014/8/4 下午6:09",
      "commitName": "17c03385d68fbf1baa4b8a8c8273a704df1928b6",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/7/31 上午9:53",
      "commitNameOld": "70dafa8eb3ec0301b1c59301d752f5f5c977ced8",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 4.34,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n    if (info !\u003d null) {\n        if (commit.compareAndSet(false, true)) {\n            boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n            commit(info, endStream, sendContent ? commitCallback : callback);\n        } else {\n            callback.failed(new IllegalStateException());\n        }\n    }\n    if (sendContent) {\n        send(content, lastContent, callback);\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 53,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,18 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n     MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n     boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n-    if (commit.compareAndSet(false, true)) {\n-        boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n-        commit(info, endStream, !hasContent ? callback : commitCallback);\n-    } else {\n-        callback.failed(new IllegalStateException());\n+    boolean sendContent \u003d hasContent || (info \u003d\u003d null \u0026\u0026 lastContent);\n+    if (info !\u003d null) {\n+        if (commit.compareAndSet(false, true)) {\n+            boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n+            commit(info, endStream, sendContent ? commitCallback : callback);\n+        } else {\n+            callback.failed(new IllegalStateException());\n+        }\n     }\n-    if (hasContent) {\n+    if (sendContent) {\n         send(content, lastContent, callback);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86b0d7733803040f0b0a40c5864ca776c8872ef6": {
      "type": "Ybodychange",
      "commitMessage": "Improved the server transport implementation, and fixed a case where\nthe end stream flag was erroneously sent with more content to send.\n",
      "commitDate": "2014/6/24 上午3:23",
      "commitName": "86b0d7733803040f0b0a40c5864ca776c8872ef6",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/6/17 上午6:12",
      "commitNameOld": "25295456aef95974be68c36a09c228309d8aa8ef",
      "commitAuthorOld": "Greg Wilkins",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (commit.compareAndSet(false, true)) {\n        boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n        commit(info, endStream, !hasContent ? callback : commitCallback);\n    } else {\n        callback.failed(new IllegalStateException());\n    }\n    if (hasContent) {\n        send(content, lastContent, callback);\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 53,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,15 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n     MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n     boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n     boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n     if (commit.compareAndSet(false, true)) {\n-        commit(info, !hasContent, !hasContent ? callback : new Callback.Adapter() {\n-\n-            @Override\n-            public void failed(Throwable x) {\n-            }\n-        });\n+        boolean endStream \u003d !hasContent \u0026\u0026 lastContent;\n+        commit(info, endStream, !hasContent ? callback : commitCallback);\n     } else {\n+        callback.failed(new IllegalStateException());\n     }\n     if (hasContent) {\n         send(content, lastContent, callback);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad034f4d54aa4d6ce04c6fe3da8e8f48f63b21e5": {
      "type": "Ybodychange",
      "commitMessage": "Reworked generation of frames (split into different generators) and\nsketched server-side handling and linking with channel.\n",
      "commitDate": "2014/6/10 下午6:02",
      "commitName": "ad034f4d54aa4d6ce04c6fe3da8e8f48f63b21e5",
      "commitAuthor": "Simone Bordet",
      "commitDateOld": "2014/6/9 下午8:01",
      "commitNameOld": "c1247ff6779c78917598a149d36e773702c490d5",
      "commitAuthorOld": "Simone Bordet",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n    MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n    boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n    if (commit.compareAndSet(false, true)) {\n        commit(info, !hasContent, !hasContent ? callback : new Callback.Adapter() {\n\n            @Override\n            public void failed(Throwable x) {\n            }\n        });\n    } else {\n    }\n    if (hasContent) {\n        send(content, lastContent, callback);\n    }\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 41,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,18 @@\n @Override\n public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n+    MetaData.Request metaData \u003d (MetaData.Request) request.getMetaData();\n+    boolean isHeadRequest \u003d HttpMethod.HEAD.is(metaData.getMethod());\n+    boolean hasContent \u003d BufferUtil.hasContent(content) \u0026\u0026 !isHeadRequest;\n+    if (commit.compareAndSet(false, true)) {\n+        commit(info, !hasContent, !hasContent ? callback : new Callback.Adapter() {\n+\n+            @Override\n+            public void failed(Throwable x) {\n+            }\n+        });\n+    } else {\n+    }\n+    if (hasContent) {\n+        send(content, lastContent, callback);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c1247ff6779c78917598a149d36e773702c490d5": {
      "type": "Yintroduced",
      "commitMessage": "Reorganized HTTP2 modules.\n",
      "commitDate": "2014/6/9 下午8:01",
      "commitName": "c1247ff6779c78917598a149d36e773702c490d5",
      "commitAuthor": "Simone Bordet",
      "diff": "@@ -0,0 +1,3 @@\n+@Override\n+public void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void send(HttpGenerator.ResponseInfo info, ByteBuffer content, boolean lastContent, Callback callback) {\n}",
      "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java",
      "functionStartLine": 30,
      "functionName": "send",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}