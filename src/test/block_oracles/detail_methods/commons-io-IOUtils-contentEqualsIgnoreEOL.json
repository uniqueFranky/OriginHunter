{
  "origin": "codeshovel",
  "repositoryName": "commons-io",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/commons-io/.git",
  "startCommitName": "559de2c461e94ab636c959149c775bb27111fb48",
  "sourceFileName": "IOUtils.java",
  "functionName": "contentEqualsIgnoreEOL",
  "functionId": "contentEqualsIgnoreEOL___input1-Reader(modifiers-final)__input2-Reader(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/io/IOUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException          if an I/O error occurs\n@since 2.2\n",
  "functionStartLine": 2794,
  "functionEndLine": 2809,
  "numCommitsSeen": 118,
  "timeTaken": 1720,
  "changeHistory": [
    "abb0fc08e7014d8e20e957e5c43ef04b22353d2c",
    "7c58d8a9919c5c9dbc1485a21d56bb3f37444060",
    "0cee0fe1d42f73933d8fdfedfe91bff8013f0bb3",
    "6aa00766b9103d75c763160280429af8e1f0549e",
    "efca1657258b7555b80bbee207a3221489b9ffed",
    "1d6feac910975c5d22b66b7f2a46ec87dd844d66",
    "2413cf3c607371a7b7aa9d37a9e5d916814a4799",
    "1170279dc85c2bbdea594b053c56b379a72a2104",
    "33368e1a9d1fa6f960490ceace5c90d9dda80924",
    "a2cf54639b1655d9059d416e6a6cb80931940a7d"
  ],
  "changeHistoryShort": {
    "abb0fc08e7014d8e20e957e5c43ef04b22353d2c": "Ydocchange",
    "7c58d8a9919c5c9dbc1485a21d56bb3f37444060": "Ydocchange",
    "0cee0fe1d42f73933d8fdfedfe91bff8013f0bb3": "Ybodychange",
    "6aa00766b9103d75c763160280429af8e1f0549e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "efca1657258b7555b80bbee207a3221489b9ffed": "Ydocchange",
    "1d6feac910975c5d22b66b7f2a46ec87dd844d66": "Ybodychange",
    "2413cf3c607371a7b7aa9d37a9e5d916814a4799": "Ydocchange",
    "1170279dc85c2bbdea594b053c56b379a72a2104": "Ybodychange",
    "33368e1a9d1fa6f960490ceace5c90d9dda80924": "Ydocchange",
    "a2cf54639b1655d9059d416e6a6cb80931940a7d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "abb0fc08e7014d8e20e957e5c43ef04b22353d2c": {
      "type": "Ydocchange",
      "commitMessage": "Fix some JavaDocs warnings. No functional change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1714353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2015/11/15 上午3:07",
      "commitName": "abb0fc08e7014d8e20e957e5c43ef04b22353d2c",
      "commitAuthor": "Adrian Crum",
      "commitDateOld": "2015/9/22 上午5:31",
      "commitNameOld": "c01e3e48a823c4e913ebe3c6694a127019560aa5",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 53.9,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n    if (input1 \u003d\u003d input2) {\n        return true;\n    }\n    final BufferedReader br1 \u003d toBufferedReader(input1);\n    final BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 2627,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException          if an I/O error occurs\n@since 2.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp/\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException          if an I/O error occurs\n@since 2.2\n",
        "newValue": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException          if an I/O error occurs\n@since 2.2\n"
      }
    },
    "7c58d8a9919c5c9dbc1485a21d56bb3f37444060": {
      "type": "Ydocchange",
      "commitMessage": "Fixed all checkstyle errors and a findbugs error\n\nFindbugs error was:\norg.apache.commons.io.output.DeferredFileOutputStream#thresholdReached\npossible file handle leak upon exception\n\nAlso contains fix for IO-446, submitted by Jeffrey Barrus\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1686747 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2015/6/22 上午2:44",
      "commitName": "7c58d8a9919c5c9dbc1485a21d56bb3f37444060",
      "commitAuthor": "Kristian Rosenvold",
      "commitDateOld": "2015/5/21 上午2:36",
      "commitNameOld": "586296992e5fb4d68bf87c7914573813e1fcacd9",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 32.01,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n    if (input1 \u003d\u003d input2) {\n        return true;\n    }\n    final BufferedReader br1 \u003d toBufferedReader(input1);\n    final BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 2626,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp/\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException          if an I/O error occurs\n@since 2.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
        "newValue": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp/\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException          if an I/O error occurs\n@since 2.2\n"
      }
    },
    "0cee0fe1d42f73933d8fdfedfe91bff8013f0bb3": {
      "type": "Ybodychange",
      "commitMessage": "[IO-362] IOUtils.contentEquals* methods returns false if input1 \u003d\u003d input2, should return true.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1428941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2013/1/4 下午11:57",
      "commitName": "0cee0fe1d42f73933d8fdfedfe91bff8013f0bb3",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2012/12/1 上午4:51",
      "commitNameOld": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 34.8,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n    if (input1 \u003d\u003d input2) {\n        return true;\n    }\n    final BufferedReader br1 \u003d toBufferedReader(input1);\n    final BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 2289,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
      "diff": "@@ -1,11 +1,14 @@\n public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n+    if (input1 \u003d\u003d input2) {\n+        return true;\n+    }\n     final BufferedReader br1 \u003d toBufferedReader(input1);\n     final BufferedReader br2 \u003d toBufferedReader(input2);\n     String line1 \u003d br1.readLine();\n     String line2 \u003d br2.readLine();\n     while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n         line1 \u003d br1.readLine();\n         line2 \u003d br2.readLine();\n     }\n     return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6aa00766b9103d75c763160280429af8e1f0549e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/12/1 上午4:51",
      "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2012/12/1 上午4:51",
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "2012/12/1 上午3:10",
          "commitNameOld": "efca1657258b7555b80bbee207a3221489b9ffed",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n    final BufferedReader br1 \u003d toBufferedReader(input1);\n    final BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
          "path": "src/main/java/org/apache/commons/io/IOUtils.java",
          "functionStartLine": 2283,
          "functionName": "contentEqualsIgnoreEOL",
          "functionAnnotation": "",
          "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
          "diff": "@@ -1,11 +1,11 @@\n-public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n-    BufferedReader br1 \u003d toBufferedReader(input1);\n-    BufferedReader br2 \u003d toBufferedReader(input2);\n+public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n+    final BufferedReader br1 \u003d toBufferedReader(input1);\n+    final BufferedReader br2 \u003d toBufferedReader(input2);\n     String line1 \u003d br1.readLine();\n     String line2 \u003d br2.readLine();\n     while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n         line1 \u003d br1.readLine();\n         line2 \u003d br2.readLine();\n     }\n     return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2012/12/1 上午4:51",
          "commitName": "6aa00766b9103d75c763160280429af8e1f0549e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "2012/12/1 上午3:10",
          "commitNameOld": "efca1657258b7555b80bbee207a3221489b9ffed",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n    final BufferedReader br1 \u003d toBufferedReader(input1);\n    final BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
          "path": "src/main/java/org/apache/commons/io/IOUtils.java",
          "functionStartLine": 2283,
          "functionName": "contentEqualsIgnoreEOL",
          "functionAnnotation": "",
          "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
          "diff": "@@ -1,11 +1,11 @@\n-public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n-    BufferedReader br1 \u003d toBufferedReader(input1);\n-    BufferedReader br2 \u003d toBufferedReader(input2);\n+public static boolean contentEqualsIgnoreEOL(final Reader input1, final Reader input2) throws IOException {\n+    final BufferedReader br1 \u003d toBufferedReader(input1);\n+    final BufferedReader br2 \u003d toBufferedReader(input2);\n     String line1 \u003d br1.readLine();\n     String line2 \u003d br2.readLine();\n     while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n         line1 \u003d br1.readLine();\n         line2 \u003d br2.readLine();\n     }\n     return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[input1-Reader, input2-Reader]",
            "newValue": "[input1-Reader(modifiers-final), input2-Reader(modifiers-final)]"
          }
        }
      ]
    },
    "efca1657258b7555b80bbee207a3221489b9ffed": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use the active voice.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1415793 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/12/1 上午3:10",
      "commitName": "efca1657258b7555b80bbee207a3221489b9ffed",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2012/11/30 下午10:18",
      "commitNameOld": "106c87c9929f92d31498b14dcca7f059e4d730ac",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n    BufferedReader br1 \u003d toBufferedReader(input1);\n    BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 2283,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
        "newValue": "Compares the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n"
      }
    },
    "1d6feac910975c5d22b66b7f2a46ec87dd844d66": {
      "type": "Ybodychange",
      "commitMessage": "Add missing tests as discovered with Cobertura. Add a new method IOUTils.toBufferedReader(Reader).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1304177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/3/23 上午11:36",
      "commitName": "1d6feac910975c5d22b66b7f2a46ec87dd844d66",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2012/3/23 上午5:49",
      "commitNameOld": "62dd09687a08f660efbab7adc9f82ae501fd840f",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n    BufferedReader br1 \u003d toBufferedReader(input1);\n    BufferedReader br2 \u003d toBufferedReader(input2);\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 1905,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
      "diff": "@@ -1,21 +1,11 @@\n public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n-    BufferedReader br1;\n-    if (input1 instanceof BufferedReader) {\n-        br1 \u003d (BufferedReader) input1;\n-    } else {\n-        br1 \u003d new BufferedReader(input1);\n-    }\n-    BufferedReader br2;\n-    if (input2 instanceof BufferedReader) {\n-        br2 \u003d (BufferedReader) input2;\n-    } else {\n-        br2 \u003d new BufferedReader(input2);\n-    }\n+    BufferedReader br1 \u003d toBufferedReader(input1);\n+    BufferedReader br2 \u003d toBufferedReader(input2);\n     String line1 \u003d br1.readLine();\n     String line2 \u003d br2.readLine();\n     while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n         line1 \u003d br1.readLine();\n         line2 \u003d br2.readLine();\n     }\n     return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2413cf3c607371a7b7aa9d37a9e5d916814a4799": {
      "type": "Ydocchange",
      "commitMessage": "Missing @since 2.2 markers; standardise format\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1304044 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/3/23 上午4:41",
      "commitName": "2413cf3c607371a7b7aa9d37a9e5d916814a4799",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "2012/3/23 上午3:11",
      "commitNameOld": "18a393565b1525118da8a1bcbd394b053ecb04d3",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n    BufferedReader br1;\n    if (input1 instanceof BufferedReader) {\n        br1 \u003d (BufferedReader) input1;\n    } else {\n        br1 \u003d new BufferedReader(input1);\n    }\n    BufferedReader br2;\n    if (input2 instanceof BufferedReader) {\n        br2 \u003d (BufferedReader) input2;\n    } else {\n        br2 \u003d new BufferedReader(input2);\n    }\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 1808,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since Commons IO 2.2\n",
        "newValue": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since 2.2\n"
      }
    },
    "1170279dc85c2bbdea594b053c56b379a72a2104": {
      "type": "Ybodychange",
      "commitMessage": "Remove noisy and unnecessary parens. Especially painful in return statements: \"return (foo + bar);\" vs. \"return foo + bar;\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1302748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/3/20 上午9:35",
      "commitName": "1170279dc85c2bbdea594b053c56b379a72a2104",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2012/3/17 上午9:21",
      "commitNameOld": "0031a91ba7b5b580b28fab5cb60d683c93e9fae8",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n    BufferedReader br1;\n    if (input1 instanceof BufferedReader) {\n        br1 \u003d (BufferedReader) input1;\n    } else {\n        br1 \u003d new BufferedReader(input1);\n    }\n    BufferedReader br2;\n    if (input2 instanceof BufferedReader) {\n        br2 \u003d (BufferedReader) input2;\n    } else {\n        br2 \u003d new BufferedReader(input2);\n    }\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 1807,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since Commons IO 2.2\n",
      "diff": "@@ -1,21 +1,21 @@\n public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n     BufferedReader br1;\n     if (input1 instanceof BufferedReader) {\n         br1 \u003d (BufferedReader) input1;\n     } else {\n         br1 \u003d new BufferedReader(input1);\n     }\n     BufferedReader br2;\n     if (input2 instanceof BufferedReader) {\n         br2 \u003d (BufferedReader) input2;\n     } else {\n         br2 \u003d new BufferedReader(input2);\n     }\n     String line1 \u003d br1.readLine();\n     String line2 \u003d br2.readLine();\n     while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n         line1 \u003d br1.readLine();\n         line2 \u003d br2.readLine();\n     }\n-    return line1 \u003d\u003d null ? (line2 \u003d\u003d null ? true : false) : line1.equals(line2);\n+    return line1 \u003d\u003d null ? line2 \u003d\u003d null ? true : false : line1.equals(line2);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "33368e1a9d1fa6f960490ceace5c90d9dda80924": {
      "type": "Ydocchange",
      "commitMessage": "@since 2.2 markers\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1300341 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/3/14 上午4:33",
      "commitName": "33368e1a9d1fa6f960490ceace5c90d9dda80924",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "2012/3/13 上午9:47",
      "commitNameOld": "0ab79cc7801f7f91bcc13166d5e0bde5a0c3e52a",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n    BufferedReader br1;\n    if (input1 instanceof BufferedReader) {\n        br1 \u003d (BufferedReader) input1;\n    } else {\n        br1 \u003d new BufferedReader(input1);\n    }\n    BufferedReader br2;\n    if (input2 instanceof BufferedReader) {\n        br2 \u003d (BufferedReader) input2;\n    } else {\n        br2 \u003d new BufferedReader(input2);\n    }\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? (line2 \u003d\u003d null ? true : false) : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 1713,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since Commons IO 2.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since Commons IO 2.1.1\n",
        "newValue": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since Commons IO 2.2\n"
      }
    },
    "a2cf54639b1655d9059d416e6a6cb80931940a7d": {
      "type": "Yintroduced",
      "commitMessage": "IO-275 FileUtils.contentEquals/IOUtils.contentEquals - Add option to ignore \"line endings\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1200693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011/11/11 上午10:13",
      "commitName": "a2cf54639b1655d9059d416e6a6cb80931940a7d",
      "commitAuthor": "Sebastian Bazley",
      "diff": "@@ -0,0 +1,21 @@\n+public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n+    BufferedReader br1;\n+    if (input1 instanceof BufferedReader) {\n+        br1 \u003d (BufferedReader) input1;\n+    } else {\n+        br1 \u003d new BufferedReader(input1);\n+    }\n+    BufferedReader br2;\n+    if (input2 instanceof BufferedReader) {\n+        br2 \u003d (BufferedReader) input2;\n+    } else {\n+        br2 \u003d new BufferedReader(input2);\n+    }\n+    String line1 \u003d br1.readLine();\n+    String line2 \u003d br2.readLine();\n+    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n+        line1 \u003d br1.readLine();\n+        line2 \u003d br2.readLine();\n+    }\n+    return line1 \u003d\u003d null ? (line2 \u003d\u003d null ? true : false) : line1.equals(line2);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static boolean contentEqualsIgnoreEOL(Reader input1, Reader input2) throws IOException {\n    BufferedReader br1;\n    if (input1 instanceof BufferedReader) {\n        br1 \u003d (BufferedReader) input1;\n    } else {\n        br1 \u003d new BufferedReader(input1);\n    }\n    BufferedReader br2;\n    if (input2 instanceof BufferedReader) {\n        br2 \u003d (BufferedReader) input2;\n    } else {\n        br2 \u003d new BufferedReader(input2);\n    }\n    String line1 \u003d br1.readLine();\n    String line2 \u003d br2.readLine();\n    while (line1 !\u003d null \u0026\u0026 line2 !\u003d null \u0026\u0026 line1.equals(line2)) {\n        line1 \u003d br1.readLine();\n        line2 \u003d br2.readLine();\n    }\n    return line1 \u003d\u003d null ? (line2 \u003d\u003d null ? true : false) : line1.equals(line2);\n}",
      "path": "src/main/java/org/apache/commons/io/IOUtils.java",
      "functionStartLine": 1645,
      "functionName": "contentEqualsIgnoreEOL",
      "functionAnnotation": "",
      "functionDoc": "Compare the contents of two Readers to determine if they are equal or\nnot, ignoring EOL characters.\n\u003cp\u003e\nThis method buffers the input internally using\n\u003ccode\u003eBufferedReader\u003c/code\u003e if they are not already buffered.\n\n@param input1 the first reader\n@param input2 the second reader\n@return true if the content of the readers are equal (ignoring EOL differences),  false otherwise\n@throws NullPointerException if either input is null\n@throws IOException if an I/O error occurs\n@since Commons IO 2.1.1\n"
    }
  }
}