{
  "origin": "codeshovel",
  "repositoryName": "zulip",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/zulip/.git",
  "startCommitName": "6407d0b1f96623760094c604be2e8d1243d06142",
  "sourceFileName": "backends.py",
  "functionName": "common_get_active_user",
  "functionId": "__common_get_active_user___email-str__realm-Realm__return_data-Optional[Dict[str,Any]](default-None)",
  "sourceFilePath": "zproject/backends.py",
  "functionAnnotation": "",
  "functionStartLine": 142,
  "functionEndLine": 165,
  "numCommitsSeen": 428,
  "timeTaken": 8955,
  "changeHistory": [
    "371a7768ad611417c6e94a31878481e7c656607a",
    "873aca4a8243e3187fc00c38ae4da80ccf0cd88a",
    "e603237010c6bb3520ae0b01454876bea443f85b",
    "c3cd3e94c16c80371e97ea224eb02c80660ec1db",
    "d1ff4293a51c6e565c5de1aa553cf7911e88b325",
    "719d6c49dfcf1b5a0ce80182755038b347eb7cc4",
    "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c"
  ],
  "changeHistoryShort": {
    "371a7768ad611417c6e94a31878481e7c656607a": "Ybodychange",
    "873aca4a8243e3187fc00c38ae4da80ccf0cd88a": "Ybodychange",
    "e603237010c6bb3520ae0b01454876bea443f85b": "Ybodychange",
    "c3cd3e94c16c80371e97ea224eb02c80660ec1db": "Yparameterchange",
    "d1ff4293a51c6e565c5de1aa553cf7911e88b325": "Ybodychange",
    "719d6c49dfcf1b5a0ce80182755038b347eb7cc4": "Ybodychange",
    "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "371a7768ad611417c6e94a31878481e7c656607a": {
      "type": "Ybodychange",
      "commitMessage": "backends: Extract useful is_user_active function.\n\nThis logic can be useful elsewhere, for checking whether user_profile is\nactive.\n",
      "commitDate": "2019/9/21 上午8:58",
      "commitName": "371a7768ad611417c6e94a31878481e7c656607a",
      "commitAuthor": "Mateusz Mandera",
      "commitDateOld": "2019/9/20 上午3:35",
      "commitNameOld": "935702b6ecc8483203cc018aeb6666941607c223",
      "commitAuthorOld": "Mateusz Mandera",
      "daysBetweenCommits": 1.22,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n    \"\"\"This is the core common function used by essentially all\n    authentication backends to check if there\u0027s an active user account\n    with a given email address in the organization, handling both\n    user-level and realm-level deactivation correctly.\n    \"\"\"\n    try:\n        user_profile \u003d get_user_by_delivery_email(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        if not UserProfile.objects.filter(delivery_email__iexact\u003demail).exists():\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not is_user_active(user_profile, return_data):\n        return None\n\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 127,
      "functionName": "common_get_active_user",
      "functionAnnotation": "",
      "diff": "@@ -1,31 +1,23 @@\n def common_get_active_user(email: str, realm: Realm,\n                            return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n     \"\"\"This is the core common function used by essentially all\n     authentication backends to check if there\u0027s an active user account\n     with a given email address in the organization, handling both\n     user-level and realm-level deactivation correctly.\n     \"\"\"\n     try:\n         user_profile \u003d get_user_by_delivery_email(email, realm)\n     except UserProfile.DoesNotExist:\n         # If the user doesn\u0027t have an account in the target realm, we\n         # check whether they might have an account in another realm,\n         # and if so, provide a helpful error message via\n         # `invalid_subdomain`.\n         if not UserProfile.objects.filter(delivery_email__iexact\u003demail).exists():\n             return None\n         if return_data is not None:\n             return_data[\u0027invalid_subdomain\u0027] \u003d True\n         return None\n-    if not user_profile.is_active:\n-        if return_data is not None:\n-            if user_profile.is_mirror_dummy:\n-                # Record whether it\u0027s a mirror dummy account\n-                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n-            return_data[\u0027inactive_user\u0027] \u003d True\n+    if not is_user_active(user_profile, return_data):\n         return None\n-    if user_profile.realm.deactivated:\n-        if return_data is not None:\n-            return_data[\u0027inactive_realm\u0027] \u003d True\n-        return None\n+\n     return user_profile\n",
      "extendedDetails": {}
    },
    "873aca4a8243e3187fc00c38ae4da80ccf0cd88a": {
      "type": "Ybodychange",
      "commitMessage": "auth: Add detailed comments for auth subsystem.\n\nNow that we\u0027ve more or less stabilized our authentication/registration\nsubsystem how we want it, it seems worth adding proper documentation\nfor this.\n\nFixes #7619.\n",
      "commitDate": "2019/3/10 下午2:08",
      "commitName": "873aca4a8243e3187fc00c38ae4da80ccf0cd88a",
      "commitAuthor": "Tim Abbott",
      "commitDateOld": "2019/3/6 上午8:19",
      "commitNameOld": "4a9bd89f47cd93334e7c11e9ea69dbd6c0a46c00",
      "commitAuthorOld": "Harshit Bansal",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n    \"\"\"This is the core common function used by essentially all\n    authentication backends to check if there\u0027s an active user account\n    with a given email address in the organization, handling both\n    user-level and realm-level deactivation correctly.\n    \"\"\"\n    try:\n        user_profile \u003d get_user_by_delivery_email(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        if not UserProfile.objects.filter(delivery_email__iexact\u003demail).exists():\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not user_profile.is_active:\n        if return_data is not None:\n            if user_profile.is_mirror_dummy:\n                # Record whether it\u0027s a mirror dummy account\n                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n            return_data[\u0027inactive_user\u0027] \u003d True\n        return None\n    if user_profile.realm.deactivated:\n        if return_data is not None:\n            return_data[\u0027inactive_realm\u0027] \u003d True\n        return None\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 100,
      "functionName": "common_get_active_user",
      "functionAnnotation": "",
      "diff": "@@ -1,26 +1,31 @@\n def common_get_active_user(email: str, realm: Realm,\n                            return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n+    \"\"\"This is the core common function used by essentially all\n+    authentication backends to check if there\u0027s an active user account\n+    with a given email address in the organization, handling both\n+    user-level and realm-level deactivation correctly.\n+    \"\"\"\n     try:\n         user_profile \u003d get_user_by_delivery_email(email, realm)\n     except UserProfile.DoesNotExist:\n         # If the user doesn\u0027t have an account in the target realm, we\n         # check whether they might have an account in another realm,\n         # and if so, provide a helpful error message via\n         # `invalid_subdomain`.\n         if not UserProfile.objects.filter(delivery_email__iexact\u003demail).exists():\n             return None\n         if return_data is not None:\n             return_data[\u0027invalid_subdomain\u0027] \u003d True\n         return None\n     if not user_profile.is_active:\n         if return_data is not None:\n             if user_profile.is_mirror_dummy:\n                 # Record whether it\u0027s a mirror dummy account\n                 return_data[\u0027is_mirror_dummy\u0027] \u003d True\n             return_data[\u0027inactive_user\u0027] \u003d True\n         return None\n     if user_profile.realm.deactivated:\n         if return_data is not None:\n             return_data[\u0027inactive_realm\u0027] \u003d True\n         return None\n     return user_profile\n",
      "extendedDetails": {}
    },
    "e603237010c6bb3520ae0b01454876bea443f85b": {
      "type": "Ybodychange",
      "commitMessage": "email: Convert accounts code to use delivery_email.\n\nA key part of this is the new helper, get_user_by_delivery_email.  Its\nverbose name is important for clarity; it should help avoid blind\ncopy-pasting of get_user (which we\u0027ll also want to rename).\nUnfortunately, it requires detailed understanding of the context to\nfigure out which one to use; each is used in about half of call sites.\n\nAnother important note is that this PR doesn\u0027t migrate get_user calls\nin the tests except where not doing so would cause the tests to fail.\nThis probably deserves a follow-up refactor to avoid bugs here.\n",
      "commitDate": "2018/12/7 上午8:21",
      "commitName": "e603237010c6bb3520ae0b01454876bea443f85b",
      "commitAuthor": "Tim Abbott",
      "commitDateOld": "2018/11/17 上午4:16",
      "commitNameOld": "79e590f50faf7e640cf0df392f66a11fd2bdce4e",
      "commitAuthorOld": "Shubham Padia",
      "daysBetweenCommits": 20.17,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n    try:\n        user_profile \u003d get_user_by_delivery_email(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        if not UserProfile.objects.filter(delivery_email__iexact\u003demail).exists():\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not user_profile.is_active:\n        if return_data is not None:\n            if user_profile.is_mirror_dummy:\n                # Record whether it\u0027s a mirror dummy account\n                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n            return_data[\u0027inactive_user\u0027] \u003d True\n        return None\n    if user_profile.realm.deactivated:\n        if return_data is not None:\n            return_data[\u0027inactive_realm\u0027] \u003d True\n        return None\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 83,
      "functionName": "common_get_active_user",
      "functionAnnotation": "",
      "diff": "@@ -1,26 +1,26 @@\n def common_get_active_user(email: str, realm: Realm,\n                            return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n     try:\n-        user_profile \u003d get_user(email, realm)\n+        user_profile \u003d get_user_by_delivery_email(email, realm)\n     except UserProfile.DoesNotExist:\n         # If the user doesn\u0027t have an account in the target realm, we\n         # check whether they might have an account in another realm,\n         # and if so, provide a helpful error message via\n         # `invalid_subdomain`.\n-        if not UserProfile.objects.filter(email__iexact\u003demail).exists():\n+        if not UserProfile.objects.filter(delivery_email__iexact\u003demail).exists():\n             return None\n         if return_data is not None:\n             return_data[\u0027invalid_subdomain\u0027] \u003d True\n         return None\n     if not user_profile.is_active:\n         if return_data is not None:\n             if user_profile.is_mirror_dummy:\n                 # Record whether it\u0027s a mirror dummy account\n                 return_data[\u0027is_mirror_dummy\u0027] \u003d True\n             return_data[\u0027inactive_user\u0027] \u003d True\n         return None\n     if user_profile.realm.deactivated:\n         if return_data is not None:\n             return_data[\u0027inactive_realm\u0027] \u003d True\n         return None\n     return user_profile\n",
      "extendedDetails": {}
    },
    "c3cd3e94c16c80371e97ea224eb02c80660ec1db": {
      "type": "Yparameterchange",
      "commitMessage": "mypy: Add Optional \u0026 check in zproject/backends.py; remove from mypy.ini.\n",
      "commitDate": "2018/10/30 上午3:53",
      "commitName": "c3cd3e94c16c80371e97ea224eb02c80660ec1db",
      "commitAuthor": "neiljp (Neil Pilgrim)",
      "commitDateOld": "2018/10/18 上午6:28",
      "commitNameOld": "a34b79a3f4de79b489a71871fb980a649a2abcb0",
      "commitAuthorOld": "Tim Abbott",
      "daysBetweenCommits": 11.89,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n    try:\n        user_profile \u003d get_user(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        if not UserProfile.objects.filter(email__iexact\u003demail).exists():\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not user_profile.is_active:\n        if return_data is not None:\n            if user_profile.is_mirror_dummy:\n                # Record whether it\u0027s a mirror dummy account\n                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n            return_data[\u0027inactive_user\u0027] \u003d True\n        return None\n    if user_profile.realm.deactivated:\n        if return_data is not None:\n            return_data[\u0027inactive_realm\u0027] \u003d True\n        return None\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 83,
      "functionName": "common_get_active_user",
      "functionAnnotation": "",
      "diff": "@@ -1,26 +1,26 @@\n def common_get_active_user(email: str, realm: Realm,\n-                           return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n+                           return_data: Optional[Dict[str, Any]]\u003dNone) -\u003e Optional[UserProfile]:\n     try:\n         user_profile \u003d get_user(email, realm)\n     except UserProfile.DoesNotExist:\n         # If the user doesn\u0027t have an account in the target realm, we\n         # check whether they might have an account in another realm,\n         # and if so, provide a helpful error message via\n         # `invalid_subdomain`.\n         if not UserProfile.objects.filter(email__iexact\u003demail).exists():\n             return None\n         if return_data is not None:\n             return_data[\u0027invalid_subdomain\u0027] \u003d True\n         return None\n     if not user_profile.is_active:\n         if return_data is not None:\n             if user_profile.is_mirror_dummy:\n                 # Record whether it\u0027s a mirror dummy account\n                 return_data[\u0027is_mirror_dummy\u0027] \u003d True\n             return_data[\u0027inactive_user\u0027] \u003d True\n         return None\n     if user_profile.realm.deactivated:\n         if return_data is not None:\n             return_data[\u0027inactive_realm\u0027] \u003d True\n         return None\n     return user_profile\n",
      "extendedDetails": {
        "oldValue": "[email-str, realm-Realm, return_data-Dict[str,Any](default-None)]",
        "newValue": "[email-str, realm-Realm, return_data-Optional[Dict[str,Any]](default-None)]"
      }
    },
    "d1ff4293a51c6e565c5de1aa553cf7911e88b325": {
      "type": "Ybodychange",
      "commitMessage": "backends: Remove assumption that only one user can have a given email.\n\nI probably should have just done this in the original implementation;\nthere\u0027s only a small downside in the form of an extra database query\nwhen trying to authenticate a user who doesn\u0027t exist.\n",
      "commitDate": "2017/11/27 上午7:42",
      "commitName": "d1ff4293a51c6e565c5de1aa553cf7911e88b325",
      "commitAuthor": "Tim Abbott",
      "commitDateOld": "2017/11/22 下午12:14",
      "commitNameOld": "719d6c49dfcf1b5a0ce80182755038b347eb7cc4",
      "commitAuthorOld": "Tim Abbott",
      "daysBetweenCommits": 4.81,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n    try:\n        user_profile \u003d get_user(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        if not UserProfile.objects.filter(email__iexact\u003demail).exists():\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not user_profile.is_active:\n        if return_data is not None:\n            if user_profile.is_mirror_dummy:\n                # Record whether it\u0027s a mirror dummy account\n                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n            return_data[\u0027inactive_user\u0027] \u003d True\n        return None\n    if user_profile.realm.deactivated:\n        if return_data is not None:\n            return_data[\u0027inactive_realm\u0027] \u003d True\n        return None\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 87,
      "functionName": "common_get_active_user",
      "functionAnnotation": "",
      "diff": "@@ -1,28 +1,26 @@\n def common_get_active_user(email: str, realm: Realm,\n                            return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n     try:\n         user_profile \u003d get_user(email, realm)\n     except UserProfile.DoesNotExist:\n         # If the user doesn\u0027t have an account in the target realm, we\n         # check whether they might have an account in another realm,\n         # and if so, provide a helpful error message via\n         # `invalid_subdomain`.\n-        try:\n-            user_profile \u003d get_user_profile_by_email(email)\n-        except UserProfile.DoesNotExist:\n+        if not UserProfile.objects.filter(email__iexact\u003demail).exists():\n             return None\n         if return_data is not None:\n             return_data[\u0027invalid_subdomain\u0027] \u003d True\n         return None\n     if not user_profile.is_active:\n         if return_data is not None:\n             if user_profile.is_mirror_dummy:\n                 # Record whether it\u0027s a mirror dummy account\n                 return_data[\u0027is_mirror_dummy\u0027] \u003d True\n             return_data[\u0027inactive_user\u0027] \u003d True\n         return None\n     if user_profile.realm.deactivated:\n         if return_data is not None:\n             return_data[\u0027inactive_realm\u0027] \u003d True\n         return None\n     return user_profile\n",
      "extendedDetails": {}
    },
    "719d6c49dfcf1b5a0ce80182755038b347eb7cc4": {
      "type": "Ybodychange",
      "commitMessage": "forms: Stop using get_user_profile_by_email in OurAuthenticationForm.\n\nStructurally, the main change here is replacing the `clean_username`\nfunction, which would get called when one accessed\nself.cleaned_data[\u0027username\u0027] with code in the main `clean` function.\n\nThis is important because only in `clean` do we have access to the\n`realm` object.\n\nSince I recently added full test coverage on this form, we know each\nof the major cases have a test; the error messages are unchanged.\n",
      "commitDate": "2017/11/22 下午12:14",
      "commitName": "719d6c49dfcf1b5a0ce80182755038b347eb7cc4",
      "commitAuthor": "Tim Abbott",
      "commitDateOld": "2017/11/22 下午12:14",
      "commitNameOld": "36bc037cc25fe4164ab827c59dfa34a000040c84",
      "commitAuthorOld": "Tim Abbott",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n    try:\n        user_profile \u003d get_user(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        try:\n            user_profile \u003d get_user_profile_by_email(email)\n        except UserProfile.DoesNotExist:\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not user_profile.is_active:\n        if return_data is not None:\n            if user_profile.is_mirror_dummy:\n                # Record whether it\u0027s a mirror dummy account\n                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n            return_data[\u0027inactive_user\u0027] \u003d True\n        return None\n    if user_profile.realm.deactivated:\n        if return_data is not None:\n            return_data[\u0027inactive_realm\u0027] \u003d True\n        return None\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 88,
      "functionName": "common_get_active_user",
      "functionAnnotation": "",
      "diff": "@@ -1,25 +1,28 @@\n def common_get_active_user(email: str, realm: Realm,\n                            return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n     try:\n         user_profile \u003d get_user(email, realm)\n     except UserProfile.DoesNotExist:\n         # If the user doesn\u0027t have an account in the target realm, we\n         # check whether they might have an account in another realm,\n         # and if so, provide a helpful error message via\n         # `invalid_subdomain`.\n         try:\n             user_profile \u003d get_user_profile_by_email(email)\n         except UserProfile.DoesNotExist:\n             return None\n         if return_data is not None:\n             return_data[\u0027invalid_subdomain\u0027] \u003d True\n         return None\n     if not user_profile.is_active:\n         if return_data is not None:\n+            if user_profile.is_mirror_dummy:\n+                # Record whether it\u0027s a mirror dummy account\n+                return_data[\u0027is_mirror_dummy\u0027] \u003d True\n             return_data[\u0027inactive_user\u0027] \u003d True\n         return None\n     if user_profile.realm.deactivated:\n         if return_data is not None:\n             return_data[\u0027inactive_realm\u0027] \u003d True\n         return None\n     return user_profile\n",
      "extendedDetails": {}
    },
    "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c": {
      "type": "Yintroduced",
      "commitMessage": "auth: Rewrite DummyAuthBackend to not block email reuse.\n\nThis require some care to ensure we still provide the same nice error\nmessages for the case of a user who has an account, just not with this\norganization.\n\nAlso, we fix the fact that the docstring was (and I think always has\nbeen) at best confusing and perhaps even inaccurate.\n",
      "commitDate": "2017/11/22 上午10:23",
      "commitName": "fb6abe1b1e9c9491f630879aeb6adf8921d92d3c",
      "commitAuthor": "Tim Abbott",
      "diff": "@@ -0,0 +1,25 @@\n+def common_get_active_user(email: str, realm: Realm,\n+                           return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n+    try:\n+        user_profile \u003d get_user(email, realm)\n+    except UserProfile.DoesNotExist:\n+        # If the user doesn\u0027t have an account in the target realm, we\n+        # check whether they might have an account in another realm,\n+        # and if so, provide a helpful error message via\n+        # `invalid_subdomain`.\n+        try:\n+            user_profile \u003d get_user_profile_by_email(email)\n+        except UserProfile.DoesNotExist:\n+            return None\n+        if return_data is not None:\n+            return_data[\u0027invalid_subdomain\u0027] \u003d True\n+        return None\n+    if not user_profile.is_active:\n+        if return_data is not None:\n+            return_data[\u0027inactive_user\u0027] \u003d True\n+        return None\n+    if user_profile.realm.deactivated:\n+        if return_data is not None:\n+            return_data[\u0027inactive_realm\u0027] \u003d True\n+        return None\n+    return user_profile\n",
      "actualSource": "def common_get_active_user(email: str, realm: Realm,\n                           return_data: Dict[str, Any]\u003dNone) -\u003e Optional[UserProfile]:\n    try:\n        user_profile \u003d get_user(email, realm)\n    except UserProfile.DoesNotExist:\n        # If the user doesn\u0027t have an account in the target realm, we\n        # check whether they might have an account in another realm,\n        # and if so, provide a helpful error message via\n        # `invalid_subdomain`.\n        try:\n            user_profile \u003d get_user_profile_by_email(email)\n        except UserProfile.DoesNotExist:\n            return None\n        if return_data is not None:\n            return_data[\u0027invalid_subdomain\u0027] \u003d True\n        return None\n    if not user_profile.is_active:\n        if return_data is not None:\n            return_data[\u0027inactive_user\u0027] \u003d True\n        return None\n    if user_profile.realm.deactivated:\n        if return_data is not None:\n            return_data[\u0027inactive_realm\u0027] \u003d True\n        return None\n    return user_profile\n",
      "path": "zproject/backends.py",
      "functionStartLine": 88,
      "functionName": "common_get_active_user",
      "functionAnnotation": ""
    }
  }
}