{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "DefaultLauncher.java",
  "functionName": "discoverRoot",
  "functionId": "discoverRoot___discoveryRequest-LauncherDiscoveryRequest__phase-String",
  "sourceFilePath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 99,
  "functionEndLine": 125,
  "numCommitsSeen": 442,
  "timeTaken": 2210,
  "changeHistory": [
    "d5c0b1cca585ea7cef809db5377f5ee6b31cf630",
    "583ef858522084a4bb939c53860135228764cb37",
    "d438a975feaa869a334794ac10082699c1dae1ca",
    "936a919111e688079af5d6a5eee36bb2373e931d",
    "8ca326a0b7a664a38ed489bd4a69470b9391063d",
    "c49b423f2d1c723a3724597049810416a91f5cba",
    "c88bd40fc19d16022abd5ee9bd4cc287b67afff9",
    "483222d5853c2df6d9df7f8ea0868ef9c82b5901",
    "402c756a056e13f5f49634616d87b1333e3c211e",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "4537bec58804c392a8bce296dced0337c8ec1a8d",
    "e273d6681b96509b0bd35916a82fcfada21f18c6",
    "c1f6fc7c8a7dbdf120b7447c96c9b81751b8a96b",
    "d75683776656e7781919bec097971cbae38c5d9d",
    "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
    "0ffade04d33544837b126ae868da1ec087d113e3",
    "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85",
    "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3",
    "2be5dd432541041b0d023d2f535287b7f7a2b882",
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
    "bc1770895674f4b22c7db1068d2b33b3699f9aa8",
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
    "a2e588e96c3a763553d764d5c35a44b9eea41d75",
    "795066436d5b33a32375cd421a9241f1b1d0499d",
    "57b07e0594875902399805d6e41514f03a4b2f31",
    "961fd47344c55d21907607ec9672df6d4f3d2362",
    "ab12dc85ce90a941531d666e658dfaa0834fda31",
    "9da25e126d174ba6e6ae02596afa538a7cafe17b",
    "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
    "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
    "af19db7e5a676b3d7e56c48847b09347866d1fcb",
    "b76422c02c3a9eed390c5949764dc8b7fc3e3243",
    "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f",
    "e061fa45d89529edff690f329298c6a061482834",
    "cfed3cac24530762a6a8b99627b17f5b00ac9260",
    "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
    "e56fcfc20e3c100cf9e4ed4b142a6a3863c29353",
    "830b6d5976b6db01dad3866cfb3d54c6216b1252",
    "7dc017fd9255ba302736d9ad1ce778f93e77b573",
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
    "849e9afba14e3ea2639dfc985b0fd515a991639a",
    "a6a549c084132d2d1c2d7d46a26b47e48cb4f608",
    "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f",
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
    "1105bef6877be1c036331d5b6d607d5e16c7463b",
    "e1184f5a171d084f33ddca961836b17dabc63165",
    "cecc46dfd9b0dd931bc8625560cdcd9bced45753",
    "a150c7c86dcb16500114a601f76f476c06b0a782",
    "0e097640972835e71a625cdee7a9359089cbec78",
    "623ccd4a73d487ec55e24f8415597910626fd90d",
    "9d0819e13f70c9385836259aabb8077b5240fb2c",
    "2faf053a85fd24cb6f65e7b1258d7c507587866c",
    "8edbcf80166518746080a12cecfddc04f2577351",
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
    "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
    "cbf97077bae0db71dc3a7cade28c3b00587a8699"
  ],
  "changeHistoryShort": {
    "d5c0b1cca585ea7cef809db5377f5ee6b31cf630": "Ybodychange",
    "583ef858522084a4bb939c53860135228764cb37": "Ybodychange",
    "d438a975feaa869a334794ac10082699c1dae1ca": "Ybodychange",
    "936a919111e688079af5d6a5eee36bb2373e931d": "Ybodychange",
    "8ca326a0b7a664a38ed489bd4a69470b9391063d": "Ybodychange",
    "c49b423f2d1c723a3724597049810416a91f5cba": "Ybodychange",
    "c88bd40fc19d16022abd5ee9bd4cc287b67afff9": "Ybodychange",
    "483222d5853c2df6d9df7f8ea0868ef9c82b5901": "Ybodychange",
    "402c756a056e13f5f49634616d87b1333e3c211e": "Yparameterchange",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "4537bec58804c392a8bce296dced0337c8ec1a8d": "Yfilerename",
    "e273d6681b96509b0bd35916a82fcfada21f18c6": "Yfilerename",
    "c1f6fc7c8a7dbdf120b7447c96c9b81751b8a96b": "Ybodychange",
    "d75683776656e7781919bec097971cbae38c5d9d": "Ybodychange",
    "875b6ea55d22a6b5e7d734974d7d710fb05825a1": "Ybodychange",
    "0ffade04d33544837b126ae868da1ec087d113e3": "Ybodychange",
    "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85": "Ybodychange",
    "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3": "Ybodychange",
    "2be5dd432541041b0d023d2f535287b7f7a2b882": "Ybodychange",
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": "Ybodychange",
    "bc1770895674f4b22c7db1068d2b33b3699f9aa8": "Ybodychange",
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": "Yfilerename",
    "a2e588e96c3a763553d764d5c35a44b9eea41d75": "Yfilerename",
    "795066436d5b33a32375cd421a9241f1b1d0499d": "Ybodychange",
    "57b07e0594875902399805d6e41514f03a4b2f31": "Yparameterchange",
    "961fd47344c55d21907607ec9672df6d4f3d2362": "Yfilerename",
    "ab12dc85ce90a941531d666e658dfaa0834fda31": "Ybodychange",
    "9da25e126d174ba6e6ae02596afa538a7cafe17b": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be": "Ymultichange(Yparameterchange,Ybodychange)",
    "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5": "Ybodychange",
    "af19db7e5a676b3d7e56c48847b09347866d1fcb": "Ybodychange",
    "b76422c02c3a9eed390c5949764dc8b7fc3e3243": "Ybodychange",
    "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f": "Yparameterchange",
    "e061fa45d89529edff690f329298c6a061482834": "Ybodychange",
    "cfed3cac24530762a6a8b99627b17f5b00ac9260": "Ybodychange",
    "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a": "Ymultichange(Yparameterchange,Ybodychange)",
    "e56fcfc20e3c100cf9e4ed4b142a6a3863c29353": "Ybodychange",
    "830b6d5976b6db01dad3866cfb3d54c6216b1252": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "7dc017fd9255ba302736d9ad1ce778f93e77b573": "Ybodychange",
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": "Ybodychange",
    "849e9afba14e3ea2639dfc985b0fd515a991639a": "Ybodychange",
    "a6a549c084132d2d1c2d7d46a26b47e48cb4f608": "Ybodychange",
    "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f": "Ybodychange",
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c": "Ybodychange",
    "1105bef6877be1c036331d5b6d607d5e16c7463b": "Ybodychange",
    "e1184f5a171d084f33ddca961836b17dabc63165": "Ybodychange",
    "cecc46dfd9b0dd931bc8625560cdcd9bced45753": "Ybodychange",
    "a150c7c86dcb16500114a601f76f476c06b0a782": "Ybodychange",
    "0e097640972835e71a625cdee7a9359089cbec78": "Ybodychange",
    "623ccd4a73d487ec55e24f8415597910626fd90d": "Ybodychange",
    "9d0819e13f70c9385836259aabb8077b5240fb2c": "Ybodychange",
    "2faf053a85fd24cb6f65e7b1258d7c507587866c": "Ybodychange",
    "8edbcf80166518746080a12cecfddc04f2577351": "Ybodychange",
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534": "Yrename",
    "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a": "Ymultichange(Yparameterchange,Ybodychange)",
    "cbf97077bae0db71dc3a7cade28c3b00587a8699": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5c0b1cca585ea7cef809db5377f5ee6b31cf630": {
      "type": "Ybodychange",
      "commitMessage": "Introduce custom logging façade for JUL\n\nThis commit introduces a custom logging façade for Java Util Logging (JUL) to be used internally within the framework.\n\nIssue: #834\n",
      "commitDate": "2017/9/8 下午9:26",
      "commitName": "d5c0b1cca585ea7cef809db5377f5ee6b31cf630",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/8/15 上午5:24",
      "commitNameOld": "583ef858522084a4bb939c53860135228764cb37",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 24.67,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            logger.debug(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        logger.debug(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 97,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n-            logger.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n+            logger.debug(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n-        logger.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n+        logger.debug(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n         engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "583ef858522084a4bb939c53860135228764cb37": {
      "type": "Ybodychange",
      "commitMessage": "Use consistent Logger field name across code base\n",
      "commitDate": "2017/8/15 上午5:24",
      "commitName": "583ef858522084a4bb939c53860135228764cb37",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/6/18 下午9:53",
      "commitNameOld": "d438a975feaa869a334794ac10082699c1dae1ca",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 57.31,
      "commitsBetweenForRepo": 268,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            logger.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        logger.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 97,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n-            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n+            logger.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n-        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n+        logger.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n         engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d438a975feaa869a334794ac10082699c1dae1ca": {
      "type": "Ybodychange",
      "commitMessage": "Reintroduce pruning in DefaultLauncher\n\nPruning in `DefaultLauncher` is actually necessary, because it applies\n`PostDiscoveryFilters` (e.g. tags) and then needs to remove empty\ncontainers that will not register dynamic tests from the `TestPlan`.\n\nIssue: #732\n",
      "commitDate": "2017/6/18 下午9:53",
      "commitName": "d438a975feaa869a334794ac10082699c1dae1ca",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/6/18 下午8:54",
      "commitNameOld": "936a919111e688079af5d6a5eee36bb2373e931d",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 97,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,16 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n         engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n+    root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "936a919111e688079af5d6a5eee36bb2373e931d": {
      "type": "Ybodychange",
      "commitMessage": "DefaultLauncher no longer prunes TestDescriptor trees\n\nCloses #732.\n",
      "commitDate": "2017/6/18 下午8:54",
      "commitName": "936a919111e688079af5d6a5eee36bb2373e931d",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/4/15 下午10:03",
      "commitNameOld": "88a41f5e87f3a7c58443a88a14d4e1fc503cfc8c",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 63.95,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 97,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,15 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n         engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n-    root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8ca326a0b7a664a38ed489bd4a69470b9391063d": {
      "type": "Ybodychange",
      "commitMessage": "Route throwable handling through a single method\n\nChange logger \"org.junit.platform.launcher.core.DefaultLauncher\" to\nlevel\u003d\"error\" while testing the platform.\nUpdate M5 release notes.\n",
      "commitDate": "2017/4/15 下午6:27",
      "commitName": "8ca326a0b7a664a38ed489bd4a69470b9391063d",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/4/15 下午6:27",
      "commitNameOld": "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 97,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n-        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverRoot(testEngine, discoveryRequest);\n+        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverEngineRoot(testEngine, discoveryRequest);\n         engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c49b423f2d1c723a3724597049810416a91f5cba": {
      "type": "Ybodychange",
      "commitMessage": "Handle exceptions in test discovery phase\n\nState: work-in-progress\n\nAddresses: #750\n",
      "commitDate": "2017/4/15 下午6:27",
      "commitName": "c49b423f2d1c723a3724597049810416a91f5cba",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/3/20 上午12:33",
      "commitNameOld": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 26.75,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverRoot(testEngine, discoveryRequest);\n        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 95,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,16 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n-        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n-        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n-        Preconditions.notNull(engineRoot, () -\u003e String.format(\"The discover() method for TestEngine with ID \u0027%s\u0027 must return a non-null root TestDescriptor.\", testEngine.getId()));\n-        root.add(testEngine, engineRoot);\n+        Optional\u003cTestDescriptor\u003e engineRoot \u003d discoverRoot(testEngine, discoveryRequest);\n+        engineRoot.ifPresent(rootDescriptor -\u003e root.add(testEngine, rootDescriptor));\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c88bd40fc19d16022abd5ee9bd4cc287b67afff9": {
      "type": "Ybodychange",
      "commitMessage": "Include TestEngine ID in exception message in DefaultLauncher\n\nIssue: #429\n",
      "commitDate": "2016/7/26 上午1:47",
      "commitName": "c88bd40fc19d16022abd5ee9bd4cc287b67afff9",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/7/26 上午1:32",
      "commitNameOld": "483222d5853c2df6d9df7f8ea0868ef9c82b5901",
      "commitAuthorOld": "Steve Moyer",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        Preconditions.notNull(engineRoot, () -\u003e String.format(\"The discover() method for TestEngine with ID \u0027%s\u0027 must return a non-null root TestDescriptor.\", testEngine.getId()));\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 87,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n-        Preconditions.notNull(engineRoot, \"The discover() method must return at least the engine\u0027s TestDescriptor.\");\n+        Preconditions.notNull(engineRoot, () -\u003e String.format(\"The discover() method for TestEngine with ID \u0027%s\u0027 must return a non-null root TestDescriptor.\", testEngine.getId()));\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "483222d5853c2df6d9df7f8ea0868ef9c82b5901": {
      "type": "Ybodychange",
      "commitMessage": "Eliminated NPE caused when TestEngine\u0027s discover() method returns null. (#429)\n\n",
      "commitDate": "2016/7/26 上午1:32",
      "commitName": "483222d5853c2df6d9df7f8ea0868ef9c82b5901",
      "commitAuthor": "Steve Moyer",
      "commitDateOld": "2016/7/1 上午3:53",
      "commitNameOld": "402c756a056e13f5f49634616d87b1333e3c211e",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 24.9,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        Preconditions.notNull(engineRoot, \"The discover() method must return at least the engine\u0027s TestDescriptor.\");\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 87,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n+        Preconditions.notNull(engineRoot, \"The discover() method must return at least the engine\u0027s TestDescriptor.\");\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "402c756a056e13f5f49634616d87b1333e3c211e": {
      "type": "Yparameterchange",
      "commitMessage": "Rename TestDiscoveryRequest to LauncherDiscoveryRequest\n",
      "commitDate": "2016/7/1 上午3:53",
      "commitName": "402c756a056e13f5f49634616d87b1333e3c211e",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/20 下午7:43",
      "commitNameOld": "f05183091a62cbbd58df338fc58f599f7994ec74",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 10.34,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 87,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n-private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n+private Root discoverRoot(LauncherDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n         if (engineIsExcluded) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[discoveryRequest-TestDiscoveryRequest, phase-String]",
        "newValue": "[discoveryRequest-LauncherDiscoveryRequest, phase-String]"
      }
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午4:59",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午2:04",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 87,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
        "newPath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
      }
    },
    "4537bec58804c392a8bce296dced0337c8ec1a8d": {
      "type": "Yfilerename",
      "commitMessage": "Rename remaining org.junit.gen5 base packages to org.junit.platform\n\nIssue: #286\n",
      "commitDate": "2016/6/20 上午1:22",
      "commitName": "4537bec58804c392a8bce296dced0337c8ec1a8d",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午12:25",
      "commitNameOld": "4dd821ac0cf681f17f14e1dcd383b10c99104e70",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 87,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
      }
    },
    "e273d6681b96509b0bd35916a82fcfada21f18c6": {
      "type": "Yfilerename",
      "commitMessage": "Rename launcher.main package to launcher.core\n",
      "commitDate": "2016/6/19 上午5:26",
      "commitName": "e273d6681b96509b0bd35916a82fcfada21f18c6",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/19 上午5:19",
      "commitNameOld": "d4fca2b705b1f05312a59e71d37853e15632c437",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
      "functionStartLine": 87,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java"
      }
    },
    "c1f6fc7c8a7dbdf120b7447c96c9b81751b8a96b": {
      "type": "Ybodychange",
      "commitMessage": "Overhaul required/excluded engine filter support\n\nPrior to this commit, the `EngineIdFilter` could only be used to\nrequire a single `TestEngine` within the entire test plan.\n\nThis commit addresses this issue and revises our `TestEngine` filtering\nsupport in the following ways.\n\n- Renamed `EngineIdFilter` to `EngineFilter`\n- `EngineFilter` now applies to `TestEngine` instead of `String`\n- Converted `requireEngineId(String)` to `requireEngines(String...)`\n- Introduced `excludeEngines(String...)`\n\nCloses: #291\n",
      "commitDate": "2016/6/5 上午2:41",
      "commitName": "c1f6fc7c8a7dbdf120b7447c96c9b81751b8a96b",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/28 下午9:55",
      "commitNameOld": "d75683776656e7781919bec097971cbae38c5d9d",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 7.2,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n        if (engineIsExcluded) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 84,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n-        final String engineId \u003d testEngine.getId();\n-        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.apply(engineId)).anyMatch(FilterResult::excluded)) {\n-            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n+        boolean engineIsExcluded \u003d discoveryRequest.getEngineFilters().stream().map(engineFilter -\u003e engineFilter.apply(testEngine)).anyMatch(FilterResult::excluded);\n+        if (engineIsExcluded) {\n+            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to an EngineFilter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n-        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n+        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d75683776656e7781919bec097971cbae38c5d9d": {
      "type": "Ybodychange",
      "commitMessage": "Rename Filter.filter() to Filter.apply()\n",
      "commitDate": "2016/5/28 下午9:55",
      "commitName": "d75683776656e7781919bec097971cbae38c5d9d",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/28 下午9:26",
      "commitNameOld": "5f6f33a074e8469211e5d648a4f98a3628be18a1",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.apply(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 84,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         final String engineId \u003d testEngine.getId();\n-        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n+        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.apply(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n         UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "875b6ea55d22a6b5e7d734974d7d710fb05825a1": {
      "type": "Ybodychange",
      "commitMessage": "Fail immediately if no test engines are detected\n\nIssue: #264\n",
      "commitDate": "2016/5/13 下午11:49",
      "commitName": "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/3/18 下午4:05",
      "commitNameOld": "0ffade04d33544837b126ae868da1ec087d113e3",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 56.32,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 83,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         final String engineId \u003d testEngine.getId();\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n-        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n+        LOG.fine(() -\u003e String.format(\"Discovering tests during Launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n         UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0ffade04d33544837b126ae868da1ec087d113e3": {
      "type": "Ybodychange",
      "commitMessage": "#190 DefaultLauncher uses engine.discover(request, uniqueId)\n",
      "commitDate": "2016/3/18 下午4:05",
      "commitName": "0ffade04d33544837b126ae868da1ec087d113e3",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016/3/11 上午3:31",
      "commitNameOld": "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 7.52,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 74,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : this.testEngines) {\n         final String engineId \u003d testEngine.getId();\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n-        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n+        UniqueId uniqueEngineId \u003d UniqueId.forEngine(testEngine.getId());\n+        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest, uniqueEngineId);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85": {
      "type": "Ybodychange",
      "commitMessage": "Polish DefaultLauncher implementation\n",
      "commitDate": "2016/3/11 上午3:31",
      "commitName": "7a4e5ff5338a68a68cd8072a235fb5ee19ba2f85",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/3/11 上午2:49",
      "commitNameOld": "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3",
      "commitAuthorOld": "Stefan Birkner",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : this.testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 73,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n-    for (TestEngine testEngine : testEngines) {\n+    for (TestEngine testEngine : this.testEngines) {\n         final String engineId \u003d testEngine.getId();\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3": {
      "type": "Ybodychange",
      "commitMessage": "Engines for DefaultLauncher must have different ids.\n\nA DefaultLauncher with TestEngines that have equal ids is unusable. It\nfails to discover or execute tests. Hence it should not be possible to\ncreate such a launcher.\n",
      "commitDate": "2016/3/11 上午2:49",
      "commitName": "9ce6fbe62ab7eda318f2ecb9cc5f91a18dce39d3",
      "commitAuthor": "Stefan Birkner",
      "commitDateOld": "2016/3/10 上午7:08",
      "commitNameOld": "f696254e2bc57a53a1d64e7a3bb6754d655eb7d7",
      "commitAuthorOld": "Stefan Birkner",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 73,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,16 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n-    Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n     for (TestEngine testEngine : testEngines) {\n         final String engineId \u003d testEngine.getId();\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n-        if (!uniqueEngineIds.add(engineId)) {\n-            throw new JUnitException(String.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n-        }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n         TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2be5dd432541041b0d023d2f535287b7f7a2b882": {
      "type": "Ybodychange",
      "commitMessage": "Rename to discover() for consistency with Launcher\n",
      "commitDate": "2016/1/22 下午8:14",
      "commitName": "2be5dd432541041b0d023d2f535287b7f7a2b882",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016/1/22 下午6:32",
      "commitNameOld": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n    for (TestEngine testEngine : testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        if (!uniqueEngineIds.add(engineId)) {\n            throw new JUnitException(String.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 63,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n     for (TestEngine testEngine : testEngines) {\n         final String engineId \u003d testEngine.getId();\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n         if (!uniqueEngineIds.add(engineId)) {\n             throw new JUnitException(String.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n-        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n+        TestDescriptor engineRoot \u003d testEngine.discover(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": {
      "type": "Ybodychange",
      "commitMessage": "Simplify DefaultLauncher, remove TestEngineRegistry interface\n",
      "commitDate": "2016/1/22 下午6:32",
      "commitName": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016/1/22 下午6:26",
      "commitNameOld": "1f209b6b9e9c66c4931f34a5d83df8e11c1d6dea",
      "commitAuthorOld": "Matthias Merdes",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n    for (TestEngine testEngine : testEngines) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        if (!uniqueEngineIds.add(engineId)) {\n            throw new JUnitException(String.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 63,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n-    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+    for (TestEngine testEngine : testEngines) {\n         final String engineId \u003d testEngine.getId();\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n         if (!uniqueEngineIds.add(engineId)) {\n-            throw new JUnitException(String.format(\"Failure in launcher: TestEngineRegistry [%s] returned multiple engines with the same ID [%s].\", testEngineRegistry.getClass().getName(), engineId));\n+            throw new JUnitException(String.format(\"Failure in launcher: multiple engines with the same ID [%s].\", engineId));\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n         TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc1770895674f4b22c7db1068d2b33b3699f9aa8": {
      "type": "Ybodychange",
      "commitMessage": "Ensure uniqueness of engine IDs in DefaultLauncher\n\nIssue: #104\n",
      "commitDate": "2016/1/21 上午3:58",
      "commitName": "bc1770895674f4b22c7db1068d2b33b3699f9aa8",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/21 上午3:33",
      "commitNameOld": "05293050d0bd019c08237dab82e6c3b57df18a4e",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        final String engineId \u003d testEngine.getId();\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n            continue;\n        }\n        if (!uniqueEngineIds.add(engineId)) {\n            throw new JUnitException(String.format(\"Failure in launcher: TestEngineRegistry [%s] returned multiple engines with the same ID [%s].\", testEngineRegistry.getClass().getName(), engineId));\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 91,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,20 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n+    Set\u003cString\u003e uniqueEngineIds \u003d new HashSet\u003c\u003e();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n-            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n+        final String engineId \u003d testEngine.getId();\n+        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(engineId)).anyMatch(FilterResult::excluded)) {\n+            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", engineId, phase));\n             continue;\n         }\n-        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n+        if (!uniqueEngineIds.add(engineId)) {\n+            throw new JUnitException(String.format(\"Failure in launcher: TestEngineRegistry [%s] returned multiple engines with the same ID [%s].\", testEngineRegistry.getClass().getName(), engineId));\n+        }\n+        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, engineId));\n         TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": {
      "type": "Yfilerename",
      "commitMessage": "Rename JUnit5Launcher to DefaultLauncher\n\nIssue: #129\n",
      "commitDate": "2016/1/21 上午1:52",
      "commitName": "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/21 上午1:47",
      "commitNameOld": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 74,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java"
      }
    },
    "a2e588e96c3a763553d764d5c35a44b9eea41d75": {
      "type": "Yfilerename",
      "commitMessage": "Convert Launcher class into an interface\n\nThis commit coverts the existing Launcher class into an interface and\nrenames the existing implementation to JUnit5Launcher.\n\nIn addition, this commit renames DiscoveryRequestBuilder to\nTestDiscoveryRequestBuilder.\n\nIssue: #129\n",
      "commitDate": "2016/1/21 上午1:47",
      "commitName": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016/1/21 上午1:27",
      "commitNameOld": "027bc980ad0a17a6130013aeec068296606bbfef",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
      "functionStartLine": 92,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java"
      }
    },
    "795066436d5b33a32375cd421a9241f1b1d0499d": {
      "type": "Ybodychange",
      "commitMessage": "#54: removed method from DiscoveryRequest\nmade DiscoveryRequest package private\n",
      "commitDate": "2016/1/19 下午6:26",
      "commitName": "795066436d5b33a32375cd421a9241f1b1d0499d",
      "commitAuthor": "Matthias Merdes",
      "commitDateOld": "2016/1/19 下午5:32",
      "commitNameOld": "57b07e0594875902399805d6e41514f03a4b2f31",
      "commitAuthorOld": "Matthias Merdes",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyPostDiscoveryFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
      "functionStartLine": 105,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n-    root.applyFilters(discoveryRequest);\n+    root.applyPostDiscoveryFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57b07e0594875902399805d6e41514f03a4b2f31": {
      "type": "Yparameterchange",
      "commitMessage": "#54: Extracted new interface TestDiscoveryRequest from DiscoveryRequest and adapted usages\n",
      "commitDate": "2016/1/19 下午5:32",
      "commitName": "57b07e0594875902399805d6e41514f03a4b2f31",
      "commitAuthor": "Matthias Merdes",
      "commitDateOld": "2016/1/19 上午12:34",
      "commitNameOld": "961fd47344c55d21907607ec9672df6d4f3d2362",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
      "functionStartLine": 105,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n-private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+private Root discoverRoot(TestDiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[discoveryRequest-DiscoveryRequest, phase-String]",
        "newValue": "[discoveryRequest-TestDiscoveryRequest, phase-String]"
      }
    },
    "961fd47344c55d21907607ec9672df6d4f3d2362": {
      "type": "Yfilerename",
      "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
      "commitDate": "2016/1/19 上午12:34",
      "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016/1/18 下午11:56",
      "commitNameOld": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
      "functionStartLine": 108,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java"
      }
    },
    "ab12dc85ce90a941531d666e658dfaa0834fda31": {
      "type": "Ybodychange",
      "commitMessage": "Remove EngineAwareTestDescriptor\n\nIssue: #54\n",
      "commitDate": "2016/1/18 下午11:03",
      "commitName": "ab12dc85ce90a941531d666e658dfaa0834fda31",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016/1/18 下午10:57",
      "commitNameOld": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 103,
      "functionName": "discoverRoot",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n     Root root \u003d new Root();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n-        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n+        TestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.add(testEngine, engineRoot);\n     }\n     root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9da25e126d174ba6e6ae02596afa538a7cafe17b": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
      "commitDate": "2016/1/18 下午10:57",
      "commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
          "commitDate": "2016/1/18 下午10:57",
          "commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2016/1/18 下午12:10",
          "commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 104,
          "functionName": "discoverRoot",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n-private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n-    RootTestDescriptor root \u003d new RootTestDescriptor();\n+private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+    Root root \u003d new Root();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n-        root.addChild(engineRoot);\n+        root.add(testEngine, engineRoot);\n     }\n     root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "discoverRootDescriptor",
            "newValue": "discoverRoot"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
          "commitDate": "2016/1/18 下午10:57",
          "commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2016/1/18 下午12:10",
          "commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 104,
          "functionName": "discoverRoot",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n-private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n-    RootTestDescriptor root \u003d new RootTestDescriptor();\n+private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+    Root root \u003d new Root();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n-        root.addChild(engineRoot);\n+        root.add(testEngine, engineRoot);\n     }\n     root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "RootTestDescriptor",
            "newValue": "Root"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
          "commitDate": "2016/1/18 下午10:57",
          "commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2016/1/18 下午12:10",
          "commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n    Root root \u003d new Root();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.add(testEngine, engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 104,
          "functionName": "discoverRoot",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n-private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n-    RootTestDescriptor root \u003d new RootTestDescriptor();\n+private Root discoverRoot(DiscoveryRequest discoveryRequest, String phase) {\n+    Root root \u003d new Root();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n-        root.addChild(engineRoot);\n+        root.add(testEngine, engineRoot);\n     }\n     root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Provide better names for the test plan specification\n\n- Replaced all occurrences of specification with discovery request\n- Replaced all occurrences of specification element with selector\n- Renamed package \"org.junit.gen5.engine.specification\"\n             into \"org.junit.gen5.engine.discoveryrequest\"\n\nIssue: #116\n",
      "commitDate": "2016/1/18 下午12:10",
      "commitName": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Provide better names for the test plan specification\n\n- Replaced all occurrences of specification with discovery request\n- Replaced all occurrences of specification element with selector\n- Renamed package \"org.junit.gen5.engine.specification\"\n             into \"org.junit.gen5.engine.discoveryrequest\"\n\nIssue: #116\n",
          "commitDate": "2016/1/18 下午12:10",
          "commitName": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016/1/18 上午11:24",
          "commitNameOld": "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 98,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n-private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n+private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n+        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n-        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.addChild(engineRoot);\n     }\n-    root.applyFilters(specification);\n+    root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[specification-DiscoveryRequest, phase-String]",
            "newValue": "[discoveryRequest-DiscoveryRequest, phase-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Provide better names for the test plan specification\n\n- Replaced all occurrences of specification with discovery request\n- Replaced all occurrences of specification element with selector\n- Renamed package \"org.junit.gen5.engine.specification\"\n             into \"org.junit.gen5.engine.discoveryrequest\"\n\nIssue: #116\n",
          "commitDate": "2016/1/18 下午12:10",
          "commitName": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016/1/18 上午11:24",
          "commitNameOld": "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(discoveryRequest);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 98,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n-private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n+private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest discoveryRequest, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n+        if (discoveryRequest.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n-        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(discoveryRequest);\n         root.addChild(engineRoot);\n     }\n-    root.applyFilters(specification);\n+    root.applyFilters(discoveryRequest);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5": {
      "type": "Ybodychange",
      "commitMessage": "Provide better names for the test plan specification\n\n- Renamed isAccepted() into included()\n- Renamed isFiltered() into excluded()\n\nIssue: #116\n",
      "commitDate": "2016/1/18 上午11:24",
      "commitName": "82ff8d2c1bf2426f25b7ac2d9617fa25a2a312b5",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016/1/17 下午8:50",
      "commitNameOld": "af19db7e5a676b3d7e56c48847b09347866d1fcb",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 98,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {\n+        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::excluded)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "af19db7e5a676b3d7e56c48847b09347866d1fcb": {
      "type": "Ybodychange",
      "commitMessage": "Provide better names for the test plan specification\n\n- Renamed isFiltered() into isDeclined()\n\nIssue: #116\n",
      "commitDate": "2016/1/17 下午8:50",
      "commitName": "af19db7e5a676b3d7e56c48847b09347866d1fcb",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016/1/17 上午4:00",
      "commitNameOld": "b76422c02c3a9eed390c5949764dc8b7fc3e3243",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 98,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isFiltered)) {\n+        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isDeclined)) {\n             LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n             continue;\n         }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b76422c02c3a9eed390c5949764dc8b7fc3e3243": {
      "type": "Ybodychange",
      "commitMessage": "Provide better names for the test plan specification\n\n- created EngineIdFilter as a new filter\n- let the Launcher execute the EngineIdFilter\n\nIssue: #116\n",
      "commitDate": "2016/1/17 上午4:00",
      "commitName": "b76422c02c3a9eed390c5949764dc8b7fc3e3243",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016/1/15 下午10:15",
      "commitNameOld": "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isFiltered)) {\n            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n            continue;\n        }\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 98,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,15 @@\n private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+        if (specification.getEngineIdFilters().stream().map(engineIdFilter -\u003e engineIdFilter.filter(testEngine.getId())).anyMatch(FilterResult::isFiltered)) {\n+            LOG.fine(() -\u003e String.format(\"Test discovery for engine \u0027%s\u0027 was skipped due to a filter in phase \u0027%s\u0027.\", testEngine.getId(), phase));\n+            continue;\n+        }\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f": {
      "type": "Yparameterchange",
      "commitMessage": "Provide better names for the test plan specification\n\n- rename class TestPlanSpecification to DiscoveryRequest\n- rename class TestPlanSpecificationElement to DiscoverySelector\n- rename class TestPlanSpecificationElementVisitor to DiscoverySelectorVisitor\n- rename class TestPlanSpecification to DiscoveryRequest\n\nIssue: #116\n",
      "commitDate": "2016/1/15 下午10:15",
      "commitName": "ad553b10b4b2b1a78c9a0c91a6d50ebb1421ff3f",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016/1/15 下午8:37",
      "commitNameOld": "156d244638005cdb0c0e82ee8e6fa987d6092b90",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 99,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n-private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n+private RootTestDescriptor discoverRootDescriptor(DiscoveryRequest specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n         LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[specification-TestPlanSpecification, phase-String]",
        "newValue": "[specification-DiscoveryRequest, phase-String]"
      }
    },
    "e061fa45d89529edff690f329298c6a061482834": {
      "type": "Ybodychange",
      "commitMessage": "Reduce log level to FINE in Launcher.discoverRootDescriptor()\n\nIssue: #84\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/4 下午9:54",
      "commitName": "e061fa45d89529edff690f329298c6a061482834",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/4 上午6:11",
      "commitNameOld": "cfed3cac24530762a6a8b99627b17f5b00ac9260",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 103,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n-        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n+        LOG.fine(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cfed3cac24530762a6a8b99627b17f5b00ac9260": {
      "type": "Ybodychange",
      "commitMessage": "Polish Launcher and TestEngineRegistry APIs and Javadoc\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/4 上午6:11",
      "commitName": "cfed3cac24530762a6a8b99627b17f5b00ac9260",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/4 上午5:36",
      "commitNameOld": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 103,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n-    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n-        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase, testEngine.getId()));\n+    for (TestEngine testEngine : testEngineRegistry.getTestEngines()) {\n+        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine \u0027%s\u0027.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Log discovery/execution phase in Launcher.discoverRootDescriptor()\n\nIn order to avoid duplicated, misleading log entries, this commit\nintroduces a new \u0027phase\u0027 parameter in discoverRootDescriptor() so that\nthe seemingly duplicated log entries are discernible from one another.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/4 上午5:36",
      "commitName": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
      "commitAuthor": "Sam Brannen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Log discovery/execution phase in Launcher.discoverRootDescriptor()\n\nIn order to avoid duplicated, misleading log entries, this commit\nintroduces a new \u0027phase\u0027 parameter in discoverRootDescriptor() so that\nthe seemingly duplicated log entries are discernible from one another.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2016/1/4 上午5:36",
          "commitName": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/1/2 上午2:57",
          "commitNameOld": "a6e3e77eeb01b8e6fdc91be3120c6d07af1b5a91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.11,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 102,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n-        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n+        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[specification-TestPlanSpecification]",
            "newValue": "[specification-TestPlanSpecification, phase-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Log discovery/execution phase in Launcher.discoverRootDescriptor()\n\nIn order to avoid duplicated, misleading log entries, this commit\nintroduces a new \u0027phase\u0027 parameter in discoverRootDescriptor() so that\nthe seemingly duplicated log entries are discernible from one another.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2016/1/4 上午5:36",
          "commitName": "d6b17576a2b7e2d1ba28dbef2430c042ad1b887a",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/1/2 上午2:57",
          "commitNameOld": "a6e3e77eeb01b8e6fdc91be3120c6d07af1b5a91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.11,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase, testEngine.getId()));\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 102,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification, String phase) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n-        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n+        LOG.info(() -\u003e String.format(\"Discovering tests during launcher %s phase in engine %s.\", phase, testEngine.getId()));\n         EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n         root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e56fcfc20e3c100cf9e4ed4b142a6a3863c29353": {
      "type": "Ybodychange",
      "commitMessage": "RootTestDescriptor is parent of EngineDescriptors\n\nFixes the tree of TestDescriptors and filtering/pruning.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/18 下午11:59",
      "commitName": "e56fcfc20e3c100cf9e4ed4b142a6a3863c29353",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/18 下午11:58",
      "commitNameOld": "9f7d082872c4b4109729a3a480f1dedad3083bad",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addChild(engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 50,
      "functionName": "discoverRootDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n     RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n-        root.addTestDescriptorForEngine(testEngine, engineRoot);\n+        EngineAwareTestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        root.addChild(engineRoot);\n     }\n     root.applyFilters(specification);\n     root.prune();\n     return root;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "830b6d5976b6db01dad3866cfb3d54c6216b1252": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
      "commitDate": "2015/12/8 下午6:18",
      "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addTestDescriptorForEngine(testEngine, engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 53,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-public TestPlan discover(TestPlanSpecification specification) {\n-    TestPlan testPlan \u003d new TestPlan();\n+private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+    RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n-        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        root.addTestDescriptorForEngine(testEngine, engineRoot);\n     }\n-    testPlan.applyFilters(specification);\n-    testPlan.prune();\n-    return testPlan;\n+    root.applyFilters(specification);\n+    root.prune();\n+    return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "discover",
            "newValue": "discoverRootDescriptor"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addTestDescriptorForEngine(testEngine, engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 53,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-public TestPlan discover(TestPlanSpecification specification) {\n-    TestPlan testPlan \u003d new TestPlan();\n+private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+    RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n-        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        root.addTestDescriptorForEngine(testEngine, engineRoot);\n     }\n-    testPlan.applyFilters(specification);\n-    testPlan.prune();\n-    return testPlan;\n+    root.applyFilters(specification);\n+    root.prune();\n+    return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "TestPlan",
            "newValue": "RootTestDescriptor"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addTestDescriptorForEngine(testEngine, engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 53,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-public TestPlan discover(TestPlanSpecification specification) {\n-    TestPlan testPlan \u003d new TestPlan();\n+private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+    RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n-        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        root.addTestDescriptorForEngine(testEngine, engineRoot);\n     }\n-    testPlan.applyFilters(specification);\n-    testPlan.prune();\n-    return testPlan;\n+    root.applyFilters(specification);\n+    root.prune();\n+    return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015/12/8 下午6:18",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/6 下午8:30",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n    RootTestDescriptor root \u003d new RootTestDescriptor();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n        root.addTestDescriptorForEngine(testEngine, engineRoot);\n    }\n    root.applyFilters(specification);\n    root.prune();\n    return root;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 53,
          "functionName": "discoverRootDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,11 @@\n-public TestPlan discover(TestPlanSpecification specification) {\n-    TestPlan testPlan \u003d new TestPlan();\n+private RootTestDescriptor discoverRootDescriptor(TestPlanSpecification specification) {\n+    RootTestDescriptor root \u003d new RootTestDescriptor();\n     for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n-        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n+        TestDescriptor engineRoot \u003d testEngine.discoverTests(specification);\n+        root.addTestDescriptorForEngine(testEngine, engineRoot);\n     }\n-    testPlan.applyFilters(specification);\n-    testPlan.prune();\n-    return testPlan;\n+    root.applyFilters(specification);\n+    root.prune();\n+    return root;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7dc017fd9255ba302736d9ad1ce778f93e77b573": {
      "type": "Ybodychange",
      "commitMessage": "#49: Test ExecuteTestsTask with DummyTestEngine\n",
      "commitDate": "2015/12/6 下午8:30",
      "commitName": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/3 下午8:58",
      "commitNameOld": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n    }\n    testPlan.applyFilters(specification);\n    testPlan.prune();\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 49,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n-    for (TestEngine testEngine : lookupAllTestEngines()) {\n+    for (TestEngine testEngine : testEngineRegistry.lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n         TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n         testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n     }\n     testPlan.applyFilters(specification);\n     testPlan.prune();\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": {
      "type": "Ybodychange",
      "commitMessage": "#29: Refactored the TestEngine API\n- discoveryTests now returns the root testDescriptor and does not take and EngineDescriptor as argument\n- TestPlan holds a mapping for the engines and their corresponding root test descriptor\n",
      "commitDate": "2015/12/3 下午8:58",
      "commitName": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2015/12/3 下午6:42",
      "commitNameOld": "59a0a13262b73c398c05376448aad97e7582384d",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n    }\n    testPlan.applyFilters(specification);\n    testPlan.prune();\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 37,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,11 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n-        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n-        testEngine.discoverTests(specification, engineDescriptor);\n-        testPlan.addEngineDescriptor(engineDescriptor);\n+        TestDescriptor rootTestDescriptor \u003d testEngine.discoverTests(specification);\n+        testPlan.addTestDescriptorForEngine(testEngine, rootTestDescriptor);\n     }\n     testPlan.applyFilters(specification);\n     testPlan.prune();\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "849e9afba14e3ea2639dfc985b0fd515a991639a": {
      "type": "Ybodychange",
      "commitMessage": "Fix typo\n",
      "commitDate": "2015/11/23 上午6:02",
      "commitName": "849e9afba14e3ea2639dfc985b0fd515a991639a",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2015/11/23 上午5:22",
      "commitNameOld": "a6a549c084132d2d1c2d7d46a26b47e48cb4f608",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        testEngine.discoverTests(specification, engineDescriptor);\n        testPlan.addEngineDescriptor(engineDescriptor);\n    }\n    testPlan.applyFilters(specification);\n    testPlan.prune();\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 42,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        LOG.info(\"Discovering tests in enginge \" + testEngine.getId());\n+        LOG.info(\"Discovering tests in engine \" + testEngine.getId());\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         testEngine.discoverTests(specification, engineDescriptor);\n         testPlan.addEngineDescriptor(engineDescriptor);\n     }\n     testPlan.applyFilters(specification);\n     testPlan.prune();\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6a549c084132d2d1c2d7d46a26b47e48cb4f608": {
      "type": "Ybodychange",
      "commitMessage": "Introducing logging in Launcher\n",
      "commitDate": "2015/11/23 上午5:22",
      "commitName": "a6a549c084132d2d1c2d7d46a26b47e48cb4f608",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/23 上午4:58",
      "commitNameOld": "5bb440e06279fd20c98ea617c245141307390274",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        LOG.info(\"Discovering tests in enginge \" + testEngine.getId());\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        testEngine.discoverTests(specification, engineDescriptor);\n        testPlan.addEngineDescriptor(engineDescriptor);\n    }\n    testPlan.applyFilters(specification);\n    testPlan.prune();\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 42,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,12 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n+        LOG.info(\"Discovering tests in enginge \" + testEngine.getId());\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         testEngine.discoverTests(specification, engineDescriptor);\n         testPlan.addEngineDescriptor(engineDescriptor);\n     }\n     testPlan.applyFilters(specification);\n     testPlan.prune();\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f": {
      "type": "Ybodychange",
      "commitMessage": "Everything works again. Resolver is still more complicated than necessary.\n",
      "commitDate": "2015/11/9 下午10:50",
      "commitName": "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/9 下午7:11",
      "commitNameOld": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        testEngine.discoverTests(specification, engineDescriptor);\n        testPlan.addEngineDescriptor(engineDescriptor);\n    }\n    testPlan.applyFilters(specification);\n    testPlan.prune();\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 37,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         testEngine.discoverTests(specification, engineDescriptor);\n-        applyFiltersToEngineDescriptor(specification, engineDescriptor);\n-        pruneEngineDescriptor(engineDescriptor);\n         testPlan.addEngineDescriptor(engineDescriptor);\n     }\n+    testPlan.applyFilters(specification);\n+    testPlan.prune();\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c": {
      "type": "Ybodychange",
      "commitMessage": "changed TestEngine interface to only use engineDescriptor.addChild an no more return values.\ncompiles, but lots of tests failing\n",
      "commitDate": "2015/11/9 下午7:11",
      "commitName": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/8 下午5:46",
      "commitNameOld": "1105bef6877be1c036331d5b6d607d5e16c7463b",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        testEngine.discoverTests(specification, engineDescriptor);\n        applyFiltersToEngineDescriptor(specification, engineDescriptor);\n        pruneEngineDescriptor(engineDescriptor);\n        testPlan.addEngineDescriptor(engineDescriptor);\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 37,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,11 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n-        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n-        if (!testDescriptors.isEmpty()) {\n-            Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n-            descriptorCandidates.add(engineDescriptor);\n-            Set\u003cTestDescriptor\u003e prunedDescriptors \u003d pruneAllWithoutConcreteTests(descriptorCandidates);\n-            testPlan.addTestDescriptors(prunedDescriptors);\n-        }\n+        testEngine.discoverTests(specification, engineDescriptor);\n+        applyFiltersToEngineDescriptor(specification, engineDescriptor);\n+        pruneEngineDescriptor(engineDescriptor);\n+        testPlan.addEngineDescriptor(engineDescriptor);\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1105bef6877be1c036331d5b6d607d5e16c7463b": {
      "type": "Ybodychange",
      "commitMessage": "Added lost registration of engineDescriptor after filtering\n",
      "commitDate": "2015/11/8 下午5:46",
      "commitName": "1105bef6877be1c036331d5b6d607d5e16c7463b",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/8 下午2:31",
      "commitNameOld": "e1184f5a171d084f33ddca961836b17dabc63165",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n        if (!testDescriptors.isEmpty()) {\n            Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n            descriptorCandidates.add(engineDescriptor);\n            Set\u003cTestDescriptor\u003e prunedDescriptors \u003d pruneAllWithoutConcreteTests(descriptorCandidates);\n            testPlan.addTestDescriptors(prunedDescriptors);\n        }\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 41,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n         if (!testDescriptors.isEmpty()) {\n             Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n+            descriptorCandidates.add(engineDescriptor);\n             Set\u003cTestDescriptor\u003e prunedDescriptors \u003d pruneAllWithoutConcreteTests(descriptorCandidates);\n             testPlan.addTestDescriptors(prunedDescriptors);\n         }\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e1184f5a171d084f33ddca961836b17dabc63165": {
      "type": "Ybodychange",
      "commitMessage": "Fixed tree build in JUnit5\n",
      "commitDate": "2015/11/8 下午2:31",
      "commitName": "e1184f5a171d084f33ddca961836b17dabc63165",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/8 上午5:58",
      "commitNameOld": "cecc46dfd9b0dd931bc8625560cdcd9bced45753",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.36,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n        if (!testDescriptors.isEmpty()) {\n            Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n            Set\u003cTestDescriptor\u003e prunedDescriptors \u003d pruneAllWithoutConcreteTests(descriptorCandidates);\n            testPlan.addTestDescriptors(prunedDescriptors);\n        }\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 41,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n         if (!testDescriptors.isEmpty()) {\n             Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n-            Set\u003cTestDescriptor\u003e descriptorsWithConcreteTests \u003d filterWithoutConcreteTests(descriptorCandidates);\n-            testPlan.addTestDescriptors(descriptorsWithConcreteTests);\n+            Set\u003cTestDescriptor\u003e prunedDescriptors \u003d pruneAllWithoutConcreteTests(descriptorCandidates);\n+            testPlan.addTestDescriptors(prunedDescriptors);\n         }\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cecc46dfd9b0dd931bc8625560cdcd9bced45753": {
      "type": "Ybodychange",
      "commitMessage": "tag filtering basically works. still some strange reporting in IntelliJ test runner.\n",
      "commitDate": "2015/11/8 上午5:58",
      "commitName": "cecc46dfd9b0dd931bc8625560cdcd9bced45753",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/4 下午11:28",
      "commitNameOld": "a150c7c86dcb16500114a601f76f476c06b0a782",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 3.27,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n        if (!testDescriptors.isEmpty()) {\n            Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n            Set\u003cTestDescriptor\u003e descriptorsWithConcreteTests \u003d filterWithoutConcreteTests(descriptorCandidates);\n            testPlan.addTestDescriptors(descriptorsWithConcreteTests);\n        }\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 41,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,13 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n         if (!testDescriptors.isEmpty()) {\n-            testPlan.addTestDescriptor(engineDescriptor);\n-            testPlan.addTestDescriptors(testDescriptors);\n+            Set\u003cTestDescriptor\u003e descriptorCandidates \u003d findFilteredCandidates(specification, testDescriptors);\n+            Set\u003cTestDescriptor\u003e descriptorsWithConcreteTests \u003d filterWithoutConcreteTests(descriptorCandidates);\n+            testPlan.addTestDescriptors(descriptorsWithConcreteTests);\n         }\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a150c7c86dcb16500114a601f76f476c06b0a782": {
      "type": "Ybodychange",
      "commitMessage": "resolver can resolve nested classes\n",
      "commitDate": "2015/11/4 下午11:28",
      "commitName": "a150c7c86dcb16500114a601f76f476c06b0a782",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/11/3 下午5:46",
      "commitNameOld": "0e097640972835e71a625cdee7a9359089cbec78",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n        if (!testDescriptors.isEmpty()) {\n            testPlan.addTestDescriptor(engineDescriptor);\n            testPlan.addTestDescriptors(testDescriptors);\n        }\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 38,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        TestDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n+        EngineDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n         Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n         if (!testDescriptors.isEmpty()) {\n             testPlan.addTestDescriptor(engineDescriptor);\n             testPlan.addTestDescriptors(testDescriptors);\n         }\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e097640972835e71a625cdee7a9359089cbec78": {
      "type": "Ybodychange",
      "commitMessage": "Only add TestDescriptor for engine if non-empty\n\nEmpty Engine nodes confuse Eclipse so much, it\nnever finishes its progress bar.\n",
      "commitDate": "2015/11/3 下午5:46",
      "commitName": "0e097640972835e71a625cdee7a9359089cbec78",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/31 下午7:28",
      "commitNameOld": "623ccd4a73d487ec55e24f8415597910626fd90d",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        TestDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n        if (!testDescriptors.isEmpty()) {\n            testPlan.addTestDescriptor(engineDescriptor);\n            testPlan.addTestDescriptors(testDescriptors);\n        }\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 38,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,12 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         TestDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n-        testPlan.addTestDescriptor(engineDescriptor);\n-        testPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n+        Collection\u003cTestDescriptor\u003e testDescriptors \u003d testEngine.discoverTests(specification, engineDescriptor);\n+        if (!testDescriptors.isEmpty()) {\n+            testPlan.addTestDescriptor(engineDescriptor);\n+            testPlan.addTestDescriptors(testDescriptors);\n+        }\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "623ccd4a73d487ec55e24f8415597910626fd90d": {
      "type": "Ybodychange",
      "commitMessage": "Reintroduced engine descriptor for all engines to enable test runners separation by engine w/o disecting the unique ID\n",
      "commitDate": "2015/10/31 下午7:28",
      "commitName": "623ccd4a73d487ec55e24f8415597910626fd90d",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/10/31 上午4:41",
      "commitNameOld": "90557f5414831ca924bca50c1591dd348c1c7162",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        TestDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n        testPlan.addTestDescriptor(engineDescriptor);\n        testPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 37,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,9 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testPlan.addTestDescriptors(testEngine.discoverTests(specification));\n+        TestDescriptor engineDescriptor \u003d new EngineDescriptor(testEngine);\n+        testPlan.addTestDescriptor(engineDescriptor);\n+        testPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9d0819e13f70c9385836259aabb8077b5240fb2c": {
      "type": "Ybodychange",
      "commitMessage": "Introduced TestExecutionNode for each TestDescriptor\n",
      "commitDate": "2015/10/30 下午11:12",
      "commitName": "9d0819e13f70c9385836259aabb8077b5240fb2c",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2015/10/30 下午6:08",
      "commitNameOld": "5b99f734253c15189a88cd5704ec30ded2f24694",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlan.addTestDescriptors(testEngine.discoverTests(specification));\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 36,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,7 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        TestDescriptor engineDescriptor \u003d testEngine.createEngineDescriptor();\n-        testPlan.addTestDescriptor(engineDescriptor);\n-        testPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n+        testPlan.addTestDescriptors(testEngine.discoverTests(specification));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2faf053a85fd24cb6f65e7b1258d7c507587866c": {
      "type": "Ybodychange",
      "commitMessage": "Rename methods to be more specific\n",
      "commitDate": "2015/10/30 下午5:54",
      "commitName": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/10/30 下午5:34",
      "commitNameOld": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        TestDescriptor engineDescriptor \u003d testEngine.createEngineDescriptor();\n        testPlan.addTestDescriptor(engineDescriptor);\n        testPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 35,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         TestDescriptor engineDescriptor \u003d testEngine.createEngineDescriptor();\n-        testPlan.addTest(engineDescriptor);\n-        testPlan.addTests(testEngine.discoverTests(specification, engineDescriptor));\n+        testPlan.addTestDescriptor(engineDescriptor);\n+        testPlan.addTestDescriptors(testEngine.discoverTests(specification, engineDescriptor));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8edbcf80166518746080a12cecfddc04f2577351": {
      "type": "Ybodychange",
      "commitMessage": "Introduced EngineDescriptor as root for all test descriptors\n",
      "commitDate": "2015/10/29 下午11:10",
      "commitName": "8edbcf80166518746080a12cecfddc04f2577351",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/10/29 下午9:23",
      "commitNameOld": "487bbff85f6651921a4c4a3520a9e315b0f2b381",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        TestDescriptor engineDescriptor \u003d testEngine.createEngineDescriptor();\n        testPlan.addTest(engineDescriptor);\n        testPlan.addTests(testEngine.discoverTests(specification, engineDescriptor));\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 35,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,9 @@\n public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testPlan.addTests(testEngine.discoverTests(specification));\n+        TestDescriptor engineDescriptor \u003d testEngine.createEngineDescriptor();\n+        testPlan.addTest(engineDescriptor);\n+        testPlan.addTests(testEngine.discoverTests(specification, engineDescriptor));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534": {
      "type": "Yrename",
      "commitMessage": "Launcher API umgebaut\n",
      "commitDate": "2015/10/28 下午9:24",
      "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/10/28 下午7:12",
      "commitNameOld": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public TestPlan discover(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlan.addTests(testEngine.discoverTests(specification));\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 24,
      "functionName": "discover",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,7 @@\n-public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n+public TestPlan discover(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n         testPlan.addTests(testEngine.discoverTests(specification));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "createTestPlanWithConfiguration",
        "newValue": "discover"
      }
    },
    "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Rename TestPlanConfiguration to TestPlanSpecification\n",
      "commitDate": "2015/10/28 下午6:19",
      "commitName": "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Rename TestPlanConfiguration to TestPlanSpecification\n",
          "commitDate": "2015/10/28 下午6:19",
          "commitName": "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/10/28 下午5:23",
          "commitNameOld": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlan.addTests(testEngine.discoverTests(specification));\n    }\n    return testPlan;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 17,
          "functionName": "createTestPlanWithConfiguration",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,7 @@\n-public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n+public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testPlan.addTests(testEngine.discoverTests(configuration));\n+        testPlan.addTests(testEngine.discoverTests(specification));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[configuration-TestPlanConfiguration]",
            "newValue": "[specification-TestPlanSpecification]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename TestPlanConfiguration to TestPlanSpecification\n",
          "commitDate": "2015/10/28 下午6:19",
          "commitName": "2e1ad2e7fc7fbc71b12027f9777bbbd2a7a8667a",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/10/28 下午5:23",
          "commitNameOld": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlan.addTests(testEngine.discoverTests(specification));\n    }\n    return testPlan;\n}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 17,
          "functionName": "createTestPlanWithConfiguration",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,7 @@\n-public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n+public TestPlan createTestPlanWithConfiguration(TestPlanSpecification specification) {\n     TestPlan testPlan \u003d new TestPlan();\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-        testPlan.addTests(testEngine.discoverTests(configuration));\n+        testPlan.addTests(testEngine.discoverTests(specification));\n     }\n     return testPlan;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "cbf97077bae0db71dc3a7cade28c3b00587a8699": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
      "commitDate": "2015/10/28 下午5:23",
      "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
      "commitAuthor": "Stefan Bechtold",
      "diff": "@@ -0,0 +1,7 @@\n+public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n+    TestPlan testPlan \u003d new TestPlan();\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+        testPlan.addTests(testEngine.discoverTests(configuration));\n+    }\n+    return testPlan;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public TestPlan createTestPlanWithConfiguration(TestPlanConfiguration configuration) {\n    TestPlan testPlan \u003d new TestPlan();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlan.addTests(testEngine.discoverTests(configuration));\n    }\n    return testPlan;\n}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 13,
      "functionName": "createTestPlanWithConfiguration",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}