{
  "origin": "codeshovel",
  "repositoryName": "junit4",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit4/.git",
  "startCommitName": "02c328028b4d32c15bbf0becc9838e54ecbafcbf",
  "sourceFileName": "BlockJUnit4ClassRunner.java",
  "functionName": "methodBlock",
  "functionId": "methodBlock___method-FrameworkMethod(modifiers-final)",
  "sourceFilePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
  "functionAnnotation": "",
  "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@link Test#expected()}\nattribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
  "functionStartLine": 303,
  "functionEndLine": 323,
  "numCommitsSeen": 241,
  "timeTaken": 1286,
  "changeHistory": [
    "113e8b7c6fd3f96ddbd9c759c58a27877f0f854b",
    "bd5b90f75908b7a3ed074a7be29823170f008fb4",
    "de86eb205637ea755909554b93d6da89353414dd",
    "5f25ca318bc2b35ecf8526c08a1e3b3e17d375da",
    "12b9b787a161d4b460d4d6a14da6ac53cac3713b",
    "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
    "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
    "a68ae0886c1c6274943e6f99d70816d162273d9c",
    "a1813f62876a6c7227ec5c866b621e01cda79664",
    "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d",
    "e6769d4009db8030661815965e2e22829a4619ff",
    "421ab330509a53302f56b209595f55b23bfdfc0e",
    "1fcd990f60518c941a44bae2596392021614a20b",
    "7a3e99635d7ffcc4d730f27835eeaeb082003199",
    "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15",
    "9bd1be07aa38d7fa2de048845f7b13458c9420d7",
    "078e45bd31a9920e00633ad6ce658e22529304f2",
    "0fa19baf003c5808831c59f8a839cc871586f30e",
    "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9",
    "833a511d59e2cc5314283d5ce27ff6fd6514b459",
    "94ebd93396420bcd03ab99a352e38df822d59f67",
    "8bed6c9278517d9fb13f274bc5a6ade358a39745",
    "24a5aad1f49b4decf946f1df701e354a18544132",
    "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
    "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
    "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
    "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
    "f0ef837a40922ac08c608661385abf71732975d3",
    "b333208ccfbef77c556a270bd4385586523dcafc",
    "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
    "44e7458b19d5cd1900a765a440c96e85b81d25fc",
    "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
    "57302f0df76fba83ba72a676bd660efeb5881af6",
    "a58514aec7e843339be24980e92aeeb759327ffb",
    "4081076e513e84bb2376f889d4108e64e9a18653",
    "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf"
  ],
  "changeHistoryShort": {
    "113e8b7c6fd3f96ddbd9c759c58a27877f0f854b": "Ydocchange",
    "bd5b90f75908b7a3ed074a7be29823170f008fb4": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
    "de86eb205637ea755909554b93d6da89353414dd": "Ydocchange",
    "5f25ca318bc2b35ecf8526c08a1e3b3e17d375da": "Ydocchange",
    "12b9b787a161d4b460d4d6a14da6ac53cac3713b": "Ydocchange",
    "86abf33f863fee1db3ba7dd8ee3e9910f105f57d": "Ymultichange(Ymodifierchange,Ydocchange)",
    "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f": "Ymultichange(Ymodifierchange,Ydocchange)",
    "a68ae0886c1c6274943e6f99d70816d162273d9c": "Ybodychange",
    "a1813f62876a6c7227ec5c866b621e01cda79664": "Ydocchange",
    "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d": "Ybodychange",
    "e6769d4009db8030661815965e2e22829a4619ff": "Ybodychange",
    "421ab330509a53302f56b209595f55b23bfdfc0e": "Ydocchange",
    "1fcd990f60518c941a44bae2596392021614a20b": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "7a3e99635d7ffcc4d730f27835eeaeb082003199": "Ydocchange",
    "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15": "Yfilerename",
    "9bd1be07aa38d7fa2de048845f7b13458c9420d7": "Ybodychange",
    "078e45bd31a9920e00633ad6ce658e22529304f2": "Ymovefromfile",
    "0fa19baf003c5808831c59f8a839cc871586f30e": "Ymodifierchange",
    "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9": "Yfilerename",
    "833a511d59e2cc5314283d5ce27ff6fd6514b459": "Ybodychange",
    "94ebd93396420bcd03ab99a352e38df822d59f67": "Ybodychange",
    "8bed6c9278517d9fb13f274bc5a6ade358a39745": "Ymultichange(Yparameterchange,Ybodychange)",
    "24a5aad1f49b4decf946f1df701e354a18544132": "Yrename",
    "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "de43b277b8f2e63051368a36e27a35c5ed0f0e0b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "0dbe9eefa369da78ca67bf5487797a8de5b2d631": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "0e1c92693e70e52ad9af23ee6180500c74fc9c95": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0ef837a40922ac08c608661385abf71732975d3": "Ymultichange(Yparameterchange,Ybodychange)",
    "b333208ccfbef77c556a270bd4385586523dcafc": "Ymultichange(Yparameterchange,Ybodychange)",
    "6887479f1b64c5a18f5708ea6905bb59804a9a0f": "Ybodychange",
    "44e7458b19d5cd1900a765a440c96e85b81d25fc": "Ybodychange",
    "576377b9ad44028dc84c2f8487cfe8dbccb8c252": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "57302f0df76fba83ba72a676bd660efeb5881af6": "Ybodychange",
    "a58514aec7e843339be24980e92aeeb759327ffb": "Ybodychange",
    "4081076e513e84bb2376f889d4108e64e9a18653": "Ymultichange(Ymodifierchange,Ybodychange)",
    "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "113e8b7c6fd3f96ddbd9c759c58a27877f0f854b": {
      "type": "Ydocchange",
      "commitMessage": "Fix javadoc mentioning @Test\u0027s \"expected\" attribute\n",
      "commitDate": "2017/3/2 下午1:43",
      "commitName": "113e8b7c6fd3f96ddbd9c759c58a27877f0f854b",
      "commitAuthor": "Alberto Scotto",
      "commitDateOld": "2017/2/14 上午10:11",
      "commitNameOld": "a58d459d76add6a1621ae7da80c7412134076af2",
      "commitAuthorOld": "Kevin Cooney",
      "daysBetweenCommits": 16.15,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(final FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest(method);\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 291,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@link Test#expected()}\nattribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@link Test#expected()}\nattribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
      }
    },
    "bd5b90f75908b7a3ed074a7be29823170f008fb4": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange,Ydocchange)",
      "commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
      "commitDate": "2014/12/7 下午10:18",
      "commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
      "commitAuthor": "Peter Wright",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
          "commitDate": "2014/12/7 下午10:18",
          "commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
          "commitAuthor": "Peter Wright",
          "commitDateOld": "2014/11/2 下午4:06",
          "commitNameOld": "99b0ebc70e061d7620179f4e72e735e3944e54cd",
          "commitAuthorOld": "Narendra Pathai",
          "daysBetweenCommits": 35.26,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(final FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest(method);\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 268,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,21 +1,21 @@\n-protected Statement methodBlock(FrameworkMethod method) {\n+protected Statement methodBlock(final FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n+                return createTest(method);\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
          "commitDate": "2014/12/7 下午10:18",
          "commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
          "commitAuthor": "Peter Wright",
          "commitDateOld": "2014/11/2 下午4:06",
          "commitNameOld": "99b0ebc70e061d7620179f4e72e735e3944e54cd",
          "commitAuthorOld": "Narendra Pathai",
          "daysBetweenCommits": 35.26,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(final FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest(method);\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 268,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,21 +1,21 @@\n-protected Statement methodBlock(FrameworkMethod method) {\n+protected Statement methodBlock(final FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n+                return createTest(method);\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-FrameworkMethod]",
            "newValue": "[method-FrameworkMethod(modifiers-final)]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Add BlockJUnit4ClassRunner#createTest(method)\n\nThis allows extensions of BlockJUnit4ClassRunner to provide a custom instance of the test for each FrameworkMethod invocation.\n\nTwo tests show that:\n\n1. createTest(FrameworkMethod) can be overridden successfully\n2. createTest() is called by default by createTest(FrameworkMethod)\n\nFixes #1036. Closes #1037.\n",
          "commitDate": "2014/12/7 下午10:18",
          "commitName": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
          "commitAuthor": "Peter Wright",
          "commitDateOld": "2014/11/2 下午4:06",
          "commitNameOld": "99b0ebc70e061d7620179f4e72e735e3944e54cd",
          "commitAuthorOld": "Narendra Pathai",
          "daysBetweenCommits": 35.26,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(final FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest(method);\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 268,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,21 +1,21 @@\n-protected Statement methodBlock(FrameworkMethod method) {\n+protected Statement methodBlock(final FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n+                return createTest(method);\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
            "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
          }
        }
      ]
    },
    "de86eb205637ea755909554b93d6da89353414dd": {
      "type": "Ydocchange",
      "commitMessage": "fixed documentation for BlockJUnit4ClassRunner.methodBlock: the steps of befores/afters can be influenced by rules as much as the other ones\n",
      "commitDate": "2011/2/3 下午10:24",
      "commitName": "de86eb205637ea755909554b93d6da89353414dd",
      "commitAuthor": "marciomazza",
      "commitDateOld": "2011/1/19 上午4:26",
      "commitNameOld": "4610330ca7fca16df7da1b7d09ea065d071cf9b8",
      "commitAuthorOld": "",
      "daysBetweenCommits": 15.75,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 243,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
      }
    },
    "5f25ca318bc2b35ecf8526c08a1e3b3e17d375da": {
      "type": "Ydocchange",
      "commitMessage": "Fix bad javadoc and bad release notes\n",
      "commitDate": "2011/1/8 上午2:03",
      "commitName": "5f25ca318bc2b35ecf8526c08a1e3b3e17d375da",
      "commitAuthor": "David Saff",
      "commitDateOld": "2010/11/16 下午11:18",
      "commitNameOld": "81b50e9f3bdb66543d07e7349026bd3b447f433e",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 52.11,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 263,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link TestRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
      }
    },
    "12b9b787a161d4b460d4d6a14da6ac53cac3713b": {
      "type": "Ydocchange",
      "commitMessage": "Category filter can look all the way up the Description stack\n",
      "commitDate": "2010/1/26 下午12:46",
      "commitName": "12b9b787a161d4b460d4d6a14da6ac53cac3713b",
      "commitAuthor": "David Saff",
      "commitDateOld": "2010/1/22 上午5:30",
      "commitNameOld": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 4.3,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 255,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the\nabove steps. A {@code Rule} may prevent all execution of the above steps,\nor add additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
      }
    },
    "86abf33f863fee1db3ba7dd8ee3e9910f105f57d": {
      "type": "Ymultichange(Ymodifierchange,Ydocchange)",
      "commitMessage": "test for multi-level category application\n",
      "commitDate": "2010/1/22 上午5:30",
      "commitName": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
      "commitAuthor": "David Saff",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "test for multi-level category application\n",
          "commitDate": "2010/1/22 上午5:30",
          "commitName": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
          "commitAuthor": "David Saff",
          "commitDateOld": "2009/12/18 下午10:05",
          "commitNameOld": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
          "commitAuthorOld": "David Saff",
          "daysBetweenCommits": 34.31,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 253,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public Statement methodBlock(FrameworkMethod method) {\n+protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "test for multi-level category application\n",
          "commitDate": "2010/1/22 上午5:30",
          "commitName": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
          "commitAuthor": "David Saff",
          "commitDateOld": "2009/12/18 下午10:05",
          "commitNameOld": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
          "commitAuthorOld": "David Saff",
          "daysBetweenCommits": 34.31,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 253,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,21 +1,21 @@\n-public Statement methodBlock(FrameworkMethod method) {\n+protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
          }
        }
      ]
    },
    "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f": {
      "type": "Ymultichange(Ymodifierchange,Ydocchange)",
      "commitMessage": "Big refactor\n",
      "commitDate": "2009/12/18 下午10:05",
      "commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
      "commitAuthor": "David Saff",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Big refactor\n",
          "commitDate": "2009/12/18 下午10:05",
          "commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
          "commitAuthor": "David Saff",
          "commitDateOld": "2009/9/23 上午10:32",
          "commitNameOld": "a68ae0886c1c6274943e6f99d70816d162273d9c",
          "commitAuthorOld": "KentBeck",
          "daysBetweenCommits": 86.48,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 255,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,21 @@\n-protected Statement methodBlock(FrameworkMethod method) {\n+public Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Big refactor\n",
          "commitDate": "2009/12/18 下午10:05",
          "commitName": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
          "commitAuthor": "David Saff",
          "commitDateOld": "2009/9/23 上午10:32",
          "commitNameOld": "a68ae0886c1c6274943e6f99d70816d162273d9c",
          "commitAuthorOld": "KentBeck",
          "daysBetweenCommits": 86.48,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 255,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,21 @@\n-protected Statement methodBlock(FrameworkMethod method) {\n+public Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
            "newValue": ""
          }
        }
      ]
    },
    "a68ae0886c1c6274943e6f99d70816d162273d9c": {
      "type": "Ybodychange",
      "commitMessage": "Signed-off-by: KentBeck \u003ckent@threeriversinstitute.org\u003e\n",
      "commitDate": "2009/9/23 上午10:32",
      "commitName": "a68ae0886c1c6274943e6f99d70816d162273d9c",
      "commitAuthor": "KentBeck",
      "commitDateOld": "2009/7/21 上午10:34",
      "commitNameOld": "df85817595e97082eaf8d6c95e2c269b86afff20",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 64.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 245,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "@@ -1,21 +1,21 @@\n protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n-    statement \u003d withRules(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n+    statement \u003d withRules(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1813f62876a6c7227ec5c866b621e01cda79664": {
      "type": "Ydocchange",
      "commitMessage": "Done with interceptor javadoc\n",
      "commitDate": "2009/7/8 上午11:58",
      "commitName": "a1813f62876a6c7227ec5c866b621e01cda79664",
      "commitAuthor": "David Saff",
      "commitDateOld": "2009/7/7 上午11:50",
      "commitNameOld": "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 242,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS allow {@code @Rule} fields to modify the execution of the above\nsteps.  A {@code Rule} may prevent all execution of the above steps, or\nadd additional behavior before and after, or modify thrown exceptions.\nFor more information, see {@link MethodRule}\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
      }
    },
    "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d": {
      "type": "Ybodychange",
      "commitMessage": "Fixing Interceptor-\u003eRule name changes\n",
      "commitDate": "2009/7/7 上午11:50",
      "commitName": "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d",
      "commitAuthor": "David Saff",
      "commitDateOld": "2009/7/7 上午10:01",
      "commitNameOld": "8e313a1e58a56694c0441b2fa60974fa8e1bfe31",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withRules(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 238,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "@@ -1,21 +1,21 @@\n protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n-    statement \u003d withInterceptors(method, test, statement);\n+    statement \u003d withRules(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e6769d4009db8030661815965e2e22829a4619ff": {
      "type": "Ybodychange",
      "commitMessage": "No Interceptors class, interceptors turned on by default\n",
      "commitDate": "2009/5/27 上午10:55",
      "commitName": "e6769d4009db8030661815965e2e22829a4619ff",
      "commitAuthor": "David Saff",
      "commitDateOld": "2009/5/12 上午11:29",
      "commitNameOld": "198df01b7b288e57e222a33c74f8ff98bf518d93",
      "commitAuthorOld": "David Saff",
      "daysBetweenCommits": 14.98,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withInterceptors(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 228,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "@@ -1,20 +1,21 @@\n protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement statement \u003d methodInvoker(method, test);\n     statement \u003d possiblyExpectingExceptions(method, test, statement);\n     statement \u003d withPotentialTimeout(method, test, statement);\n+    statement \u003d withInterceptors(method, test, statement);\n     statement \u003d withBefores(method, test, statement);\n     statement \u003d withAfters(method, test, statement);\n     return statement;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "421ab330509a53302f56b209595f55b23bfdfc0e": {
      "type": "Ydocchange",
      "commitMessage": "Max now runs the right number of tests\n",
      "commitDate": "2008/11/19 上午6:52",
      "commitName": "421ab330509a53302f56b209595f55b23bfdfc0e",
      "commitAuthor": "dsaff",
      "commitDateOld": "2008/8/1 下午9:53",
      "commitNameOld": "c5ece65fe537092b9552f0efcca8a1e144ca4182",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 109.37,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 207,
      "functionName": "methodBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses after any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
      }
    },
    "1fcd990f60518c941a44bae2596392021614a20b": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "Javadoc and various cleanup\n",
      "commitDate": "2008/7/30 上午2:55",
      "commitName": "1fcd990f60518c941a44bae2596392021614a20b",
      "commitAuthor": "kbeck",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Javadoc and various cleanup\n",
          "commitDate": "2008/7/30 上午2:55",
          "commitName": "1fcd990f60518c941a44bae2596392021614a20b",
          "commitAuthor": "kbeck",
          "commitDateOld": "2008/7/30 上午1:12",
          "commitNameOld": "979e8abbe974e8847668f5887403da78a6165ebc",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 156,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,20 +1,20 @@\n-protected Statement childBlock(FrameworkMethod method) {\n+protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n-    Statement link \u003d invoke(method, test);\n-    link \u003d possiblyExpectingExceptions(method, test, link);\n-    link \u003d withPotentialTimeout(method, test, link);\n-    link \u003d withBefores(method, test, link);\n-    link \u003d withAfters(method, test, link);\n-    return link;\n+    Statement statement \u003d methodInvoker(method, test);\n+    statement \u003d possiblyExpectingExceptions(method, test, statement);\n+    statement \u003d withPotentialTimeout(method, test, statement);\n+    statement \u003d withBefores(method, test, statement);\n+    statement \u003d withAfters(method, test, statement);\n+    return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "childBlock",
            "newValue": "methodBlock"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Javadoc and various cleanup\n",
          "commitDate": "2008/7/30 上午2:55",
          "commitName": "1fcd990f60518c941a44bae2596392021614a20b",
          "commitAuthor": "kbeck",
          "commitDateOld": "2008/7/30 上午1:12",
          "commitNameOld": "979e8abbe974e8847668f5887403da78a6165ebc",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 156,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,20 +1,20 @@\n-protected Statement childBlock(FrameworkMethod method) {\n+protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n-    Statement link \u003d invoke(method, test);\n-    link \u003d possiblyExpectingExceptions(method, test, link);\n-    link \u003d withPotentialTimeout(method, test, link);\n-    link \u003d withBefores(method, test, link);\n-    link \u003d withAfters(method, test, link);\n-    return link;\n+    Statement statement \u003d methodInvoker(method, test);\n+    statement \u003d possiblyExpectingExceptions(method, test, statement);\n+    statement \u003d withPotentialTimeout(method, test, statement);\n+    statement \u003d withBefores(method, test, statement);\n+    statement \u003d withAfters(method, test, statement);\n+    return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Javadoc and various cleanup\n",
          "commitDate": "2008/7/30 上午2:55",
          "commitName": "1fcd990f60518c941a44bae2596392021614a20b",
          "commitAuthor": "kbeck",
          "commitDateOld": "2008/7/30 上午1:12",
          "commitNameOld": "979e8abbe974e8847668f5887403da78a6165ebc",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement \u003d methodInvoker(method, test);\n    statement \u003d possiblyExpectingExceptions(method, test, statement);\n    statement \u003d withPotentialTimeout(method, test, statement);\n    statement \u003d withBefores(method, test, statement);\n    statement \u003d withAfters(method, test, statement);\n    return statement;\n}",
          "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
          "functionStartLine": 156,
          "functionName": "methodBlock",
          "functionAnnotation": "",
          "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n",
          "diff": "@@ -1,20 +1,20 @@\n-protected Statement childBlock(FrameworkMethod method) {\n+protected Statement methodBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n-    Statement link \u003d invoke(method, test);\n-    link \u003d possiblyExpectingExceptions(method, test, link);\n-    link \u003d withPotentialTimeout(method, test, link);\n-    link \u003d withBefores(method, test, link);\n-    link \u003d withAfters(method, test, link);\n-    return link;\n+    Statement statement \u003d methodInvoker(method, test);\n+    statement \u003d possiblyExpectingExceptions(method, test, statement);\n+    statement \u003d withPotentialTimeout(method, test, statement);\n+    statement \u003d withBefores(method, test, statement);\n+    statement \u003d withAfters(method, test, statement);\n+    return statement;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nThe default implementation has this rough description:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations of each substep.\n",
            "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nHere is an outline of the default implementation:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations creating each sub-statement.\n"
          }
        }
      ]
    },
    "7a3e99635d7ffcc4d730f27835eeaeb082003199": {
      "type": "Ydocchange",
      "commitMessage": "Draft javadoc for review\n",
      "commitDate": "2008/7/23 下午11:59",
      "commitName": "7a3e99635d7ffcc4d730f27835eeaeb082003199",
      "commitAuthor": "dsaff",
      "commitDateOld": "2008/7/23 上午1:50",
      "commitNameOld": "a9815c0f1419e20b6282c3944195083bb38deaa9",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, test, link);\n    link \u003d withPotentialTimeout(method, test, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 160,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nThe default implementation has this rough description:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations of each substep.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Returns a Statement that, when executed, either returns normally if\n{@code method} passes, or throws an exception if {@code method} fails.\n\nThe default implementation has this rough description:\n\n\u003cul\u003e\n\u003cli\u003eInvoke {@code method} on the result of {@code createTest()}, and\nthrow any exceptions thrown by either operation.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\nexpecting} attribute, return normally only if the previous step threw an\nexception of the correct type, and throw an exception otherwise.\n\u003cli\u003eHOWEVER, if {@code method}\u0027s {@code @Test} annotation has the {@code\ntimeout} attribute, throw an exception if the previous step takes more\nthan the specified number of milliseconds.\n\u003cli\u003eALWAYS run all non-overridden {@code @Before} methods on this class\nand superclasses before any of the previous steps; if any throws an\nException, stop execution and pass the exception on.\n\u003cli\u003eALWAYS run all non-overridden {@code @After} methods on this class\nand superclasses before any of the previous steps; all After methods are\nalways executed: exceptions thrown by previous steps are combined, if\nnecessary, with exceptions from After methods into a\n{@link MultipleFailureException}.\n\u003c/ul\u003e\n\nThis can be overridden in subclasses, either by overriding this method,\nor the implementations of each substep.\n"
      }
    },
    "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15": {
      "type": "Yfilerename",
      "commitMessage": "Reorganizing visibility to publish BlockJUnit4ClassRunner and friends. Not sure if this is done. Check with Structure 101?\n",
      "commitDate": "2008/7/2 上午2:29",
      "commitName": "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/7/2 上午1:01",
      "commitNameOld": "eb2750d861ac1ecf2dbd0425e457fe833468a169",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, test, link);\n    link \u003d withPotentialTimeout(method, test, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 61,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
        "newPath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java"
      }
    },
    "9bd1be07aa38d7fa2de048845f7b13458c9420d7": {
      "type": "Ybodychange",
      "commitMessage": "Parallelize Statement builder methods in BlockJUnit4ClassRunner\n",
      "commitDate": "2008/6/25 上午12:34",
      "commitName": "9bd1be07aa38d7fa2de048845f7b13458c9420d7",
      "commitAuthor": "dsaff",
      "commitDateOld": "2008/6/17 上午1:52",
      "commitNameOld": "078e45bd31a9920e00633ad6ce658e22529304f2",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, test, link);\n    link \u003d withPotentialTimeout(method, test, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 60,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,20 @@\n protected Statement childBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n-    TestAnnotation annotation \u003d new TestAnnotation(method);\n     Statement link \u003d invoke(method, test);\n-    link \u003d possiblyExpectingExceptions(annotation, link);\n-    link \u003d withPotentialTimeout(annotation, link);\n+    link \u003d possiblyExpectingExceptions(method, test, link);\n+    link \u003d withPotentialTimeout(method, test, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d withAfters(method, test, link);\n     return link;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "078e45bd31a9920e00633ad6ce658e22529304f2": {
      "type": "Ymovefromfile",
      "commitMessage": "Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner.\n",
      "commitDate": "2008/6/17 上午1:52",
      "commitName": "078e45bd31a9920e00633ad6ce658e22529304f2",
      "commitAuthor": "kbeck",
      "commitDateOld": "2008/6/11 上午3:50",
      "commitNameOld": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 5.92,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
      "functionStartLine": 60,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java",
        "newPath": "src/main/java/org/junit/internal/runners/BlockJUnit4ClassRunner.java",
        "oldMethodName": "childBlock",
        "newMethodName": "childBlock"
      }
    },
    "0fa19baf003c5808831c59f8a839cc871586f30e": {
      "type": "Ymodifierchange",
      "commitMessage": "Small runner definition cleanup\n",
      "commitDate": "2007/12/8 上午3:14",
      "commitName": "0fa19baf003c5808831c59f8a839cc871586f30e",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/12/8 上午3:06",
      "commitNameOld": "44fabd25eb7d8c5291094b033007c32b7a1b8da2",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 57,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n-public Statement childBlock(FrameworkMethod method) {\n+protected Statement childBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     TestAnnotation annotation \u003d new TestAnnotation(method);\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(annotation, link);\n     link \u003d withPotentialTimeout(annotation, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d withAfters(method, test, link);\n     return link;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[protected]"
      }
    },
    "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9": {
      "type": "Yfilerename",
      "commitMessage": "- Moved src directory into two directories, similar to a maven layout, to simplify build, and make it easier for maven-familiar developers to find the tests.\n\n- Improved display of ignored tests, so that build results are hopefully not confusing\n",
      "commitDate": "2007/12/7 下午11:43",
      "commitName": "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/12/5 下午11:47",
      "commitNameOld": "804f76fdf00c9f9fcbef58f03bbeda1f80b3ad8e",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 77,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
        "newPath": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java"
      }
    },
    "833a511d59e2cc5314283d5ce27ff6fd6514b459": {
      "type": "Ybodychange",
      "commitMessage": "Clean out old TODOs\n",
      "commitDate": "2007/12/5 下午11:43",
      "commitName": "833a511d59e2cc5314283d5ce27ff6fd6514b459",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/11/27 上午10:05",
      "commitNameOld": "94ebd93396420bcd03ab99a352e38df822d59f67",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 8.57,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 77,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "94ebd93396420bcd03ab99a352e38df822d59f67": {
      "type": "Ybodychange",
      "commitMessage": "- Assumption failures now cause their tests to be ignored\n- Ignored tests broadcast their reasons\n- TextListener displays reasons for ignored tests\n\nStill some clunkiness (TextListener claims the ignored tests are failures) to be worked out in further releases.\nSince this version has breaking changes, the previous version is tagged as r45_before_failed_assumptions_made_ignored_tests\n",
      "commitDate": "2007/11/27 上午10:05",
      "commitName": "94ebd93396420bcd03ab99a352e38df822d59f67",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/11/27 上午1:07",
      "commitNameOld": "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 77,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,21 @@\n public Statement childBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     TestAnnotation annotation \u003d new TestAnnotation(method);\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(annotation, link);\n     link \u003d withPotentialTimeout(annotation, link);\n     link \u003d withBefores(method, test, link);\n-    link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n     return link;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bed6c9278517d9fb13f274bc5a6ade358a39745": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
      "commitDate": "2007/11/15 上午2:21",
      "commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
          "commitDate": "2007/11/15 上午2:21",
          "commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/31 下午9:57",
          "commitNameOld": "24a5aad1f49b4decf946f1df701e354a18544132",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 14.18,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 88,
          "functionName": "childBlock",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,22 @@\n-public Statement childBlock(TestMethod method) {\n+public Statement childBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n+    TestAnnotation annotation \u003d new TestAnnotation(method);\n     Statement link \u003d invoke(method, test);\n-    link \u003d possiblyExpectingExceptions(method, link);\n-    link \u003d withPotentialTimeout(method, link);\n+    link \u003d possiblyExpectingExceptions(annotation, link);\n+    link \u003d withPotentialTimeout(annotation, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n     return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-TestMethod]",
            "newValue": "[method-FrameworkMethod]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "- Moved InitializationError to ParentRunner, since it was only used by\n  subclasses of ParentRunner.\n- Broke up TestMethod into FrameworkMethod (which makes it more clear\n  that these methods can also be Before, After, etc.), and\n  TestAnnotation (for specific information only available on the @Test\n  annotation).\n- Created TestMethodElement to encapsulate the relationship between\n  @Test, @Before, and @After.  This class may go away again quickly\n- Updated version in docs to 4.5\n- Included docs about junit-dep jar\n",
          "commitDate": "2007/11/15 上午2:21",
          "commitName": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/31 下午9:57",
          "commitNameOld": "24a5aad1f49b4decf946f1df701e354a18544132",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 14.18,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation \u003d new TestAnnotation(method);\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(annotation, link);\n    link \u003d withPotentialTimeout(annotation, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 88,
          "functionName": "childBlock",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,22 @@\n-public Statement childBlock(TestMethod method) {\n+public Statement childBlock(FrameworkMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n+    TestAnnotation annotation \u003d new TestAnnotation(method);\n     Statement link \u003d invoke(method, test);\n-    link \u003d possiblyExpectingExceptions(method, link);\n-    link \u003d withPotentialTimeout(method, link);\n+    link \u003d possiblyExpectingExceptions(annotation, link);\n+    link \u003d withPotentialTimeout(annotation, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n     return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "24a5aad1f49b4decf946f1df701e354a18544132": {
      "type": "Yrename",
      "commitMessage": "Progress on ParentRunner\n",
      "commitDate": "2007/10/31 下午9:57",
      "commitName": "24a5aad1f49b4decf946f1df701e354a18544132",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/13 上午3:12",
      "commitNameOld": "4e1018a940699a38673b1861977110e6b558afb1",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 18.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public Statement childBlock(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 87,
      "functionName": "childBlock",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n-public Statement chain(TestMethod method) {\n+public Statement childBlock(TestMethod method) {\n     Object test;\n     try {\n         test \u003d new ReflectiveCallable() {\n \n             @Override\n             protected Object runReflectiveCall() throws Throwable {\n                 return createTest();\n             }\n         }.run();\n     } catch (Throwable e) {\n         return new Fail(e);\n     }\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n     return link;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "chain",
        "newValue": "childBlock"
      }
    },
    "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Theory classes can take constructor parameters\n",
      "commitDate": "2007/10/13 上午1:27",
      "commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Theory classes can take constructor parameters\n",
          "commitDate": "2007/10/13 上午1:27",
          "commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/13 上午12:58",
          "commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement chain(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 93,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,21 @@\n-protected Notifier chain(TestMethod method, Object test) {\n+public Statement chain(TestMethod method) {\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        return new Fail(e);\n+    }\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n-    return notifying(method, link);\n+    return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-TestMethod, test-Object]",
            "newValue": "[method-TestMethod]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Theory classes can take constructor parameters\n",
          "commitDate": "2007/10/13 上午1:27",
          "commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/13 上午12:58",
          "commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement chain(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 93,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,21 @@\n-protected Notifier chain(TestMethod method, Object test) {\n+public Statement chain(TestMethod method) {\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        return new Fail(e);\n+    }\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n-    return notifying(method, link);\n+    return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Notifier",
            "newValue": "Statement"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Theory classes can take constructor parameters\n",
          "commitDate": "2007/10/13 上午1:27",
          "commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/13 上午12:58",
          "commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement chain(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 93,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,21 @@\n-protected Notifier chain(TestMethod method, Object test) {\n+public Statement chain(TestMethod method) {\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        return new Fail(e);\n+    }\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n-    return notifying(method, link);\n+    return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Theory classes can take constructor parameters\n",
          "commitDate": "2007/10/13 上午1:27",
          "commitName": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/13 上午12:58",
          "commitNameOld": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Statement chain(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 93,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,21 @@\n-protected Notifier chain(TestMethod method, Object test) {\n+public Statement chain(TestMethod method) {\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        return new Fail(e);\n+    }\n     Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n-    return notifying(method, link);\n+    return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "de43b277b8f2e63051368a36e27a35c5ed0f0e0b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "I renamed Link-\u003eStatement and adjusted the names of the other statements according to my preference. These names are negotiable. I also simplified a few flows of control.\n",
      "commitDate": "2007/10/13 上午12:58",
      "commitName": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
      "commitAuthor": "kbeck",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "I renamed Link-\u003eStatement and adjusted the names of the other statements according to my preference. These names are negotiable. I also simplified a few flows of control.\n",
          "commitDate": "2007/10/13 上午12:58",
          "commitName": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
          "commitAuthor": "kbeck",
          "commitDateOld": "2007/10/12 下午10:49",
          "commitNameOld": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Notifier chain(TestMethod method, Object test) {\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 115,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n-protected NotificationStrategy chain(TestMethod method, Object test) {\n-    Link link \u003d invoke(method, test);\n+protected Notifier chain(TestMethod method, Object test) {\n+    Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n     return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "NotificationStrategy",
            "newValue": "Notifier"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "I renamed Link-\u003eStatement and adjusted the names of the other statements according to my preference. These names are negotiable. I also simplified a few flows of control.\n",
          "commitDate": "2007/10/13 上午12:58",
          "commitName": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
          "commitAuthor": "kbeck",
          "commitDateOld": "2007/10/12 下午10:49",
          "commitNameOld": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Notifier chain(TestMethod method, Object test) {\n    Statement link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 115,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n-protected NotificationStrategy chain(TestMethod method, Object test) {\n-    Link link \u003d invoke(method, test);\n+protected Notifier chain(TestMethod method, Object test) {\n+    Statement link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBefores(method, test, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withAfters(method, test, link);\n     return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0dbe9eefa369da78ca67bf5487797a8de5b2d631": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
      "commitDate": "2007/10/12 下午10:49",
      "commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
          "commitDate": "2007/10/12 下午10:49",
          "commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/11 上午1:15",
          "commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected NotificationStrategy chain(TestMethod method, Object test) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 115,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,20 +1,9 @@\n-protected Link chain(TestMethod method) {\n-    Object test;\n-    try {\n-        test \u003d new ReflectiveCallable() {\n-\n-            @Override\n-            protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n-            }\n-        }.run();\n-    } catch (Throwable e) {\n-        return throwException(e);\n-    }\n+protected NotificationStrategy chain(TestMethod method, Object test) {\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n-    link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n-    link \u003d withBeforeAndAfter(method, link, test);\n-    return link;\n+    link \u003d withBefores(method, test, link);\n+    link \u003d ignoreViolatedAssumptions(link);\n+    link \u003d withAfters(method, test, link);\n+    return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-TestMethod]",
            "newValue": "[method-TestMethod, test-Object]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
          "commitDate": "2007/10/12 下午10:49",
          "commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/11 上午1:15",
          "commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected NotificationStrategy chain(TestMethod method, Object test) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 115,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,20 +1,9 @@\n-protected Link chain(TestMethod method) {\n-    Object test;\n-    try {\n-        test \u003d new ReflectiveCallable() {\n-\n-            @Override\n-            protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n-            }\n-        }.run();\n-    } catch (Throwable e) {\n-        return throwException(e);\n-    }\n+protected NotificationStrategy chain(TestMethod method, Object test) {\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n-    link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n-    link \u003d withBeforeAndAfter(method, link, test);\n-    return link;\n+    link \u003d withBefores(method, test, link);\n+    link \u003d ignoreViolatedAssumptions(link);\n+    link \u003d withAfters(method, test, link);\n+    return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Link",
            "newValue": "NotificationStrategy"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Change to Link signature (to be discussed soon by phone)\n",
          "commitDate": "2007/10/12 下午10:49",
          "commitName": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/11 上午1:15",
          "commitNameOld": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected NotificationStrategy chain(TestMethod method, Object test) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBefores(method, test, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withAfters(method, test, link);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 115,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,20 +1,9 @@\n-protected Link chain(TestMethod method) {\n-    Object test;\n-    try {\n-        test \u003d new ReflectiveCallable() {\n-\n-            @Override\n-            protected Object runReflectiveCall() throws Throwable {\n-                return createTest();\n-            }\n-        }.run();\n-    } catch (Throwable e) {\n-        return throwException(e);\n-    }\n+protected NotificationStrategy chain(TestMethod method, Object test) {\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n-    link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n-    link \u003d withBeforeAndAfter(method, link, test);\n-    return link;\n+    link \u003d withBefores(method, test, link);\n+    link \u003d ignoreViolatedAssumptions(link);\n+    link \u003d withAfters(method, test, link);\n+    return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0e1c92693e70e52ad9af23ee6180500c74fc9c95": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
      "commitDate": "2007/10/11 上午1:15",
      "commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
          "commitDate": "2007/10/11 上午1:15",
          "commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/10 下午11:57",
          "commitNameOld": "f0ef837a40922ac08c608661385abf71732975d3",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return throwException(e);\n    }\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link, test);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 97,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,20 @@\n-protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n+protected Link chain(TestMethod method) {\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        return throwException(e);\n+    }\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBeforeAndAfter(method, link, test);\n-    return notifying(method, link, notifier);\n+    return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-TestMethod, test-Object, notifier-EachTestNotifier]",
            "newValue": "[method-TestMethod]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "- Fix potentially bottomless recursion in\n  ParameterSignature.findDeepAnnotation\n\n- Simplified chain method, which simplified Theories\n",
          "commitDate": "2007/10/11 上午1:15",
          "commitName": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/10 下午11:57",
          "commitNameOld": "f0ef837a40922ac08c608661385abf71732975d3",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method) {\n    Object test;\n    try {\n        test \u003d new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return throwException(e);\n    }\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link, test);\n    return link;\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 97,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,20 @@\n-protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n+protected Link chain(TestMethod method) {\n+    Object test;\n+    try {\n+        test \u003d new ReflectiveCallable() {\n+\n+            @Override\n+            protected Object runReflectiveCall() throws Throwable {\n+                return createTest();\n+            }\n+        }.run();\n+    } catch (Throwable e) {\n+        return throwException(e);\n+    }\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBeforeAndAfter(method, link, test);\n-    return notifying(method, link, notifier);\n+    return link;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f0ef837a40922ac08c608661385abf71732975d3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
      "commitDate": "2007/10/10 下午11:57",
      "commitName": "f0ef837a40922ac08c608661385abf71732975d3",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
          "commitDate": "2007/10/10 下午11:57",
          "commitName": "f0ef837a40922ac08c608661385abf71732975d3",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/10 上午9:57",
          "commitNameOld": "a4c68872a91681139d404825c2bb04bd5ba804dd",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link, test);\n    return notifying(method, link, notifier);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 108,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-protected Link chain(TestMethod method, Object test) {\n+protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBeforeAndAfter(method, link, test);\n-    return notifying(method, link);\n+    return notifying(method, link, notifier);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-TestMethod, test-Object]",
            "newValue": "[method-TestMethod, test-Object, notifier-EachTestNotifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Link no longer throws Throwable, but handles exceptions with a FailureListener\n",
          "commitDate": "2007/10/10 下午11:57",
          "commitName": "f0ef837a40922ac08c608661385abf71732975d3",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/10 上午9:57",
          "commitNameOld": "a4c68872a91681139d404825c2bb04bd5ba804dd",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link, test);\n    return notifying(method, link, notifier);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 108,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-protected Link chain(TestMethod method, Object test) {\n+protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n     Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBeforeAndAfter(method, link, test);\n-    return notifying(method, link);\n+    return notifying(method, link, notifier);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b333208ccfbef77c556a270bd4385586523dcafc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
      "commitDate": "2007/10/10 上午2:20",
      "commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
          "commitDate": "2007/10/10 上午2:20",
          "commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/10 上午12:25",
          "commitNameOld": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method, Object test) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link, test);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 113,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-protected Link chain(TestMethod method) {\n-    Link link \u003d invoke(method);\n+protected Link chain(TestMethod method, Object test) {\n+    Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n-    link \u003d withBeforeAndAfter(method, link);\n+    link \u003d withBeforeAndAfter(method, link, test);\n     return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[method-TestMethod]",
            "newValue": "[method-TestMethod, test-Object]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "What was Roadie was actually an EachTestNotifier plus a tacked-on Object target.  These have been divorced: the result is more understandable, but points to some new objects that may want to be created.\n",
          "commitDate": "2007/10/10 上午2:20",
          "commitName": "b333208ccfbef77c556a270bd4385586523dcafc",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/10 上午12:25",
          "commitNameOld": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method, Object test) {\n    Link link \u003d invoke(method, test);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link, test);\n    return notifying(method, link);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 113,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-protected Link chain(TestMethod method) {\n-    Link link \u003d invoke(method);\n+protected Link chain(TestMethod method, Object test) {\n+    Link link \u003d invoke(method, test);\n     link \u003d possiblyExpectingExceptions(method, link);\n     link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n-    link \u003d withBeforeAndAfter(method, link);\n+    link \u003d withBeforeAndAfter(method, link, test);\n     return notifying(method, link);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6887479f1b64c5a18f5708ea6905bb59804a9a0f": {
      "type": "Ybodychange",
      "commitMessage": "Simplified Theories. Factored out ignoring violated assumptions into its own Link.\n",
      "commitDate": "2007/10/10 上午12:25",
      "commitName": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
      "commitAuthor": "kbeck",
      "commitDateOld": "2007/10/9 上午5:07",
      "commitNameOld": "44e7458b19d5cd1900a765a440c96e85b81d25fc",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Link chain(TestMethod method) {\n    Link link \u003d invoke(method);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d ignoreViolatedAssumptions(link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link);\n    return notifying(method, link);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 112,
      "functionName": "chain",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,8 @@\n protected Link chain(TestMethod method) {\n     Link link \u003d invoke(method);\n     link \u003d possiblyExpectingExceptions(method, link);\n+    link \u003d ignoreViolatedAssumptions(link);\n     link \u003d withPotentialTimeout(method, link);\n     link \u003d withBeforeAndAfter(method, link);\n     return notifying(method, link);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "44e7458b19d5cd1900a765a440c96e85b81d25fc": {
      "type": "Ybodychange",
      "commitMessage": "- Renamed link classes.\n  Absolute actions are verbs: IgnoreTest, Invoke.\n  ActionModifiers are modifying phrases: ExpectingException, WithTimeout, etc.\n\n- Moved isShadowedBy(List) to TestMethod\n",
      "commitDate": "2007/10/9 上午5:07",
      "commitName": "44e7458b19d5cd1900a765a440c96e85b81d25fc",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/9 上午3:40",
      "commitNameOld": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Link chain(TestMethod method) {\n    Link link \u003d invoke(method);\n    link \u003d possiblyExpectingExceptions(method, link);\n    link \u003d withPotentialTimeout(method, link);\n    link \u003d withBeforeAndAfter(method, link);\n    return notifying(method, link);\n}",
      "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
      "functionStartLine": 112,
      "functionName": "chain",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,7 @@\n protected Link chain(TestMethod method) {\n-    Link link \u003d anchor(method);\n-    link \u003d handleExceptions(link, method);\n-    link \u003d timeout(link, method);\n-    link \u003d new BeforeAndAfter(link, method);\n-    return notifier(link, method);\n+    Link link \u003d invoke(method);\n+    link \u003d possiblyExpectingExceptions(method, link);\n+    link \u003d withPotentialTimeout(method, link);\n+    link \u003d withBeforeAndAfter(method, link);\n+    return notifying(method, link);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "576377b9ad44028dc84c2f8487cfe8dbccb8c252": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
      "commitDate": "2007/10/9 上午3:40",
      "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
      "commitAuthor": "dsaff",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
          "commitDate": "2007/10/9 上午3:40",
          "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/6 上午4:47",
          "commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method) {\n    Link link \u003d anchor(method);\n    link \u003d handleExceptions(link, method);\n    link \u003d timeout(link, method);\n    link \u003d new BeforeAndAfter(link, method);\n    return notifier(link, method);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 173,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,7 @@\n-protected Link chain() {\n-    Link link \u003d anchor();\n-    link \u003d handleExceptions(link);\n-    link \u003d timeout(link);\n-    link \u003d new BeforeAndAfter(link);\n-    link \u003d new Notifier(link);\n-    return new Ignored(link);\n+protected Link chain(TestMethod method) {\n+    Link link \u003d anchor(method);\n+    link \u003d handleExceptions(link, method);\n+    link \u003d timeout(link, method);\n+    link \u003d new BeforeAndAfter(link, method);\n+    return notifier(link, method);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
            "newPath": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
            "oldMethodName": "chain",
            "newMethodName": "chain"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
          "commitDate": "2007/10/9 上午3:40",
          "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/6 上午4:47",
          "commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method) {\n    Link link \u003d anchor(method);\n    link \u003d handleExceptions(link, method);\n    link \u003d timeout(link, method);\n    link \u003d new BeforeAndAfter(link, method);\n    return notifier(link, method);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 173,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,7 @@\n-protected Link chain() {\n-    Link link \u003d anchor();\n-    link \u003d handleExceptions(link);\n-    link \u003d timeout(link);\n-    link \u003d new BeforeAndAfter(link);\n-    link \u003d new Notifier(link);\n-    return new Ignored(link);\n+protected Link chain(TestMethod method) {\n+    Link link \u003d anchor(method);\n+    link \u003d handleExceptions(link, method);\n+    link \u003d timeout(link, method);\n+    link \u003d new BeforeAndAfter(link, method);\n+    return notifier(link, method);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "- Split links into their own package\n- Combined JUnit4ClassRunner and JUnit4MethodRunner, allowing extensions to be written with a single class\n- Created a separate model class for TestMethod, TestClass, and other runnable Java elements (TODO: still messy separation of concerns there)\n- Absorbed ExplosiveMethod into TestMethod.invokeExplosively\n- Absorbed MethodValidator into TestClass and TestMethod.\n- Removed deprecated OldTestClassRunner and TestClassRunner\n- Changed testAndTeardownFailure so that the order of failures is undefined\n- Added test for Before defined on subclass run on Test defined on superclass.\n\nThis is not yet the finished refactoring.  More to come, but needed a checkpoint\n",
          "commitDate": "2007/10/9 上午3:40",
          "commitName": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
          "commitAuthor": "dsaff",
          "commitDateOld": "2007/10/6 上午4:47",
          "commitNameOld": "57302f0df76fba83ba72a676bd660efeb5881af6",
          "commitAuthorOld": "kbeck",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain(TestMethod method) {\n    Link link \u003d anchor(method);\n    link \u003d handleExceptions(link, method);\n    link \u003d timeout(link, method);\n    link \u003d new BeforeAndAfter(link, method);\n    return notifier(link, method);\n}",
          "path": "src/org/junit/internal/runners/JUnit4ClassRunner.java",
          "functionStartLine": 173,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,7 @@\n-protected Link chain() {\n-    Link link \u003d anchor();\n-    link \u003d handleExceptions(link);\n-    link \u003d timeout(link);\n-    link \u003d new BeforeAndAfter(link);\n-    link \u003d new Notifier(link);\n-    return new Ignored(link);\n+protected Link chain(TestMethod method) {\n+    Link link \u003d anchor(method);\n+    link \u003d handleExceptions(link, method);\n+    link \u003d timeout(link, method);\n+    link \u003d new BeforeAndAfter(link, method);\n+    return notifier(link, method);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[method-TestMethod]"
          }
        }
      ]
    },
    "57302f0df76fba83ba72a676bd660efeb5881af6": {
      "type": "Ybodychange",
      "commitMessage": "Further refinement--I got rid of the Link/Anchor distinction. The bits of functionality are all Links at the moment. I also took error reporting out of Timeout (Roadie.runAfters() reports multiple errors without engaging the Link). There still seem to be some loose ends to tie up--naming, duplication, getting rid of dependencies on the enclosing instance as part of making the Links top-level classes, repackaging.\n",
      "commitDate": "2007/10/6 上午4:47",
      "commitName": "57302f0df76fba83ba72a676bd660efeb5881af6",
      "commitAuthor": "kbeck",
      "commitDateOld": "2007/10/6 上午12:54",
      "commitNameOld": "a58514aec7e843339be24980e92aeeb759327ffb",
      "commitAuthorOld": "dsaff",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Link chain() {\n    Link link \u003d anchor();\n    link \u003d handleExceptions(link);\n    link \u003d timeout(link);\n    link \u003d new BeforeAndAfter(link);\n    link \u003d new Notifier(link);\n    return new Ignored(link);\n}",
      "path": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
      "functionStartLine": 217,
      "functionName": "chain",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,8 @@\n protected Link chain() {\n-    Anchor anchor \u003d anchor();\n-    Anchor next \u003d handleExceptions(anchor);\n-    next \u003d timeout(next);\n-    Link link \u003d new BeforeAndAfter(next);\n-    return new Notifier(link);\n+    Link link \u003d anchor();\n+    link \u003d handleExceptions(link);\n+    link \u003d timeout(link);\n+    link \u003d new BeforeAndAfter(link);\n+    link \u003d new Notifier(link);\n+    return new Ignored(link);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a58514aec7e843339be24980e92aeeb759327ffb": {
      "type": "Ybodychange",
      "commitMessage": "Allowed more classes to be Anchors, more cleanup still to do\n",
      "commitDate": "2007/10/6 上午12:54",
      "commitName": "a58514aec7e843339be24980e92aeeb759327ffb",
      "commitAuthor": "dsaff",
      "commitDateOld": "2007/10/5 下午12:59",
      "commitNameOld": "4081076e513e84bb2376f889d4108e64e9a18653",
      "commitAuthorOld": "kbeck",
      "daysBetweenCommits": 0.5,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Link chain() {\n    Anchor anchor \u003d anchor();\n    Anchor next \u003d handleExceptions(anchor);\n    next \u003d timeout(next);\n    Link link \u003d new BeforeAndAfter(next);\n    return new Notifier(link);\n}",
      "path": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
      "functionStartLine": 205,
      "functionName": "chain",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,7 @@\n protected Link chain() {\n     Anchor anchor \u003d anchor();\n-    Link next \u003d handleExceptions(anchor);\n+    Anchor next \u003d handleExceptions(anchor);\n     next \u003d timeout(next);\n-    next \u003d new BeforeAndAfter(next);\n-    return new Notifier(next);\n+    Link link \u003d new BeforeAndAfter(next);\n+    return new Notifier(link);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4081076e513e84bb2376f889d4108e64e9a18653": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Big reorganization of how test methods are run. Now there are a nested set of Links which each handle one aspect of running a method. Custom runners can create their own chain of Links to introduce new behavior. This isn\u0027t done--it needs organization like extracting inner classes to top level classes and refinement of visibility.\n",
      "commitDate": "2007/10/5 下午12:59",
      "commitName": "4081076e513e84bb2376f889d4108e64e9a18653",
      "commitAuthor": "kbeck",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Big reorganization of how test methods are run. Now there are a nested set of Links which each handle one aspect of running a method. Custom runners can create their own chain of Links to introduce new behavior. This isn\u0027t done--it needs organization like extracting inner classes to top level classes and refinement of visibility.\n",
          "commitDate": "2007/10/5 下午12:59",
          "commitName": "4081076e513e84bb2376f889d4108e64e9a18653",
          "commitAuthor": "kbeck",
          "commitDateOld": "2007/10/4 上午2:11",
          "commitNameOld": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 1.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain() {\n    Anchor anchor \u003d anchor();\n    Link next \u003d handleExceptions(anchor);\n    next \u003d timeout(next);\n    next \u003d new BeforeAndAfter(next);\n    return new Notifier(next);\n}",
          "path": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
          "functionStartLine": 185,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,7 @@\n-private Link chain() {\n-    Link expectedException \u003d new Link() {\n-\n-        @Override\n-        public void run(Roadie context) {\n-            runWithExpectedExceptionCheck(context);\n-        }\n-    };\n-    Timeout timeout \u003d new Timeout(expectedException);\n-    return new Notifier(new BeforeAndAfter(timeout));\n+protected Link chain() {\n+    Anchor anchor \u003d anchor();\n+    Link next \u003d handleExceptions(anchor);\n+    next \u003d timeout(next);\n+    next \u003d new BeforeAndAfter(next);\n+    return new Notifier(next);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Big reorganization of how test methods are run. Now there are a nested set of Links which each handle one aspect of running a method. Custom runners can create their own chain of Links to introduce new behavior. This isn\u0027t done--it needs organization like extracting inner classes to top level classes and refinement of visibility.\n",
          "commitDate": "2007/10/5 下午12:59",
          "commitName": "4081076e513e84bb2376f889d4108e64e9a18653",
          "commitAuthor": "kbeck",
          "commitDateOld": "2007/10/4 上午2:11",
          "commitNameOld": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf",
          "commitAuthorOld": "dsaff",
          "daysBetweenCommits": 1.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Link chain() {\n    Anchor anchor \u003d anchor();\n    Link next \u003d handleExceptions(anchor);\n    next \u003d timeout(next);\n    next \u003d new BeforeAndAfter(next);\n    return new Notifier(next);\n}",
          "path": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
          "functionStartLine": 185,
          "functionName": "chain",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,7 @@\n-private Link chain() {\n-    Link expectedException \u003d new Link() {\n-\n-        @Override\n-        public void run(Roadie context) {\n-            runWithExpectedExceptionCheck(context);\n-        }\n-    };\n-    Timeout timeout \u003d new Timeout(expectedException);\n-    return new Notifier(new BeforeAndAfter(timeout));\n+protected Link chain() {\n+    Anchor anchor \u003d anchor();\n+    Link next \u003d handleExceptions(anchor);\n+    next \u003d timeout(next);\n+    next \u003d new BeforeAndAfter(next);\n+    return new Notifier(next);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf": {
      "type": "Yintroduced",
      "commitMessage": "Started to convert to Links.\n",
      "commitDate": "2007/10/4 上午2:11",
      "commitName": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf",
      "commitAuthor": "dsaff",
      "diff": "@@ -0,0 +1,11 @@\n+private Link chain() {\n+    Link expectedException \u003d new Link() {\n+\n+        @Override\n+        public void run(Roadie context) {\n+            runWithExpectedExceptionCheck(context);\n+        }\n+    };\n+    Timeout timeout \u003d new Timeout(expectedException);\n+    return new Notifier(new BeforeAndAfter(timeout));\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Link chain() {\n    Link expectedException \u003d new Link() {\n\n        @Override\n        public void run(Roadie context) {\n            runWithExpectedExceptionCheck(context);\n        }\n    };\n    Timeout timeout \u003d new Timeout(expectedException);\n    return new Notifier(new BeforeAndAfter(timeout));\n}",
      "path": "src/org/junit/internal/runners/JUnit4MethodRunner.java",
      "functionStartLine": 90,
      "functionName": "chain",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}