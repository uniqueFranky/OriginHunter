{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "TestMethodTestDescriptor.java",
  "functionName": "invokeTestMethod",
  "functionId": "invokeTestMethod___context-JupiterEngineExecutionContext__dynamicTestExecutor-DynamicTestExecutor",
  "sourceFilePath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 163,
  "functionEndLine": 177,
  "numCommitsSeen": 461,
  "timeTaken": 2941,
  "changeHistory": [
    "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd",
    "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
    "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
    "a97e4d3088f97b58031b139c006a98c8e0f49422",
    "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
    "fdadf905479b4cd63f1987d08940eddfbf89d088",
    "ee8cb2e44a92c511bc73553f2005ecc890bec141",
    "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e",
    "9a5ddb30bb206026eb7b209e98d809c1bedd887e",
    "9838fabf19e19b0e6cc80da85aeac94b427867d5",
    "fc3c61b41f014a2500f176e23fe8ad2989d20565",
    "4b41518fa052b28a953e99b087d505603a22c175",
    "da4a05ba9572191b3600a79ec616ea47fe8a3fd3",
    "c95005adbe2f754997a43009a47124f725496530",
    "2397538bc17fe9c105c8a2ef6955c13ba45e4628",
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
    "babcc661bd906b38a272f287ac8779669268fc58",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "507e50872c6df8a66c32f45cb2153555f510c4b1",
    "e0e131335d2117a2a1630db22260a258e47d8c4d",
    "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
    "c7c0d24a3b6b46868d732e6358834c2ddf81ad48",
    "a409b27b1fca748a504a8bbcf7a914eeadeebdab",
    "ac7bb522519cd8a600324aa909a5c17a110cb97f",
    "23c20e541adffed56fcb34ad297d843081eaa796",
    "f250792f7f2a6a40cdec82f3090ce88d99aad152",
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
    "0fd76305d40d56ca9377d8d64bfc160cc834c134",
    "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
    "e45c3250aaedd8e80f854b6cd99c24f7f99f145b",
    "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e",
    "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
    "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
    "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
    "fc5ff8d87c124e43601f64da76668e516758a74a"
  ],
  "changeHistoryShort": {
    "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd": "Yfilerename",
    "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96": "Ybodychange",
    "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff": "Ybodychange",
    "a97e4d3088f97b58031b139c006a98c8e0f49422": "Ybodychange",
    "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023": "Ybodychange",
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": "Ybodychange",
    "fdadf905479b4cd63f1987d08940eddfbf89d088": "Ybodychange",
    "ee8cb2e44a92c511bc73553f2005ecc890bec141": "Ybodychange",
    "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e": "Ybodychange",
    "9a5ddb30bb206026eb7b209e98d809c1bedd887e": "Ybodychange",
    "9838fabf19e19b0e6cc80da85aeac94b427867d5": "Ybodychange",
    "fc3c61b41f014a2500f176e23fe8ad2989d20565": "Yparameterchange",
    "4b41518fa052b28a953e99b087d505603a22c175": "Yparameterchange",
    "da4a05ba9572191b3600a79ec616ea47fe8a3fd3": "Ybodychange",
    "c95005adbe2f754997a43009a47124f725496530": "Ybodychange",
    "2397538bc17fe9c105c8a2ef6955c13ba45e4628": "Ybodychange",
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": "Ymultichange(Yparameterchange,Ybodychange)",
    "babcc661bd906b38a272f287ac8779669268fc58": "Yparameterchange",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "507e50872c6df8a66c32f45cb2153555f510c4b1": "Yfilerename",
    "e0e131335d2117a2a1630db22260a258e47d8c4d": "Ybodychange",
    "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb": "Ybodychange",
    "c7c0d24a3b6b46868d732e6358834c2ddf81ad48": "Ybodychange",
    "a409b27b1fca748a504a8bbcf7a914eeadeebdab": "Ybodychange",
    "ac7bb522519cd8a600324aa909a5c17a110cb97f": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "23c20e541adffed56fcb34ad297d843081eaa796": "Ybodychange",
    "f250792f7f2a6a40cdec82f3090ce88d99aad152": "Ymultichange(Yparameterchange,Ybodychange)",
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "0fd76305d40d56ca9377d8d64bfc160cc834c134": "Ybodychange",
    "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab": "Ymultichange(Yparameterchange,Ybodychange)",
    "e45c3250aaedd8e80f854b6cd99c24f7f99f145b": "Ybodychange",
    "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e": "Ybodychange",
    "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "b67bd2e32f8274fb0972e3a98157e2398140dcbf": "Ybodychange",
    "11ece8b11085a01a95a10e7bf26e4eb51034ac00": "Ymultichange(Yparameterchange,Ybodychange)",
    "fc5ff8d87c124e43601f64da76668e516758a74a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd": {
      "type": "Yfilerename",
      "commitMessage": "Rename MethodTestDescriptor to TestMethodTestDescriptor\n\nThis commit renames MethodTestDescriptor in order to align with the\nnaming convention for other test descriptors in Jupiter that pertain\nto methods.\n",
      "commitDate": "2017/7/17 上午3:30",
      "commitName": "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/17 上午3:18",
      "commitNameOld": "1ffeb82ee94582720e9928c5868d180acd589d4d",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d extensionContext.getRequiredTestInstance();\n            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java",
      "functionStartLine": 159,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
        "newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java"
      }
    },
    "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getRequired*() methods in the ExtensionContext API\n\nThis commit introduces new getRequiredTestClass(),\ngetRequiredTestInstance(), and getRequiredTestMethod() convenience\nmethods in the ExtensionContext API which provide extension authors\nshortcuts for retrieving the test class, test instance, and test method\nin use cases for which such elements are required to be present.\n\nIssue: #913\n",
      "commitDate": "2017/7/11 上午12:34",
      "commitName": "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/4 下午7:30",
      "commitNameOld": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d extensionContext.getRequiredTestInstance();\n            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 159,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     ExtensionContext extensionContext \u003d context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d getRequiredTestInstance(extensionContext);\n+            Object instance \u003d extensionContext.getRequiredTestInstance();\n             executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getRequiredTestInstance() in JupiterTestDescriptor\n\nIssue: #419\n",
      "commitDate": "2017/7/4 下午7:30",
      "commitName": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/4 下午7:00",
      "commitNameOld": "fa7f25613bf60f2fd724c0c41fb413801bca53df",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d getRequiredTestInstance(extensionContext);\n            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 159,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     ExtensionContext extensionContext \u003d context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n+            Object instance \u003d getRequiredTestInstance(extensionContext);\n             executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a97e4d3088f97b58031b139c006a98c8e0f49422": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Introduce getRequiredTestInstance() in AbstractExtensionContext\"\n\nThis reverts commit 0836f8f28601d1d27d07ad302c6aa1ef9f2ab023.\n",
      "commitDate": "2017/7/4 下午7:00",
      "commitName": "a97e4d3088f97b58031b139c006a98c8e0f49422",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/4 下午6:36",
      "commitNameOld": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 167,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-    AbstractExtensionContext\u003c?\u003e extensionContext \u003d context.getExtensionContext();\n+    ExtensionContext extensionContext \u003d context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d extensionContext.getRequiredTestInstance();\n+            Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n             executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getRequiredTestInstance() in AbstractExtensionContext\n\nIssue: #910\n",
      "commitDate": "2017/7/4 下午6:36",
      "commitName": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/3 下午8:21",
      "commitNameOld": "46e83ca98b5e11760f6995076c277f1af445826a",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    AbstractExtensionContext\u003c?\u003e extensionContext \u003d context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d extensionContext.getRequiredTestInstance();\n            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 166,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-    ExtensionContext extensionContext \u003d context.getExtensionContext();\n+    AbstractExtensionContext\u003c?\u003e extensionContext \u003d context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n+            Object instance \u003d extensionContext.getRequiredTestInstance();\n             executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7": {
      "type": "Ybodychange",
      "commitMessage": "Remove TestExtensionContext and ContainerExtensionContext\n\nIssue: #901\n",
      "commitDate": "2017/7/1 下午7:45",
      "commitName": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "fdadf905479b4cd63f1987d08940eddfbf89d088",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext \u003d context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 165,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n-    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    ExtensionContext extensionContext \u003d context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n-            executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n+            Object instance \u003d extensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n+            executableInvoker.invoke(testMethod, instance, extensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n-            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n+            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), extensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fdadf905479b4cd63f1987d08940eddfbf89d088": {
      "type": "Ybodychange",
      "commitMessage": "Avoid NoSuchElementException when retrieving test instance\n\nIssue: #419\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "fdadf905479b4cd63f1987d08940eddfbf89d088",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/1 上午12:16",
      "commitNameOld": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n            executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 165,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d testExtensionContext.getTestInstance().get();\n+            Object instance \u003d testExtensionContext.getTestInstance().orElseThrow(() -\u003e new JUnitException(\"Illegal state: test instance not present for method: \" + testMethod.toGenericString()));\n             executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ee8cb2e44a92c511bc73553f2005ecc890bec141": {
      "type": "Ybodychange",
      "commitMessage": "Move getTestInstance() to ExtensionContext\n\nIssue: #419\n",
      "commitDate": "2017/7/1 上午12:16",
      "commitName": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/5/4 下午11:02",
      "commitNameOld": "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 57.05,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d testExtensionContext.getTestInstance().get();\n            executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 164,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            Object instance \u003d testExtensionContext.getTestInstance();\n+            Object instance \u003d testExtensionContext.getTestInstance().get();\n             executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e": {
      "type": "Ybodychange",
      "commitMessage": "Remove logging from test method execution\n\nSee #834 for details\n",
      "commitDate": "2017/5/4 下午11:02",
      "commitName": "21cb383011c9f55e8d8da8afbeaadbf3fb400c1e",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/5/4 下午6:25",
      "commitNameOld": "9a5ddb30bb206026eb7b209e98d809c1bedd887e",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 164,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method testMethod \u003d getTestMethod();\n-            if (ReflectionUtils.isPublic(testMethod) \u0026\u0026 !testMethod.isDefault()) {\n-                LOG.config(() -\u003e \"Modifier `public` is not necessary at \" + testMethod);\n-            }\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9a5ddb30bb206026eb7b209e98d809c1bedd887e": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary public modifiers\n\nThis batch commit applies Jupiter feature supporting package private\ntest classes and methods to our Jupiter tests.\n\nCloses #679\n",
      "commitDate": "2017/5/4 下午6:25",
      "commitName": "9a5ddb30bb206026eb7b209e98d809c1bedd887e",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017/3/26 上午12:43",
      "commitNameOld": "18b27c341bc156f4a11cd90723ae241516980f9e",
      "commitAuthorOld": "codecholeric",
      "daysBetweenCommits": 39.74,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method testMethod \u003d getTestMethod();\n            if (ReflectionUtils.isPublic(testMethod) \u0026\u0026 !testMethod.isDefault()) {\n                LOG.config(() -\u003e \"Modifier `public` is not necessary at \" + testMethod);\n            }\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 167,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,16 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n+            Method testMethod \u003d getTestMethod();\n+            if (ReflectionUtils.isPublic(testMethod) \u0026\u0026 !testMethod.isDefault()) {\n+                LOG.config(() -\u003e \"Modifier `public` is not necessary at \" + testMethod);\n+            }\n             Object instance \u003d testExtensionContext.getTestInstance();\n-            executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n+            executableInvoker.invoke(testMethod, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9838fabf19e19b0e6cc80da85aeac94b427867d5": {
      "type": "Ybodychange",
      "commitMessage": "Introduce CollectionUtils.toStream to remove duplication\n",
      "commitDate": "2017/3/12 上午5:41",
      "commitName": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/2/25 上午4:20",
      "commitNameOld": "5489da0069a57e14eb2651df628fcc80c29f520d",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 169,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,12 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n-            Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n-            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n+            executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc3c61b41f014a2500f176e23fe8ad2989d20565": {
      "type": "Yparameterchange",
      "commitMessage": "Replace Consumer\u003cTestDescriptor\u003e with custom interface\n\nIssue: #14\n",
      "commitDate": "2017/2/25 上午4:20",
      "commitName": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/2/25 上午4:20",
      "commitNameOld": "74fb7c6ff29566e28b9b04b9bbcc50c0a8632ec7",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 205,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n-protected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer\u003cTestDescriptor\u003e]",
        "newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-DynamicTestExecutor]"
      }
    },
    "4b41518fa052b28a953e99b087d505603a22c175": {
      "type": "Yparameterchange",
      "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
      "commitDate": "2017/2/25 上午4:20",
      "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/1/19 下午1:17",
      "commitNameOld": "2f49071dfc9005f556543e34ca41027c63fde927",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 36.63,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 207,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n-protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[context-JupiterEngineExecutionContext]",
        "newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer\u003cTestDescriptor\u003e]"
      }
    },
    "da4a05ba9572191b3600a79ec616ea47fe8a3fd3": {
      "type": "Ybodychange",
      "commitMessage": "Polishing\n",
      "commitDate": "2016/6/27 上午1:40",
      "commitName": "da4a05ba9572191b3600a79ec616ea47fe8a3fd3",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/27 上午12:04",
      "commitNameOld": "c95005adbe2f754997a43009a47124f725496530",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 212,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n-    MethodBasedTestExtensionContext testExtensionContext \u003d (MethodBasedTestExtensionContext) context.getExtensionContext();\n+    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c95005adbe2f754997a43009a47124f725496530": {
      "type": "Ybodychange",
      "commitMessage": "Share ThrowableCollector b/t ExecutionContexts \u0026 ExtensionContexts\n",
      "commitDate": "2016/6/27 上午12:04",
      "commitName": "c95005adbe2f754997a43009a47124f725496530",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/26 下午11:25",
      "commitNameOld": "41e5e579821975c222850105c911aeecb67af8cf",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    MethodBasedTestExtensionContext testExtensionContext \u003d (MethodBasedTestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 212,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,13 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n     MethodBasedTestExtensionContext testExtensionContext \u003d (MethodBasedTestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n-    testExtensionContext.setTestException(throwableCollector.getThrowable());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2397538bc17fe9c105c8a2ef6955c13ba45e4628": {
      "type": "Ybodychange",
      "commitMessage": "Supply test exceptions to extensions via the TestExtensionContext\n\nCloses: #92\n",
      "commitDate": "2016/6/26 下午10:53",
      "commitName": "2397538bc17fe9c105c8a2ef6955c13ba45e4628",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/26 上午4:02",
      "commitNameOld": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    MethodBasedTestExtensionContext testExtensionContext \u003d (MethodBasedTestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n    testExtensionContext.setTestException(throwableCollector.getThrowable());\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 213,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n-    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    MethodBasedTestExtensionContext testExtensionContext \u003d (MethodBasedTestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n+    testExtensionContext.setTestException(throwableCollector.getThrowable());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
      "commitDate": "2016/6/26 上午4:02",
      "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
      "commitAuthor": "Sam Brannen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
          "commitDate": "2016/6/26 上午4:02",
          "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/6/26 上午1:30",
          "commitNameOld": "6d2e88689252202ceb2efcdc54f78631f65752c5",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 210,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,13 @@\n-protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
            "newValue": "[context-JupiterEngineExecutionContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
          "commitDate": "2016/6/26 上午4:02",
          "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/6/26 上午1:30",
          "commitNameOld": "6d2e88689252202ceb2efcdc54f78631f65752c5",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 210,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,13 @@\n-protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context) {\n+    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "babcc661bd906b38a272f287ac8779669268fc58": {
      "type": "Yparameterchange",
      "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午9:08",
      "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 下午4:59",
      "commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 183,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n-protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n             executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[context-JUnit5EngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
        "newValue": "[context-JupiterEngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
      }
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午4:59",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午2:04",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 183,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
        "newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
      }
    },
    "507e50872c6df8a66c32f45cb2153555f510c4b1": {
      "type": "Yfilerename",
      "commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
      "commitDate": "2016/6/19 上午4:50",
      "commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/19 上午3:31",
      "commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 183,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
        "newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
      }
    },
    "e0e131335d2117a2a1630db22260a258e47d8c4d": {
      "type": "Ybodychange",
      "commitMessage": "Make ExecutableInvoker stateless\n",
      "commitDate": "2016/5/29 上午1:02",
      "commitName": "e0e131335d2117a2a1630db22260a258e47d8c4d",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/26 下午8:42",
      "commitNameOld": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 176,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         try {\n             Method method \u003d testExtensionContext.getTestMethod().get();\n             Object instance \u003d testExtensionContext.getTestInstance();\n-            new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(method, instance);\n+            executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb": {
      "type": "Ybodychange",
      "commitMessage": "Convert MethodInvoker to generic ExecutableInvoker\n\nPrior to this commit, MethodInvoker was limited to method invocations.\nWith the recent generalization of the ParameterResolver API, it is now\npossible to convert MethodInvoker to a generic ExecutableInvoker that\ncan be applied to constructors or methods, serving as a building block\nfor possible constructor injection support.\n\nThis commit converts MethodInvoker to a generic ExecutableInvoker that\ncan be used to invoke both methods and constructors with dynamic\nparameter resolution via registered ParameterResolvers.\n\nSpecifically, this commit includes the following changes.\n\n - Renamed MethodInvoker to ExecutableInvoker\n - Refactored ExecutableInvoker to support parameter resolution for any\n   java.lang.reflect.Executable\n - Introduced newInstance(Constructor\u003cT\u003e, Object...) in ReflectionUtils\n - Introduced invoke(Constructor), invoke(Method), and\n   invoke(Method, Object) in ExecutableInvoker\n - Removed MethodInvocationContext and MethodInvocationContextFactory\n - Removed ConstructorInvoker proof of concept\n\nIssue: #267\n",
      "commitDate": "2016/5/26 下午8:42",
      "commitName": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/26 上午3:50",
      "commitNameOld": "067620c65061755653ee09f11c2ecaac17b206d1",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        try {\n            Method method \u003d testExtensionContext.getTestMethod().get();\n            Object instance \u003d testExtensionContext.getTestInstance();\n            new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(method, instance);\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 175,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,11 @@\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n-        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n         try {\n-            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n+            Method method \u003d testExtensionContext.getTestMethod().get();\n+            Object instance \u003d testExtensionContext.getTestInstance();\n+            new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(method, instance);\n         } catch (Throwable throwable) {\n             invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c7c0d24a3b6b46868d732e6358834c2ddf81ad48": {
      "type": "Ybodychange",
      "commitMessage": "Rename ExceptionHandler to TestExecutionExceptionHandler\n\nIssue: #249\n",
      "commitDate": "2016/5/25 上午6:18",
      "commitName": "c7c0d24a3b6b46868d732e6358834c2ddf81ad48",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/25 上午5:49",
      "commitNameOld": "3a08070f0f5255c2a058ef9912484364a57af3a8",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n        try {\n            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 178,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n         try {\n             new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n         } catch (Throwable throwable) {\n-            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n+            invokeTestExecutionExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a409b27b1fca748a504a8bbcf7a914eeadeebdab": {
      "type": "Ybodychange",
      "commitMessage": "Introduce getTest[Class|Method]() in TestInfo \u0026 ExtensionContext\n\nThis commit introduces Optional\u003cClass\u003c?\u003e\u003e getTestClass() and\nOptional\u003cMethod\u003e getTestMethod() methods in TestInfo and\nExtensionContext.\n\nThe existing `Class\u003c?\u003e getTestClass()` method in ExtensionContext has\nsimply been replaced, and the existing `Method getTestMethod()` method\nin TestExtensionContext has been removed.\n\nIssue: #153\n",
      "commitDate": "2016/5/25 上午5:32",
      "commitName": "a409b27b1fca748a504a8bbcf7a914eeadeebdab",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/24 上午3:21",
      "commitNameOld": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n        try {\n            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 178,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n-        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n         try {\n             new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n         } catch (Throwable throwable) {\n             invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac7bb522519cd8a600324aa909a5c17a110cb97f": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
      "commitDate": "2016/5/24 上午3:21",
      "commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
          "commitDate": "2016/5/24 上午3:21",
          "commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2016/5/16 上午3:09",
          "commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        try {\n            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 178,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         try {\n-            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n         } catch (Throwable throwable) {\n-            invokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n+            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ExtensionRegistry-ExtensionRegistry, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]",
            "newValue": "[context-JUnit5EngineExecutionContext, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
          "commitDate": "2016/5/24 上午3:21",
          "commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2016/5/16 上午3:09",
          "commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        try {\n            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 178,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         try {\n-            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n         } catch (Throwable throwable) {\n-            invokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n+            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
          "commitDate": "2016/5/24 上午3:21",
          "commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2016/5/16 上午3:09",
          "commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        try {\n            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 178,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n+protected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         try {\n-            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+            new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n         } catch (Throwable throwable) {\n-            invokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n+            invokeExceptionHandlers(context.getExtensionRegistry(), testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "23c20e541adffed56fcb34ad297d843081eaa796": {
      "type": "Ybodychange",
      "commitMessage": "Rename ExceptionHandlerExtensionPoint to ExceptionHandler\n\nIssue: #232\n",
      "commitDate": "2016/5/2 下午11:30",
      "commitName": "23c20e541adffed56fcb34ad297d843081eaa796",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/3/11 下午6:52",
      "commitNameOld": "5382b682db28f81e71737cec46b9883bfff73800",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 52.19,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "actualSource": "private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        try {\n            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n        }\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 177,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         try {\n             new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n         } catch (Throwable throwable) {\n-            invokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n+            invokeExceptionHandlers(ExtensionRegistry, testExtensionContext, throwable);\n         }\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f250792f7f2a6a40cdec82f3090ce88d99aad152": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
      "commitDate": "2016/1/21 下午10:16",
      "commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
          "commitDate": "2016/1/21 下午10:16",
          "commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2016/1/21 下午9:03",
          "commitNameOld": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        try {\n            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 173,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,10 @@\n-private void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry, ThrowableCollector throwableCollector) {\n+private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n+        try {\n+            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+        } catch (Throwable throwable) {\n+            invokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n+        }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testExtensionContext-TestExtensionContext, extensionRegistry-ExtensionRegistry, throwableCollector-ThrowableCollector]",
            "newValue": "[ExtensionRegistry-ExtensionRegistry, testExtensionContext-TestExtensionContext, throwableCollector-ThrowableCollector]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
          "commitDate": "2016/1/21 下午10:16",
          "commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2016/1/21 下午9:03",
          "commitNameOld": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        try {\n            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n        } catch (Throwable throwable) {\n            invokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n        }\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 173,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,10 @@\n-private void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry, ThrowableCollector throwableCollector) {\n+private void invokeTestMethod(ExtensionRegistry ExtensionRegistry, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n+        try {\n+            new MethodInvoker(testExtensionContext, ExtensionRegistry).invoke(methodInvocationContext);\n+        } catch (Throwable throwable) {\n+            invokeExceptionHandlerExtensionPoints(ExtensionRegistry, testExtensionContext, throwable);\n+        }\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
      "commitDate": "2016/1/21 下午9:03",
      "commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
      "commitAuthor": "Sam Brannen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
          "commitDate": "2016/1/21 下午9:03",
          "commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/1/18 下午10:34",
          "commitNameOld": "763cf502451c5053cd72248aac3561cd1530b719",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.94,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 169,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n+        new MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwableCollector-ThrowableCollector]",
            "newValue": "[testExtensionContext-TestExtensionContext, extensionRegistry-ExtensionRegistry, throwableCollector-ThrowableCollector]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
          "commitDate": "2016/1/21 下午9:03",
          "commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/1/18 下午10:34",
          "commitNameOld": "763cf502451c5053cd72248aac3561cd1530b719",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 2.94,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 169,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, ExtensionRegistry extensionRegistry, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n         MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n+        new MethodInvoker(testExtensionContext, extensionRegistry).invoke(methodInvocationContext);\n     });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0fd76305d40d56ca9377d8d64bfc160cc834c134": {
      "type": "Ybodychange",
      "commitMessage": "Rename MethodContext to MethodInvocationContext\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks msg systems ag\n(http://www.msg-systems.com) for supporting the JUnit crowdfunding\ncampaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/4 上午12:12",
      "commitName": "0fd76305d40d56ca9377d8d64bfc160cc834c134",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/3 上午5:24",
      "commitNameOld": "eb4d6401bb646f5c77b89149aeb6648f0b3ab478",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n    });\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 157,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,6 @@\n private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n     throwableCollector.execute(() -\u003e {\n-        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n+        MethodInvocationContext methodInvocationContext \u003d methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodInvocationContext);\n     });\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/3 上午1:37",
      "commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
      "commitAuthor": "Sam Brannen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2016/1/3 上午1:37",
          "commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/1/3 上午1:23",
          "commitNameOld": "355d64b574c534f35b4faeae1339b458a0787579",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 157,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n-    executeAndCollectThrowables(() -\u003e {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+    throwableCollector.execute(() -\u003e {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-    }, throwablesCollector);\n+    });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwablesCollector-List\u003cThrowable\u003e]",
            "newValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwableCollector-ThrowableCollector]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2016/1/3 上午1:37",
          "commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
          "commitAuthor": "Sam Brannen",
          "commitDateOld": "2016/1/3 上午1:23",
          "commitNameOld": "355d64b574c534f35b4faeae1339b458a0787579",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n    throwableCollector.execute(() -\u003e {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    });\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 157,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,6 +1,6 @@\n-private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n-    executeAndCollectThrowables(() -\u003e {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, ThrowableCollector throwableCollector) {\n+    throwableCollector.execute(() -\u003e {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-    }, throwablesCollector);\n+    });\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e45c3250aaedd8e80f854b6cd99c24f7f99f145b": {
      "type": "Ybodychange",
      "commitMessage": "Consolidated exception handling for subclasses of JUnit5TestDescriptor.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/23 上午12:25",
      "commitName": "e45c3250aaedd8e80f854b6cd99c24f7f99f145b",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/22 下午11:15",
      "commitNameOld": "255e91bbfa74234afffffe2d393ad6a43091cfd2",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n    executeAndCollectThrowables(() -\u003e {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    }, throwablesCollector);\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 154,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,6 @@\n private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n-    try {\n+    executeAndCollectThrowables(() -\u003e {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-    } catch (ReflectionUtils.TargetExceptionWrapper wrapper) {\n-        throwablesCollector.add(wrapper.getTargetException());\n-    } catch (Throwable t) {\n-        throwablesCollector.add(t);\n-    }\n+    }, throwablesCollector);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e": {
      "type": "Ybodychange",
      "commitMessage": "Checked and unchecked exceptions in test cases now properly reported.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/18 下午10:47",
      "commitName": "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/18 上午3:54",
      "commitNameOld": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    } catch (ReflectionUtils.TargetExceptionWrapper wrapper) {\n        throwablesCollector.add(wrapper.getTargetException());\n    } catch (Throwable t) {\n        throwablesCollector.add(t);\n    }\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 124,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,10 @@\n private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n     try {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n+    } catch (ReflectionUtils.TargetExceptionWrapper wrapper) {\n+        throwablesCollector.add(wrapper.getTargetException());\n     } catch (Throwable t) {\n         throwablesCollector.add(t);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/15 下午12:45",
      "commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/15 下午12:45",
          "commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/15 上午6:56",
          "commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    } catch (Throwable t) {\n        throwablesCollector.add(t);\n    }\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 150,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,8 @@\n-private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n     try {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-        return Optional.empty();\n     } catch (Throwable t) {\n-        return Optional.of(t);\n+        throwablesCollector.add(t);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry]",
            "newValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry, throwablesCollector-List\u003cThrowable\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/15 下午12:45",
          "commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/15 上午6:56",
          "commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    } catch (Throwable t) {\n        throwablesCollector.add(t);\n    }\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 150,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,8 @@\n-private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n     try {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-        return Optional.empty();\n     } catch (Throwable t) {\n-        return Optional.of(t);\n+        throwablesCollector.add(t);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Optional\u003cThrowable\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
          "commitDate": "2015/12/15 下午12:45",
          "commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015/12/15 上午6:56",
          "commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
          "commitAuthorOld": "Johannes Link",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n    } catch (Throwable t) {\n        throwablesCollector.add(t);\n    }\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 150,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,8 @@\n-private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n+private void invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry, List\u003cThrowable\u003e throwablesCollector) {\n     try {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n         new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n-        return Optional.empty();\n     } catch (Throwable t) {\n-        return Optional.of(t);\n+        throwablesCollector.add(t);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b67bd2e32f8274fb0972e3a98157e2398140dcbf": {
      "type": "Ybodychange",
      "commitMessage": "MethodInvoker invokes using MethodContext\n",
      "commitDate": "2015/12/10 上午6:00",
      "commitName": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/10 上午5:51",
      "commitNameOld": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n        return Optional.empty();\n    } catch (Throwable t) {\n        return Optional.of(t);\n    }\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 101,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n     try {\n         MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n+        new MethodInvoker(testExtensionContext, testExtensionRegistry).invoke(methodContext);\n         return Optional.empty();\n     } catch (Throwable t) {\n         return Optional.of(t);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11ece8b11085a01a95a10e7bf26e4eb51034ac00": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
      "commitDate": "2015/12/10 上午5:51",
      "commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
          "commitDate": "2015/12/10 上午5:51",
          "commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午5:37",
          "commitNameOld": "fc5ff8d87c124e43601f64da76668e516758a74a",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n        return Optional.empty();\n    } catch (Throwable t) {\n        return Optional.of(t);\n    }\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 101,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n-private Optional\u003cThrowable\u003e invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n+private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n     try {\n-        MethodContext methodContext \u003d new MethodContextImpl(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        new MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n         return Optional.empty();\n     } catch (Throwable t) {\n         return Optional.of(t);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[myContext-JUnit5Context, testExtensionContext-TestExtensionContext]",
            "newValue": "[testExtensionContext-TestExtensionContext, testExtensionRegistry-TestExtensionRegistry]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
          "commitDate": "2015/12/10 上午5:51",
          "commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午5:37",
          "commitNameOld": "fc5ff8d87c124e43601f64da76668e516758a74a",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n    try {\n        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n        return Optional.empty();\n    } catch (Throwable t) {\n        return Optional.of(t);\n    }\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 101,
          "functionName": "invokeTestMethod",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,9 @@\n-private Optional\u003cThrowable\u003e invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n+private Optional\u003cThrowable\u003e invokeTestMethod(TestExtensionContext testExtensionContext, TestExtensionRegistry testExtensionRegistry) {\n     try {\n-        MethodContext methodContext \u003d new MethodContextImpl(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n-        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+        MethodContext methodContext \u003d methodContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        new MethodInvoker(methodContext, testExtensionContext, testExtensionRegistry).invoke();\n         return Optional.empty();\n     } catch (Throwable t) {\n         return Optional.of(t);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "fc5ff8d87c124e43601f64da76668e516758a74a": {
      "type": "Yintroduced",
      "commitMessage": "Execute @AfterEach methods in AfterEachCallback\n",
      "commitDate": "2015/12/10 上午5:37",
      "commitName": "fc5ff8d87c124e43601f64da76668e516758a74a",
      "commitAuthor": "Marc Philipp",
      "diff": "@@ -0,0 +1,9 @@\n+private Optional\u003cThrowable\u003e invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n+    try {\n+        MethodContext methodContext \u003d new MethodContextImpl(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n+        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+        return Optional.empty();\n+    } catch (Throwable t) {\n+        return Optional.of(t);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Optional\u003cThrowable\u003e invokeTestMethod(JUnit5Context myContext, TestExtensionContext testExtensionContext) {\n    try {\n        MethodContext methodContext \u003d new MethodContextImpl(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n        return Optional.empty();\n    } catch (Throwable t) {\n        return Optional.of(t);\n    }\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 98,
      "functionName": "invokeTestMethod",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}