{
  "origin": "codeshovel",
  "repositoryName": "javaparser",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/javaparser/.git",
  "startCommitName": "97555053af3025556efe1a168fd7943dac28a2a6",
  "sourceFileName": "VoidVisitorAdapter.java",
  "functionName": "visit",
  "functionId": "visit___n-MethodDeclaration(modifiers-final)__arg-A(modifiers-final)",
  "sourceFilePath": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
  "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
  "functionDoc": "",
  "functionStartLine": 409,
  "functionEndLine": 419,
  "numCommitsSeen": 89,
  "timeTaken": 1712,
  "changeHistory": [
    "13dacb72ff79db384dd5a93b769d36957911ebc7",
    "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
    "255d26470311d9624b12bac2301d589fa2eefb99",
    "c9f2a4fe27453e09a268730cd0ab76a42016475f",
    "a0950452a16fa9ed5e16ec8bd0750617f1dae35d",
    "826d969210baf896f9a9ce785de9e64b58960604",
    "2769f2497af191da82e8718bfd0db65d64813e61",
    "d72a0255a3242f49bf70c228533df9ea979f2b03",
    "6084184a80dcf7651411157cc0f40fa4b7e750eb",
    "f70eef166e4afd92471079a75ba5828049fca500",
    "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515",
    "d7828ee5f27be2f10dda026372898126aeae24b7",
    "e394062ae2f12c47b357c59884113862c82a21fb",
    "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
    "008b82d149685d6702a060fbecafc8fc2e10b459",
    "02b3c5e03c44a9373c3a9d323c3425bdffade688",
    "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
    "515a9392928c14a60dc9dfa42a98198a4d877534",
    "95245a501059ef998be5052adb5930d744533731",
    "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144",
    "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
    "ef5f06ebff5e0beeb05f611a5f107452afb51457",
    "55af70e70d0124b8319f3e1d1809fafbebc68e7d",
    "df6c84c0a13f505da7fd0f64626fb5d18fd49619",
    "c992b2206b0882195e8cc68ae9d55c43ec015111",
    "0bf897c19251e2d4ada7611e47176fbbef1750ad",
    "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
    "5202f0f5f664b45b792d4910882cec2580e9045c",
    "d3db3f06220a1d0091a5cda602f13dcdc8db3040",
    "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
    "2d4decafdf373c4d1cabd9c6f8a97707c72069ff"
  ],
  "changeHistoryShort": {
    "13dacb72ff79db384dd5a93b769d36957911ebc7": "Ybodychange",
    "27a1a23d96cf8a1d4b34cdd28f10730d517673e2": "Ybodychange",
    "255d26470311d9624b12bac2301d589fa2eefb99": "Ybodychange",
    "c9f2a4fe27453e09a268730cd0ab76a42016475f": "Yannotationchange",
    "a0950452a16fa9ed5e16ec8bd0750617f1dae35d": "Yannotationchange",
    "826d969210baf896f9a9ce785de9e64b58960604": "Yannotationchange",
    "2769f2497af191da82e8718bfd0db65d64813e61": "Yannotationchange",
    "d72a0255a3242f49bf70c228533df9ea979f2b03": "Yannotationchange",
    "6084184a80dcf7651411157cc0f40fa4b7e750eb": "Ybodychange",
    "f70eef166e4afd92471079a75ba5828049fca500": "Ybodychange",
    "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515": "Ybodychange",
    "d7828ee5f27be2f10dda026372898126aeae24b7": "Ybodychange",
    "e394062ae2f12c47b357c59884113862c82a21fb": "Ybodychange",
    "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57": "Ybodychange",
    "008b82d149685d6702a060fbecafc8fc2e10b459": "Ybodychange",
    "02b3c5e03c44a9373c3a9d323c3425bdffade688": "Ybodychange",
    "9f1113b029cf7fcb6f468a85a7eae0e894415a4d": "Ybodychange",
    "515a9392928c14a60dc9dfa42a98198a4d877534": "Ybodychange",
    "95245a501059ef998be5052adb5930d744533731": "Ybodychange",
    "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144": "Ybodychange",
    "bb5ff94cff01665ddf58e3ca9a1369492340fe4b": "Ybodychange",
    "ef5f06ebff5e0beeb05f611a5f107452afb51457": "Ybodychange",
    "55af70e70d0124b8319f3e1d1809fafbebc68e7d": "Ybodychange",
    "df6c84c0a13f505da7fd0f64626fb5d18fd49619": "Yfilerename",
    "c992b2206b0882195e8cc68ae9d55c43ec015111": "Yfilerename",
    "0bf897c19251e2d4ada7611e47176fbbef1750ad": "Yfilerename",
    "40dc8d37c07dc624780d215bd1ff3e00878fe9c5": "Ymultichange(Ybodychange,Yparametermetachange)",
    "5202f0f5f664b45b792d4910882cec2580e9045c": "Yannotationchange",
    "d3db3f06220a1d0091a5cda602f13dcdc8db3040": "Ybodychange",
    "43e6f7bfbcd77b61232cc9f3e166795e47bad04b": "Yfilerename",
    "2d4decafdf373c4d1cabd9c6f8a97707c72069ff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13dacb72ff79db384dd5a93b769d36957911ebc7": {
      "type": "Ybodychange",
      "commitMessage": "Run core generators\n",
      "commitDate": "2017/11/5 上午8:42",
      "commitName": "13dacb72ff79db384dd5a93b769d36957911ebc7",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/10/18 上午1:57",
      "commitNameOld": "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 18.28,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 409,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n-    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n+    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "27a1a23d96cf8a1d4b34cdd28f10730d517673e2": {
      "type": "Ybodychange",
      "commitMessage": "Put receiver parameter only in method declarations\n",
      "commitDate": "2017/10/18 上午1:57",
      "commitName": "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/10/17 上午6:54",
      "commitNameOld": "255d26470311d9624b12bac2301d589fa2eefb99",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 408,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,13 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n+    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n-    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "255d26470311d9624b12bac2301d589fa2eefb99": {
      "type": "Ybodychange",
      "commitMessage": "Regenerate code\n",
      "commitDate": "2017/10/17 上午6:54",
      "commitName": "255d26470311d9624b12bac2301d589fa2eefb99",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/8/16 上午3:58",
      "commitNameOld": "c6e5c0162a5c693e08b7e112bf74e3514a585238",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 62.12,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 409,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,13 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n+    n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9f2a4fe27453e09a268730cd0ab76a42016475f": {
      "type": "Yannotationchange",
      "commitMessage": "Fix duplicate generated annotations\n",
      "commitDate": "2017/4/23 上午7:20",
      "commitName": "c9f2a4fe27453e09a268730cd0ab76a42016475f",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/4/23 上午6:47",
      "commitNameOld": "a0950452a16fa9ed5e16ec8bd0750617f1dae35d",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 413,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,12 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n-@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n-@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n-@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
        "newValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")"
      }
    },
    "a0950452a16fa9ed5e16ec8bd0750617f1dae35d": {
      "type": "Yannotationchange",
      "commitMessage": "Mark all generated getNodeLists methods generated\n",
      "commitDate": "2017/4/23 上午6:47",
      "commitName": "a0950452a16fa9ed5e16ec8bd0750617f1dae35d",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/4/23 上午6:42",
      "commitNameOld": "826d969210baf896f9a9ce785de9e64b58960604",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 554,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,15 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n+@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
        "newValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")"
      }
    },
    "826d969210baf896f9a9ce785de9e64b58960604": {
      "type": "Yannotationchange",
      "commitMessage": "Mark all generated getMetaModel methods generated\n",
      "commitDate": "2017/4/23 上午6:42",
      "commitName": "826d969210baf896f9a9ce785de9e64b58960604",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/4/23 上午6:40",
      "commitNameOld": "2769f2497af191da82e8718bfd0db65d64813e61",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 507,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n+@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
        "newValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")"
      }
    },
    "2769f2497af191da82e8718bfd0db65d64813e61": {
      "type": "Yannotationchange",
      "commitMessage": "Mark all generated clone methods generated\n",
      "commitDate": "2017/4/23 上午6:40",
      "commitName": "2769f2497af191da82e8718bfd0db65d64813e61",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/4/23 上午6:36",
      "commitNameOld": "d72a0255a3242f49bf70c228533df9ea979f2b03",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 460,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,13 @@\n @Override\n @Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n+@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
        "newValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\"),@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")"
      }
    },
    "d72a0255a3242f49bf70c228533df9ea979f2b03": {
      "type": "Yannotationchange",
      "commitMessage": "Mark all generated visitor methods generated\n",
      "commitDate": "2017/4/23 上午6:36",
      "commitName": "d72a0255a3242f49bf70c228533df9ea979f2b03",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/3/8 下午11:18",
      "commitNameOld": "575048efb8f501e9b22d75415e021fa68f5de3db",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 45.3,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\n@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 413,
      "functionName": "visit",
      "functionAnnotation": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,12 @@\n @Override\n+@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override",
        "newValue": "@Override,@Generated(\"com.github.javaparser.generator.core.visitor.VoidVisitorAdapterGenerator\")"
      }
    },
    "6084184a80dcf7651411157cc0f40fa4b7e750eb": {
      "type": "Ybodychange",
      "commitMessage": "Struggle with CallableDeclaration merge\n",
      "commitDate": "2017/2/8 上午4:41",
      "commitName": "6084184a80dcf7651411157cc0f40fa4b7e750eb",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/1/28 上午4:57",
      "commitNameOld": "b2ec99c5db4346ca336247d1396461d825a3bd15",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 363,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n+    n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     n.getParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n-    n.getType().accept(this, arg);\n     n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n     n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n     n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f70eef166e4afd92471079a75ba5828049fca500": {
      "type": "Ybodychange",
      "commitMessage": "Generate VoidVisitorAdapter\n",
      "commitDate": "2017/1/28 上午4:43",
      "commitName": "f70eef166e4afd92471079a75ba5828049fca500",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017/1/22 上午7:23",
      "commitNameOld": "764aa68aee62304b40b7d09903b492e240d637b2",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 5.89,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n    n.getName().accept(this, arg);\n    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n    n.getType().accept(this, arg);\n    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 365,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,11 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n-    visitComment(n.getComment(), arg);\n-    visitAnnotations(n, arg);\n-    if (n.getTypeParameters() !\u003d null) {\n-        for (final TypeParameter t : n.getTypeParameters()) {\n-            t.accept(this, arg);\n-        }\n-    }\n-    n.getType().accept(this, arg);\n+    n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n     n.getName().accept(this, arg);\n-    if (n.getParameters() !\u003d null) {\n-        for (final Parameter p : n.getParameters()) {\n-            p.accept(this, arg);\n-        }\n-    }\n-    if (n.getThrownExceptions() !\u003d null) {\n-        for (final ReferenceType name : n.getThrownExceptions()) {\n-            name.accept(this, arg);\n-        }\n-    }\n-    if (n.getBody().isPresent()) {\n-        n.getBody().get().accept(this, arg);\n-    }\n+    n.getParameters().forEach(p -\u003e p.accept(this, arg));\n+    n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n+    n.getType().accept(this, arg);\n+    n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n+    n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n+    n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515": {
      "type": "Ybodychange",
      "commitMessage": "Get rid of infuriating useless \u003c?\u003e on Type\n",
      "commitDate": "2016/12/15 下午5:58",
      "commitName": "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/12/10 下午9:09",
      "commitNameOld": "0b43f836abee5fcdb15adbcff4619f76780b74ac",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrownExceptions() !\u003d null) {\n        for (final ReferenceType name : n.getThrownExceptions()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody().isPresent()) {\n        n.getBody().get().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 465,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrownExceptions() !\u003d null) {\n-        for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n+        for (final ReferenceType name : n.getThrownExceptions()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody().isPresent()) {\n         n.getBody().get().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d7828ee5f27be2f10dda026372898126aeae24b7": {
      "type": "Ybodychange",
      "commitMessage": "Well on my way to remove bracket info everywhere\n",
      "commitDate": "2016/12/7 上午6:19",
      "commitName": "d7828ee5f27be2f10dda026372898126aeae24b7",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/12/1 上午5:53",
      "commitNameOld": "694464c8e552a3960707dbd58965866989e02a2b",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    n.getName().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrownExceptions() !\u003d null) {\n        for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody().isPresent()) {\n        n.getBody().get().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 471,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n-    n.getElementType().accept(this, arg);\n+    n.getType().accept(this, arg);\n     n.getName().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrownExceptions() !\u003d null) {\n         for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody().isPresent()) {\n         n.getBody().get().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e394062ae2f12c47b357c59884113862c82a21fb": {
      "type": "Ybodychange",
      "commitMessage": "Feedback from github\n",
      "commitDate": "2016/11/29 上午6:29",
      "commitName": "e394062ae2f12c47b357c59884113862c82a21fb",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/11/29 上午4:09",
      "commitNameOld": "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getName().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrownExceptions() !\u003d null) {\n        for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody().isPresent()) {\n        n.getBody().get().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getElementType().accept(this, arg);\n     n.getName().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n-    if (n.getThrownTypes() !\u003d null) {\n-        for (final ReferenceType\u003c?\u003e name : n.getThrownTypes()) {\n+    if (n.getThrownExceptions() !\u003d null) {\n+        for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody().isPresent()) {\n         n.getBody().get().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57": {
      "type": "Ybodychange",
      "commitMessage": "Make a first attempt at better naming\n",
      "commitDate": "2016/11/29 上午4:09",
      "commitName": "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/11/11 上午4:59",
      "commitNameOld": "008b82d149685d6702a060fbecafc8fc2e10b459",
      "commitAuthorOld": "Cruz Maximilien",
      "daysBetweenCommits": 17.97,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getName().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrownTypes() !\u003d null) {\n        for (final ReferenceType\u003c?\u003e name : n.getThrownTypes()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody().isPresent()) {\n        n.getBody().get().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getElementType().accept(this, arg);\n     n.getName().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n-    if (n.getThrows() !\u003d null) {\n-        for (final ReferenceType\u003c?\u003e name : n.getThrows()) {\n+    if (n.getThrownTypes() !\u003d null) {\n+        for (final ReferenceType\u003c?\u003e name : n.getThrownTypes()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody().isPresent()) {\n         n.getBody().get().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "008b82d149685d6702a060fbecafc8fc2e10b459": {
      "type": "Ybodychange",
      "commitMessage": "#516 some optionals (#536)\n\n* #516 some optionals",
      "commitDate": "2016/11/11 上午4:59",
      "commitName": "008b82d149685d6702a060fbecafc8fc2e10b459",
      "commitAuthor": "Cruz Maximilien",
      "commitDateOld": "2016/11/10 下午5:33",
      "commitNameOld": "02b3c5e03c44a9373c3a9d323c3425bdffade688",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getName().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType\u003c?\u003e name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody().isPresent()) {\n        n.getBody().get().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getElementType().accept(this, arg);\n     n.getName().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n-        for (final ReferenceType name : n.getThrows()) {\n+        for (final ReferenceType\u003c?\u003e name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n-    if (n.getBody() !\u003d null) {\n-        n.getBody().accept(this, arg);\n+    if (n.getBody().isPresent()) {\n+        n.getBody().get().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "02b3c5e03c44a9373c3a9d323c3425bdffade688": {
      "type": "Ybodychange",
      "commitMessage": "Fix naming (#549)\n\nFixes #358 and #403.",
      "commitDate": "2016/11/10 下午5:33",
      "commitName": "02b3c5e03c44a9373c3a9d323c3425bdffade688",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/10/27 上午12:57",
      "commitNameOld": "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 14.69,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getName().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 446,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getElementType().accept(this, arg);\n-    n.getNameExpr().accept(this, arg);\n+    n.getName().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9f1113b029cf7fcb6f468a85a7eae0e894415a4d": {
      "type": "Ybodychange",
      "commitMessage": "Roll back Optional usage, awaiting #516\n",
      "commitDate": "2016/10/27 上午12:57",
      "commitName": "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
      "commitAuthor": "matozoid",
      "commitDateOld": "2016/10/17 上午3:56",
      "commitNameOld": "515a9392928c14a60dc9dfa42a98198a4d877534",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 9.88,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getNameExpr().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 482,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getElementType().accept(this, arg);\n     n.getNameExpr().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n-    n.getBody().ifPresent(b -\u003e b.accept(this, arg));\n+    if (n.getBody() !\u003d null) {\n+        n.getBody().accept(this, arg);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "515a9392928c14a60dc9dfa42a98198a4d877534": {
      "type": "Ybodychange",
      "commitMessage": "Issue 421 parenting of collections (#501)\n\n* Migrate from List to NodeList\r\n* Disallow usage of null in the AST\r\n* Use Optional where fields are optional (previously nullable)\r\n",
      "commitDate": "2016/10/17 上午3:56",
      "commitName": "515a9392928c14a60dc9dfa42a98198a4d877534",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/10/9 上午1:45",
      "commitNameOld": "731c46d3bd61cc1e3e4733570dd80ab00cd63c87",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getNameExpr().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    n.getBody().ifPresent(b -\u003e b.accept(this, arg));\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 400,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,23 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getElementType().accept(this, arg);\n     n.getNameExpr().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n-    if (n.getBody() !\u003d null) {\n-        n.getBody().accept(this, arg);\n-    }\n+    n.getBody().ifPresent(b -\u003e b.accept(this, arg));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "95245a501059ef998be5052adb5930d744533731": {
      "type": "Ybodychange",
      "commitMessage": "Issue 237 arraytype (#459)\n\n* Change from \"type.arrayinfo\" to \"ArrayType(info, ArrayType(info, type))\r\n* Make ReferenceType just a base class for the actual reference types: ArrayType and ClassOrInterfaceType\r\n* Make TypeParameter a ReferenceType as suggested by ptitjes\r\n* Add ArrayBracketPair class\r\n* Add getElementType and remove getType where required\r\n* Use EOL constant for end of line\r\n",
      "commitDate": "2016/9/30 下午7:57",
      "commitName": "95245a501059ef998be5052adb5930d744533731",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/9/5 上午3:35",
      "commitNameOld": "a9080cf8b1b3d6b3bdf1f3a6e68b044ffc035153",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 25.68,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getElementType().accept(this, arg);\n    n.getNameExpr().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 486,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n-    n.getType().accept(this, arg);\n+    n.getElementType().accept(this, arg);\n     n.getNameExpr().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144": {
      "type": "Ybodychange",
      "commitMessage": "Visitor improvements (#444)\n\n* Visit comments everywhere\r\n* Implement lambda portion of the visitors",
      "commitDate": "2016/9/5 上午2:44",
      "commitName": "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/9/5 上午2:17",
      "commitNameOld": "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    n.getNameExpr().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 526,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,25 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n-    if (n.getJavaDoc() !\u003d null) {\n-        n.getJavaDoc().accept(this, arg);\n-    }\n     visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     n.getNameExpr().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb5ff94cff01665ddf58e3ca9a1369492340fe4b": {
      "type": "Ybodychange",
      "commitMessage": "Issue 430 clean up annotation handling (#440)\n\n* Add missing scenario line\r\n* Give PrimitiveType a \"complete constructor\" with all fields\r\n* Finish fixing annotations in CloneVisitor\r\n* Move wiki samples out of the main junit dir\r\n* Fix DumpVisitor\r\n* Fix annotations for EqualsVisitor\r\n* Fix annotations for GenericVisitorAdapter\r\n* Fix annotations for ModifierVisitorAdapter\r\n* Let PackageDeclaration use the NodeWithAnnotations interface too\r\n* Visit annotations everywhere\r\n* Visit array index annotations everywhere",
      "commitDate": "2016/9/5 上午2:17",
      "commitName": "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016/8/20 上午3:39",
      "commitNameOld": "9985c47e3b2a6ce9b434e787a2a035e2a7aadb4a",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 15.94,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    visitAnnotations(n, arg);\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    n.getNameExpr().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 559,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,28 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n-    if (n.getAnnotations() !\u003d null) {\n-        for (final AnnotationExpr a : n.getAnnotations()) {\n-            a.accept(this, arg);\n-        }\n-    }\n+    visitAnnotations(n, arg);\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     n.getNameExpr().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ef5f06ebff5e0beeb05f611a5f107452afb51457": {
      "type": "Ybodychange",
      "commitMessage": "Visit child NameExprs\n",
      "commitDate": "2016/4/13 下午3:17",
      "commitName": "ef5f06ebff5e0beeb05f611a5f107452afb51457",
      "commitAuthor": "James Clause",
      "commitDateOld": "2016/4/8 上午12:53",
      "commitNameOld": "be7603e190dfbbb7e4985b5d0ff560fc979dbdc6",
      "commitAuthorOld": "JaviRpo",
      "daysBetweenCommits": 5.6,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    n.getNameExpr().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 536,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,32 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n     if (n.getAnnotations() !\u003d null) {\n         for (final AnnotationExpr a : n.getAnnotations()) {\n             a.accept(this, arg);\n         }\n     }\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n+    n.getNameExpr().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55af70e70d0124b8319f3e1d1809fafbebc68e7d": {
      "type": "Ybodychange",
      "commitMessage": "adapt all the codebase to the change of type of MethodDeclaration.throws\n",
      "commitDate": "2015/11/30 下午5:04",
      "commitName": "55af70e70d0124b8319f3e1d1809fafbebc68e7d",
      "commitAuthor": "Federico Tomassetti",
      "commitDateOld": "2015/11/30 下午4:09",
      "commitNameOld": "97a48fb7ea63b76ec41420a91c5b697ffeb82504",
      "commitAuthorOld": "Federico Tomassetti",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final ReferenceType name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 540,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,31 @@\n @Override\n public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n     if (n.getAnnotations() !\u003d null) {\n         for (final AnnotationExpr a : n.getAnnotations()) {\n             a.accept(this, arg);\n         }\n     }\n     if (n.getTypeParameters() !\u003d null) {\n         for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n-        for (final NameExpr name : n.getThrows()) {\n+        for (final ReferenceType name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df6c84c0a13f505da7fd0f64626fb5d18fd49619": {
      "type": "Yfilerename",
      "commitMessage": "#74 Change package name and maven co-ordinates\n",
      "commitDate": "2014/12/10 下午10:37",
      "commitName": "df6c84c0a13f505da7fd0f64626fb5d18fd49619",
      "commitAuthor": "Nicholas Smith",
      "commitDateOld": "2014/11/28 下午10:49",
      "commitNameOld": "7cb02747c0e6d0a701b5cdb7ecd22c05e00f6da4",
      "commitAuthorOld": "Nicholas Smith",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 543,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "c992b2206b0882195e8cc68ae9d55c43ec015111": {
      "type": "Yfilerename",
      "commitMessage": "#71 use ratified module names\n",
      "commitDate": "2014/11/26 下午10:29",
      "commitName": "c992b2206b0882195e8cc68ae9d55c43ec015111",
      "commitAuthor": "Nicholas Smith",
      "commitDateOld": "2014/11/26 下午7:35",
      "commitNameOld": "614a666fc0f7649c7053d22d9da1ae7864d0bf80",
      "commitAuthorOld": "Nicholas Smith",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 543,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "0bf897c19251e2d4ada7611e47176fbbef1750ad": {
      "type": "Yfilerename",
      "commitMessage": "Revised prototype #71\n",
      "commitDate": "2014/10/1 下午5:31",
      "commitName": "0bf897c19251e2d4ada7611e47176fbbef1750ad",
      "commitAuthor": "Nicholas Smith",
      "commitDateOld": "2014/9/24 下午8:23",
      "commitNameOld": "13430511004f1deead30b60a4fbd3c538081d5e9",
      "commitAuthorOld": "Nicholas Smith",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 543,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "40dc8d37c07dc624780d215bd1ff3e00878fe9c5": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
      "commitDate": "2011/11/1 上午4:55",
      "commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
      "commitAuthor": "matozoid",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
          "commitDate": "2011/11/1 上午4:55",
          "commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
          "commitAuthor": "matozoid",
          "commitDateOld": "2011/10/31 上午2:55",
          "commitNameOld": "5202f0f5f664b45b792d4910882cec2580e9045c",
          "commitAuthorOld": "matozoid",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
          "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
          "functionStartLine": 575,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n @Override\n-public void visit(MethodDeclaration n, A arg) {\n+public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n     if (n.getAnnotations() !\u003d null) {\n-        for (AnnotationExpr a : n.getAnnotations()) {\n+        for (final AnnotationExpr a : n.getAnnotations()) {\n             a.accept(this, arg);\n         }\n     }\n     if (n.getTypeParameters() !\u003d null) {\n-        for (TypeParameter t : n.getTypeParameters()) {\n+        for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n-        for (Parameter p : n.getParameters()) {\n+        for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n-        for (NameExpr name : n.getThrows()) {\n+        for (final NameExpr name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
          "commitDate": "2011/11/1 上午4:55",
          "commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
          "commitAuthor": "matozoid",
          "commitDateOld": "2011/10/31 上午2:55",
          "commitNameOld": "5202f0f5f664b45b792d4910882cec2580e9045c",
          "commitAuthorOld": "matozoid",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(final MethodDeclaration n, final A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (final AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (final TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (final Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (final NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
          "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
          "functionStartLine": 575,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n @Override\n-public void visit(MethodDeclaration n, A arg) {\n+public void visit(final MethodDeclaration n, final A arg) {\n     visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n     if (n.getAnnotations() !\u003d null) {\n-        for (AnnotationExpr a : n.getAnnotations()) {\n+        for (final AnnotationExpr a : n.getAnnotations()) {\n             a.accept(this, arg);\n         }\n     }\n     if (n.getTypeParameters() !\u003d null) {\n-        for (TypeParameter t : n.getTypeParameters()) {\n+        for (final TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n-        for (Parameter p : n.getParameters()) {\n+        for (final Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n-        for (NameExpr name : n.getThrows()) {\n+        for (final NameExpr name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n-MethodDeclaration, arg-A]",
            "newValue": "[n-MethodDeclaration(modifiers-final), arg-A(modifiers-final)]"
          }
        }
      ]
    },
    "5202f0f5f664b45b792d4910882cec2580e9045c": {
      "type": "Yannotationchange",
      "commitMessage": "* Remove some warnings\n",
      "commitDate": "2011/10/31 上午2:55",
      "commitName": "5202f0f5f664b45b792d4910882cec2580e9045c",
      "commitAuthor": "matozoid",
      "commitDateOld": "2011/10/31 上午1:32",
      "commitNameOld": "d3db3f06220a1d0091a5cda602f13dcdc8db3040",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(MethodDeclaration n, A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,31 @@\n+@Override\n public void visit(MethodDeclaration n, A arg) {\n     visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n     if (n.getAnnotations() !\u003d null) {\n         for (AnnotationExpr a : n.getAnnotations()) {\n             a.accept(this, arg);\n         }\n     }\n     if (n.getTypeParameters() !\u003d null) {\n         for (TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (NameExpr name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "d3db3f06220a1d0091a5cda602f13dcdc8db3040": {
      "type": "Ybodychange",
      "commitMessage": "* http://code.google.com/p/javaparser/issues/detail?id\u003d9#c23: Here are the corresponding changes for using Shelby\u0027s solution with the VoidVisitorAdapter. Alternatively, users can extend \u0026 override every public visit() method of the VoidVisitorAdapter class to also accept() the node\u0027s comment.\n",
      "commitDate": "2011/10/31 上午1:32",
      "commitName": "d3db3f06220a1d0091a5cda602f13dcdc8db3040",
      "commitAuthor": "matozoid",
      "commitDateOld": "2011/10/30 下午9:40",
      "commitNameOld": "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(MethodDeclaration n, A arg) {\n    visitComment(n.getComment(), arg);\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,30 @@\n public void visit(MethodDeclaration n, A arg) {\n+    visitComment(n.getComment(), arg);\n     if (n.getJavaDoc() !\u003d null) {\n         n.getJavaDoc().accept(this, arg);\n     }\n     if (n.getAnnotations() !\u003d null) {\n         for (AnnotationExpr a : n.getAnnotations()) {\n             a.accept(this, arg);\n         }\n     }\n     if (n.getTypeParameters() !\u003d null) {\n         for (TypeParameter t : n.getTypeParameters()) {\n             t.accept(this, arg);\n         }\n     }\n     n.getType().accept(this, arg);\n     if (n.getParameters() !\u003d null) {\n         for (Parameter p : n.getParameters()) {\n             p.accept(this, arg);\n         }\n     }\n     if (n.getThrows() !\u003d null) {\n         for (NameExpr name : n.getThrows()) {\n             name.accept(this, arg);\n         }\n     }\n     if (n.getBody() !\u003d null) {\n         n.getBody().accept(this, arg);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43e6f7bfbcd77b61232cc9f3e166795e47bad04b": {
      "type": "Yfilerename",
      "commitMessage": "* Add latest code from \"mavenized\" branch.\n",
      "commitDate": "2011/10/30 下午9:40",
      "commitName": "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
      "commitAuthor": "matozoid",
      "commitDateOld": "2011/10/30 下午9:37",
      "commitNameOld": "5e5a850b946252906db421cafec7b1e3e03ba3fa",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(MethodDeclaration n, A arg) {\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 524,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "2d4decafdf373c4d1cabd9c6f8a97707c72069ff": {
      "type": "Yintroduced",
      "commitMessage": "* Version 1.0.6\n",
      "commitDate": "2011/10/30 下午9:35",
      "commitName": "2d4decafdf373c4d1cabd9c6f8a97707c72069ff",
      "commitAuthor": "matozoid",
      "diff": "@@ -0,0 +1,29 @@\n+public void visit(MethodDeclaration n, A arg) {\n+    if (n.getJavaDoc() !\u003d null) {\n+        n.getJavaDoc().accept(this, arg);\n+    }\n+    if (n.getAnnotations() !\u003d null) {\n+        for (AnnotationExpr a : n.getAnnotations()) {\n+            a.accept(this, arg);\n+        }\n+    }\n+    if (n.getTypeParameters() !\u003d null) {\n+        for (TypeParameter t : n.getTypeParameters()) {\n+            t.accept(this, arg);\n+        }\n+    }\n+    n.getType().accept(this, arg);\n+    if (n.getParameters() !\u003d null) {\n+        for (Parameter p : n.getParameters()) {\n+            p.accept(this, arg);\n+        }\n+    }\n+    if (n.getThrows() !\u003d null) {\n+        for (NameExpr name : n.getThrows()) {\n+            name.accept(this, arg);\n+        }\n+    }\n+    if (n.getBody() !\u003d null) {\n+        n.getBody().accept(this, arg);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(MethodDeclaration n, A arg) {\n    if (n.getJavaDoc() !\u003d null) {\n        n.getJavaDoc().accept(this, arg);\n    }\n    if (n.getAnnotations() !\u003d null) {\n        for (AnnotationExpr a : n.getAnnotations()) {\n            a.accept(this, arg);\n        }\n    }\n    if (n.getTypeParameters() !\u003d null) {\n        for (TypeParameter t : n.getTypeParameters()) {\n            t.accept(this, arg);\n        }\n    }\n    n.getType().accept(this, arg);\n    if (n.getParameters() !\u003d null) {\n        for (Parameter p : n.getParameters()) {\n            p.accept(this, arg);\n        }\n    }\n    if (n.getThrows() !\u003d null) {\n        for (NameExpr name : n.getThrows()) {\n            name.accept(this, arg);\n        }\n    }\n    if (n.getBody() !\u003d null) {\n        n.getBody().accept(this, arg);\n    }\n}",
      "path": "src/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 524,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}