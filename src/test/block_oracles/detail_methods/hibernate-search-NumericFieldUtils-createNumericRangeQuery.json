{
  "origin": "codeshovel",
  "repositoryName": "hibernate-search",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/hibernate-search/.git",
  "startCommitName": "5b778035965d7588ad1d1ae522c4bafebd3a0e16",
  "sourceFileName": "NumericFieldUtils.java",
  "functionName": "createNumericRangeQuery",
  "functionId": "createNumericRangeQuery___fieldName-String__from-Object__to-Object__includeLower-boolean__includeUpper-boolean",
  "sourceFilePath": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 36,
  "functionEndLine": 96,
  "numCommitsSeen": 37,
  "timeTaken": 1548,
  "changeHistory": [
    "0e8203f804d5a84f1d85267893bc827f75529584",
    "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139",
    "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
    "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
    "1f2600dedf2f75379ceb45e9f99103814f902c28",
    "3d93af0a91221be6d3e3b145061eec7c7a833bde",
    "b52a248717a2f3aaa873fcb577c558172574baa7",
    "bb3f94df96e6e487ba231e4e201064cbb850aa02",
    "428fae5def27fc3724bfbd7558db241e2aa8efdb",
    "a51e16bca141c7be80f8e6ead072d1313e21b34b",
    "ab8faa8701ffd68414db07a18cc9dcfd30b46874",
    "354f2cadec6dee7d4dde2250e13f468e2d93cd27",
    "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1",
    "36fc8ecc219c7c843ca2359ee54acef23d10ec3b",
    "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8",
    "dd12cc91851ebe085215a11a33316918259a2b14"
  ],
  "changeHistoryShort": {
    "0e8203f804d5a84f1d85267893bc827f75529584": "Ybodychange",
    "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139": "Ybodychange",
    "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af": "Ybodychange",
    "23b523bdc8847b9f40a69e50b8acb09e4e464eec": "Ybodychange",
    "1f2600dedf2f75379ceb45e9f99103814f902c28": "Ybodychange",
    "3d93af0a91221be6d3e3b145061eec7c7a833bde": "Ybodychange",
    "b52a248717a2f3aaa873fcb577c558172574baa7": "Ybodychange",
    "bb3f94df96e6e487ba231e4e201064cbb850aa02": "Ybodychange",
    "428fae5def27fc3724bfbd7558db241e2aa8efdb": "Ybodychange",
    "a51e16bca141c7be80f8e6ead072d1313e21b34b": "Ybodychange",
    "ab8faa8701ffd68414db07a18cc9dcfd30b46874": "Ybodychange",
    "354f2cadec6dee7d4dde2250e13f468e2d93cd27": "Yfilerename",
    "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1": "Yfilerename",
    "36fc8ecc219c7c843ca2359ee54acef23d10ec3b": "Ybodychange",
    "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8": "Yfilerename",
    "dd12cc91851ebe085215a11a33316918259a2b14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e8203f804d5a84f1d85267893bc827f75529584": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-2722 Remove conditions around Java 8 specific code\n",
      "commitDate": "2017/5/13 上午12:04",
      "commitName": "0e8203f804d5a84f1d85267893bc827f75529584",
      "commitAuthor": "Yoann Rodière",
      "commitDateOld": "2016/12/20 上午6:39",
      "commitNameOld": "b5f54ad3660586711ec15d150cabbc0472f5fb9b",
      "commitAuthorOld": "Yoann Rodière",
      "daysBetweenCommits": 143.73,
      "commitsBetweenForRepo": 502,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (Double.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (Byte.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (Short.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (Long.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (Integer.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (Float.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (Date.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (Calendar.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n        Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (java.time.Year.class.isAssignableFrom(numericClass)) {\n        Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n        Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n        Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 35,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,54 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (Double.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (Byte.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n     }\n     if (Short.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n     if (Long.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (Integer.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (Float.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (Date.class.isAssignableFrom(numericClass)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (Calendar.class.isAssignableFrom(numericClass)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n-    if (JavaTimeBridgeProvider.isActive()) {\n-        if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n-            Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n-            Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n-            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n-        }\n-        if (java.time.Year.class.isAssignableFrom(numericClass)) {\n-            Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n-            Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n-            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n-        }\n-        if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n-            Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n-            Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n-            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n-        }\n+    if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n+        Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n+        Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n+    if (java.time.Year.class.isAssignableFrom(numericClass)) {\n+        Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n+        Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n+        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n+    if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n+        Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n+        Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1870 Fix isAssignableFrom invokation in NumericFieldUtils\n",
      "commitDate": "2015/9/12 上午12:05",
      "commitName": "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015/9/11 下午10:59",
      "commitNameOld": "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (Double.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (Byte.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (Short.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (Long.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (Integer.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (Float.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (Date.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (Calendar.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (JavaTimeBridgeProvider.isActive()) {\n        if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n            Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n            Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (java.time.Year.class.isAssignableFrom(numericClass)) {\n            Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n            Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n            Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n            Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,56 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n-    if (numericClass.isAssignableFrom(Double.class)) {\n+    if (Double.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Byte.class)) {\n+    if (Byte.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Short.class)) {\n+    if (Short.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Long.class)) {\n+    if (Long.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Integer.class)) {\n+    if (Integer.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Float.class)) {\n+    if (Float.class.isAssignableFrom(numericClass)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Date.class)) {\n+    if (Date.class.isAssignableFrom(numericClass)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (Calendar.class.isAssignableFrom(numericClass)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (JavaTimeBridgeProvider.isActive()) {\n-        if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n+        if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n             Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n             Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n             return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n         }\n-        if (numericClass.isAssignableFrom(java.time.Year.class)) {\n+        if (java.time.Year.class.isAssignableFrom(numericClass)) {\n             Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n             Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n             return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n         }\n-        if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n+        if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n             Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n             Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n             return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n         }\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1870 Make it possible to use Date and Calendar with the DSL\n",
      "commitDate": "2015/9/11 下午10:59",
      "commitName": "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015/9/11 上午12:34",
      "commitNameOld": "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (Calendar.class.isAssignableFrom(numericClass)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (JavaTimeBridgeProvider.isActive()) {\n        if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n            Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n            Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Year.class)) {\n            Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n            Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n            Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n            Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,56 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Byte.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Short.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Calendar.class)) {\n+    if (Calendar.class.isAssignableFrom(numericClass)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (JavaTimeBridgeProvider.isActive()) {\n         if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n             Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n             Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n             return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n         }\n         if (numericClass.isAssignableFrom(java.time.Year.class)) {\n             Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n             Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n             return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n         }\n         if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n             Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n             Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n             return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n         }\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "23b523bdc8847b9f40a69e50b8acb09e4e464eec": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1997 Avoid checking for Java8 time classes multiple times\n",
      "commitDate": "2015/9/11 上午12:34",
      "commitName": "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015/9/8 下午10:28",
      "commitNameOld": "1f2600dedf2f75379ceb45e9f99103814f902c28",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (JavaTimeBridgeProvider.isActive()) {\n        if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n            Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n            Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Year.class)) {\n            Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n            Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n            Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n            Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,56 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Byte.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Short.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Calendar.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n-    if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n-        Long fromValue \u003d from !\u003d null ? ((Duration) from).toNanos() : null;\n-        Long toValue \u003d to !\u003d null ? ((Duration) to).toNanos() : null;\n-        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n-    }\n-    if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n-        Integer fromValue \u003d from !\u003d null ? ((Year) from).getValue() : null;\n-        Integer toValue \u003d to !\u003d null ? ((Year) to).getValue() : null;\n-        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n-    }\n-    if (isAssignableFrom(numericClass, JAVA_TIME_INSTANT)) {\n-        Long fromValue \u003d from !\u003d null ? ((Instant) from).toEpochMilli() : null;\n-        Long toValue \u003d to !\u003d null ? ((Instant) to).toEpochMilli() : null;\n-        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    if (JavaTimeBridgeProvider.isActive()) {\n+        if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n+            Long fromValue \u003d from !\u003d null ? ((java.time.Duration) from).toNanos() : null;\n+            Long toValue \u003d to !\u003d null ? ((java.time.Duration) to).toNanos() : null;\n+            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+        }\n+        if (numericClass.isAssignableFrom(java.time.Year.class)) {\n+            Integer fromValue \u003d from !\u003d null ? ((java.time.Year) from).getValue() : null;\n+            Integer toValue \u003d to !\u003d null ? ((java.time.Year) to).getValue() : null;\n+            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+        }\n+        if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n+            Long fromValue \u003d from !\u003d null ? ((java.time.Instant) from).toEpochMilli() : null;\n+            Long toValue \u003d to !\u003d null ? ((java.time.Instant) to).toEpochMilli() : null;\n+            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+        }\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1f2600dedf2f75379ceb45e9f99103814f902c28": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1942 Make Instant a numeric field value\n",
      "commitDate": "2015/9/8 下午10:28",
      "commitName": "1f2600dedf2f75379ceb45e9f99103814f902c28",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015/9/8 下午10:28",
      "commitNameOld": "3d93af0a91221be6d3e3b145061eec7c7a833bde",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n        Long fromValue \u003d from !\u003d null ? ((Duration) from).toNanos() : null;\n        Long toValue \u003d to !\u003d null ? ((Duration) to).toNanos() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n        Integer fromValue \u003d from !\u003d null ? ((Year) from).getValue() : null;\n        Integer toValue \u003d to !\u003d null ? ((Year) to).getValue() : null;\n        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_INSTANT)) {\n        Long fromValue \u003d from !\u003d null ? ((Instant) from).toEpochMilli() : null;\n        Long toValue \u003d to !\u003d null ? ((Instant) to).toEpochMilli() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 38,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,54 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Byte.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Short.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Calendar.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n         Long fromValue \u003d from !\u003d null ? ((Duration) from).toNanos() : null;\n         Long toValue \u003d to !\u003d null ? ((Duration) to).toNanos() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n         Integer fromValue \u003d from !\u003d null ? ((Year) from).getValue() : null;\n         Integer toValue \u003d to !\u003d null ? ((Year) to).getValue() : null;\n         return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n+    if (isAssignableFrom(numericClass, JAVA_TIME_INSTANT)) {\n+        Long fromValue \u003d from !\u003d null ? ((Instant) from).toEpochMilli() : null;\n+        Long toValue \u003d to !\u003d null ? ((Instant) to).toEpochMilli() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d93af0a91221be6d3e3b145061eec7c7a833bde": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1947 Make Duration and Year numeric fields\n",
      "commitDate": "2015/9/8 下午10:28",
      "commitName": "3d93af0a91221be6d3e3b145061eec7c7a833bde",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015/1/23 上午2:24",
      "commitNameOld": "b52a248717a2f3aaa873fcb577c558172574baa7",
      "commitAuthorOld": "Gunnar Morling",
      "daysBetweenCommits": 228.84,
      "commitsBetweenForRepo": 470,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n        Long fromValue \u003d from !\u003d null ? ((Duration) from).toNanos() : null;\n        Long toValue \u003d to !\u003d null ? ((Duration) to).toNanos() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n        Integer fromValue \u003d from !\u003d null ? ((Year) from).getValue() : null;\n        Integer toValue \u003d to !\u003d null ? ((Year) to).getValue() : null;\n        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 36,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,49 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Byte.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Short.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Calendar.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n+    if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n+        Long fromValue \u003d from !\u003d null ? ((Duration) from).toNanos() : null;\n+        Long toValue \u003d to !\u003d null ? ((Duration) to).toNanos() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n+    if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n+        Integer fromValue \u003d from !\u003d null ? ((Year) from).getValue() : null;\n+        Integer toValue \u003d to !\u003d null ? ((Year) to).getValue() : null;\n+        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b52a248717a2f3aaa873fcb577c558172574baa7": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-997 Adding byte numeric bridge\n",
      "commitDate": "2015/1/23 上午2:24",
      "commitName": "b52a248717a2f3aaa873fcb577c558172574baa7",
      "commitAuthor": "Gunnar Morling",
      "commitDateOld": "2015/1/23 上午2:24",
      "commitNameOld": "bb3f94df96e6e487ba231e4e201064cbb850aa02",
      "commitAuthorOld": "Gunnar Morling",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 31,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,39 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n+    if (numericClass.isAssignableFrom(Byte.class)) {\n+        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n+    }\n     if (numericClass.isAssignableFrom(Short.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Calendar.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb3f94df96e6e487ba231e4e201064cbb850aa02": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-997 Adding short numeric bridge\n",
      "commitDate": "2015/1/23 上午2:24",
      "commitName": "bb3f94df96e6e487ba231e4e201064cbb850aa02",
      "commitAuthor": "Gunnar Morling",
      "commitDateOld": "2014/12/16 上午1:19",
      "commitNameOld": "428fae5def27fc3724bfbd7558db241e2aa8efdb",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 38.05,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 31,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,36 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n+    if (numericClass.isAssignableFrom(Short.class)) {\n+        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n+    }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Calendar.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "428fae5def27fc3724bfbd7558db241e2aa8efdb": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1758 Fallback strategy for NumericRange queries applied to unknown fields should pick the NumericRange for certain types\n",
      "commitDate": "2014/12/16 上午1:19",
      "commitName": "428fae5def27fc3724bfbd7558db241e2aa8efdb",
      "commitAuthor": "Sanne Grinovero",
      "commitDateOld": "2014/12/8 上午5:57",
      "commitNameOld": "a51e16bca141c7be80f8e6ead072d1313e21b34b",
      "commitAuthorOld": "Hardy Ferentschik",
      "daysBetweenCommits": 7.81,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,33 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Date.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n-    if (numericClass.isAssignableFrom(Date.class)) {\n-        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n-        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n-        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n-    }\n     if (numericClass.isAssignableFrom(Calendar.class)) {\n         Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n         Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n         return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n     }\n     throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a51e16bca141c7be80f8e6ead072d1313e21b34b": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-968 Indexing Dates and Calendar instances numerically\n\nIntroducing a new option to @DateBridge and @CalendarBridge to determine encoding type\n",
      "commitDate": "2014/12/8 上午5:57",
      "commitName": "a51e16bca141c7be80f8e6ead072d1313e21b34b",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2014/12/5 上午4:37",
      "commitNameOld": "ab8faa8701ffd68414db07a18cc9dcfd30b46874",
      "commitAuthorOld": "Hardy Ferentschik",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,38 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n     Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n-        throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n+        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n-    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int, long, short or double) \");\n+    if (numericClass.isAssignableFrom(Date.class)) {\n+        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n+        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n+    if (numericClass.isAssignableFrom(Date.class)) {\n+        Long fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n+        Long toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n+    if (numericClass.isAssignableFrom(Calendar.class)) {\n+        Long fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n+        Long toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n+        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n+    }\n+    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab8faa8701ffd68414db07a18cc9dcfd30b46874": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-763 Cleanup. Fixed formatting, javadocs and unnecessay value boxing\n",
      "commitDate": "2014/12/5 上午4:37",
      "commitName": "ab8faa8701ffd68414db07a18cc9dcfd30b46874",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2014/5/15 下午5:54",
      "commitNameOld": "5a9396f82246f74a76d3fea15d712711662f11ec",
      "commitAuthorOld": "Hardy Ferentschik",
      "daysBetweenCommits": 203.45,
      "commitsBetweenForRepo": 213,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class\u003c?\u003e numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int, long, short or double) \");\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 25,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n-    Class numericClass;\n+    Class\u003c?\u003e numericClass;\n     if (from !\u003d null) {\n         numericClass \u003d from.getClass();\n     } else if (to !\u003d null) {\n         numericClass \u003d to.getClass();\n     } else {\n         throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n     }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n-    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n+    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int, long, short or double) \");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "354f2cadec6dee7d4dde2250e13f468e2d93cd27": {
      "type": "Yfilerename",
      "commitMessage": "HSEARCH-1310 Dropping the hibernate-search directory prefix, renaming hibernate-search into legacy\n",
      "commitDate": "2013/4/24 上午1:02",
      "commitName": "354f2cadec6dee7d4dde2250e13f468e2d93cd27",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2013/4/23 下午9:27",
      "commitNameOld": "29a168b99657e8cc302bbb487a67a4ea3856c3a3",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 35,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "hibernate-search-engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
        "newPath": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java"
      }
    },
    "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1": {
      "type": "Yfilerename",
      "commitMessage": "HSEARCH-677 renaming directory hibernate-search to hibernate-search-engine\n",
      "commitDate": "2011/9/28 上午6:03",
      "commitName": "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1",
      "commitAuthor": "Sanne Grinovero",
      "commitDateOld": "2011/9/28 上午1:39",
      "commitNameOld": "7505d6fbbf06c479d98555dc237eaa62eb83c4a2",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n}",
      "path": "hibernate-search-engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 15,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
        "newPath": "hibernate-search-engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java"
      }
    },
    "36fc8ecc219c7c843ca2359ee54acef23d10ec3b": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-744 Fix usage of range query while searching for values below a given boundary\n",
      "commitDate": "2011/7/11 上午12:16",
      "commitName": "36fc8ecc219c7c843ca2359ee54acef23d10ec3b",
      "commitAuthor": "Mathieu Perez",
      "commitDateOld": "2011/7/4 下午10:44",
      "commitNameOld": "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8",
      "commitAuthorOld": "Emmanuel Bernard",
      "daysBetweenCommits": 6.06,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class numericClass;\n    if (from !\u003d null) {\n        numericClass \u003d from.getClass();\n    } else if (to !\u003d null) {\n        numericClass \u003d to.getClass();\n    } else {\n        throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n}",
      "path": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 15,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,23 @@\n public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n-    Class numericClass \u003d from.getClass();\n+    Class numericClass;\n+    if (from !\u003d null) {\n+        numericClass \u003d from.getClass();\n+    } else if (to !\u003d null) {\n+        numericClass \u003d to.getClass();\n+    } else {\n+        throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" + \"null\");\n+    }\n     if (numericClass.isAssignableFrom(Double.class)) {\n         return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Long.class)) {\n         return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Integer.class)) {\n         return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n     }\n     if (numericClass.isAssignableFrom(Float.class)) {\n         return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n     }\n     throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8": {
      "type": "Yfilerename",
      "commitMessage": "HSEARCH-746 Move NumericFieldUtils to impl package\n",
      "commitDate": "2011/7/4 下午10:44",
      "commitName": "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8",
      "commitAuthor": "Emmanuel Bernard",
      "commitDateOld": "2011/7/2 上午12:51",
      "commitNameOld": "04d0ced8d950d09a91ec0f5ca534f64fc5c28a0e",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class numericClass \u003d from.getClass();\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n}",
      "path": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 15,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/NumericFieldUtils.java",
        "newPath": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java"
      }
    },
    "dd12cc91851ebe085215a11a33316918259a2b14": {
      "type": "Yintroduced",
      "commitMessage": "HSEARCH-434 Support for NumericFields via annotations, programmatic configuration, DSL\n",
      "commitDate": "2010/11/1 下午8:35",
      "commitName": "dd12cc91851ebe085215a11a33316918259a2b14",
      "commitAuthor": "Gustavo Fernandes",
      "diff": "@@ -0,0 +1,16 @@\n+public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n+    Class numericClass \u003d from.getClass();\n+    if (numericClass.isAssignableFrom(Double.class)) {\n+        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n+    }\n+    if (numericClass.isAssignableFrom(Long.class)) {\n+        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n+    }\n+    if (numericClass.isAssignableFrom(Integer.class)) {\n+        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n+    }\n+    if (numericClass.isAssignableFrom(Float.class)) {\n+        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n+    }\n+    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class numericClass \u003d from.getClass();\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    throw new SearchException(\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" + \"(int,long, short or double) \");\n}",
      "path": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/NumericFieldUtils.java",
      "functionStartLine": 18,
      "functionName": "createNumericRangeQuery",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}