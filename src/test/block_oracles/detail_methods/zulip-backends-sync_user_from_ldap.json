{
  "origin": "codeshovel",
  "repositoryName": "zulip",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/zulip/.git",
  "startCommitName": "67b6179df28522274ebdc66e6820a6e7e41511fa",
  "sourceFileName": "backends.py",
  "functionName": "sync_user_from_ldap",
  "functionId": "__sync_user_from_ldap___user_profile-UserProfile__logger-logging.Logger",
  "sourceFilePath": "zproject/backends.py",
  "functionAnnotation": "",
  "functionStartLine": 736,
  "functionEndLine": 771,
  "numCommitsSeen": 482,
  "timeTaken": 7411,
  "changeHistory": [
    "67b6179df28522274ebdc66e6820a6e7e41511fa",
    "8c065d1fcdf74d84570f364ff48953bc78a94994",
    "7e75f987df6b537746fcbcb0614a2f9c42a21024",
    "71761bc2dac27a8e6acdea692dc46c6c14c7c0a8",
    "348f370b796bcaf19563c23d9548c88a5862c307"
  ],
  "changeHistoryShort": {
    "67b6179df28522274ebdc66e6820a6e7e41511fa": "Ybodychange",
    "8c065d1fcdf74d84570f364ff48953bc78a94994": "Ybodychange",
    "7e75f987df6b537746fcbcb0614a2f9c42a21024": "Ymultichange(Yparameterchange,Ybodychange)",
    "71761bc2dac27a8e6acdea692dc46c6c14c7c0a8": "Ybodychange",
    "348f370b796bcaf19563c23d9548c88a5862c307": "Yintroduced"
  },
  "changeHistoryDetails": {
    "67b6179df28522274ebdc66e6820a6e7e41511fa": {
      "type": "Ybodychange",
      "commitMessage": "ldap: Fix error while updating a user registered in multiple realms.\n\nPreviously, the LDAP code for syncing user data was not\nmultiple-realm-aware, resulting in errors trying to sync data for an\nLDAP user present in multiple realms.\n\nTweaked by tabbott to add some extended comments.\n\nFixes #11520.\n",
      "commitDate": "2019/11/22 上午3:13",
      "commitName": "67b6179df28522274ebdc66e6820a6e7e41511fa",
      "commitAuthor": "Mateusz Mandera",
      "commitDateOld": "2019/11/22 上午2:23",
      "commitNameOld": "06c2161f7eb4c2550a3b69ec33d27d42b58a5c9c",
      "commitAuthorOld": "Mateusz Mandera",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n    backend \u003d ZulipLDAPUserPopulator()\n    try:\n        ldap_username \u003d backend.django_to_ldap_username(user_profile.email)\n    except ZulipLDAPExceptionNoMatchingLDAPUser:\n        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n            do_deactivate_user(user_profile)\n            logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n            return True\n        elif user_profile.is_active:\n            logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n        return False\n\n    # What one would expect to see like to do here is just a call to\n    # `backend.populate_user`, which in turn just creates the\n    # `_LDAPUser` object and calls `ldap_user.populate_user()` on\n    # that.  Unfortunately, that will produce incorrect results in the\n    # case that the server has multiple Zulip users in different\n    # realms associated with a single LDAP user, because\n    # `django-auth-ldap` isn\u0027t implemented with the possibility of\n    # multiple realms on different subdomains in mind.\n    #\n    # To address this, we construct a version of the _LDAPUser class\n    # extended to store the realm of the target user, and call its\n    # `.populate_user` function directly.\n    #\n    # Ideally, we\u0027d contribute changes to `django-auth-ldap` upstream\n    # making this flow possible in a more directly supported fashion.\n    updated_user \u003d ZulipLDAPUser(backend, ldap_username, realm\u003duser_profile.realm).populate_user()\n    if updated_user:\n        logger.info(\"Updated %s.\" % (user_profile.email,))\n        return True\n\n    raise PopulateUserLDAPError(\"populate_user unexpectedly returned {}\".format(updated_user))\n\n# Quick tool to test whether you\u0027re correctly authenticating to LDAP",
      "path": "zproject/backends.py",
      "functionStartLine": 736,
      "functionName": "sync_user_from_ldap",
      "functionAnnotation": "",
      "diff": "@@ -1,21 +1,36 @@\n def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n     backend \u003d ZulipLDAPUserPopulator()\n     try:\n         ldap_username \u003d backend.django_to_ldap_username(user_profile.email)\n     except ZulipLDAPExceptionNoMatchingLDAPUser:\n         if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n             do_deactivate_user(user_profile)\n             logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n             return True\n         elif user_profile.is_active:\n             logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n         return False\n \n-    updated_user \u003d backend.populate_user(ldap_username)\n+    # What one would expect to see like to do here is just a call to\n+    # `backend.populate_user`, which in turn just creates the\n+    # `_LDAPUser` object and calls `ldap_user.populate_user()` on\n+    # that.  Unfortunately, that will produce incorrect results in the\n+    # case that the server has multiple Zulip users in different\n+    # realms associated with a single LDAP user, because\n+    # `django-auth-ldap` isn\u0027t implemented with the possibility of\n+    # multiple realms on different subdomains in mind.\n+    #\n+    # To address this, we construct a version of the _LDAPUser class\n+    # extended to store the realm of the target user, and call its\n+    # `.populate_user` function directly.\n+    #\n+    # Ideally, we\u0027d contribute changes to `django-auth-ldap` upstream\n+    # making this flow possible in a more directly supported fashion.\n+    updated_user \u003d ZulipLDAPUser(backend, ldap_username, realm\u003duser_profile.realm).populate_user()\n     if updated_user:\n         logger.info(\"Updated %s.\" % (user_profile.email,))\n         return True\n \n     raise PopulateUserLDAPError(\"populate_user unexpectedly returned {}\".format(updated_user))\n \n # Quick tool to test whether you\u0027re correctly authenticating to LDAP\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8c065d1fcdf74d84570f364ff48953bc78a94994": {
      "type": "Ybodychange",
      "commitMessage": "ldap: Ensure django_to_ldap_username returns username that is in ldap.\n\nThis changes the way django_to_ldap_username works to make sure the ldap\nusername it returns actually has a corresponding ldap entry and raise an\nexception if that\u0027s not possible. It seems to be a more sound approach\nthan just having it return its best guess - which was the case so far.\nNow there is a guarantee that what it returns is the username of an\nactual ldap user.\n\nThis allows communicating to the registration flow when the email being\nregistered doesn\u0027t belong to ldap, which then will proceed to register\nit via the normal email backend flow - finally fixing the bug where you\ncouldn\u0027t register a non-ldap email even with the email backend enabled.\n\nThese changes to the behavior of django_to_ldap_username require small\nrefactorings in a couple of other functions that call it, as well as\nadapting some tests to these changes. Finally, additional tests are\nadded for the above-mentioned registration flow behavior and some\nrelated corner-cases.\n",
      "commitDate": "2019/10/26 上午3:14",
      "commitName": "8c065d1fcdf74d84570f364ff48953bc78a94994",
      "commitAuthor": "Mateusz Mandera",
      "commitDateOld": "2019/10/23 上午7:02",
      "commitNameOld": "68f4cd1e943f2accba5db5a9a64cf2ee81776e7e",
      "commitAuthorOld": "Mateusz Mandera",
      "daysBetweenCommits": 2.84,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n    backend \u003d ZulipLDAPUserPopulator()\n    try:\n        ldap_username \u003d backend.django_to_ldap_username(user_profile.email)\n    except ZulipLDAPExceptionNoMatchingLDAPUser:\n        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n            do_deactivate_user(user_profile)\n            logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n            return True\n        elif user_profile.is_active:\n            logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n        return False\n\n    updated_user \u003d backend.populate_user(ldap_username)\n    if updated_user:\n        logger.info(\"Updated %s.\" % (user_profile.email,))\n        return True\n\n    raise PopulateUserLDAPError(\"populate_user unexpectedly returned {}\".format(updated_user))\n\n# Quick tool to test whether you\u0027re correctly authenticating to LDAP",
      "path": "zproject/backends.py",
      "functionStartLine": 688,
      "functionName": "sync_user_from_ldap",
      "functionAnnotation": "",
      "diff": "@@ -1,16 +1,21 @@\n def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n     backend \u003d ZulipLDAPUserPopulator()\n-    updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n+    try:\n+        ldap_username \u003d backend.django_to_ldap_username(user_profile.email)\n+    except ZulipLDAPExceptionNoMatchingLDAPUser:\n+        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n+            do_deactivate_user(user_profile)\n+            logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n+            return True\n+        elif user_profile.is_active:\n+            logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n+        return False\n+\n+    updated_user \u003d backend.populate_user(ldap_username)\n     if updated_user:\n         logger.info(\"Updated %s.\" % (user_profile.email,))\n         return True\n \n-    if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n-        do_deactivate_user(user_profile)\n-        logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n-        return True\n-    elif user_profile.is_active:\n-        logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n-    return False\n+    raise PopulateUserLDAPError(\"populate_user unexpectedly returned {}\".format(updated_user))\n \n # Quick tool to test whether you\u0027re correctly authenticating to LDAP\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7e75f987df6b537746fcbcb0614a2f9c42a21024": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "ldap: Fix logging of warning for deactivated users.\n\nAlso cleans up the interface between the management command and the\nLDAP backends code to not guess/recompute under what circumstances\nwhat should be logged.\n\nCo-authored-by: mateuszmandera \u003cmateusz.mandera@protonmail.com\u003e\n",
      "commitDate": "2019/9/9 上午12:35",
      "commitName": "7e75f987df6b537746fcbcb0614a2f9c42a21024",
      "commitAuthor": "Tim Abbott",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "ldap: Fix logging of warning for deactivated users.\n\nAlso cleans up the interface between the management command and the\nLDAP backends code to not guess/recompute under what circumstances\nwhat should be logged.\n\nCo-authored-by: mateuszmandera \u003cmateusz.mandera@protonmail.com\u003e\n",
          "commitDate": "2019/9/9 上午12:35",
          "commitName": "7e75f987df6b537746fcbcb0614a2f9c42a21024",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2019/9/9 上午12:35",
          "commitNameOld": "d1a2784d52fae52cca03d80887fd9eb35fb92892",
          "commitAuthorOld": "Tim Abbott",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n    backend \u003d ZulipLDAPUserPopulator()\n    updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n    if updated_user:\n        logger.info(\"Updated %s.\" % (user_profile.email,))\n        return True\n\n    if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n        do_deactivate_user(user_profile)\n        logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n        return True\n    elif user_profile.is_active:\n        logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n    return False\n\n# Quick tool to test whether you\u0027re correctly authenticating to LDAP",
          "path": "zproject/backends.py",
          "functionStartLine": 591,
          "functionName": "sync_user_from_ldap",
          "functionAnnotation": "",
          "diff": "@@ -1,10 +1,16 @@\n-def sync_user_from_ldap(user_profile: UserProfile) -\u003e bool:\n+def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n     backend \u003d ZulipLDAPUserPopulator()\n     updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n-    if not updated_user:\n-        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n-            do_deactivate_user(user_profile)\n-        return False\n-    return True\n+    if updated_user:\n+        logger.info(\"Updated %s.\" % (user_profile.email,))\n+        return True\n+\n+    if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n+        do_deactivate_user(user_profile)\n+        logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n+        return True\n+    elif user_profile.is_active:\n+        logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n+    return False\n \n # Quick tool to test whether you\u0027re correctly authenticating to LDAP\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[user_profile-UserProfile]",
            "newValue": "[user_profile-UserProfile, logger-logging.Logger]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "ldap: Fix logging of warning for deactivated users.\n\nAlso cleans up the interface between the management command and the\nLDAP backends code to not guess/recompute under what circumstances\nwhat should be logged.\n\nCo-authored-by: mateuszmandera \u003cmateusz.mandera@protonmail.com\u003e\n",
          "commitDate": "2019/9/9 上午12:35",
          "commitName": "7e75f987df6b537746fcbcb0614a2f9c42a21024",
          "commitAuthor": "Tim Abbott",
          "commitDateOld": "2019/9/9 上午12:35",
          "commitNameOld": "d1a2784d52fae52cca03d80887fd9eb35fb92892",
          "commitAuthorOld": "Tim Abbott",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n    backend \u003d ZulipLDAPUserPopulator()\n    updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n    if updated_user:\n        logger.info(\"Updated %s.\" % (user_profile.email,))\n        return True\n\n    if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n        do_deactivate_user(user_profile)\n        logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n        return True\n    elif user_profile.is_active:\n        logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n    return False\n\n# Quick tool to test whether you\u0027re correctly authenticating to LDAP",
          "path": "zproject/backends.py",
          "functionStartLine": 591,
          "functionName": "sync_user_from_ldap",
          "functionAnnotation": "",
          "diff": "@@ -1,10 +1,16 @@\n-def sync_user_from_ldap(user_profile: UserProfile) -\u003e bool:\n+def sync_user_from_ldap(user_profile: UserProfile, logger: logging.Logger) -\u003e bool:\n     backend \u003d ZulipLDAPUserPopulator()\n     updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n-    if not updated_user:\n-        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n-            do_deactivate_user(user_profile)\n-        return False\n-    return True\n+    if updated_user:\n+        logger.info(\"Updated %s.\" % (user_profile.email,))\n+        return True\n+\n+    if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n+        do_deactivate_user(user_profile)\n+        logger.info(\"Deactivated non-matching user: %s\" % (user_profile.email,))\n+        return True\n+    elif user_profile.is_active:\n+        logger.warning(\"Did not find %s in LDAP.\" % (user_profile.email,))\n+    return False\n \n # Quick tool to test whether you\u0027re correctly authenticating to LDAP\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "71761bc2dac27a8e6acdea692dc46c6c14c7c0a8": {
      "type": "Ybodychange",
      "commitMessage": "ldap: Add a setting to automatically deactivate non_matching users.\n\nFixes: #11151.\n",
      "commitDate": "2019/1/14 上午11:04",
      "commitName": "71761bc2dac27a8e6acdea692dc46c6c14c7c0a8",
      "commitAuthor": "Harshit Bansal",
      "commitDateOld": "2019/1/14 上午10:51",
      "commitNameOld": "6797dea6c355e099f0088811550f069984bbfe5e",
      "commitAuthorOld": "Harshit Bansal",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "def sync_user_from_ldap(user_profile: UserProfile) -\u003e bool:\n    backend \u003d ZulipLDAPUserPopulator()\n    updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n    if not updated_user:\n        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n            do_deactivate_user(user_profile)\n        return False\n    return True\n",
      "path": "zproject/backends.py",
      "functionStartLine": 443,
      "functionName": "sync_user_from_ldap",
      "functionAnnotation": "",
      "diff": "@@ -1,4 +1,8 @@\n def sync_user_from_ldap(user_profile: UserProfile) -\u003e bool:\n     backend \u003d ZulipLDAPUserPopulator()\n     updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n-    return updated_user is not None\n+    if not updated_user:\n+        if settings.LDAP_DEACTIVATE_NON_MATCHING_USERS:\n+            do_deactivate_user(user_profile)\n+        return False\n+    return True\n",
      "extendedDetails": {}
    },
    "348f370b796bcaf19563c23d9548c88a5862c307": {
      "type": "Yintroduced",
      "commitMessage": "management: Extract `sync_user_from_ldap()`.\n",
      "commitDate": "2019/1/14 上午10:51",
      "commitName": "348f370b796bcaf19563c23d9548c88a5862c307",
      "commitAuthor": "Harshit Bansal",
      "diff": "@@ -0,0 +1,4 @@\n+def sync_user_from_ldap(user_profile: UserProfile) -\u003e bool:\n+    backend \u003d ZulipLDAPUserPopulator()\n+    updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n+    return updated_user is not None\n",
      "actualSource": "def sync_user_from_ldap(user_profile: UserProfile) -\u003e bool:\n    backend \u003d ZulipLDAPUserPopulator()\n    updated_user \u003d backend.populate_user(backend.django_to_ldap_username(user_profile.email))\n    return updated_user is not None\n",
      "path": "zproject/backends.py",
      "functionStartLine": 417,
      "functionName": "sync_user_from_ldap",
      "functionAnnotation": ""
    }
  }
}