{
  "origin": "codeshovel",
  "repositoryName": "mockito",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/mockito/.git",
  "startCommitName": "077562ea54f1fa87ff8dd233c3060ddbf0f1ce26",
  "sourceFileName": "VerificationStartedNotifier.java",
  "functionName": "notifyVerificationStarted",
  "functionId": "notifyVerificationStarted___listeners-List__VerificationStartedListener____originalMockingDetails-MockingDetails",
  "sourceFilePath": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 20,
  "functionEndLine": 29,
  "numCommitsSeen": 23,
  "timeTaken": 892,
  "changeHistory": [
    "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
    "bf9524388ba5fc8f3350399a65c0ccd31442f730",
    "83f3ba42f486ca9648e73ea7fafbe1641911c575",
    "183ab9d97658ddb3342c60fc6611bcad5aa6d69d",
    "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa"
  ],
  "changeHistoryShort": {
    "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf9524388ba5fc8f3350399a65c0ccd31442f730": "Ymultichange(Yparameterchange,Ybodychange)",
    "83f3ba42f486ca9648e73ea7fafbe1641911c575": "Ybodychange",
    "183ab9d97658ddb3342c60fc6611bcad5aa6d69d": "Ybodychange",
    "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Removed unnecessary type, we can use public type instead\n\n- Instead of MockitoMock, we can simply use our public API: MockingDetails. It allows us to reuse / dogfood our public API and have cleaner codebase.\n- Added new public API: mockingDetails.getMock(). I needed it to implement APIs for Spring Boot integration. Plus, it just make sense to add this method to make MockingDetails type more complete.\n",
      "commitDate": "2017/10/12 上午12:31",
      "commitName": "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
      "commitAuthor": "Szczepan Faber",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Removed unnecessary type, we can use public type instead\n\n- Instead of MockitoMock, we can simply use our public API: MockingDetails. It allows us to reuse / dogfood our public API and have cleaner codebase.\n- Added new public API: mockingDetails.getMock(). I needed it to implement APIs for Spring Boot integration. Plus, it just make sense to add this method to make MockingDetails type more complete.\n",
          "commitDate": "2017/10/12 上午12:31",
          "commitName": "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
          "commitAuthor": "Szczepan Faber",
          "commitDateOld": "2017/10/12 上午12:13",
          "commitNameOld": "4f0f9c973e31eee30c00700b5db9361d9e3df430",
          "commitAuthorOld": "Szczepan Faber",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockingDetails originalMockingDetails) {\n    if (listeners.isEmpty()) {\n        return originalMockingDetails.getMock();\n    }\n    VerificationStartedEvent event \u003d new Event(originalMockingDetails);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
          "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
          "functionStartLine": 16,
          "functionName": "notifyVerificationStarted",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockitoMock originalMock) {\n+public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockingDetails originalMockingDetails) {\n     if (listeners.isEmpty()) {\n-        return originalMock.getMock();\n+        return originalMockingDetails.getMock();\n     }\n-    VerificationStartedEvent event \u003d new Event(originalMock);\n+    VerificationStartedEvent event \u003d new Event(originalMockingDetails);\n     for (VerificationStartedListener listener : listeners) {\n         listener.onVerificationStarted(event);\n     }\n     return event.getMock();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[listeners-List\u003cVerificationStartedListener\u003e, originalMock-MockitoMock]",
            "newValue": "[listeners-List\u003cVerificationStartedListener\u003e, originalMockingDetails-MockingDetails]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removed unnecessary type, we can use public type instead\n\n- Instead of MockitoMock, we can simply use our public API: MockingDetails. It allows us to reuse / dogfood our public API and have cleaner codebase.\n- Added new public API: mockingDetails.getMock(). I needed it to implement APIs for Spring Boot integration. Plus, it just make sense to add this method to make MockingDetails type more complete.\n",
          "commitDate": "2017/10/12 上午12:31",
          "commitName": "4bc732153e83b9490d6d94c2e27ea2f6ac9dc10c",
          "commitAuthor": "Szczepan Faber",
          "commitDateOld": "2017/10/12 上午12:13",
          "commitNameOld": "4f0f9c973e31eee30c00700b5db9361d9e3df430",
          "commitAuthorOld": "Szczepan Faber",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockingDetails originalMockingDetails) {\n    if (listeners.isEmpty()) {\n        return originalMockingDetails.getMock();\n    }\n    VerificationStartedEvent event \u003d new Event(originalMockingDetails);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
          "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
          "functionStartLine": 16,
          "functionName": "notifyVerificationStarted",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockitoMock originalMock) {\n+public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockingDetails originalMockingDetails) {\n     if (listeners.isEmpty()) {\n-        return originalMock.getMock();\n+        return originalMockingDetails.getMock();\n     }\n-    VerificationStartedEvent event \u003d new Event(originalMock);\n+    VerificationStartedEvent event \u003d new Event(originalMockingDetails);\n     for (VerificationStartedListener listener : listeners) {\n         listener.onVerificationStarted(event);\n     }\n     return event.getMock();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bf9524388ba5fc8f3350399a65c0ccd31442f730": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Added coverage for API misuse\n\nIn the event that the user passes a mock with a wrong type, let\u0027s fail early. Also added missing coverage.\n",
      "commitDate": "2017/10/11 下午3:18",
      "commitName": "bf9524388ba5fc8f3350399a65c0ccd31442f730",
      "commitAuthor": "Szczepan Faber",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Added coverage for API misuse\n\nIn the event that the user passes a mock with a wrong type, let\u0027s fail early. Also added missing coverage.\n",
          "commitDate": "2017/10/11 下午3:18",
          "commitName": "bf9524388ba5fc8f3350399a65c0ccd31442f730",
          "commitAuthor": "Szczepan Faber",
          "commitDateOld": "2017/10/9 上午12:24",
          "commitNameOld": "f8cd5302bd16432f2f1263e716b1a57c82f086fa",
          "commitAuthorOld": "Szczepan Faber",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockitoMock originalMock) {\n    if (listeners.isEmpty()) {\n        return originalMock.getMock();\n    }\n    VerificationStartedEvent event \u003d new Event(originalMock);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
          "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
          "functionStartLine": 13,
          "functionName": "notifyVerificationStarted",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,10 @@\n-public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n+public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockitoMock originalMock) {\n     if (listeners.isEmpty()) {\n-        return mock;\n+        return originalMock.getMock();\n     }\n-    VerificationStartedEvent event \u003d new Event();\n-    event.setMock(mock);\n+    VerificationStartedEvent event \u003d new Event(originalMock);\n     for (VerificationStartedListener listener : listeners) {\n         listener.onVerificationStarted(event);\n     }\n     return event.getMock();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[listeners-List\u003cVerificationStartedListener\u003e, mock-Object]",
            "newValue": "[listeners-List\u003cVerificationStartedListener\u003e, originalMock-MockitoMock]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added coverage for API misuse\n\nIn the event that the user passes a mock with a wrong type, let\u0027s fail early. Also added missing coverage.\n",
          "commitDate": "2017/10/11 下午3:18",
          "commitName": "bf9524388ba5fc8f3350399a65c0ccd31442f730",
          "commitAuthor": "Szczepan Faber",
          "commitDateOld": "2017/10/9 上午12:24",
          "commitNameOld": "f8cd5302bd16432f2f1263e716b1a57c82f086fa",
          "commitAuthorOld": "Szczepan Faber",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockitoMock originalMock) {\n    if (listeners.isEmpty()) {\n        return originalMock.getMock();\n    }\n    VerificationStartedEvent event \u003d new Event(originalMock);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
          "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
          "functionStartLine": 13,
          "functionName": "notifyVerificationStarted",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,10 @@\n-public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n+public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, MockitoMock originalMock) {\n     if (listeners.isEmpty()) {\n-        return mock;\n+        return originalMock.getMock();\n     }\n-    VerificationStartedEvent event \u003d new Event();\n-    event.setMock(mock);\n+    VerificationStartedEvent event \u003d new Event(originalMock);\n     for (VerificationStartedListener listener : listeners) {\n         listener.onVerificationStarted(event);\n     }\n     return event.getMock();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "83f3ba42f486ca9648e73ea7fafbe1641911c575": {
      "type": "Ybodychange",
      "commitMessage": "Added decent exception message for API misuse\n",
      "commitDate": "2017/10/9 上午12:24",
      "commitName": "83f3ba42f486ca9648e73ea7fafbe1641911c575",
      "commitAuthor": "Szczepan Faber",
      "commitDateOld": "2017/10/9 上午12:24",
      "commitNameOld": "23af43296ae2014776901ebd98d21c259fad5fb8",
      "commitAuthorOld": "Szczepan Faber",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n    if (listeners.isEmpty()) {\n        return mock;\n    }\n    VerificationStartedEvent event \u003d new Event();\n    event.setMock(mock);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
      "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
      "functionStartLine": 12,
      "functionName": "notifyVerificationStarted",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n     if (listeners.isEmpty()) {\n         return mock;\n     }\n-    VerificationStartedEvent event \u003d new DefaultVerificationStartedEvent();\n+    VerificationStartedEvent event \u003d new Event();\n     event.setMock(mock);\n     for (VerificationStartedListener listener : listeners) {\n         listener.onVerificationStarted(event);\n     }\n     return event.getMock();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "183ab9d97658ddb3342c60fc6611bcad5aa6d69d": {
      "type": "Ybodychange",
      "commitMessage": "Added checking null argument\n\nAlso improved test coverage\n",
      "commitDate": "2017/10/9 上午12:24",
      "commitName": "183ab9d97658ddb3342c60fc6611bcad5aa6d69d",
      "commitAuthor": "Szczepan Faber",
      "commitDateOld": "2017/10/9 上午12:24",
      "commitNameOld": "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa",
      "commitAuthorOld": "Szczepan Faber",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n    if (listeners.isEmpty()) {\n        return mock;\n    }\n    VerificationStartedEvent event \u003d new DefaultVerificationStartedEvent();\n    event.setMock(mock);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
      "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
      "functionStartLine": 11,
      "functionName": "notifyVerificationStarted",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa": {
      "type": "Yintroduced",
      "commitMessage": "Added an API for dual proxy use case (Spring Boot)\n\n- For design and rationale, see #1191\n- For all the details, see Javadoc in VerificationStartedListener\n",
      "commitDate": "2017/10/9 上午12:24",
      "commitName": "1f9b4f3de3af9f29e2123e74c5f6c036bb94d2aa",
      "commitAuthor": "Szczepan Faber",
      "diff": "@@ -0,0 +1,11 @@\n+public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n+    if (listeners.isEmpty()) {\n+        return mock;\n+    }\n+    VerificationStartedEvent event \u003d new DefaultVerificationStartedEvent();\n+    event.setMock(mock);\n+    for (VerificationStartedListener listener : listeners) {\n+        listener.onVerificationStarted(event);\n+    }\n+    return event.getMock();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Object notifyVerificationStarted(List\u003cVerificationStartedListener\u003e listeners, Object mock) {\n    if (listeners.isEmpty()) {\n        return mock;\n    }\n    VerificationStartedEvent event \u003d new DefaultVerificationStartedEvent();\n    event.setMock(mock);\n    for (VerificationStartedListener listener : listeners) {\n        listener.onVerificationStarted(event);\n    }\n    return event.getMock();\n}",
      "path": "src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java",
      "functionStartLine": 10,
      "functionName": "notifyVerificationStarted",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}