{
  "origin": "codeshovel",
  "repositoryName": "flink",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/flink/.git",
  "startCommitName": "9e936a5f8198b0059e9b5fba33163c2bbe3efbdd",
  "sourceFileName": "ConnectedStreams.java",
  "functionName": "map",
  "functionId": "map___coMapper-CoMapFunction__IN1,IN2,R__",
  "sourceFilePath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
  "functionAnnotation": "",
  "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
  "functionStartLine": 226,
  "functionEndLine": 242,
  "numCommitsSeen": 83,
  "timeTaken": 3597,
  "changeHistory": [
    "ddba1b69f43cbb885e178dfaafa120f1fe196a13",
    "bcaf816dc5313c6c7de1e3436cc87036fd2ea3d0",
    "a922473c0835a757e7108c79ad52f103ace86030",
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
    "23d8e26438370d8c99c24c8b43d543e953775fd2",
    "0930179f41dec179cb60882f699ee4ce8ba34d61",
    "6df1dd2cc848d0a691a98309a3bb760f9a998673",
    "4754a97b19c96647886a46131750db26a0b5f618",
    "1cf49e90cddea610b4cfa3623a53ced66aadfc2d",
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
    "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e",
    "34353f6658e9a4dd50ad860e17eee94804b76ccb",
    "5f7800702ad1762eef4d2a25b09615f65bf3761c",
    "51c1f67791307c2b9355171f7398d104befc8de5",
    "b8e8bd7a021d4388edaa1e9fc40d18fe1019c065",
    "47dca692e2db320cfde14f4c6905b31972442224",
    "1b046f4e334926e560456c2b2ef3b67e635e4700",
    "696bce02f42973777304b0ad3fe4cc62a4f5e976",
    "9be9814972458aa1c67ccf6db5dd508244a89b21",
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f"
  ],
  "changeHistoryShort": {
    "ddba1b69f43cbb885e178dfaafa120f1fe196a13": "Ybodychange",
    "bcaf816dc5313c6c7de1e3436cc87036fd2ea3d0": "Ybodychange",
    "a922473c0835a757e7108c79ad52f103ace86030": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876": "Yfilerename",
    "23d8e26438370d8c99c24c8b43d543e953775fd2": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange)",
    "0930179f41dec179cb60882f699ee4ce8ba34d61": "Ydocchange",
    "6df1dd2cc848d0a691a98309a3bb760f9a998673": "Ybodychange",
    "4754a97b19c96647886a46131750db26a0b5f618": "Ybodychange",
    "1cf49e90cddea610b4cfa3623a53ced66aadfc2d": "Ybodychange",
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": "Yfilerename",
    "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e": "Ybodychange",
    "34353f6658e9a4dd50ad860e17eee94804b76ccb": "Ybodychange",
    "5f7800702ad1762eef4d2a25b09615f65bf3761c": "Ybodychange",
    "51c1f67791307c2b9355171f7398d104befc8de5": "Ybodychange",
    "b8e8bd7a021d4388edaa1e9fc40d18fe1019c065": "Ydocchange",
    "47dca692e2db320cfde14f4c6905b31972442224": "Ydocchange",
    "1b046f4e334926e560456c2b2ef3b67e635e4700": "Ybodychange",
    "696bce02f42973777304b0ad3fe4cc62a4f5e976": "Ymovefromfile",
    "9be9814972458aa1c67ccf6db5dd508244a89b21": "Ydocchange",
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ddba1b69f43cbb885e178dfaafa120f1fe196a13": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-7251] [types] Remove the flink-java8 module and improve lambda type extraction\n\nThis commit removes the flink-java8 module and merges some tests into flink-core/flink-runtime. It ensures to have the possibility for passing explicit type information in DataStream API as a fallback. Since the tycho compiler approach was very hacky and seems not to work anymore, this commit also removes all references in the docs and quickstarts.\n\nThis closes #6120.\n",
      "commitDate": "2018/7/20 下午2:06",
      "commitName": "ddba1b69f43cbb885e178dfaafa120f1fe196a13",
      "commitAuthor": "Timo Walther",
      "commitDateOld": "2017/6/8 下午4:42",
      "commitNameOld": "bcaf816dc5313c6c7de1e3436cc87036fd2ea3d0",
      "commitAuthorOld": "Dawid Wysakowicz",
      "daysBetweenCommits": 406.89,
      "commitsBetweenForRepo": 2893,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, 0, 1, 2, TypeExtractor.NO_INDEX, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
      "functionStartLine": 226,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n-    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, 0, 1, 2, TypeExtractor.NO_INDEX, TypeExtractor.NO_INDEX, TypeExtractor.NO_INDEX, getType1(), getType2(), Utils.getCallLocationName(), true);\n+    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, 0, 1, 2, TypeExtractor.NO_INDEX, getType1(), getType2(), Utils.getCallLocationName(), true);\n     return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bcaf816dc5313c6c7de1e3436cc87036fd2ea3d0": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-6783] Changed passing index of type argument while extracting return type.\n",
      "commitDate": "2017/6/8 下午4:42",
      "commitName": "bcaf816dc5313c6c7de1e3436cc87036fd2ea3d0",
      "commitAuthor": "Dawid Wysakowicz",
      "commitDateOld": "2017/5/23 上午4:22",
      "commitNameOld": "12b4185c6c09101b64e12a84c33dc4d28f95cff9",
      "commitAuthorOld": "Greg Hogan",
      "daysBetweenCommits": 16.51,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, 0, 1, 2, TypeExtractor.NO_INDEX, TypeExtractor.NO_INDEX, TypeExtractor.NO_INDEX, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
      "functionStartLine": 204,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n-    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n+    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, 0, 1, 2, TypeExtractor.NO_INDEX, TypeExtractor.NO_INDEX, TypeExtractor.NO_INDEX, getType1(), getType2(), Utils.getCallLocationName(), true);\n     return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a922473c0835a757e7108c79ad52f103ace86030": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "[FLINK-3548] [api-breaking] Remove unnecessary generic parameter from SingleOutputStreamOperator\n",
      "commitDate": "2016/3/1 上午4:37",
      "commitName": "a922473c0835a757e7108c79ad52f103ace86030",
      "commitAuthor": "Aljoscha Krettek",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[FLINK-3548] [api-breaking] Remove unnecessary generic parameter from SingleOutputStreamOperator\n",
          "commitDate": "2016/3/1 上午4:37",
          "commitName": "a922473c0835a757e7108c79ad52f103ace86030",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2016/2/17 下午10:09",
          "commitNameOld": "06a42bf6d64734621cc6aa92d5823d935c07e02c",
          "commitAuthorOld": "Stephan Ewen",
          "daysBetweenCommits": 12.27,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
          "functionStartLine": 200,
          "functionName": "map",
          "functionAnnotation": "",
          "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
          "diff": "@@ -1,4 +1,4 @@\n-public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n+public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n+    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n     return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[coMapper-CoMapFunction\u003cIN1,IN2,OUT\u003e]",
            "newValue": "[coMapper-CoMapFunction\u003cIN1,IN2,R\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "[FLINK-3548] [api-breaking] Remove unnecessary generic parameter from SingleOutputStreamOperator\n",
          "commitDate": "2016/3/1 上午4:37",
          "commitName": "a922473c0835a757e7108c79ad52f103ace86030",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2016/2/17 下午10:09",
          "commitNameOld": "06a42bf6d64734621cc6aa92d5823d935c07e02c",
          "commitAuthorOld": "Stephan Ewen",
          "daysBetweenCommits": 12.27,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
          "functionStartLine": 200,
          "functionName": "map",
          "functionAnnotation": "",
          "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
          "diff": "@@ -1,4 +1,4 @@\n-public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n+public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n+    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n     return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "SingleOutputStreamOperator\u003cOUT,?\u003e",
            "newValue": "SingleOutputStreamOperator\u003cR\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-3548] [api-breaking] Remove unnecessary generic parameter from SingleOutputStreamOperator\n",
          "commitDate": "2016/3/1 上午4:37",
          "commitName": "a922473c0835a757e7108c79ad52f103ace86030",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2016/2/17 下午10:09",
          "commitNameOld": "06a42bf6d64734621cc6aa92d5823d935c07e02c",
          "commitAuthorOld": "Stephan Ewen",
          "daysBetweenCommits": 12.27,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
          "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
          "functionStartLine": 200,
          "functionName": "map",
          "functionAnnotation": "",
          "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
          "diff": "@@ -1,4 +1,4 @@\n-public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n+public \u003cR\u003e SingleOutputStreamOperator\u003cR\u003e map(CoMapFunction\u003cIN1, IN2, R\u003e coMapper) {\n+    TypeInformation\u003cR\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n     return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876": {
      "type": "Yfilerename",
      "commitMessage": "[FLINK-2877] Move Streaming API out of Staging package\n",
      "commitDate": "2015/10/21 下午5:01",
      "commitName": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
      "commitAuthor": "Rufus Refactor",
      "commitDateOld": "2015/10/21 下午4:35",
      "commitNameOld": "42a3d8cfa9eacc19ac04004b256b6eb51422b523",
      "commitAuthorOld": "Maximilian Michels",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
      "functionStartLine": 275,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
        "newPath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java"
      }
    },
    "23d8e26438370d8c99c24c8b43d543e953775fd2": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange)",
      "commitMessage": "[FLINK-2550] Rename ConnectedDataStream to ConnectedStreams, Remove some operations\n\nThe removed operations are tricky and some of them are not working\ncorrectly. For now, co-reduce, stream-cross and stream-join are\nremoved.\n\nI\u0027m planning to add a new join implementation based on tagged union\nthat uses the new windowing code.\n",
      "commitDate": "2015/10/5 下午10:36",
      "commitName": "23d8e26438370d8c99c24c8b43d543e953775fd2",
      "commitAuthor": "Aljoscha Krettek",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "[FLINK-2550] Rename ConnectedDataStream to ConnectedStreams, Remove some operations\n\nThe removed operations are tricky and some of them are not working\ncorrectly. For now, co-reduce, stream-cross and stream-join are\nremoved.\n\nI\u0027m planning to add a new join implementation based on tagged union\nthat uses the new windowing code.\n",
          "commitDate": "2015/10/5 下午10:36",
          "commitName": "23d8e26438370d8c99c24c8b43d543e953775fd2",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2015/10/5 下午10:36",
          "commitNameOld": "9e6e0aeca01c50640827adbdd60089761cd5e8d2",
          "commitAuthorOld": "Aljoscha Krettek",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
          "functionStartLine": 275,
          "functionName": "map",
          "functionAnnotation": "",
          "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
          "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n-    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
            "newPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
            "oldMethodName": "map",
            "newMethodName": "map"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-2550] Rename ConnectedDataStream to ConnectedStreams, Remove some operations\n\nThe removed operations are tricky and some of them are not working\ncorrectly. For now, co-reduce, stream-cross and stream-join are\nremoved.\n\nI\u0027m planning to add a new join implementation based on tagged union\nthat uses the new windowing code.\n",
          "commitDate": "2015/10/5 下午10:36",
          "commitName": "23d8e26438370d8c99c24c8b43d543e953775fd2",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2015/10/5 下午10:36",
          "commitNameOld": "9e6e0aeca01c50640827adbdd60089761cd5e8d2",
          "commitAuthorOld": "Aljoscha Krettek",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
          "functionStartLine": 275,
          "functionName": "map",
          "functionAnnotation": "",
          "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
          "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n-    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[FLINK-2550] Rename ConnectedDataStream to ConnectedStreams, Remove some operations\n\nThe removed operations are tricky and some of them are not working\ncorrectly. For now, co-reduce, stream-cross and stream-join are\nremoved.\n\nI\u0027m planning to add a new join implementation based on tagged union\nthat uses the new windowing code.\n",
          "commitDate": "2015/10/5 下午10:36",
          "commitName": "23d8e26438370d8c99c24c8b43d543e953775fd2",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2015/10/5 下午10:36",
          "commitNameOld": "9e6e0aeca01c50640827adbdd60089761cd5e8d2",
          "commitAuthorOld": "Aljoscha Krettek",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedStreams.java",
          "functionStartLine": 275,
          "functionName": "map",
          "functionAnnotation": "",
          "functionDoc": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n",
          "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n-    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003c\u003e(inputStream1.clean(coMapper)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
            "newValue": "Applies a CoMap transformation on a {@link ConnectedStreams} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input DataStreams\n@return The transformed {@link DataStream}\n"
          }
        }
      ]
    },
    "0930179f41dec179cb60882f699ee4ce8ba34d61": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Build warnings eliminated from streaming-core\n",
      "commitDate": "2015/5/29 下午9:08",
      "commitName": "0930179f41dec179cb60882f699ee4ce8ba34d61",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2015/5/19 下午10:35",
      "commitNameOld": "58865ff378720149134a93c650f2765e25bd1fb3",
      "commitAuthorOld": "Aljoscha Krettek",
      "daysBetweenCommits": 9.94,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 239,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
        "newValue": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n"
      }
    },
    "6df1dd2cc848d0a691a98309a3bb760f9a998673": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1909] [streaming] Type handling refactor for sources + scala api\n",
      "commitDate": "2015/4/22 下午9:50",
      "commitName": "6df1dd2cc848d0a691a98309a3bb760f9a998673",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2015/4/15 下午5:35",
      "commitNameOld": "4754a97b19c96647886a46131750db26a0b5f618",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 244,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getInputType1(), getInputType2(), Utils.getCallLocationName(), true);\n-    return addCoFunction(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getType1(), getType2(), Utils.getCallLocationName(), true);\n+    return transform(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4754a97b19c96647886a46131750db26a0b5f618": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Major internal renaming and restructure\n\nCloses #594\n",
      "commitDate": "2015/4/15 下午5:35",
      "commitName": "4754a97b19c96647886a46131750db26a0b5f618",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2015/4/15 下午1:41",
      "commitNameOld": "f1b445b0eb481d2f66d1a8598dd10af16c101f18",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getInputType1(), getInputType2(), Utils.getCallLocationName(), true);\n    return addCoFunction(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 244,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getInputType1(), getInputType2(), Utils.getCallLocationName(), true);\n-    return addCoFunction(\"Co-Map\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    return addCoFunction(\"Co-Map\", outTypeInfo, new CoStreamMap\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1cf49e90cddea610b4cfa3623a53ced66aadfc2d": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1824] [streaming] Support added for missing types in DataStream api\n\nCloses #567\n",
      "commitDate": "2015/4/5 下午4:51",
      "commitName": "1cf49e90cddea610b4cfa3623a53ced66aadfc2d",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2015/3/23 下午4:03",
      "commitNameOld": "cf84bca124ac34875ef3e559abbbf509c1218542",
      "commitAuthorOld": "Maximilian Michels",
      "daysBetweenCommits": 13.03,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getInputType1(), getInputType2(), Utils.getCallLocationName(), true);\n    return addCoFunction(\"Co-Map\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 244,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n+    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.getBinaryOperatorReturnType(coMapper, CoMapFunction.class, false, true, getInputType1(), getInputType2(), Utils.getCallLocationName(), true);\n     return addCoFunction(\"Co-Map\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": {
      "type": "Yfilerename",
      "commitMessage": "[FLINK-1452] Rename \u0027flink-addons\u0027 to \u0027flink-staging\u0027\n",
      "commitDate": "2015/2/3 上午2:40",
      "commitName": "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
      "commitAuthor": "Robert Metzger",
      "commitDateOld": "2015/2/2 上午7:27",
      "commitNameOld": "563e546236217dace58a8031d56d08a27e08160b",
      "commitAuthorOld": "zentol",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n    return addCoFunction(\"Co-Map\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 243,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
        "newPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java"
      }
    },
    "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1434] [FLINK-1401] Streaming support added for webclient\n\nCloses #334\n",
      "commitDate": "2015/1/28 上午6:31",
      "commitName": "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2015/1/21 下午11:06",
      "commitNameOld": "e3b608ce20f2c06b6c9ce8f231b6f53ab73f1de5",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n    return addCoFunction(\"Co-Map\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 243,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n-    return addCoFunction(\"coMap\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    return addCoFunction(\"Co-Map\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34353f6658e9a4dd50ad860e17eee94804b76ccb": {
      "type": "Ybodychange",
      "commitMessage": "[scala] [streaming] Base functionality added for streaming scala api\n",
      "commitDate": "2015/1/3 上午1:34",
      "commitName": "34353f6658e9a4dd50ad860e17eee94804b76ccb",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2014/12/18 上午3:34",
      "commitNameOld": "5f7800702ad1762eef4d2a25b09615f65bf3761c",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 15.92,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n    return addCoFunction(\"coMap\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 412,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n-    return addCoFunction(\"coMap\", clean(coMapper), outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n+    return addCoFunction(\"coMap\", outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5f7800702ad1762eef4d2a25b09615f65bf3761c": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1325] [streaming] Added clousure cleaning to streaming\n\nThis closes #273\n",
      "commitDate": "2014/12/18 上午3:34",
      "commitName": "5f7800702ad1762eef4d2a25b09615f65bf3761c",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/12/10 下午8:27",
      "commitNameOld": "51c1f67791307c2b9355171f7398d104befc8de5",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 7.3,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n    return addCoFunction(\"coMap\", clean(coMapper), outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 416,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,4 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n     TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n-    return addCoFunction(\"coMap\", coMapper, outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n+    return addCoFunction(\"coMap\", clean(coMapper), outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(clean(coMapper)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51c1f67791307c2b9355171f7398d104befc8de5": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1161] [streaming] Streaming API type handling rework to support java 8 lambdas\n",
      "commitDate": "2014/12/10 下午8:27",
      "commitName": "51c1f67791307c2b9355171f7398d104befc8de5",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2014/12/5 下午11:45",
      "commitNameOld": "64baa00b130bae4d602ccafd52f5a687d6042279",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n    return addCoFunction(\"coMap\", coMapper, outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 403,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "@@ -1,6 +1,4 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    FunctionTypeWrapper\u003cIN1\u003e in1TypeWrapper \u003d new FunctionTypeWrapper\u003cIN1\u003e(coMapper, CoMapFunction.class, 0);\n-    FunctionTypeWrapper\u003cIN2\u003e in2TypeWrapper \u003d new FunctionTypeWrapper\u003cIN2\u003e(coMapper, CoMapFunction.class, 1);\n-    FunctionTypeWrapper\u003cOUT\u003e outTypeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(coMapper, CoMapFunction.class, 2);\n-    return addCoFunction(\"coMap\", coMapper, in1TypeWrapper, in2TypeWrapper, outTypeWrapper, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n+    TypeInformation\u003cOUT\u003e outTypeInfo \u003d TypeExtractor.createTypeInfo(CoMapFunction.class, coMapper.getClass(), 2, null, null);\n+    return addCoFunction(\"coMap\", coMapper, outTypeInfo, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8e8bd7a021d4388edaa1e9fc40d18fe1019c065": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Added CoBatchedDataStream and CoWindowDataStream with reduce functionality + CoBatchReduce bugfix\n\n[streaming] RAT \u0026 Checkstyle fix\n",
      "commitDate": "2014/10/17 下午8:41",
      "commitName": "b8e8bd7a021d4388edaa1e9fc40d18fe1019c065",
      "commitAuthor": "szape",
      "commitDateOld": "2014/10/8 上午6:38",
      "commitNameOld": "ec82d973d2e2c6f03d147fb87ecb7402da1776fa",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 9.59,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    FunctionTypeWrapper\u003cIN1\u003e in1TypeWrapper \u003d new FunctionTypeWrapper\u003cIN1\u003e(coMapper, CoMapFunction.class, 0);\n    FunctionTypeWrapper\u003cIN2\u003e in2TypeWrapper \u003d new FunctionTypeWrapper\u003cIN2\u003e(coMapper, CoMapFunction.class, 1);\n    FunctionTypeWrapper\u003cOUT\u003e outTypeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(coMapper, CoMapFunction.class, 2);\n    return addCoFunction(\"coMap\", coMapper, in1TypeWrapper, in2TypeWrapper, outTypeWrapper, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 330,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
        "newValue": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed {@link DataStream}\n"
      }
    },
    "47dca692e2db320cfde14f4c6905b31972442224": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Reduce operator added to ConnectedDataStream + test\n",
      "commitDate": "2014/9/20 下午7:42",
      "commitName": "47dca692e2db320cfde14f4c6905b31972442224",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/30 上午3:01",
      "commitNameOld": "f149197f952c85d5eeb643b91aeac4f26fd573a4",
      "commitAuthorOld": "szape",
      "daysBetweenCommits": 21.69,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    FunctionTypeWrapper\u003cIN1\u003e in1TypeWrapper \u003d new FunctionTypeWrapper\u003cIN1\u003e(coMapper, CoMapFunction.class, 0);\n    FunctionTypeWrapper\u003cIN2\u003e in2TypeWrapper \u003d new FunctionTypeWrapper\u003cIN2\u003e(coMapper, CoMapFunction.class, 1);\n    FunctionTypeWrapper\u003cOUT\u003e outTypeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(coMapper, CoMapFunction.class, 2);\n    return addCoFunction(\"coMap\", coMapper, in1TypeWrapper, in2TypeWrapper, outTypeWrapper, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 120,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element of the\nfirst input and {@link CoMapFunction#map2} for each element of the second\ninput. Each CoMapFunction call returns exactly one element. The user can\nalso extend {@link RichCoMapFunction} to gain access to other features\nprovided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
        "newValue": "Applies a CoMap transformation on a {@link ConnectedDataStream} and maps\nthe output to a common type. The transformation calls a\n{@link CoMapFunction#map1} for each element of the first input and\n{@link CoMapFunction#map2} for each element of the second input. Each\nCoMapFunction call returns exactly one element. The user can also extend\n{@link RichCoMapFunction} to gain access to other features provided by\nthe {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n"
      }
    },
    "1b046f4e334926e560456c2b2ef3b67e635e4700": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Refactored stream components with InputHandler \u0026 OutputHandler\n",
      "commitDate": "2014/8/30 上午3:01",
      "commitName": "1b046f4e334926e560456c2b2ef3b67e635e4700",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/30 上午3:01",
      "commitNameOld": "75960122b47f84d258273c0cd7f36b2aae7a684d",
      "commitAuthorOld": "szape",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    FunctionTypeWrapper\u003cIN1\u003e in1TypeWrapper \u003d new FunctionTypeWrapper\u003cIN1\u003e(coMapper, CoMapFunction.class, 0);\n    FunctionTypeWrapper\u003cIN2\u003e in2TypeWrapper \u003d new FunctionTypeWrapper\u003cIN2\u003e(coMapper, CoMapFunction.class, 1);\n    FunctionTypeWrapper\u003cOUT\u003e outTypeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(coMapper, CoMapFunction.class, 2);\n    return addCoFunction(\"coMap\", coMapper, in1TypeWrapper, in2TypeWrapper, outTypeWrapper, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 145,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element of the\nfirst input and {@link CoMapFunction#map2} for each element of the second\ninput. Each CoMapFunction call returns exactly one element. The user can\nalso extend {@link RichCoMapFunction} to gain access to other features\nprovided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
      "diff": "@@ -1,3 +1,6 @@\n public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n-    return addCoFunction(\"coMap\", coMapper, new FunctionTypeWrapper\u003cIN1, IN2, OUT\u003e(coMapper, CoMapFunction.class, 0, 1, 2), new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n+    FunctionTypeWrapper\u003cIN1\u003e in1TypeWrapper \u003d new FunctionTypeWrapper\u003cIN1\u003e(coMapper, CoMapFunction.class, 0);\n+    FunctionTypeWrapper\u003cIN2\u003e in2TypeWrapper \u003d new FunctionTypeWrapper\u003cIN2\u003e(coMapper, CoMapFunction.class, 1);\n+    FunctionTypeWrapper\u003cOUT\u003e outTypeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(coMapper, CoMapFunction.class, 2);\n+    return addCoFunction(\"coMap\", coMapper, in1TypeWrapper, in2TypeWrapper, outTypeWrapper, new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "696bce02f42973777304b0ad3fe4cc62a4f5e976": {
      "type": "Ymovefromfile",
      "commitMessage": "[streaming] Added groupBy operator to DataStream + name refactor\n",
      "commitDate": "2014/8/18 下午10:23",
      "commitName": "696bce02f42973777304b0ad3fe4cc62a4f5e976",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午10:23",
      "commitNameOld": "e089959c0e4bb3e08a95b1b6b9076935c87a5a02",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    return addCoFunction(\"coMap\", coMapper, new FunctionTypeWrapper\u003cIN1, IN2, OUT\u003e(coMapper, CoMapFunction.class, 0, 1, 2), new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
      "functionStartLine": 92,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element of the\nfirst input and {@link CoMapFunction#map2} for each element of the second\ninput. Each CoMapFunction call returns exactly one element. The user can\nalso extend {@link RichCoMapFunction} to gain access to other features\nprovided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/CoDataStream.java",
        "newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/ConnectedDataStream.java",
        "oldMethodName": "map",
        "newMethodName": "map"
      }
    },
    "9be9814972458aa1c67ccf6db5dd508244a89b21": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] DataStream output naming reworked from vertex to edge based model\n",
      "commitDate": "2014/8/18 下午10:23",
      "commitName": "9be9814972458aa1c67ccf6db5dd508244a89b21",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午10:23",
      "commitNameOld": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    return addCoFunction(\"coMap\", coMapper, new FunctionTypeWrapper\u003cIN1, IN2, OUT\u003e(coMapper, CoMapFunction.class, 0, 1, 2), new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/CoDataStream.java",
      "functionStartLine": 92,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element of the\nfirst input and {@link CoMapFunction#map2} for each element of the second\ninput. Each CoMapFunction call returns exactly one element. The user can\nalso extend {@link RichCoMapFunction} to gain access to other features\nprovided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element\nof the first input and {@link CoMapFunction#map2} for each element\nof the second input. Each CoMapFunction call returns exactly one element.\nThe user can also extend {@link RichCoMapFunction} to gain access to\nother features provided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n",
        "newValue": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element of the\nfirst input and {@link CoMapFunction#map2} for each element of the second\ninput. Each CoMapFunction call returns exactly one element. The user can\nalso extend {@link RichCoMapFunction} to gain access to other features\nprovided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n"
      }
    },
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": {
      "type": "Yintroduced",
      "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
      "commitDate": "2014/8/18 下午10:23",
      "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
      "commitAuthor": "gyfora",
      "diff": "@@ -0,0 +1,3 @@\n+public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n+    return addCoFunction(\"coMap\", coMapper, new FunctionTypeWrapper\u003cIN1, IN2, OUT\u003e(coMapper, CoMapFunction.class, 0, 1, 2), new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public \u003cOUT\u003e SingleOutputStreamOperator\u003cOUT, ?\u003e map(CoMapFunction\u003cIN1, IN2, OUT\u003e coMapper) {\n    return addCoFunction(\"coMap\", coMapper, new FunctionTypeWrapper\u003cIN1, IN2, OUT\u003e(coMapper, CoMapFunction.class, 0, 1, 2), new CoMapInvokable\u003cIN1, IN2, OUT\u003e(coMapper));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/CoDataStream.java",
      "functionStartLine": 92,
      "functionName": "map",
      "functionAnnotation": "",
      "functionDoc": "Applies a CoMap transformation on two separate {@link DataStream}s. The\ntransformation calls a {@link CoMapFunction#map1} for each element\nof the first input and {@link CoMapFunction#map2} for each element\nof the second input. Each CoMapFunction call returns exactly one element.\nThe user can also extend {@link RichCoMapFunction} to gain access to\nother features provided by the {@link RichFuntion} interface.\n\n@param coMapper The CoMapFunction used to jointly transform the two input\n           DataStreams\n@return The transformed DataStream\n"
    }
  }
}