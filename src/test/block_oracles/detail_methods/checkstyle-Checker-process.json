{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/checkstyle/.git",
  "startCommitName": "119fd4fb33bef9f5c66fc950396669af842c21a3",
  "sourceFileName": "Checker.java",
  "functionName": "process",
  "functionId": "process___files-List__File__",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 206,
  "functionEndLine": 229,
  "numCommitsSeen": 430,
  "timeTaken": 4925,
  "changeHistory": [
    "327c0bc843612486ab4ded32a2f01038e1271fd0",
    "8c8fee7432c89b47936c27bcc2c7f60f5cc79923",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5",
    "ecbeaa6e1df7cb021745e111b04395b9fbd509c7",
    "d46c2cf0e9df06bb5f424dbd7645574f082f7609",
    "f020066f8bdfb378df36904af3df8b5bc48858fd",
    "2b4a02d2c8a498a8a1ee38e9396426209fa65fad",
    "5922d5a6730d7582d7d66121eb911ef9426f9e24",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
    "ead1a5e5dca96e2ad15426696f48a9c244385aff",
    "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66",
    "b29ca6b5f676e92243186abdba84a7501baea1bd",
    "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1",
    "d347f55756052db6b23ae41168c44e324807c621",
    "204c073294cdca6756bcd546d6af85a797ad7d79",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "e00c478dd61d9d883e41b500b780ab217582c2e7",
    "3cd6646941eca3da7d3b9a221c88e4c1d214876e",
    "f1fcae23142431016234774318e6ce3b5ccb48f4",
    "2e4762f1716c8d12c9652aad68cb4558181bb60c",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
    "f38d8abd42c3e824635e542e6031b3da1997c02e",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "ce9f55c439621cd2a130519aea0ca4367bc7c67c",
    "abff1a2489ea8af10e1bc0a335551262d22f44e7",
    "54a09706ec1db32435b09e6b6910813325558f8d",
    "822384a711290170148b43b5ae390dd4e8cfaf4f",
    "788044ce8170fb926d33d0a048b3caa5152aca65",
    "4cbd709c019cf1b69796858506d673f7b66d37c7",
    "b84b3fd04ad9c45e1466e35b707a2b59f5baf66b",
    "6df3e84393d095000c982b2087344de84a91f9ef",
    "c617457933a978f5fd861d7ea43d05bccf045c16",
    "f755213c9e8f55286776975bfc62d91a99e8c7cb",
    "edf2c95634cd0c657465723eb0dc2e6f1834eeba",
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
    "0fd69594a4c3e82f92f93f0371791da66938f8c3"
  ],
  "changeHistoryShort": {
    "327c0bc843612486ab4ded32a2f01038e1271fd0": "Ybodychange",
    "8c8fee7432c89b47936c27bcc2c7f60f5cc79923": "Ymultichange(Yannotationchange,Ydocchange)",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": "Ybodychange",
    "ecbeaa6e1df7cb021745e111b04395b9fbd509c7": "Ybodychange",
    "d46c2cf0e9df06bb5f424dbd7645574f082f7609": "Ybodychange",
    "f020066f8bdfb378df36904af3df8b5bc48858fd": "Ybodychange",
    "2b4a02d2c8a498a8a1ee38e9396426209fa65fad": "Ybodychange",
    "5922d5a6730d7582d7d66121eb911ef9426f9e24": "Ymultichange(Yexceptionschange,Ydocchange)",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": "Ybodychange",
    "ead1a5e5dca96e2ad15426696f48a9c244385aff": "Ybodychange",
    "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66": "Ybodychange",
    "b29ca6b5f676e92243186abdba84a7501baea1bd": "Ybodychange",
    "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1": "Ybodychange",
    "d347f55756052db6b23ae41168c44e324807c621": "Ybodychange",
    "204c073294cdca6756bcd546d6af85a797ad7d79": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Ybodychange",
    "e00c478dd61d9d883e41b500b780ab217582c2e7": "Ybodychange",
    "3cd6646941eca3da7d3b9a221c88e4c1d214876e": "Ybodychange",
    "f1fcae23142431016234774318e6ce3b5ccb48f4": "Ybodychange",
    "2e4762f1716c8d12c9652aad68cb4558181bb60c": "Ybodychange",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": "Ybodychange",
    "f38d8abd42c3e824635e542e6031b3da1997c02e": "Yparameterchange",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "ce9f55c439621cd2a130519aea0ca4367bc7c67c": "Ybodychange",
    "abff1a2489ea8af10e1bc0a335551262d22f44e7": "Ymultichange(Ybodychange,Ydocchange)",
    "54a09706ec1db32435b09e6b6910813325558f8d": "Ybodychange",
    "822384a711290170148b43b5ae390dd4e8cfaf4f": "Yparameterchange",
    "788044ce8170fb926d33d0a048b3caa5152aca65": "Ybodychange",
    "4cbd709c019cf1b69796858506d673f7b66d37c7": "Ybodychange",
    "b84b3fd04ad9c45e1466e35b707a2b59f5baf66b": "Ybodychange",
    "6df3e84393d095000c982b2087344de84a91f9ef": "Ybodychange",
    "c617457933a978f5fd861d7ea43d05bccf045c16": "Ybodychange",
    "f755213c9e8f55286776975bfc62d91a99e8c7cb": "Ydocchange",
    "edf2c95634cd0c657465723eb0dc2e6f1834eeba": "Ymodifierchange",
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
    "0fd69594a4c3e82f92f93f0371791da66938f8c3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "327c0bc843612486ab4ded32a2f01038e1271fd0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3254: UT to verify all property types and values in XDocs",
      "commitDate": "2018/1/4 上午9:30",
      "commitName": "327c0bc843612486ab4ded32a2f01038e1271fd0",
      "commitAuthor": "rnveach",
      "commitDateOld": "2018/1/3 上午5:24",
      "commitNameOld": "dabb75d43c7e02317565dde4c5e60f380d3b16b8",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic int process(List\u003cFile\u003e files) throws CheckstyleException {\n    if (cacheFile !\u003d null) {\n        cacheFile.putExternalResources(getExternalResourceLocations());\n    }\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    processFiles(files);\n    fileSetChecks.forEach(FileSetCheck::finishProcessing);\n    fileSetChecks.forEach(FileSetCheck::destroy);\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 205,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,16 @@\n @Override\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n-    if (cache !\u003d null) {\n-        cache.putExternalResources(getExternalResourceLocations());\n+    if (cacheFile !\u003d null) {\n+        cacheFile.putExternalResources(getExternalResourceLocations());\n     }\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     processFiles(files);\n     fileSetChecks.forEach(FileSetCheck::finishProcessing);\n     fileSetChecks.forEach(FileSetCheck::destroy);\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8c8fee7432c89b47936c27bcc2c7f60f5cc79923": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "Issue #3515: allowed cli to override and swap checker",
      "commitDate": "2016/11/9 下午1:30",
      "commitName": "8c8fee7432c89b47936c27bcc2c7f60f5cc79923",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "Issue #3515: allowed cli to override and swap checker",
          "commitDate": "2016/11/9 下午1:30",
          "commitName": "8c8fee7432c89b47936c27bcc2c7f60f5cc79923",
          "commitAuthor": "rnveach",
          "commitDateOld": "2016/10/23 上午6:53",
          "commitNameOld": "fbaabe83cf78bcaf563443a3fb866931239eb15b",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 17.28,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic int process(List\u003cFile\u003e files) throws CheckstyleException {\n    if (cache !\u003d null) {\n        cache.putExternalResources(getExternalResourceLocations());\n    }\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    processFiles(files);\n    fileSetChecks.forEach(FileSetCheck::finishProcessing);\n    fileSetChecks.forEach(FileSetCheck::destroy);\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 194,
          "functionName": "process",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,16 @@\n+@Override\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     if (cache !\u003d null) {\n         cache.putExternalResources(getExternalResourceLocations());\n     }\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     processFiles(files);\n     fileSetChecks.forEach(FileSetCheck::finishProcessing);\n     fileSetChecks.forEach(FileSetCheck::destroy);\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Issue #3515: allowed cli to override and swap checker",
          "commitDate": "2016/11/9 下午1:30",
          "commitName": "8c8fee7432c89b47936c27bcc2c7f60f5cc79923",
          "commitAuthor": "rnveach",
          "commitDateOld": "2016/10/23 上午6:53",
          "commitNameOld": "fbaabe83cf78bcaf563443a3fb866931239eb15b",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 17.28,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic int process(List\u003cFile\u003e files) throws CheckstyleException {\n    if (cache !\u003d null) {\n        cache.putExternalResources(getExternalResourceLocations());\n    }\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    processFiles(files);\n    fileSetChecks.forEach(FileSetCheck::finishProcessing);\n    fileSetChecks.forEach(FileSetCheck::destroy);\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 194,
          "functionName": "process",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,16 @@\n+@Override\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     if (cache !\u003d null) {\n         cache.putExternalResources(getExternalResourceLocations());\n     }\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     processFiles(files);\n     fileSetChecks.forEach(FileSetCheck::finishProcessing);\n     fileSetChecks.forEach(FileSetCheck::destroy);\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
            "newValue": ""
          }
        }
      ]
    },
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3233: Resolve IntelijIdea inspection violations for java8 migration (#3434)\n\n",
      "commitDate": "2016/9/8 下午8:30",
      "commitName": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "commitAuthor": "Mariia Mykhailova",
      "commitDateOld": "2016/5/27 下午9:42",
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 103.95,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    if (cache !\u003d null) {\n        cache.putExternalResources(getExternalResourceLocations());\n    }\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    processFiles(files);\n    fileSetChecks.forEach(FileSetCheck::finishProcessing);\n    fileSetChecks.forEach(FileSetCheck::destroy);\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 185,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
      "diff": "@@ -1,19 +1,15 @@\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     if (cache !\u003d null) {\n         cache.putExternalResources(getExternalResourceLocations());\n     }\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     processFiles(files);\n-    for (final FileSetCheck fsc : fileSetChecks) {\n-        fsc.finishProcessing();\n-    }\n-    for (final FileSetCheck fsc : fileSetChecks) {\n-        fsc.destroy();\n-    }\n+    fileSetChecks.forEach(FileSetCheck::finishProcessing);\n+    fileSetChecks.forEach(FileSetCheck::destroy);\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ecbeaa6e1df7cb021745e111b04395b9fbd509c7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #407: Fix cache usage in presence of modules which use external resources for configuration (#3092)",
      "commitDate": "2016/5/17 上午4:53",
      "commitName": "ecbeaa6e1df7cb021745e111b04395b9fbd509c7",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2016/5/8 上午12:41",
      "commitNameOld": "871b20e88b5bfedb324f3e1996b37d0c68eb727b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 9.17,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    if (cache !\u003d null) {\n        cache.putExternalResources(getExternalResourceLocations());\n    }\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    processFiles(files);\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 185,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
      "diff": "@@ -1,16 +1,19 @@\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n+    if (cache !\u003d null) {\n+        cache.putExternalResources(getExternalResourceLocations());\n+    }\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     processFiles(files);\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d46c2cf0e9df06bb5f424dbd7645574f082f7609": {
      "type": "Ybodychange",
      "commitMessage": "Issue #569: Move TreeWalker cache to Checker\n",
      "commitDate": "2016/2/10 上午1:50",
      "commitName": "d46c2cf0e9df06bb5f424dbd7645574f082f7609",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "2016/1/5 上午8:25",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 35.73,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    processFiles(files);\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 268,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
      "diff": "@@ -1,38 +1,16 @@\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n-    for (final File file : files) {\n-        try {\n-            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n-                continue;\n-            }\n-            final String fileName \u003d file.getAbsolutePath();\n-            fireFileStarted(fileName);\n-            final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n-            try {\n-                final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n-                for (final FileSetCheck fsc : fileSetChecks) {\n-                    fileMessages.addAll(fsc.process(file, theText));\n-                }\n-            } catch (final IOException ioe) {\n-                LOG.debug(\"IOException occurred.\", ioe);\n-                fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n-            }\n-            fireErrors(fileName, fileMessages);\n-            fireFileFinished(fileName);\n-        } catch (Exception ex) {\n-            throw new CheckstyleException(\"Exception was thrown while processing \" + file.getPath(), ex);\n-        }\n-    }\n+    processFiles(files);\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f020066f8bdfb378df36904af3df8b5bc48858fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2109: CLI should print a file name where exception is happen\n",
      "commitDate": "2015/11/1 下午9:52",
      "commitName": "f020066f8bdfb378df36904af3df8b5bc48858fd",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "2015/10/17 上午7:35",
      "commitNameOld": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 15.6,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        try {\n            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n                continue;\n            }\n            final String fileName \u003d file.getAbsolutePath();\n            fireFileStarted(fileName);\n            final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n            try {\n                final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n                for (final FileSetCheck fsc : fileSetChecks) {\n                    fileMessages.addAll(fsc.process(file, theText));\n                }\n            } catch (final IOException ioe) {\n                LOG.debug(\"IOException occurred.\", ioe);\n                fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n            }\n            fireErrors(fileName, fileMessages);\n            fireFileFinished(fileName);\n        } catch (Exception ex) {\n            throw new CheckstyleException(\"Exception was thrown while processing \" + file.getPath(), ex);\n        }\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 246,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
      "diff": "@@ -1,34 +1,38 @@\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n-        if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n-            continue;\n-        }\n-        final String fileName \u003d file.getAbsolutePath();\n-        fireFileStarted(fileName);\n-        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n-            for (final FileSetCheck fsc : fileSetChecks) {\n-                fileMessages.addAll(fsc.process(file, theText));\n+            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n+                continue;\n             }\n-        } catch (final IOException ioe) {\n-            LOG.debug(\"IOException occurred.\", ioe);\n-            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n+            final String fileName \u003d file.getAbsolutePath();\n+            fireFileStarted(fileName);\n+            final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n+            try {\n+                final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n+                for (final FileSetCheck fsc : fileSetChecks) {\n+                    fileMessages.addAll(fsc.process(file, theText));\n+                }\n+            } catch (final IOException ioe) {\n+                LOG.debug(\"IOException occurred.\", ioe);\n+                fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n+            }\n+            fireErrors(fileName, fileMessages);\n+            fireFileFinished(fileName);\n+        } catch (Exception ex) {\n+            throw new CheckstyleException(\"Exception was thrown while processing \" + file.getPath(), ex);\n         }\n-        fireErrors(fileName, fileMessages);\n-        fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2b4a02d2c8a498a8a1ee38e9396426209fa65fad": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n\nFixes `SpellCheckingInspection` inspection violations introduced in recent commits.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "2015/9/4 上午9:06",
      "commitName": "2b4a02d2c8a498a8a1ee38e9396426209fa65fad",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/9/1 上午3:58",
      "commitNameOld": "49a0ee81710e0c43ed06a01f1d64ac7f5598a934",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occurred.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 246,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
      "diff": "@@ -1,34 +1,34 @@\n public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n         if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n-            LOG.debug(\"IOException occured.\", ioe);\n+            LOG.debug(\"IOException occurred.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5922d5a6730d7582d7d66121eb911ef9426f9e24": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Issue #1566: IllegalCatch violations fixed for TreeWalker\n",
      "commitDate": "2015/8/31 下午1:06",
      "commitName": "5922d5a6730d7582d7d66121eb911ef9426f9e24",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Issue #1566: IllegalCatch violations fixed for TreeWalker\n",
          "commitDate": "2015/8/31 下午1:06",
          "commitName": "5922d5a6730d7582d7d66121eb911ef9426f9e24",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "2015/8/31 下午1:02",
          "commitNameOld": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd",
          "commitAuthorOld": "Ruslan Diachenko",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 246,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
          "diff": "@@ -1,34 +1,34 @@\n-public int process(List\u003cFile\u003e files) {\n+public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n         if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[CheckstyleException]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Issue #1566: IllegalCatch violations fixed for TreeWalker\n",
          "commitDate": "2015/8/31 下午1:06",
          "commitName": "5922d5a6730d7582d7d66121eb911ef9426f9e24",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "2015/8/31 下午1:02",
          "commitNameOld": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd",
          "commitAuthorOld": "Ruslan Diachenko",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(List\u003cFile\u003e files) throws CheckstyleException {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 246,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n",
          "diff": "@@ -1,34 +1,34 @@\n-public int process(List\u003cFile\u003e files) {\n+public int process(List\u003cFile\u003e files) throws CheckstyleException {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n         if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
            "newValue": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@throws CheckstyleException if error condition within Checkstyle occurs\n@see #destroy()\n"
          }
        }
      ]
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "2015/8/29 下午1:50",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/8/28 下午1:30",
      "commitNameOld": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 242,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,34 +1,34 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n-        if (!CommonUtils.fileExtensionMatches(file, fileExtensions)) {\n+        if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "2015/8/27 下午8:17",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "2015/8/27 下午8:17",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!CommonUtils.fileExtensionMatches(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 242,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,34 +1,34 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n-        if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n+        if (!CommonUtils.fileExtensionMatches(file, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": "2015/8/9 下午10:41",
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/8/9 上午10:28",
      "commitNameOld": "f7f377f5065c11d31b29fb8df19a14220ffb8500",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 240,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,34 +1,34 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File file : files) {\n         if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n-            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n+            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": {
      "type": "Ybodychange",
      "commitMessage": "Rename variables with \u0027standard\u0027 names of unexpected types. #1555\n\nFixes `StandardVariableNames` inspection violations.\n\nDescription:\n\u003eReports on any variables with \u0027standard\u0027 names which are of unexpected types. Such names may be confusing. Standard names and types are as follows:\n* i, j, k, m, n - int\n* f - float\n* d - double\n* b - byte\n* c, ch - char\n* l - long\n* s, str - String\n",
      "commitDate": "2015/8/8 下午12:38",
      "commitName": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/8/5 下午10:06",
      "commitNameOld": "ead1a5e5dca96e2ad15426696f48a9c244385aff",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 2.61,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File file : files) {\n        if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d file.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(file, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 242,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,34 +1,34 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n-    for (final File f : files) {\n-        if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n+    for (final File file : files) {\n+        if (!Utils.fileExtensionMatches(file, fileExtensions)) {\n             continue;\n         }\n-        final String fileName \u003d f.getAbsolutePath();\n+        final String fileName \u003d file.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n+            final FileText theText \u003d new FileText(file.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n-                fileMessages.addAll(fsc.process(f, theText));\n+                fileMessages.addAll(fsc.process(file, theText));\n             }\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ead1a5e5dca96e2ad15426696f48a9c244385aff": {
      "type": "Ybodychange",
      "commitMessage": "100% UTs coverage for Checker (no way to reproduce/mock IOException). #1294\n",
      "commitDate": "2015/8/5 下午10:06",
      "commitName": "ead1a5e5dca96e2ad15426696f48a9c244385aff",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "2015/7/23 下午1:58",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 13.34,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 242,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,37 +1,34 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File f : files) {\n         if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n-        } catch (final FileNotFoundException fnfe) {\n-            LOG.debug(\"FileNotFoundException occured.\", fnfe);\n-            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66": {
      "type": "Ybodychange",
      "commitMessage": "Fix AvoidStaticImport check violations in codebase, issue #979\n",
      "commitDate": "2015/4/27 上午12:13",
      "commitName": "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/4/25 上午5:09",
      "commitNameOld": "b29ca6b5f676e92243186abdba84a7501baea1bd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            LOG.debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 250,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,37 +1,37 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File f : files) {\n-        if (!fileExtensionMatches(f, fileExtensions)) {\n+        if (!Utils.fileExtensionMatches(f, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             LOG.debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b29ca6b5f676e92243186abdba84a7501baea1bd": {
      "type": "Ybodychange",
      "commitMessage": "Fix and suppress PMD violations from ShortClassName rule, issue #982\n",
      "commitDate": "2015/4/25 上午5:09",
      "commitName": "b29ca6b5f676e92243186abdba84a7501baea1bd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/4/24 上午1:38",
      "commitNameOld": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        if (!fileExtensionMatches(f, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            LOG.debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 252,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,37 +1,37 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File f : files) {\n         if (!fileExtensionMatches(f, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             LOG.debug(\"FileNotFoundException occured.\", fnfe);\n-            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n+            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             LOG.debug(\"IOException occured.\", ioe);\n-            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n+            fileMessages.add(new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from \u0027logging-jakarta\u0027 ruleset, issue #871\n",
      "commitDate": "2015/4/14 上午5:43",
      "commitName": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "2015/4/1 上午2:25",
      "commitNameOld": "3a20dbe8edafe0cca300b7b9dfa48effa9a36a06",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 13.14,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        if (!fileExtensionMatches(f, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            LOG.debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            LOG.debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 253,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,37 +1,37 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File f : files) {\n         if (!fileExtensionMatches(f, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n-            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n+            LOG.debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n-            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n+            LOG.debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d347f55756052db6b23ae41168c44e324807c621": {
      "type": "Ybodychange",
      "commitMessage": "Issue #26 SuppressionCommentFilter does not suppress StrictDuplicateCode Warnings\n",
      "commitDate": "2015/3/19 下午1:30",
      "commitName": "d347f55756052db6b23ae41168c44e324807c621",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "2015/3/16 上午5:22",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 3.34,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        if (!fileExtensionMatches(f, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 250,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,35 +1,37 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File f : files) {\n         if (!fileExtensionMatches(f, fileExtensions)) {\n             continue;\n         }\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n+    }\n+    for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "204c073294cdca6756bcd546d6af85a797ad7d79": {
      "type": "Ybodychange",
      "commitMessage": "Added file extensions property to Checker \u0026 TreeWalker, issue #25\n",
      "commitDate": "2015/1/25 下午5:30",
      "commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
      "commitAuthor": "alexkravin",
      "commitDateOld": "2015/1/19 下午10:38",
      "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 5.79,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        if (!fileExtensionMatches(f, fileExtensions)) {\n            continue;\n        }\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 251,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,32 +1,35 @@\n public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.beginProcessing(charset);\n     }\n     for (final File f : files) {\n+        if (!fileExtensionMatches(f, fileExtensions)) {\n+            continue;\n+        }\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n             for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": "2015/1/19 下午10:38",
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "2015/1/19 下午10:38",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2015/1/12 上午2:10",
          "commitNameOld": "8ec1a1a97188c112f4af5cc00caffae2ac0cc530",
          "commitAuthorOld": "Lars Ködderitzsch",
          "daysBetweenCommits": 7.85,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 246,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
          "diff": "@@ -1,32 +1,32 @@\n-public int process(List\u003cFile\u003e aFiles) {\n+public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n-    for (final FileSetCheck fsc : mFileSetChecks) {\n-        fsc.beginProcessing(mCharset);\n+    for (final FileSetCheck fsc : fileSetChecks) {\n+        fsc.beginProcessing(charset);\n     }\n-    for (final File f : aFiles) {\n+    for (final File f : files) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n-            for (final FileSetCheck fsc : mFileSetChecks) {\n+            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n+            for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n-    for (final FileSetCheck fsc : mFileSetChecks) {\n+    for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n-    final int errorCount \u003d mCounter.getCount();\n+    final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[aFiles-List\u003cFile\u003e]",
            "newValue": "[files-List\u003cFile\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "2015/1/19 下午10:38",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2015/1/12 上午2:10",
          "commitNameOld": "8ec1a1a97188c112f4af5cc00caffae2ac0cc530",
          "commitAuthorOld": "Lars Ködderitzsch",
          "daysBetweenCommits": 7.85,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 246,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
          "diff": "@@ -1,32 +1,32 @@\n-public int process(List\u003cFile\u003e aFiles) {\n+public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n-    for (final FileSetCheck fsc : mFileSetChecks) {\n-        fsc.beginProcessing(mCharset);\n+    for (final FileSetCheck fsc : fileSetChecks) {\n+        fsc.beginProcessing(charset);\n     }\n-    for (final File f : aFiles) {\n+    for (final File f : files) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n-            for (final FileSetCheck fsc : mFileSetChecks) {\n+            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n+            for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n-    for (final FileSetCheck fsc : mFileSetChecks) {\n+    for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n-    final int errorCount \u003d mCounter.getCount();\n+    final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "2015/1/19 下午10:38",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "2015/1/12 上午2:10",
          "commitNameOld": "8ec1a1a97188c112f4af5cc00caffae2ac0cc530",
          "commitAuthorOld": "Lars Ködderitzsch",
          "daysBetweenCommits": 7.85,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(List\u003cFile\u003e files) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.beginProcessing(charset);\n    }\n    for (final File f : files) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n            for (final FileSetCheck fsc : fileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : fileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d counter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 246,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
          "diff": "@@ -1,32 +1,32 @@\n-public int process(List\u003cFile\u003e aFiles) {\n+public int process(List\u003cFile\u003e files) {\n     fireAuditStarted();\n-    for (final FileSetCheck fsc : mFileSetChecks) {\n-        fsc.beginProcessing(mCharset);\n+    for (final FileSetCheck fsc : fileSetChecks) {\n+        fsc.beginProcessing(charset);\n     }\n-    for (final File f : aFiles) {\n+    for (final File f : files) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n-            for (final FileSetCheck fsc : mFileSetChecks) {\n+            final FileText theText \u003d new FileText(f.getAbsoluteFile(), charset);\n+            for (final FileSetCheck fsc : fileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n-    for (final FileSetCheck fsc : mFileSetChecks) {\n+    for (final FileSetCheck fsc : fileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n-    final int errorCount \u003d mCounter.getCount();\n+    final int errorCount \u003d counter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
            "newValue": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param files the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n"
          }
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "2014/3/5 上午1:18",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "2014/2/27 下午2:35",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing(mCharset);\n    }\n    for (final File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n            for (final FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 246,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java"
      }
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Ybodychange",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": "2013/12/6 上午1:12",
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "2013/10/5 下午12:22",
      "commitNameOld": "788f87df4db1368ee0563e1ba1199177618cc01f",
      "commitAuthorOld": "picomancer",
      "daysBetweenCommits": 61.54,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing(mCharset);\n    }\n    for (final File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n            for (final FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 246,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,32 +1,32 @@\n public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n     for (final FileSetCheck fsc : mFileSetChecks) {\n         fsc.beginProcessing(mCharset);\n     }\n     for (final File f : aFiles) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n-        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n+        final SortedSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n             for (final FileSetCheck fsc : mFileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (final FileSetCheck fsc : mFileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e00c478dd61d9d883e41b500b780ab217582c2e7": {
      "type": "Ybodychange",
      "commitMessage": "clean up the code that was assigning to a parameter.\n",
      "commitDate": "2010/10/21 下午4:42",
      "commitName": "e00c478dd61d9d883e41b500b780ab217582c2e7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2010/9/30 上午11:36",
      "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 21.21,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (final FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing(mCharset);\n    }\n    for (final File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n            for (final FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (final FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 245,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,32 +1,32 @@\n public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n-    for (FileSetCheck fsc : mFileSetChecks) {\n+    for (final FileSetCheck fsc : mFileSetChecks) {\n         fsc.beginProcessing(mCharset);\n     }\n-    for (File f : aFiles) {\n+    for (final File f : aFiles) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n             final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n-            for (FileSetCheck fsc : mFileSetChecks) {\n+            for (final FileSetCheck fsc : mFileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n-    for (FileSetCheck fsc : mFileSetChecks) {\n+    for (final FileSetCheck fsc : mFileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cd6646941eca3da7d3b9a221c88e4c1d214876e": {
      "type": "Ybodychange",
      "commitMessage": "Apply patch #2783226 that uses FileText as an implementation for\nList\u003cString\u003e to pass lines around\n",
      "commitDate": "2010/6/28 下午9:02",
      "commitName": "3cd6646941eca3da7d3b9a221c88e4c1d214876e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2010/2/13 上午10:57",
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 135.42,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing(mCharset);\n    }\n    for (File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n            for (FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theText));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 245,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,33 +1,32 @@\n public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n     for (FileSetCheck fsc : mFileSetChecks) {\n         fsc.beginProcessing(mCharset);\n     }\n     for (File f : aFiles) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final String[] lines \u003d Utils.getLines(f.getAbsolutePath(), mCharset);\n-            final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n+            final FileText theText \u003d new FileText(f.getAbsoluteFile(), mCharset);\n             for (FileSetCheck fsc : mFileSetChecks) {\n-                fileMessages.addAll(fsc.process(f, theLines));\n+                fileMessages.addAll(fsc.process(f, theText));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (FileSetCheck fsc : mFileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1fcae23142431016234774318e6ce3b5ccb48f4": {
      "type": "Ybodychange",
      "commitMessage": "remove an unneeded setter.\n",
      "commitDate": "2008/11/9 下午6:43",
      "commitName": "f1fcae23142431016234774318e6ce3b5ccb48f4",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2008/11/9 下午6:19",
      "commitNameOld": "2e4762f1716c8d12c9652aad68cb4558181bb60c",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing(mCharset);\n    }\n    for (File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final String[] lines \u003d Utils.getLines(f.getAbsolutePath(), mCharset);\n            final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n            for (FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theLines));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 243,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,33 +1,33 @@\n public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n     for (FileSetCheck fsc : mFileSetChecks) {\n-        fsc.beginProcessing(getCharset());\n+        fsc.beginProcessing(mCharset);\n     }\n     for (File f : aFiles) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final String[] lines \u003d Utils.getLines(f.getAbsolutePath(), getCharset());\n+            final String[] lines \u003d Utils.getLines(f.getAbsolutePath(), mCharset);\n             final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n             for (FileSetCheck fsc : mFileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theLines));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (FileSetCheck fsc : mFileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2e4762f1716c8d12c9652aad68cb4558181bb60c": {
      "type": "Ybodychange",
      "commitMessage": "consolidate charset handling.\n",
      "commitDate": "2008/11/9 下午6:19",
      "commitName": "2e4762f1716c8d12c9652aad68cb4558181bb60c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2008/11/9 下午5:37",
      "commitNameOld": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing(getCharset());\n    }\n    for (File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final String[] lines \u003d Utils.getLines(f.getAbsolutePath(), getCharset());\n            final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n            for (FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theLines));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 243,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,33 +1,33 @@\n public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n     for (FileSetCheck fsc : mFileSetChecks) {\n-        fsc.beginProcessing();\n+        fsc.beginProcessing(getCharset());\n     }\n     for (File f : aFiles) {\n         final String fileName \u003d f.getAbsolutePath();\n         fireFileStarted(fileName);\n         final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n         try {\n-            final String[] lines \u003d Utils.getLines(f.getAbsolutePath());\n+            final String[] lines \u003d Utils.getLines(f.getAbsolutePath(), getCharset());\n             final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n             for (FileSetCheck fsc : mFileSetChecks) {\n                 fileMessages.addAll(fsc.process(f, theLines));\n             }\n         } catch (final FileNotFoundException fnfe) {\n             Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n         } catch (final IOException ioe) {\n             Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n             fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n         }\n         fireErrors(fileName, fileMessages);\n         fireFileFinished(fileName);\n     }\n     for (FileSetCheck fsc : mFileSetChecks) {\n         fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": {
      "type": "Ybodychange",
      "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
      "commitDate": "2008/11/9 下午5:37",
      "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2008/4/24 下午10:42",
      "commitNameOld": "b3f724f871dd57c4db958556df1a73f71c8bd6e5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 198.79,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.beginProcessing();\n    }\n    for (File f : aFiles) {\n        final String fileName \u003d f.getAbsolutePath();\n        fireFileStarted(fileName);\n        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n        try {\n            final String[] lines \u003d Utils.getLines(f.getAbsolutePath());\n            final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n            for (FileSetCheck fsc : mFileSetChecks) {\n                fileMessages.addAll(fsc.process(f, theLines));\n            }\n        } catch (final FileNotFoundException fnfe) {\n            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n        } catch (final IOException ioe) {\n            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n        }\n        fireErrors(fileName, fileMessages);\n        fireFileFinished(fileName);\n    }\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.finishProcessing();\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 238,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,10 +1,33 @@\n public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n     for (FileSetCheck fsc : mFileSetChecks) {\n-        fsc.process(aFiles);\n+        fsc.beginProcessing();\n+    }\n+    for (File f : aFiles) {\n+        final String fileName \u003d f.getAbsolutePath();\n+        fireFileStarted(fileName);\n+        final TreeSet\u003cLocalizedMessage\u003e fileMessages \u003d Sets.newTreeSet();\n+        try {\n+            final String[] lines \u003d Utils.getLines(f.getAbsolutePath());\n+            final List\u003cString\u003e theLines \u003d Lists.newArrayList(lines);\n+            for (FileSetCheck fsc : mFileSetChecks) {\n+                fileMessages.addAll(fsc.process(f, theLines));\n+            }\n+        } catch (final FileNotFoundException fnfe) {\n+            Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n+            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, null, this.getClass(), null));\n+        } catch (final IOException ioe) {\n+            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n+            fileMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, null, this.getClass(), null));\n+        }\n+        fireErrors(fileName, fileMessages);\n+        fireFileFinished(fileName);\n+    }\n+    for (FileSetCheck fsc : mFileSetChecks) {\n+        fsc.finishProcessing();\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f38d8abd42c3e824635e542e6031b3da1997c02e": {
      "type": "Yparameterchange",
      "commitMessage": "Removed a native array in favour of a List\u003cFile\u003e -- was it worth it??\n\nAdded @Override where possible -- did this as I got bitten by a subtle bug when making the first change. The @Override would have prevented it.\n",
      "commitDate": "2007/12/20 下午2:21",
      "commitName": "f38d8abd42c3e824635e542e6031b3da1997c02e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2007/12/15 下午6:28",
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(List\u003cFile\u003e aFiles) {\n    fireAuditStarted();\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.process(aFiles);\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 235,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,10 +1,10 @@\n-public int process(File[] aFiles) {\n+public int process(List\u003cFile\u003e aFiles) {\n     fireAuditStarted();\n     for (FileSetCheck fsc : mFileSetChecks) {\n         fsc.process(aFiles);\n         fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[aFiles-File[]]",
        "newValue": "[aFiles-List\u003cFile\u003e]"
      }
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ybodychange",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": "2007/12/15 下午4:14",
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2007/1/27 下午10:51",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.72,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(File[] aFiles) {\n    fireAuditStarted();\n    for (FileSetCheck fsc : mFileSetChecks) {\n        fsc.process(aFiles);\n        fsc.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 235,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,11 +1,10 @@\n public int process(File[] aFiles) {\n     fireAuditStarted();\n-    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n-        final FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n-        fileSetCheck.process(aFiles);\n-        fileSetCheck.destroy();\n+    for (FileSetCheck fsc : mFileSetChecks) {\n+        fsc.process(aFiles);\n+        fsc.destroy();\n     }\n     final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "2004/8/26 下午9:34",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2004/7/21 下午7:35",
      "commitNameOld": "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.08,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(File[] aFiles) {\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n        final FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n        fileSetCheck.process(aFiles);\n        fileSetCheck.destroy();\n    }\n    final int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 232,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,11 +1,11 @@\n public int process(File[] aFiles) {\n     fireAuditStarted();\n     for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n-        FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n+        final FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n         fileSetCheck.process(aFiles);\n         fileSetCheck.destroy();\n     }\n-    int errorCount \u003d mCounter.getCount();\n+    final int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ce9f55c439621cd2a130519aea0ca4367bc7c67c": {
      "type": "Ybodychange",
      "commitMessage": "make sure that Checker calls the destroy method of FileSetCheck.\n\nClover is really cool, I found this bug by looking at the coverage\nof AbstractFileSetCheck - clover told me that destroy was never\nexecuted and that seemed strange to me.\n",
      "commitDate": "2002/12/5 下午2:29",
      "commitName": "ce9f55c439621cd2a130519aea0ca4367bc7c67c",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "2002/12/1 下午5:01",
      "commitNameOld": "0fb155232fd68c4a4546ec34e676fa655d7fe223",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 3.89,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(File[] aFiles) {\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n        FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n        fileSetCheck.process(aFiles);\n        fileSetCheck.destroy();\n    }\n    int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 205,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,10 +1,11 @@\n public int process(File[] aFiles) {\n     fireAuditStarted();\n     for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n         FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n         fileSetCheck.process(aFiles);\n+        fileSetCheck.destroy();\n     }\n     int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "abff1a2489ea8af10e1bc0a335551262d22f44e7": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Made TreeWalker a FileSetCheck and moved the\nprocessing logic from Checker to TreeWalker.\n\nChecker is now only concerned with managing FileSetChecks,\nalthough the setup is still hardcoded in the constructor,\nc.f. TODO comments in Checker constructor.\n\nUncommenting the addFileSetCheck calls for real is\nleft until we have better control our configuration.\n",
      "commitDate": "2002/11/20 上午4:21",
      "commitName": "abff1a2489ea8af10e1bc0a335551262d22f44e7",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Made TreeWalker a FileSetCheck and moved the\nprocessing logic from Checker to TreeWalker.\n\nChecker is now only concerned with managing FileSetChecks,\nalthough the setup is still hardcoded in the constructor,\nc.f. TODO comments in Checker constructor.\n\nUncommenting the addFileSetCheck calls for real is\nleft until we have better control our configuration.\n",
          "commitDate": "2002/11/20 上午4:21",
          "commitName": "abff1a2489ea8af10e1bc0a335551262d22f44e7",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "2002/11/20 上午3:17",
          "commitNameOld": "54a09706ec1db32435b09e6b6910813325558f8d",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(File[] aFiles) {\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n        FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n        fileSetCheck.process(aFiles);\n    }\n    int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 193,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
          "diff": "@@ -1,9 +1,10 @@\n public int process(File[] aFiles) {\n     fireAuditStarted();\n-    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        process(aFiles[i]);\n+    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n+        FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n+        fileSetCheck.process(aFiles);\n     }\n     int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Made TreeWalker a FileSetCheck and moved the\nprocessing logic from Checker to TreeWalker.\n\nChecker is now only concerned with managing FileSetChecks,\nalthough the setup is still hardcoded in the constructor,\nc.f. TODO comments in Checker constructor.\n\nUncommenting the addFileSetCheck calls for real is\nleft until we have better control our configuration.\n",
          "commitDate": "2002/11/20 上午4:21",
          "commitName": "abff1a2489ea8af10e1bc0a335551262d22f44e7",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "2002/11/20 上午3:17",
          "commitNameOld": "54a09706ec1db32435b09e6b6910813325558f8d",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public int process(File[] aFiles) {\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n        FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n        fileSetCheck.process(aFiles);\n    }\n    int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 193,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
          "diff": "@@ -1,9 +1,10 @@\n public int process(File[] aFiles) {\n     fireAuditStarted();\n-    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        process(aFiles[i]);\n+    for (int i \u003d 0; i \u003c mFileSetChecks.size(); i++) {\n+        FileSetCheck fileSetCheck \u003d (FileSetCheck) mFileSetChecks.get(i);\n+        fileSetCheck.process(aFiles);\n     }\n     int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n     return errorCount;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
            "newValue": "Processes a set of files with all FileSetChecks.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n"
          }
        }
      ]
    },
    "54a09706ec1db32435b09e6b6910813325558f8d": {
      "type": "Ybodychange",
      "commitMessage": "Introduced MessageDispatcher interface so\nFileSetChecks do not need to be tightly coupled\nwith Checker to report errors.\n\nFileSetCheck implementations report errors now.\n\nError counting in Checker is now done via an\nAuditListener, no need to bother about that in\neach individual FileSetCheck.\n",
      "commitDate": "2002/11/20 上午3:17",
      "commitName": "54a09706ec1db32435b09e6b6910813325558f8d",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "2002/11/17 下午4:24",
      "commitNameOld": "82b2ba526976588d550cac698e512f8de6c1ffc6",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 2.45,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(File[] aFiles) {\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        process(aFiles[i]);\n    }\n    int errorCount \u003d mCounter.getCount();\n    fireAuditFinished();\n    return errorCount;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 177,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,9 +1,9 @@\n public int process(File[] aFiles) {\n-    int total \u003d 0;\n     fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        total +\u003d process(aFiles[i]);\n+        process(aFiles[i]);\n     }\n+    int errorCount \u003d mCounter.getCount();\n     fireAuditFinished();\n-    return total;\n+    return errorCount;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "822384a711290170148b43b5ae390dd4e8cfaf4f": {
      "type": "Yparameterchange",
      "commitMessage": "Changed signature of Checker.process(String[]) to process(File[])\n\nThis is a step towards making TreeWalker a FileSetCheck, next some\nmethods need to be moved around.\n",
      "commitDate": "2002/11/17 下午2:48",
      "commitName": "822384a711290170148b43b5ae390dd4e8cfaf4f",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "2002/11/16 上午2:18",
      "commitNameOld": "3c0608f33a6c41cf96056c52ae99070cbe5062d5",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(File[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 168,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,9 +1,9 @@\n-public int process(String[] aFiles) {\n+public int process(File[] aFiles) {\n     int total \u003d 0;\n     fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n         total +\u003d process(aFiles[i]);\n     }\n     fireAuditFinished();\n     return total;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[aFiles-String[]]",
        "newValue": "[aFiles-File[]]"
      }
    },
    "788044ce8170fb926d33d0a048b3caa5152aca65": {
      "type": "Ybodychange",
      "commitMessage": "removed old package.html check\n",
      "commitDate": "2002/11/15 上午2:04",
      "commitName": "788044ce8170fb926d33d0a048b3caa5152aca65",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "2002/11/14 下午6:07",
      "commitNameOld": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 156,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,10 +1,9 @@\n public int process(String[] aFiles) {\n     int total \u003d 0;\n     fireAuditStarted();\n-    total +\u003d checkPackageHtml(aFiles);\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n         total +\u003d process(aFiles[i]);\n     }\n     fireAuditFinished();\n     return total;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cbd709c019cf1b69796858506d673f7b66d37c7": {
      "type": "Ybodychange",
      "commitMessage": "This is a really enjoyable commit to make. I have finally got to remove the\nugly Verifier class. The only remaining check are based on the new fileset\ncheck that Lars putting together. Magic. :-)\n",
      "commitDate": "2002/11/13 下午12:21",
      "commitName": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/11/6 上午11:57",
      "commitNameOld": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 7.02,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    total +\u003d checkPackageHtml(aFiles);\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 158,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "",
      "extendedDetails": {}
    },
    "b84b3fd04ad9c45e1466e35b707a2b59f5baf66b": {
      "type": "Ybodychange",
      "commitMessage": "Implemented a new version of Checker for that uses the Checks. The intent is\nto be able reuse the existing checker.\n\nOT: Due to ISP problems, I am unable to receive email at the moment.\n",
      "commitDate": "2002/9/24 下午2:34",
      "commitName": "b84b3fd04ad9c45e1466e35b707a2b59f5baf66b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/9/19 下午5:07",
      "commitNameOld": "03f8352479400cd2c80511bfe0242932a4f00f11",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.89,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    total +\u003d checkPackageHtml(aFiles);\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 238,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "",
      "extendedDetails": {}
    },
    "6df3e84393d095000c982b2087344de84a91f9ef": {
      "type": "Ybodychange",
      "commitMessage": "Changed a comment to C++ style\n",
      "commitDate": "2002/2/6 下午1:49",
      "commitName": "6df3e84393d095000c982b2087344de84a91f9ef",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/2/6 上午4:22",
      "commitNameOld": "c617457933a978f5fd861d7ea43d05bccf045c16",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.39,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    total +\u003d checkPackageHtml(aFiles);\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 109,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "",
      "extendedDetails": {}
    },
    "c617457933a978f5fd861d7ea43d05bccf045c16": {
      "type": "Ybodychange",
      "commitMessage": "Implementation for RFEs 466756, 500378, 504964, 510441\n\nDetails:\n\n466756 - Check for package.html:\n - new parameter requirePackageHtml, default is false\n\n500378 - Check names of methods + local variables\n - new parameters methodPattern and localVarPattern,\n   default is ^[a-z][a-zA-Z0-9]*$\n\n504964 - no default access\n510441 - allowprotect should incl. packageprivate (requests the same feature)\n - new parameter allowPackage, default is false\n\nSorry that I did not split this into separate patches, I had this in\nmy local tree as is and it would require too much work to split it.  I\nthink the changes are easy enough to review three feature\nimplementations in one go.\n",
      "commitDate": "2002/2/6 上午4:22",
      "commitName": "c617457933a978f5fd861d7ea43d05bccf045c16",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "2002/2/4 下午8:44",
      "commitNameOld": "b779f3c1da7bacfe57900ccba7cd95de7ab54071",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    total +\u003d checkPackageHtml(aFiles);\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 109,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "@@ -1,9 +1,10 @@\n public int process(String[] aFiles) {\n     int total \u003d 0;\n     fireAuditStarted();\n+    total +\u003d checkPackageHtml(aFiles);\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n         total +\u003d process(aFiles[i]);\n     }\n     fireAuditFinished();\n     return total;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f755213c9e8f55286776975bfc62d91a99e8c7cb": {
      "type": "Ydocchange",
      "commitMessage": "tightened the scope\n",
      "commitDate": "2002/1/22 上午9:05",
      "commitName": "f755213c9e8f55286776975bfc62d91a99e8c7cb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/1/14 上午10:56",
      "commitNameOld": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 7.92,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 106,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
        "newValue": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see #destroy()\n"
      }
    },
    "edf2c95634cd0c657465723eb0dc2e6f1834eeba": {
      "type": "Ymodifierchange",
      "commitMessage": "Made Checker \u0026 Configuration public so they can be used outside the package.\nA requested feature to that Checkstyle can be integrated into IDE\u0027s like\nNetBeans, JBuilder.\n",
      "commitDate": "2002/1/6 下午3:40",
      "commitName": "edf2c95634cd0c657465723eb0dc2e6f1834eeba",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "2002/1/5 下午9:18",
      "commitNameOld": "efcb63fd741d3e07f37e986e2d8ab6fe6da8d43b",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
      "functionStartLine": 107,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
      "diff": "@@ -1,9 +1,9 @@\n-int process(String[] aFiles) {\n+public int process(String[] aFiles) {\n     int total \u003d 0;\n     fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n         total +\u003d process(aFiles[i]);\n     }\n     fireAuditFinished();\n     return total;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[public]"
      }
    },
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "started to incorporate logging events\n",
      "commitDate": "2001/8/31 上午12:13",
      "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "started to incorporate logging events\n",
          "commitDate": "2001/8/31 上午12:13",
          "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2001/8/30 下午9:09",
          "commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 111,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
          "diff": "@@ -1,7 +1,9 @@\n-private int process(String aDir, String[] aFiles, Checker aChecker) {\n-    int retVal \u003d 0;\n+int process(String[] aFiles) {\n+    int total \u003d 0;\n+    fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n+        total +\u003d process(aFiles[i]);\n     }\n-    return retVal;\n+    fireAuditFinished();\n+    return total;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
            "oldMethodName": "process",
            "newMethodName": "process"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "started to incorporate logging events\n",
          "commitDate": "2001/8/31 上午12:13",
          "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2001/8/30 下午9:09",
          "commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 111,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
          "diff": "@@ -1,7 +1,9 @@\n-private int process(String aDir, String[] aFiles, Checker aChecker) {\n-    int retVal \u003d 0;\n+int process(String[] aFiles) {\n+    int total \u003d 0;\n+    fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n+        total +\u003d process(aFiles[i]);\n     }\n-    return retVal;\n+    fireAuditFinished();\n+    return total;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "started to incorporate logging events\n",
          "commitDate": "2001/8/31 上午12:13",
          "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2001/8/30 下午9:09",
          "commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 111,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
          "diff": "@@ -1,7 +1,9 @@\n-private int process(String aDir, String[] aFiles, Checker aChecker) {\n-    int retVal \u003d 0;\n+int process(String[] aFiles) {\n+    int total \u003d 0;\n+    fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n+        total +\u003d process(aFiles[i]);\n     }\n-    return retVal;\n+    fireAuditFinished();\n+    return total;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "started to incorporate logging events\n",
          "commitDate": "2001/8/31 上午12:13",
          "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2001/8/30 下午9:09",
          "commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 111,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
          "diff": "@@ -1,7 +1,9 @@\n-private int process(String aDir, String[] aFiles, Checker aChecker) {\n-    int retVal \u003d 0;\n+int process(String[] aFiles) {\n+    int total \u003d 0;\n+    fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n+        total +\u003d process(aFiles[i]);\n     }\n-    return retVal;\n+    fireAuditFinished();\n+    return total;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Processes the list of files.\n\n@return the number of errors found\n@param aDir absolute path to directory containing files\n@param aFiles the files to process\n@param aChecker the checker to process the files with\n",
            "newValue": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "started to incorporate logging events\n",
          "commitDate": "2001/8/31 上午12:13",
          "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "2001/8/30 下午9:09",
          "commitNameOld": "f34eba11cbd8559d4d06f96e19affa70abaf86ff",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "int process(String[] aFiles) {\n    int total \u003d 0;\n    fireAuditStarted();\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        total +\u003d process(aFiles[i]);\n    }\n    fireAuditFinished();\n    return total;\n}",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java",
          "functionStartLine": 111,
          "functionName": "process",
          "functionAnnotation": "",
          "functionDoc": "Processes a set of files.\nOnce this is done, it is highly recommended to call for\nthe destroy method to close and remove the listeners.\n\n@param aFiles the list of files to be audited.\n@return the total number of errors found\n@see destroy()\n",
          "diff": "@@ -1,7 +1,9 @@\n-private int process(String aDir, String[] aFiles, Checker aChecker) {\n-    int retVal \u003d 0;\n+int process(String[] aFiles) {\n+    int total \u003d 0;\n+    fireAuditStarted();\n     for (int i \u003d 0; i \u003c aFiles.length; i++) {\n-        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n+        total +\u003d process(aFiles[i]);\n     }\n-    return retVal;\n+    fireAuditFinished();\n+    return total;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[aDir-String, aFiles-String[], aChecker-Checker]",
            "newValue": "[aFiles-String[]]"
          }
        }
      ]
    },
    "0fd69594a4c3e82f92f93f0371791da66938f8c3": {
      "type": "Yintroduced",
      "commitMessage": "first cut\n",
      "commitDate": "2001/6/22 下午9:24",
      "commitName": "0fd69594a4c3e82f92f93f0371791da66938f8c3",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,7 @@\n+private int process(String aDir, String[] aFiles, Checker aChecker) {\n+    int retVal \u003d 0;\n+    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n+        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n+    }\n+    return retVal;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private int process(String aDir, String[] aFiles, Checker aChecker) {\n    int retVal \u003d 0;\n    for (int i \u003d 0; i \u003c aFiles.length; i++) {\n        retVal +\u003d aChecker.process(aDir + File.separator + aFiles[i]);\n    }\n    return retVal;\n}",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "functionStartLine": 200,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "Processes the list of files.\n\n@return the number of errors found\n@param aDir absolute path to directory containing files\n@param aFiles the files to process\n@param aChecker the checker to process the files with\n"
    }
  }
}