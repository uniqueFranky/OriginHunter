{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "TestMethodTestDescriptor.java",
  "functionName": "execute",
  "functionId": "execute___context-JupiterEngineExecutionContext__dynamicTestExecutor-DynamicTestExecutor",
  "sourceFilePath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 103,
  "functionEndLine": 126,
  "numCommitsSeen": 223,
  "timeTaken": 2470,
  "changeHistory": [
    "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd",
    "fc3c61b41f014a2500f176e23fe8ad2989d20565",
    "4b41518fa052b28a953e99b087d505603a22c175",
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
    "ef5a029e8ca36ec19cc699fc5d9b3c3090638912",
    "babcc661bd906b38a272f287ac8779669268fc58",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "507e50872c6df8a66c32f45cb2153555f510c4b1",
    "f68eba6bd690e5686b9b6492db3ea36f758b7b4c",
    "6b9f227921f86893f4a759b578f4d197437cbae9",
    "ac7bb522519cd8a600324aa909a5c17a110cb97f",
    "65e0bd5483c8923393fa85955ddaf24d68fd8042",
    "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
    "7d84c39939665d7366e6425bf2e9d52e417822f5",
    "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e",
    "23c20e541adffed56fcb34ad297d843081eaa796",
    "f250792f7f2a6a40cdec82f3090ce88d99aad152",
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
    "266b9b90ab55ed3ffdfd43960309606300db8758",
    "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
    "0027ade00fd483e08714ece1021a7715bb1855da",
    "b2f64779aee87021348c8b8465be89675b700b16",
    "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
    "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
    "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
    "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
    "634890bff8f38128db31c244486d257b8ef729d7",
    "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
    "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
    "fc5ff8d87c124e43601f64da76668e516758a74a",
    "efb867427dd0722262fea5c869ac37cd64ea0070",
    "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
    "1707de270bd5f59f4e93e080ef56e6f6460d03da",
    "67ec62513564b48741925f79132f3fe6427e48b3",
    "fa681a536942811f712ca91be70f5510ca472020",
    "470866bc19cac8717ac77b26efc1fe703bed264a",
    "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
    "28ffd5ee9d1e996133445cac2256407f28380e91"
  ],
  "changeHistoryShort": {
    "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd": "Yfilerename",
    "fc3c61b41f014a2500f176e23fe8ad2989d20565": "Yparameterchange",
    "4b41518fa052b28a953e99b087d505603a22c175": "Ymultichange(Yparameterchange,Ybodychange)",
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": "Ybodychange",
    "ef5a029e8ca36ec19cc699fc5d9b3c3090638912": "Ybodychange",
    "babcc661bd906b38a272f287ac8779669268fc58": "Ymultichange(Yparameterchange,Yreturntypechange)",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "507e50872c6df8a66c32f45cb2153555f510c4b1": "Yfilerename",
    "f68eba6bd690e5686b9b6492db3ea36f758b7b4c": "Ybodychange",
    "6b9f227921f86893f4a759b578f4d197437cbae9": "Ybodychange",
    "ac7bb522519cd8a600324aa909a5c17a110cb97f": "Ybodychange",
    "65e0bd5483c8923393fa85955ddaf24d68fd8042": "Ybodychange",
    "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8": "Ybodychange",
    "7d84c39939665d7366e6425bf2e9d52e417822f5": "Ybodychange",
    "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e": "Ybodychange",
    "23c20e541adffed56fcb34ad297d843081eaa796": "Ybodychange",
    "f250792f7f2a6a40cdec82f3090ce88d99aad152": "Ybodychange",
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": "Ybodychange",
    "266b9b90ab55ed3ffdfd43960309606300db8758": "Yexceptionschange",
    "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab": "Ybodychange",
    "0027ade00fd483e08714ece1021a7715bb1855da": "Ybodychange",
    "b2f64779aee87021348c8b8465be89675b700b16": "Ybodychange",
    "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362": "Ybodychange",
    "8db7e41d03b3d1f989c458e040f86f7e30e153d7": "Ybodychange",
    "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8": "Ybodychange",
    "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee": "Ybodychange",
    "634890bff8f38128db31c244486d257b8ef729d7": "Ybodychange",
    "3f9c11b9326b7d3051cb2a50568cd91113a0c0da": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "11ece8b11085a01a95a10e7bf26e4eb51034ac00": "Ybodychange",
    "fc5ff8d87c124e43601f64da76668e516758a74a": "Ybodychange",
    "efb867427dd0722262fea5c869ac37cd64ea0070": "Ybodychange",
    "3cbb596f9b35b903e29675841eb20ab97e8cbb88": "Ybodychange",
    "1707de270bd5f59f4e93e080ef56e6f6460d03da": "Ybodychange",
    "67ec62513564b48741925f79132f3fe6427e48b3": "Ybodychange",
    "fa681a536942811f712ca91be70f5510ca472020": "Ybodychange",
    "470866bc19cac8717ac77b26efc1fe703bed264a": "Ymultichange(Yfilerename,Ybodychange)",
    "57b31220d25f59bb4aa4903dfee4b8ec2be4525e": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "28ffd5ee9d1e996133445cac2256407f28380e91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd": {
      "type": "Yfilerename",
      "commitMessage": "Rename MethodTestDescriptor to TestMethodTestDescriptor\n\nThis commit renames MethodTestDescriptor in order to align with the\nnaming convention for other test descriptors in Jupiter that pertain\nto methods.\n",
      "commitDate": "2017/7/17 上午3:30",
      "commitName": "b2cc5f49d5f892dbf022c62ec48f4e4bd95cf7cd",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2017/7/17 上午3:18",
      "commitNameOld": "1ffeb82ee94582720e9928c5868d180acd589d4d",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) throws Exception {\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    invokeBeforeEachCallbacks(context);\n    if (throwableCollector.isEmpty()) {\n        invokeBeforeEachMethods(context);\n        if (throwableCollector.isEmpty()) {\n            invokeBeforeTestExecutionCallbacks(context);\n            if (throwableCollector.isEmpty()) {\n                invokeTestMethod(context, dynamicTestExecutor);\n            }\n            invokeAfterTestExecutionCallbacks(context);\n        }\n        invokeAfterEachMethods(context);\n    }\n    invokeAfterEachCallbacks(context);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java",
      "functionStartLine": 99,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
        "newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/TestMethodTestDescriptor.java"
      }
    },
    "fc3c61b41f014a2500f176e23fe8ad2989d20565": {
      "type": "Yparameterchange",
      "commitMessage": "Replace Consumer\u003cTestDescriptor\u003e with custom interface\n\nIssue: #14\n",
      "commitDate": "2017/2/25 上午4:20",
      "commitName": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2017/2/25 上午4:20",
      "commitNameOld": "74fb7c6ff29566e28b9b04b9bbcc50c0a8632ec7",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) throws Exception {\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    invokeBeforeEachCallbacks(context);\n    if (throwableCollector.isEmpty()) {\n        invokeBeforeEachMethods(context);\n        if (throwableCollector.isEmpty()) {\n            invokeBeforeTestExecutionCallbacks(context);\n            if (throwableCollector.isEmpty()) {\n                invokeTestMethod(context, dynamicTestExecutor);\n            }\n            invokeAfterTestExecutionCallbacks(context);\n        }\n        invokeAfterEachMethods(context);\n    }\n    invokeAfterEachCallbacks(context);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 145,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Override\n-public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) throws Exception {\n+public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) throws Exception {\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     invokeBeforeEachCallbacks(context);\n     if (throwableCollector.isEmpty()) {\n         invokeBeforeEachMethods(context);\n         if (throwableCollector.isEmpty()) {\n             invokeBeforeTestExecutionCallbacks(context);\n             if (throwableCollector.isEmpty()) {\n                 invokeTestMethod(context, dynamicTestExecutor);\n             }\n             invokeAfterTestExecutionCallbacks(context);\n         }\n         invokeAfterEachMethods(context);\n     }\n     invokeAfterEachCallbacks(context);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer\u003cTestDescriptor\u003e]",
        "newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-DynamicTestExecutor]"
      }
    },
    "4b41518fa052b28a953e99b087d505603a22c175": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
      "commitDate": "2017/2/25 上午4:20",
      "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
          "commitDate": "2017/2/25 上午4:20",
          "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2017/1/19 下午1:17",
          "commitNameOld": "2f49071dfc9005f556543e34ca41027c63fde927",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 36.63,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) throws Exception {\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    invokeBeforeEachCallbacks(context);\n    if (throwableCollector.isEmpty()) {\n        invokeBeforeEachMethods(context);\n        if (throwableCollector.isEmpty()) {\n            invokeBeforeTestExecutionCallbacks(context);\n            if (throwableCollector.isEmpty()) {\n                invokeTestMethod(context, dynamicTestExecutor);\n            }\n            invokeAfterTestExecutionCallbacks(context);\n        }\n        invokeAfterEachMethods(context);\n    }\n    invokeAfterEachCallbacks(context);\n    throwableCollector.assertEmpty();\n    return context;\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 147,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,19 @@\n @Override\n-public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n+public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) throws Exception {\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     invokeBeforeEachCallbacks(context);\n     if (throwableCollector.isEmpty()) {\n         invokeBeforeEachMethods(context);\n         if (throwableCollector.isEmpty()) {\n             invokeBeforeTestExecutionCallbacks(context);\n             if (throwableCollector.isEmpty()) {\n-                invokeTestMethod(context);\n+                invokeTestMethod(context, dynamicTestExecutor);\n             }\n             invokeAfterTestExecutionCallbacks(context);\n         }\n         invokeAfterEachMethods(context);\n     }\n     invokeAfterEachCallbacks(context);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JupiterEngineExecutionContext]",
            "newValue": "[context-JupiterEngineExecutionContext, dynamicTestExecutor-Consumer\u003cTestDescriptor\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add support for dynamic test descriptors to HierarchicalTestExecutor\n\nIssue: #14\n",
          "commitDate": "2017/2/25 上午4:20",
          "commitName": "4b41518fa052b28a953e99b087d505603a22c175",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2017/1/19 下午1:17",
          "commitNameOld": "2f49071dfc9005f556543e34ca41027c63fde927",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 36.63,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) throws Exception {\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    invokeBeforeEachCallbacks(context);\n    if (throwableCollector.isEmpty()) {\n        invokeBeforeEachMethods(context);\n        if (throwableCollector.isEmpty()) {\n            invokeBeforeTestExecutionCallbacks(context);\n            if (throwableCollector.isEmpty()) {\n                invokeTestMethod(context, dynamicTestExecutor);\n            }\n            invokeAfterTestExecutionCallbacks(context);\n        }\n        invokeAfterEachMethods(context);\n    }\n    invokeAfterEachCallbacks(context);\n    throwableCollector.assertEmpty();\n    return context;\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 147,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,19 @@\n @Override\n-public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n+public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context, Consumer\u003cTestDescriptor\u003e dynamicTestExecutor) throws Exception {\n     ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n     invokeBeforeEachCallbacks(context);\n     if (throwableCollector.isEmpty()) {\n         invokeBeforeEachMethods(context);\n         if (throwableCollector.isEmpty()) {\n             invokeBeforeTestExecutionCallbacks(context);\n             if (throwableCollector.isEmpty()) {\n-                invokeTestMethod(context);\n+                invokeTestMethod(context, dynamicTestExecutor);\n             }\n             invokeAfterTestExecutionCallbacks(context);\n         }\n         invokeAfterEachMethods(context);\n     }\n     invokeAfterEachCallbacks(context);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea": {
      "type": "Ybodychange",
      "commitMessage": "Polish Jupiter TestDescriptor implementations\n",
      "commitDate": "2016/6/26 上午4:02",
      "commitName": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/26 上午1:30",
      "commitNameOld": "6d2e88689252202ceb2efcdc54f78631f65752c5",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n    invokeBeforeEachCallbacks(context);\n    if (throwableCollector.isEmpty()) {\n        invokeBeforeEachMethods(context);\n        if (throwableCollector.isEmpty()) {\n            invokeBeforeTestExecutionCallbacks(context);\n            if (throwableCollector.isEmpty()) {\n                invokeTestMethod(context);\n            }\n            invokeAfterTestExecutionCallbacks(context);\n        }\n        invokeAfterEachMethods(context);\n    }\n    invokeAfterEachCallbacks(context);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 147,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,19 @@\n @Override\n public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n-    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n-    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n-    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    invokeBeforeEachCallbacks(registry, testExtensionContext, throwableCollector);\n+    ThrowableCollector throwableCollector \u003d context.getThrowableCollector();\n+    invokeBeforeEachCallbacks(context);\n     if (throwableCollector.isEmpty()) {\n-        invokeBeforeEachMethods(registry, testExtensionContext, throwableCollector);\n+        invokeBeforeEachMethods(context);\n         if (throwableCollector.isEmpty()) {\n-            invokeBeforeTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+            invokeBeforeTestExecutionCallbacks(context);\n             if (throwableCollector.isEmpty()) {\n-                invokeTestMethod(context, testExtensionContext, throwableCollector);\n+                invokeTestMethod(context);\n             }\n-            invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+            invokeAfterTestExecutionCallbacks(context);\n         }\n-        invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+        invokeAfterEachMethods(context);\n     }\n-    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n+    invokeAfterEachCallbacks(context);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ef5a029e8ca36ec19cc699fc5d9b3c3090638912": {
      "type": "Ybodychange",
      "commitMessage": "Ensure afters are invoked if exception is thrown by test or a before\n\nbefore: @BeforeEach method, BeforeEachCallback, BeforeTestExecutionCallback\n\nafter:  @AfterEach method, AfterEachCallback, AfterTestExecutionCallback\n\nPrior to this commit, if an exception was thrown by a test method or a\n\"before\", then \"afters\" were never invoked, which is in strict contrast\nto the semantics of JUnit 4 and other frameworks.\n\nThis commit fixes this problem by ensuring that \"afters\" (for the\nappropriate nesting level) are invoked even if the test method or a\n\"before\" throws an exception.\n\nFixes: #357\n",
      "commitDate": "2016/6/26 上午12:07",
      "commitName": "ef5a029e8ca36ec19cc699fc5d9b3c3090638912",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/6/20 下午9:08",
      "commitNameOld": "babcc661bd906b38a272f287ac8779669268fc58",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 5.12,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext, throwableCollector);\n    if (throwableCollector.isEmpty()) {\n        invokeBeforeEachMethods(registry, testExtensionContext, throwableCollector);\n        if (throwableCollector.isEmpty()) {\n            invokeBeforeTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n            if (throwableCollector.isEmpty()) {\n                invokeTestMethod(context, testExtensionContext, throwableCollector);\n            }\n            invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n        }\n        invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    }\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 147,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,21 @@\n @Override\n public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    invokeBeforeEachCallbacks(registry, testExtensionContext);\n-    invokeBeforeEachMethods(registry, testExtensionContext);\n-    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n-    invokeTestMethod(context, testExtensionContext, throwableCollector);\n-    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n-    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+    invokeBeforeEachCallbacks(registry, testExtensionContext, throwableCollector);\n+    if (throwableCollector.isEmpty()) {\n+        invokeBeforeEachMethods(registry, testExtensionContext, throwableCollector);\n+        if (throwableCollector.isEmpty()) {\n+            invokeBeforeTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+            if (throwableCollector.isEmpty()) {\n+                invokeTestMethod(context, testExtensionContext, throwableCollector);\n+            }\n+            invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n+        }\n+        invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+    }\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "babcc661bd906b38a272f287ac8779669268fc58": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange)",
      "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午9:08",
      "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
      "commitAuthor": "JUnit Team",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
          "commitDate": "2016/6/20 下午9:08",
          "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
          "commitAuthor": "JUnit Team",
          "commitDateOld": "2016/6/20 下午4:59",
          "commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 148,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n-public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n+public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeBeforeEachCallbacks(registry, testExtensionContext);\n     invokeBeforeEachMethods(registry, testExtensionContext);\n     invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n     invokeTestMethod(context, testExtensionContext, throwableCollector);\n     invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JUnit5EngineExecutionContext]",
            "newValue": "[context-JupiterEngineExecutionContext]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename JUnit 5 TestEngine to Jupiter\n\nIssue: #286\n",
          "commitDate": "2016/6/20 下午9:08",
          "commitName": "babcc661bd906b38a272f287ac8779669268fc58",
          "commitAuthor": "JUnit Team",
          "commitDateOld": "2016/6/20 下午4:59",
          "commitNameOld": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
          "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 148,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n-public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n+public JupiterEngineExecutionContext execute(JupiterEngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeBeforeEachCallbacks(registry, testExtensionContext);\n     invokeBeforeEachMethods(registry, testExtensionContext);\n     invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n     invokeTestMethod(context, testExtensionContext, throwableCollector);\n     invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JUnit5EngineExecutionContext",
            "newValue": "JupiterEngineExecutionContext"
          }
        }
      ]
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016/6/20 下午4:59",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/20 上午2:04",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 148,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
        "newPath": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
      }
    },
    "507e50872c6df8a66c32f45cb2153555f510c4b1": {
      "type": "Yfilerename",
      "commitMessage": "Rename base package of junit5-api and junit5-engine to org.junit.jupiter\n",
      "commitDate": "2016/6/19 上午4:50",
      "commitName": "507e50872c6df8a66c32f45cb2153555f510c4b1",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016/6/19 上午3:31",
      "commitNameOld": "f7741ec30a0578d2ffaf76bca83d4fa31eb666a5",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 148,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
        "newPath": "junit5-engine/src/main/java/org/junit/jupiter/engine/descriptor/MethodTestDescriptor.java"
      }
    },
    "f68eba6bd690e5686b9b6492db3ea36f758b7b4c": {
      "type": "Ybodychange",
      "commitMessage": "Rename AfterTestMethodCallback to AfterTestExecutionCallback\n\nIssue: #249\n",
      "commitDate": "2016/5/25 上午6:33",
      "commitName": "f68eba6bd690e5686b9b6492db3ea36f758b7b4c",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/25 上午6:25",
      "commitNameOld": "6b9f227921f86893f4a759b578f4d197437cbae9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeBeforeEachCallbacks(registry, testExtensionContext);\n     invokeBeforeEachMethods(registry, testExtensionContext);\n     invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n     invokeTestMethod(context, testExtensionContext, throwableCollector);\n-    invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n+    invokeAfterTestExecutionCallbacks(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b9f227921f86893f4a759b578f4d197437cbae9": {
      "type": "Ybodychange",
      "commitMessage": "Rename BeforeTestMethodCallback to BeforeTestExecutionCallback\n\nIssue: #249\n",
      "commitDate": "2016/5/25 上午6:25",
      "commitName": "6b9f227921f86893f4a759b578f4d197437cbae9",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/25 上午6:18",
      "commitNameOld": "c7c0d24a3b6b46868d732e6358834c2ddf81ad48",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeBeforeEachCallbacks(registry, testExtensionContext);\n     invokeBeforeEachMethods(registry, testExtensionContext);\n-    invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n+    invokeBeforeTestExecutionCallbacks(registry, testExtensionContext);\n     invokeTestMethod(context, testExtensionContext, throwableCollector);\n     invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac7bb522519cd8a600324aa909a5c17a110cb97f": {
      "type": "Ybodychange",
      "commitMessage": "Execution of simple dynamic tests (#58)\n\n- HierarchicalTestExecutor only executes children from containers\n- Unique IDs for dynamic tests are created using index\n- Add tests for discovery of dynamic test by method selector (#58)\n",
      "commitDate": "2016/5/24 上午3:21",
      "commitName": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016/5/16 上午3:09",
      "commitNameOld": "ff6c3f635a444ccc92039420616402e32d3506a9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 8.01,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n    invokeTestMethod(context, testExtensionContext, throwableCollector);\n    invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeBeforeEachCallbacks(registry, testExtensionContext);\n     invokeBeforeEachMethods(registry, testExtensionContext);\n     invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n-    invokeTestMethod(registry, testExtensionContext, throwableCollector);\n+    invokeTestMethod(context, testExtensionContext, throwableCollector);\n     invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65e0bd5483c8923393fa85955ddaf24d68fd8042": {
      "type": "Ybodychange",
      "commitMessage": "Apply InstancePostProcessor extensions for every test instance\n\nPrior to this commit, InstancePostProcessor extensions were only applied\nduring the execution of a MethodTestDescriptor instead of at the point\nwhen such an instance was physically instantiated. Consequently,\nInstancePostProcessor extensions were never applied to instances of\nouter classes when test methods in a nested class were executed, which\nlead to improperly initialized outer instances (e.g,\nNullPointerExceptions, etc.).\n\nThis commit fixes this bug by relocating the invocation of\nInstancePostProcessor extensions to places in the framework where test\ninstances are physically instantiated (i.e., in ClassTestDescriptor and\nNestedClassTestDescriptor).\n\nFurthermore, the argument list for the postProcessTestInstance() method\nin the InstancePostProcessor API has been modified to accept the test\ninstance and a generic ExtensionContext.\n\nIssue: #252\n",
      "commitDate": "2016/5/13 下午9:55",
      "commitName": "65e0bd5483c8923393fa85955ddaf24d68fd8042",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/3 上午6:18",
      "commitNameOld": "dfe33b0e7e22b64b712593ea3b635675edbd6f73",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 10.65,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n    invokeTestMethod(registry, testExtensionContext, throwableCollector);\n    invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,15 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    invokeInstancePostProcessors(registry, testExtensionContext);\n     invokeBeforeEachCallbacks(registry, testExtensionContext);\n     invokeBeforeEachMethods(registry, testExtensionContext);\n     invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n     invokeTestMethod(registry, testExtensionContext, throwableCollector);\n     invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8": {
      "type": "Ybodychange",
      "commitMessage": "Do not mix execution of extensions and user code\n\nThis commit separates the execution of extensions and user code with\nregard to test lifecycle callbacks.\n\nIssue: #232\n",
      "commitDate": "2016/5/2 下午11:30",
      "commitName": "b2ba6b95138382f25ca757a5ca2a7295bee4c3b8",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/2 下午11:30",
      "commitNameOld": "36b132b0fc63a723ec0926e58921379020326c2b",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessors(registry, testExtensionContext);\n    invokeBeforeEachCallbacks(registry, testExtensionContext);\n    invokeBeforeEachMethods(registry, testExtensionContext);\n    invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n    invokeTestMethod(registry, testExtensionContext, throwableCollector);\n    invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 144,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,16 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n+    ExtensionRegistry registry \u003d context.getExtensionRegistry();\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n-    invokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n-    invokeBeforeTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext);\n-    invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n-    invokeAfterTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n-    invokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n+    invokeInstancePostProcessors(registry, testExtensionContext);\n+    invokeBeforeEachCallbacks(registry, testExtensionContext);\n+    invokeBeforeEachMethods(registry, testExtensionContext);\n+    invokeBeforeTestMethodCallbacks(registry, testExtensionContext);\n+    invokeTestMethod(registry, testExtensionContext, throwableCollector);\n+    invokeAfterTestMethodCallbacks(registry, testExtensionContext, throwableCollector);\n+    invokeAfterEachMethods(registry, testExtensionContext, throwableCollector);\n+    invokeAfterEachCallbacks(registry, testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7d84c39939665d7366e6425bf2e9d52e417822f5": {
      "type": "Ybodychange",
      "commitMessage": "Introduce before \u0026 after test method callback APIs\n\nIssue: #232\n",
      "commitDate": "2016/5/2 下午11:30",
      "commitName": "7d84c39939665d7366e6425bf2e9d52e417822f5",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/2 下午11:30",
      "commitNameOld": "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n    invokeBeforeTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    invokeAfterTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,13 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n     invokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n+    invokeBeforeTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext);\n     invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n+    invokeAfterTestMethodCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     invokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e": {
      "type": "Ybodychange",
      "commitMessage": "Rename test lifecycle callback extension APIs\n\nIssue: #232\n",
      "commitDate": "2016/5/2 下午11:30",
      "commitName": "9027966eb5c513f451e7ec2bebcd51b7b1bfa27e",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/5/2 下午11:30",
      "commitNameOld": "23c20e541adffed56fcb34ad297d843081eaa796",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    invokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 141,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n-    invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+    invokeBeforeEachCallbacks(context.getExtensionRegistry(), testExtensionContext);\n     invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n-    invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n+    invokeAfterEachCallbacks(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "23c20e541adffed56fcb34ad297d843081eaa796": {
      "type": "Ybodychange",
      "commitMessage": "Rename ExceptionHandlerExtensionPoint to ExceptionHandler\n\nIssue: #232\n",
      "commitDate": "2016/5/2 下午11:30",
      "commitName": "23c20e541adffed56fcb34ad297d843081eaa796",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/3/11 下午6:52",
      "commitNameOld": "5382b682db28f81e71737cec46b9883bfff73800",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 52.19,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 141,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    invokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+    invokeInstancePostProcessors(context.getExtensionRegistry(), testExtensionContext);\n     invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n     invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f250792f7f2a6a40cdec82f3090ce88d99aad152": {
      "type": "Ybodychange",
      "commitMessage": "#103 ExceptionHandlerExtensionPoint now called. Chaining does not work yet.\n",
      "commitDate": "2016/1/21 下午10:16",
      "commitName": "f250792f7f2a6a40cdec82f3090ce88d99aad152",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016/1/21 下午9:03",
      "commitNameOld": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 136,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n     invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n-    invokeTestMethod(testExtensionContext, context.getExtensionRegistry(), throwableCollector);\n+    invokeTestMethod(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa": {
      "type": "Ybodychange",
      "commitMessage": "Rename TestExtensionRegistry to ExtensionRegistry\n\nIssue: #112\n",
      "commitDate": "2016/1/21 下午9:03",
      "commitName": "c0a0e14d2c11bb77bfe25aee9594b04e793b04aa",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/18 下午10:34",
      "commitNameOld": "763cf502451c5053cd72248aac3561cd1530b719",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 2.94,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(testExtensionContext, context.getExtensionRegistry(), throwableCollector);\n    invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 133,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n-    invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n-    invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n-    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n-    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n+    invokeInstancePostProcessorExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+    invokeBeforeEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext);\n+    invokeTestMethod(testExtensionContext, context.getExtensionRegistry(), throwableCollector);\n+    invokeAfterEachExtensionPoints(context.getExtensionRegistry(), testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "266b9b90ab55ed3ffdfd43960309606300db8758": {
      "type": "Yexceptionschange",
      "commitMessage": "Consistently throw Exception instead of Throwable\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/3 上午2:50",
      "commitName": "266b9b90ab55ed3ffdfd43960309606300db8758",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/3 上午1:37",
      "commitNameOld": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n-public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Exception {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n     ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n     invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n     invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n     invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n     throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[Throwable]",
        "newValue": "[Exception]"
      }
    },
    "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab": {
      "type": "Ybodychange",
      "commitMessage": "Mask checked exceptions as unchecked exceptions in ReflectionUtils\n\nPrior to this commit, ReflectionUtils.handleException() wrapped checked\nexceptions in a TargetExceptionWrapper (a subclass of RuntimeException).\nThis forced clients of ReflectionUtils to manually handle unwrapping of\nchecked exceptions.\n\nThis commit introduces a new throwAsRuntimeException() method in\nReflectionUtils which uses a reflective hack (based on generics and type\nerasure) that tricks the Java compiler into believing that the thrown\nexception is an unchecked exception. This approach allows both checked\nand unchecked exceptions to transparently propagate up the call stack\nwithout forcing callers to explicitly handle checked exceptions. In\naddition, this approach avoids the need to wrap/unwrap checked\nexceptions via the TargetExceptionWrapper.\n\nFurthermore, this commit refactors exception handling code within the\nJUnit 5 engine to use the newly introduced ThrowableCollector API for\nconsistent, simplified tracking of exceptions.\n\nIssue: #64\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nSamuraism, Inc. (http://samuraism.com/) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2016/1/3 上午1:37",
      "commitName": "a1eb11673e2b7e69bc0c4c2f5c5b81cf572dfeab",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016/1/3 上午1:23",
      "commitNameOld": "355d64b574c534f35b4faeae1339b458a0787579",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n    invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n    throwableCollector.assertEmpty();\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    ThrowableCollector throwableCollector \u003d new ThrowableCollector();\n     invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n     invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n-    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n-    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwablesCollector);\n-    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwablesCollector);\n-    throwIfAnyThrowablePresent(throwablesCollector);\n+    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwableCollector);\n+    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwableCollector);\n+    throwableCollector.assertEmpty();\n     return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0027ade00fd483e08714ece1021a7715bb1855da": {
      "type": "Ybodychange",
      "commitMessage": "Added skipping for methods and classes.\nSome duplication and naming issues left.\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nGradleware (https://gradle.org) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/22 下午5:34",
      "commitName": "0027ade00fd483e08714ece1021a7715bb1855da",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/19 上午12:25",
      "commitNameOld": "b2f64779aee87021348c8b8465be89675b700b16",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n    invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n    invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwablesCollector);\n    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwablesCollector);\n    throwIfAnyThrowablePresent(throwablesCollector);\n    return context;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 119,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,11 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n-    TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n-    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n-    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n-    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n-    invokeInstancePostProcessorExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n-    invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n+    TestExtensionContext testExtensionContext \u003d (TestExtensionContext) context.getExtensionContext();\n+    invokeInstancePostProcessorExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n+    invokeBeforeEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext);\n     List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n-    invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n-    invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n+    invokeTestMethod(testExtensionContext, context.getTestExtensionRegistry(), throwablesCollector);\n+    invokeAfterEachExtensionPoints(context.getTestExtensionRegistry(), testExtensionContext, throwablesCollector);\n     throwIfAnyThrowablePresent(throwablesCollector);\n-    return newContext;\n+    return context;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2f64779aee87021348c8b8465be89675b700b16": {
      "type": "Ybodychange",
      "commitMessage": "Built in call to InstancePostProcessor.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/19 上午12:25",
      "commitName": "b2f64779aee87021348c8b8465be89675b700b16",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/18 下午10:47",
      "commitNameOld": "12bbe5afc72f457e5bba4bbcf68c49d6e4b77a4e",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n    invokeInstancePostProcessorExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n    invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n    invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n    invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n    throwIfAnyThrowablePresent(throwablesCollector);\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 92,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n     JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n+    invokeInstancePostProcessorExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n     invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n     List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n     invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n     invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n     throwIfAnyThrowablePresent(throwablesCollector);\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362": {
      "type": "Ybodychange",
      "commitMessage": "Before/AfterAll callbacks work. Before/AfterAll methods not yet.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/18 上午3:54",
      "commitName": "c2d9a533b97ee808e5f51ffd94eb4a0524ff8362",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/17 下午8:48",
      "commitNameOld": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n    invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n    invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n    invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n    throwIfAnyThrowablePresent(throwablesCollector);\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 90,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,13 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n     JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n     invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n     List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n     invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n     invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n-    if (!throwablesCollector.isEmpty()) {\n-        Throwable t \u003d throwablesCollector.get(0);\n-        throwablesCollector.stream().skip(1).forEach(t::addSuppressed);\n-        throw t;\n-    }\n+    throwIfAnyThrowablePresent(throwablesCollector);\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8db7e41d03b3d1f989c458e040f86f7e30e153d7": {
      "type": "Ybodychange",
      "commitMessage": "BeforeEach and AfterEach methods are now registered as ExtensionPoints\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/17 下午8:48",
      "commitName": "8db7e41d03b3d1f989c458e040f86f7e30e153d7",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/15 下午12:45",
      "commitNameOld": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 2.34,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n    invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n    invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n    invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n    if (!throwablesCollector.isEmpty()) {\n        Throwable t \u003d throwablesCollector.get(0);\n        throwablesCollector.stream().skip(1).forEach(t::addSuppressed);\n        throw t;\n    }\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 90,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,17 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n     TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n     JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n     invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n-    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n     invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n-    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwablesCollector);\n     invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n     if (!throwablesCollector.isEmpty()) {\n         Throwable t \u003d throwablesCollector.get(0);\n         throwablesCollector.stream().skip(1).forEach(t::addSuppressed);\n         throw t;\n     }\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8": {
      "type": "Ybodychange",
      "commitMessage": "Fixed double invocation of before/after each extensions in nested tests.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/15 下午12:45",
      "commitName": "b8f87c20c3c0f77bf1051123c9f43cea8eaa8ce8",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/15 上午6:56",
      "commitNameOld": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n    invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n    invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwablesCollector);\n    invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n    if (!throwablesCollector.isEmpty()) {\n        Throwable t \u003d throwablesCollector.get(0);\n        throwablesCollector.stream().skip(1).forEach(t::addSuppressed);\n        throw t;\n    }\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 90,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,19 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n-    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n+    TestExtensionRegistry newTestExtensionRegistry \u003d populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry());\n+    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(newTestExtensionRegistry).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n+    invokeBeforeEachExtensionPoints(newTestExtensionRegistry, testExtensionContext);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n-    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n-    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n-    throwable.ifPresent(throwables::add);\n-    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwables);\n-    if (!throwables.isEmpty()) {\n-        Throwable t \u003d throwables.get(0);\n-        throwables.stream().skip(1).forEach(t::addSuppressed);\n+    List\u003cThrowable\u003e throwablesCollector \u003d new LinkedList\u003c\u003e();\n+    invokeTestMethod(testExtensionContext, newTestExtensionRegistry, throwablesCollector);\n+    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwablesCollector);\n+    invokeAfterEachExtensionPoints(newTestExtensionRegistry, testExtensionContext, throwablesCollector);\n+    if (!throwablesCollector.isEmpty()) {\n+        Throwable t \u003d throwablesCollector.get(0);\n+        throwablesCollector.stream().skip(1).forEach(t::addSuppressed);\n         throw t;\n     }\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee": {
      "type": "Ybodychange",
      "commitMessage": "Some refactoring in exception handling and callback argument names.\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch)\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/15 上午6:56",
      "commitName": "30aa4cfa124dd4d987dcc3cb3aa482ed60108cee",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/13 上午12:55",
      "commitNameOld": "634890bff8f38128db31c244486d257b8ef729d7",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    throwable.ifPresent(throwables::add);\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwables);\n    if (!throwables.isEmpty()) {\n        Throwable t \u003d throwables.get(0);\n        throwables.stream().skip(1).forEach(t::addSuppressed);\n        throw t;\n    }\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 87,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,17 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n     JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n-    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n+    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n+    throwable.ifPresent(throwables::add);\n+    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwables);\n+    if (!throwables.isEmpty()) {\n+        Throwable t \u003d throwables.get(0);\n+        throwables.stream().skip(1).forEach(t::addSuppressed);\n+        throw t;\n+    }\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "634890bff8f38128db31c244486d257b8ef729d7": {
      "type": "Ybodychange",
      "commitMessage": "Added ClassBasedExtensionContext and getParent implementations\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nsynyx GmbH \u0026 Co. KG (http://www.synyx.de) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015/12/13 上午12:55",
      "commitName": "634890bff8f38128db31c244486d257b8ef729d7",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015/12/10 下午9:39",
      "commitNameOld": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 2.14,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 85,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n @Override\n public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n     JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n-    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n+    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(context.getExtensionContext(), this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n     context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3f9c11b9326b7d3051cb2a50568cd91113a0c0da": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "Group discussion renaming results\n",
      "commitDate": "2015/12/10 下午9:39",
      "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Group discussion renaming results\n",
          "commitDate": "2015/12/10 下午9:39",
          "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午6:00",
          "commitNameOld": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.65,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n    return newContext;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 85,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n @Override\n-public JUnit5Context execute(JUnit5Context context) throws Throwable {\n-    JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n+public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n     context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n     return newContext;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-JUnit5Context]",
            "newValue": "[context-JUnit5EngineExecutionContext]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Group discussion renaming results\n",
          "commitDate": "2015/12/10 下午9:39",
          "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午6:00",
          "commitNameOld": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.65,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n    return newContext;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 85,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n @Override\n-public JUnit5Context execute(JUnit5Context context) throws Throwable {\n-    JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n+public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n     context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n     return newContext;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JUnit5Context",
            "newValue": "JUnit5EngineExecutionContext"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Group discussion renaming results\n",
          "commitDate": "2015/12/10 下午9:39",
          "commitName": "3f9c11b9326b7d3051cb2a50568cd91113a0c0da",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/10 上午6:00",
          "commitNameOld": "b67bd2e32f8274fb0972e3a98157e2398140dcbf",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.65,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n    return newContext;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 85,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n @Override\n-public JUnit5Context execute(JUnit5Context context) throws Throwable {\n-    JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n+public JUnit5EngineExecutionContext execute(JUnit5EngineExecutionContext context) throws Throwable {\n+    JUnit5EngineExecutionContext newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n     context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n     return newContext;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "11ece8b11085a01a95a10e7bf26e4eb51034ac00": {
      "type": "Ybodychange",
      "commitMessage": "Inject parameters into @BeforeEach and @AfterEach\n",
      "commitDate": "2015/12/10 上午5:51",
      "commitName": "11ece8b11085a01a95a10e7bf26e4eb51034ac00",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/10 上午5:37",
      "commitNameOld": "fc5ff8d87c124e43601f64da76668e516758a74a",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 85,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,10 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n     JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n-    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(newContext, testExtensionContext);\n+    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(testExtensionContext, newContext.getTestExtensionRegistry());\n     context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n     return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc5ff8d87c124e43601f64da76668e516758a74a": {
      "type": "Ybodychange",
      "commitMessage": "Execute @AfterEach methods in AfterEachCallback\n",
      "commitDate": "2015/12/10 上午5:37",
      "commitName": "fc5ff8d87c124e43601f64da76668e516758a74a",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/10 上午5:16",
      "commitNameOld": "efb867427dd0722262fea5c869ac37cd64ea0070",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(newContext, testExtensionContext);\n    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n    return newContext;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 82,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,10 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n-    JUnit5Context myContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n-    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n-    Object testInstance \u003d provider.getTestInstance();\n+    JUnit5Context newContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n+    Object testInstance \u003d context.getTestInstanceProvider().getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n-    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n-    try {\n-        MethodContext methodContext \u003d new MethodContextImpl(testInstance, testMethod);\n-        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n-    } catch (Throwable t) {\n-        throwables.add(t);\n-    } finally {\n-        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n-            try {\n-                ReflectionUtils.invokeMethod(method, testInstance);\n-            } catch (Throwable t) {\n-                throwables.add(t);\n-            }\n-        }\n-    }\n-    if (throwables.isEmpty()) {\n-        return myContext;\n-    }\n-    Throwable t \u003d throwables.get(0);\n-    throwables.stream().skip(1).forEach(t::addSuppressed);\n-    throw t;\n+    Optional\u003cThrowable\u003e throwable \u003d invokeTestMethod(newContext, testExtensionContext);\n+    context.getAfterEachCallback().afterEach(testExtensionContext, testInstance, throwable);\n+    return newContext;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "efb867427dd0722262fea5c869ac37cd64ea0070": {
      "type": "Ybodychange",
      "commitMessage": "Use Builder pattern to extend JUnit5Context\n",
      "commitDate": "2015/12/10 上午5:16",
      "commitName": "efb867427dd0722262fea5c869ac37cd64ea0070",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/10 上午4:34",
      "commitNameOld": "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    JUnit5Context myContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        MethodContext methodContext \u003d new MethodContextImpl(testInstance, testMethod);\n        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return myContext;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 89,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n-    JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n+    JUnit5Context myContext \u003d context.extend().withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry())).build();\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n     context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n         MethodContext methodContext \u003d new MethodContextImpl(testInstance, testMethod);\n         new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return myContext;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3cbb596f9b35b903e29675841eb20ab97e8cbb88": {
      "type": "Ybodychange",
      "commitMessage": "Add MethodContext param to MethodParameterResolver\n",
      "commitDate": "2015/12/10 上午4:34",
      "commitName": "3cbb596f9b35b903e29675841eb20ab97e8cbb88",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/9 下午9:44",
      "commitNameOld": "1707de270bd5f59f4e93e080ef56e6f6460d03da",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        MethodContext methodContext \u003d new MethodContextImpl(testInstance, testMethod);\n        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return myContext;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 89,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,29 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n     JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n-    context.getBeforeEachCallback().beforeEach(testInstance);\n+    TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n+    context.getBeforeEachCallback().beforeEach(testExtensionContext, testInstance);\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n-        TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n-        new MethodInvoker(testMethod, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n+        MethodContext methodContext \u003d new MethodContextImpl(testInstance, testMethod);\n+        new MethodInvoker(methodContext, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return myContext;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1707de270bd5f59f4e93e080ef56e6f6460d03da": {
      "type": "Ybodychange",
      "commitMessage": "Separate ExtensionContext and subclasses\n",
      "commitDate": "2015/12/9 下午9:44",
      "commitName": "1707de270bd5f59f4e93e080ef56e6f6460d03da",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2015/12/9 下午9:06",
      "commitNameOld": "67ec62513564b48741925f79132f3fe6427e48b3",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    context.getBeforeEachCallback().beforeEach(testInstance);\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n        new MethodInvoker(testMethod, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return myContext;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 88,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n     JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     context.getBeforeEachCallback().beforeEach(testInstance);\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n-        TestExecutionContext testExecutionContext \u003d new TestExecutionContextImpl(this, myContext);\n-        new MethodInvoker(testMethod, testInstance, testExecutionContext).invoke();\n+        TestExtensionContext testExtensionContext \u003d new MethodBasedTestExtensionContext(this, testInstance);\n+        new MethodInvoker(testMethod, testExtensionContext, myContext.getTestExtensionRegistry()).invoke();\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return myContext;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "67ec62513564b48741925f79132f3fe6427e48b3": {
      "type": "Ybodychange",
      "commitMessage": "Populate TestExtensionRegistry in JUnit5Context and call MethodParameterResolver\n",
      "commitDate": "2015/12/9 下午9:06",
      "commitName": "67ec62513564b48741925f79132f3fe6427e48b3",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/9 下午6:56",
      "commitNameOld": "fa681a536942811f712ca91be70f5510ca472020",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    context.getBeforeEachCallback().beforeEach(testInstance);\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        TestExecutionContext testExecutionContext \u003d new TestExecutionContextImpl(this, myContext);\n        new MethodInvoker(testMethod, testInstance, testExecutionContext).invoke();\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return myContext;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 84,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,28 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n+    JUnit5Context myContext \u003d context.withTestExtensionRegistry(populateNewTestExtensionRegistryFromExtendWith(testMethod, context.getTestExtensionRegistry()));\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     context.getBeforeEachCallback().beforeEach(testInstance);\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n-        ReflectionUtils.invokeMethod(testMethod, testInstance);\n+        TestExecutionContext testExecutionContext \u003d new TestExecutionContextImpl(this, myContext);\n+        new MethodInvoker(testMethod, testInstance, testExecutionContext).invoke();\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n-        return context;\n+        return myContext;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fa681a536942811f712ca91be70f5510ca472020": {
      "type": "Ybodychange",
      "commitMessage": "Doubly nested @BeforeEach works\n",
      "commitDate": "2015/12/9 下午6:56",
      "commitName": "fa681a536942811f712ca91be70f5510ca472020",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015/12/9 下午5:08",
      "commitNameOld": "470866bc19cac8717ac77b26efc1fe703bed264a",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    context.getBeforeEachCallback().beforeEach(testInstance);\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(testMethod, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
      "functionStartLine": 82,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,26 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n-    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n-        ReflectionUtils.invokeMethod(method, testInstance);\n-    }\n+    context.getBeforeEachCallback().beforeEach(testInstance);\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n         ReflectionUtils.invokeMethod(testMethod, testInstance);\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return context;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "470866bc19cac8717ac77b26efc1fe703bed264a": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Reincarnate existing SpecificationResolver\n",
      "commitDate": "2015/12/9 下午5:08",
      "commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
      "commitAuthor": "JUnit Team",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Reincarnate existing SpecificationResolver\n",
          "commitDate": "2015/12/9 下午5:08",
          "commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
          "commitAuthor": "JUnit Team",
          "commitDateOld": "2015/12/8 下午9:55",
          "commitNameOld": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    }\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(testMethod, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 83,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     }\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n-        ReflectionUtils.invokeMethod(method, testInstance);\n+        ReflectionUtils.invokeMethod(testMethod, testInstance);\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return context;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5MethodDescriptor.java",
            "newPath": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Reincarnate existing SpecificationResolver\n",
          "commitDate": "2015/12/9 下午5:08",
          "commitName": "470866bc19cac8717ac77b26efc1fe703bed264a",
          "commitAuthor": "JUnit Team",
          "commitDateOld": "2015/12/8 下午9:55",
          "commitNameOld": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.8,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    }\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(testMethod, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/MethodTestDescriptor.java",
          "functionStartLine": 83,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n public JUnit5Context execute(JUnit5Context context) throws Throwable {\n     TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     }\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n-        ReflectionUtils.invokeMethod(method, testInstance);\n+        ReflectionUtils.invokeMethod(testMethod, testInstance);\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return context;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "57b31220d25f59bb4aa4903dfee4b8ec2be4525e": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "TestEngine-specific context using type parameter\n",
      "commitDate": "2015/12/8 下午9:55",
      "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "TestEngine-specific context using type parameter\n",
          "commitDate": "2015/12/8 下午9:55",
          "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/8 下午9:32",
          "commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    }\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5MethodDescriptor.java",
          "functionStartLine": 53,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n-public Context execute(Context context) throws Throwable {\n-    TestInstanceProvider provider \u003d context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+public JUnit5Context execute(JUnit5Context context) throws Throwable {\n+    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     }\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return context;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-Context]",
            "newValue": "[context-JUnit5Context]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "TestEngine-specific context using type parameter\n",
          "commitDate": "2015/12/8 下午9:55",
          "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/8 下午9:32",
          "commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    }\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5MethodDescriptor.java",
          "functionStartLine": 53,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n-public Context execute(Context context) throws Throwable {\n-    TestInstanceProvider provider \u003d context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+public JUnit5Context execute(JUnit5Context context) throws Throwable {\n+    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     }\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return context;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Context",
            "newValue": "JUnit5Context"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "TestEngine-specific context using type parameter\n",
          "commitDate": "2015/12/8 下午9:55",
          "commitName": "57b31220d25f59bb4aa4903dfee4b8ec2be4525e",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015/12/8 下午9:32",
          "commitNameOld": "28ffd5ee9d1e996133445cac2256407f28380e91",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JUnit5Context execute(JUnit5Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n    Object testInstance \u003d provider.getTestInstance();\n    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    }\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
          "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5MethodDescriptor.java",
          "functionStartLine": 53,
          "functionName": "execute",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,28 +1,28 @@\n @Override\n-public Context execute(Context context) throws Throwable {\n-    TestInstanceProvider provider \u003d context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+public JUnit5Context execute(JUnit5Context context) throws Throwable {\n+    TestInstanceProvider provider \u003d context.getTestInstanceProvider();\n     Object testInstance \u003d provider.getTestInstance();\n     for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     }\n     List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n     try {\n         ReflectionUtils.invokeMethod(method, testInstance);\n     } catch (Throwable t) {\n         throwables.add(t);\n     } finally {\n         for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n             try {\n                 ReflectionUtils.invokeMethod(method, testInstance);\n             } catch (Throwable t) {\n                 throwables.add(t);\n             }\n         }\n     }\n     if (throwables.isEmpty()) {\n         return context;\n     }\n     Throwable t \u003d throwables.get(0);\n     throwables.stream().skip(1).forEach(t::addSuppressed);\n     throw t;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28ffd5ee9d1e996133445cac2256407f28380e91": {
      "type": "Yintroduced",
      "commitMessage": "Spike tree-based \"implementation\" of JUnit5 engine\n",
      "commitDate": "2015/12/8 下午9:32",
      "commitName": "28ffd5ee9d1e996133445cac2256407f28380e91",
      "commitAuthor": "Marc Philipp",
      "diff": "@@ -0,0 +1,28 @@\n+@Override\n+public Context execute(Context context) throws Throwable {\n+    TestInstanceProvider provider \u003d context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n+    Object testInstance \u003d provider.getTestInstance();\n+    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n+        ReflectionUtils.invokeMethod(method, testInstance);\n+    }\n+    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n+    try {\n+        ReflectionUtils.invokeMethod(method, testInstance);\n+    } catch (Throwable t) {\n+        throwables.add(t);\n+    } finally {\n+        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n+            try {\n+                ReflectionUtils.invokeMethod(method, testInstance);\n+            } catch (Throwable t) {\n+                throwables.add(t);\n+            }\n+        }\n+    }\n+    if (throwables.isEmpty()) {\n+        return context;\n+    }\n+    Throwable t \u003d throwables.get(0);\n+    throwables.stream().skip(1).forEach(t::addSuppressed);\n+    throw t;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic Context execute(Context context) throws Throwable {\n    TestInstanceProvider provider \u003d context.get(\"TestInstanceProvider\", TestInstanceProvider.class);\n    Object testInstance \u003d provider.getTestInstance();\n    for (Method method : findAnnotatedMethods(testClass, BeforeEach.class, MethodSortOrder.HierarchyDown)) {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    }\n    List\u003cThrowable\u003e throwables \u003d new LinkedList\u003c\u003e();\n    try {\n        ReflectionUtils.invokeMethod(method, testInstance);\n    } catch (Throwable t) {\n        throwables.add(t);\n    } finally {\n        for (Method method : findAnnotatedMethods(testClass, AfterEach.class, MethodSortOrder.HierarchyUp)) {\n            try {\n                ReflectionUtils.invokeMethod(method, testInstance);\n            } catch (Throwable t) {\n                throwables.add(t);\n            }\n        }\n    }\n    if (throwables.isEmpty()) {\n        return context;\n    }\n    Throwable t \u003d throwables.get(0);\n    throwables.stream().skip(1).forEach(t::addSuppressed);\n    throw t;\n}",
      "path": "junit5-engine/src/main/java/org/junit/gen5/engine/junit5/JUnit5MethodDescriptor.java",
      "functionStartLine": 45,
      "functionName": "execute",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}