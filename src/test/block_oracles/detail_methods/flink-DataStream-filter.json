{
  "origin": "codeshovel",
  "repositoryName": "flink",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/flink/.git",
  "startCommitName": "9e936a5f8198b0059e9b5fba33163c2bbe3efbdd",
  "sourceFileName": "DataStream.java",
  "functionName": "filter",
  "functionId": "filter___filter-FilterFunction__T__",
  "sourceFilePath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
  "functionAnnotation": "",
  "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
  "functionStartLine": 685,
  "functionEndLine": 688,
  "numCommitsSeen": 1135,
  "timeTaken": 9332,
  "changeHistory": [
    "a922473c0835a757e7108c79ad52f103ace86030",
    "2714aaf3d47705401f422a09619f09d2a90bf185",
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
    "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
    "bc7f6d9e5b6d5d4788daf6f96a0e2f56055da06a",
    "4754a97b19c96647886a46131750db26a0b5f618",
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
    "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e",
    "34353f6658e9a4dd50ad860e17eee94804b76ccb",
    "5f7800702ad1762eef4d2a25b09615f65bf3761c",
    "51c1f67791307c2b9355171f7398d104befc8de5",
    "a221796e260133795624d057c430616be66756e2",
    "ba44459f66f3a73b831da5ae807775faf4843b06",
    "1b046f4e334926e560456c2b2ef3b67e635e4700",
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
    "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
    "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db",
    "776bd3f6dbfd85db978ff4d5785935a19f43d77b",
    "799424d1a3237a8d1b32451f4b3ad23b342cf59e",
    "5d72dd496cdad903dff455bbf510cbff68e4d21f",
    "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb",
    "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5",
    "12e52f8ac430c00ed38096944e50db1e185f3567",
    "5b05ca635d1a661bf2be3baf60159d84834a9942",
    "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
    "33884df84a9ec461b5c27233bc4859c0bb039ec8",
    "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc",
    "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd",
    "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
    "90df95391049122969c39332bfd4ed852dba6ea0",
    "f5cda1b459bc9459df4d124d4d8c7d4072e7c528",
    "2b831022d76c8a7ae9fbd96b4e4eecde9bbf311b",
    "74ac9d499f72919033035f67f7b7771270a8c966",
    "f0c57317634a5d803e64494a5d2f4133c1cf9a3b",
    "4363991c20959421314d1249a1e78ad764371d66",
    "cdce868a156f9630978aedbdfc4eed582a055862",
    "b44650b0ed0d4e7c900a0682a4a805ed7abeca04",
    "086d1a72b38a8ec0a5e4300a02daf4097e0897f3",
    "916b1eb94ad63be2f1b028be9f2e0fe86c17bdb3",
    "e02b72963bb57050245291ea8aaef0eedf37ffdf",
    "75d94931ef45fb95cd59195ef99578654c47c227",
    "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
    "4728eb9d9cfe640495e3edea80238e2c93f11522",
    "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29",
    "b2f8f6e10ad8a36a92928185b23827944990748a",
    "e416f39f1f78d4589badaa6d5ab6e33a5002548a",
    "a2cabbb7ce1d0d12218934c5c58c67f89cd0bef0",
    "a31df65316aa54662515ddf4f95de71b87c64476",
    "9b49450045e4f6fc436818470f9a8b5bc95eba15",
    "b0219bbaad12f00820bfbe7c16d231cb42b6eebc",
    "90281974bd9ba155164356bd17265198db4091d5",
    "0ede93947d36ec176df8ee80bfe7eda5198a0578",
    "f08d55d0a5d45e3976a144f776ee8abeddbd34a4",
    "b6a17eb9dc4251cdb91dd7f9f64ac20e467d2d73",
    "c3fe7358429b96fca5c7604d6f780a214f1957a0",
    "54a66d7aac74083612510b8e4a03c9de3e7e8aab",
    "7b7ac3d09b7769c4c13961abb4f51c58895e8e3d",
    "7345bf6a330d6cba0f8f0f72761ff05e23543581",
    "f60f28678e619eaf0448357f3177eae59be9d7bc",
    "b39305f864b40eaf52d5a799edb09c7b898095b0",
    "697eb774e84b43e9b7cfef07fe812a05e1a836ce",
    "3e93ea6d5f2ac89d4df9d55642f1d0e80418d26f",
    "3e337a0435c0980d4780e706f98a92f3e12d1fd5",
    "f8425f1d1e9c6846a684bd2745623b14b11ddd51"
  ],
  "changeHistoryShort": {
    "a922473c0835a757e7108c79ad52f103ace86030": "Yreturntypechange",
    "2714aaf3d47705401f422a09619f09d2a90bf185": "Ybodychange",
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876": "Yfilerename",
    "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "bc7f6d9e5b6d5d4788daf6f96a0e2f56055da06a": "Ydocchange",
    "4754a97b19c96647886a46131750db26a0b5f618": "Ybodychange",
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": "Yfilerename",
    "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e": "Ybodychange",
    "34353f6658e9a4dd50ad860e17eee94804b76ccb": "Ybodychange",
    "5f7800702ad1762eef4d2a25b09615f65bf3761c": "Ybodychange",
    "51c1f67791307c2b9355171f7398d104befc8de5": "Ybodychange",
    "a221796e260133795624d057c430616be66756e2": "Ydocchange",
    "ba44459f66f3a73b831da5ae807775faf4843b06": "Ydocchange",
    "1b046f4e334926e560456c2b2ef3b67e635e4700": "Ybodychange",
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
    "e73ea29593cdb8b4d9a11137b2188ca72673e98c": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db": "Yreturntypechange",
    "776bd3f6dbfd85db978ff4d5785935a19f43d77b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "799424d1a3237a8d1b32451f4b3ad23b342cf59e": "Ybodychange",
    "5d72dd496cdad903dff455bbf510cbff68e4d21f": "Ybodychange",
    "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb": "Yreturntypechange",
    "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5": "Yfilerename",
    "12e52f8ac430c00ed38096944e50db1e185f3567": "Yfilerename",
    "5b05ca635d1a661bf2be3baf60159d84834a9942": "Ymultichange(Yfilerename,Ybodychange,Ydocchange,Yparameterchange)",
    "65d0e3245ece52c70505c40e56bd49ea93e0a15f": "Ymultichange(Yfilerename,Ybodychange,Ydocchange,Yparameterchange)",
    "33884df84a9ec461b5c27233bc4859c0bb039ec8": "Ydocchange",
    "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc": "Ymultichange(Ybodychange,Ydocchange)",
    "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd": "Ymultichange(Ybodychange,Ydocchange)",
    "47e2c8210930a5eb57fba3eebdf9afef07772ae3": "Ymultichange(Yfilerename,Ybodychange,Ydocchange,Yparameterchange)",
    "90df95391049122969c39332bfd4ed852dba6ea0": "Ymultichange(Yfilerename,Ydocchange)",
    "f5cda1b459bc9459df4d124d4d8c7d4072e7c528": "Ymultichange(Yfilerename,Ydocchange)",
    "2b831022d76c8a7ae9fbd96b4e4eecde9bbf311b": "Yfilerename",
    "74ac9d499f72919033035f67f7b7771270a8c966": "Yfilerename",
    "f0c57317634a5d803e64494a5d2f4133c1cf9a3b": "Yfilerename",
    "4363991c20959421314d1249a1e78ad764371d66": "Yfilerename",
    "cdce868a156f9630978aedbdfc4eed582a055862": "Yfilerename",
    "b44650b0ed0d4e7c900a0682a4a805ed7abeca04": "Yfilerename",
    "086d1a72b38a8ec0a5e4300a02daf4097e0897f3": "Yfilerename",
    "916b1eb94ad63be2f1b028be9f2e0fe86c17bdb3": "Yfilerename",
    "e02b72963bb57050245291ea8aaef0eedf37ffdf": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "75d94931ef45fb95cd59195ef99578654c47c227": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "4728eb9d9cfe640495e3edea80238e2c93f11522": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "b2f8f6e10ad8a36a92928185b23827944990748a": "Yfilerename",
    "e416f39f1f78d4589badaa6d5ab6e33a5002548a": "Yfilerename",
    "a2cabbb7ce1d0d12218934c5c58c67f89cd0bef0": "Yfilerename",
    "a31df65316aa54662515ddf4f95de71b87c64476": "Yfilerename",
    "9b49450045e4f6fc436818470f9a8b5bc95eba15": "Yfilerename",
    "b0219bbaad12f00820bfbe7c16d231cb42b6eebc": "Yfilerename",
    "90281974bd9ba155164356bd17265198db4091d5": "Ydocchange",
    "0ede93947d36ec176df8ee80bfe7eda5198a0578": "Ydocchange",
    "f08d55d0a5d45e3976a144f776ee8abeddbd34a4": "Ydocchange",
    "b6a17eb9dc4251cdb91dd7f9f64ac20e467d2d73": "Ydocchange",
    "c3fe7358429b96fca5c7604d6f780a214f1957a0": "Ydocchange",
    "54a66d7aac74083612510b8e4a03c9de3e7e8aab": "Ydocchange",
    "7b7ac3d09b7769c4c13961abb4f51c58895e8e3d": "Ybodychange",
    "7345bf6a330d6cba0f8f0f72761ff05e23543581": "Ydocchange",
    "f60f28678e619eaf0448357f3177eae59be9d7bc": "Ydocchange",
    "b39305f864b40eaf52d5a799edb09c7b898095b0": "Ymultichange(Yparameterchange,Ybodychange)",
    "697eb774e84b43e9b7cfef07fe812a05e1a836ce": "Ybodychange",
    "3e93ea6d5f2ac89d4df9d55642f1d0e80418d26f": "Ybodychange",
    "3e337a0435c0980d4780e706f98a92f3e12d1fd5": "Ybodychange",
    "f8425f1d1e9c6846a684bd2745623b14b11ddd51": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a922473c0835a757e7108c79ad52f103ace86030": {
      "type": "Yreturntypechange",
      "commitMessage": "[FLINK-3548] [api-breaking] Remove unnecessary generic parameter from SingleOutputStreamOperator\n",
      "commitDate": "2016/3/1 上午4:37",
      "commitName": "a922473c0835a757e7108c79ad52f103ace86030",
      "commitAuthor": "Aljoscha Krettek",
      "commitDateOld": "2016/3/1 上午3:29",
      "commitNameOld": "9922d10a0f3e291bb7e6f75ccb70baecb5c2bcd9",
      "commitAuthorOld": "Aljoscha Krettek",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003c\u003e(clean(filter)));\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 550,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n-public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n+public SingleOutputStreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n     return transform(\"Filter\", getType(), new StreamFilter\u003c\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "SingleOutputStreamOperator\u003cT,?\u003e",
        "newValue": "SingleOutputStreamOperator\u003cT\u003e"
      }
    },
    "2714aaf3d47705401f422a09619f09d2a90bf185": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-3296] Remove \u0027flushing\u0027 behavior of the OutputFormat support of the DataStream API\n\nThis closes #1563\n",
      "commitDate": "2016/2/16 下午10:52",
      "commitName": "2714aaf3d47705401f422a09619f09d2a90bf185",
      "commitAuthor": "Robert Metzger",
      "commitDateOld": "2016/2/10 下午6:51",
      "commitNameOld": "572855daad452eab169bc2ca27f9f1e4476df656",
      "commitAuthorOld": "Fabian Hueske",
      "daysBetweenCommits": 6.17,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003c\u003e(clean(filter)));\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 602,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n+    return transform(\"Filter\", getType(), new StreamFilter\u003c\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "06f6ac5d3edbc8dd20baf6e1b30900c189a68876": {
      "type": "Yfilerename",
      "commitMessage": "[FLINK-2877] Move Streaming API out of Staging package\n",
      "commitDate": "2015/10/21 下午5:01",
      "commitName": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
      "commitAuthor": "Rufus Refactor",
      "commitDateOld": "2015/10/21 下午4:35",
      "commitNameOld": "42a3d8cfa9eacc19ac04004b256b6eb51422b523",
      "commitAuthorOld": "Maximilian Michels",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n}",
      "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 595,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
        "newPath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java"
      }
    },
    "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "[FLINK-2398][api-breaking] Introduce StreamGraphGenerator\n\nThis decouples the building of the StreamGraph from the API methods.\nBefore the methods would build the StreamGraph as they go. Now the API\nmethods build a hierachy of StreamTransformation nodes. From these a\nStreamGraph is generated upon execution.\n\nThis also introduces some API breaking changes:\n\n - The result of methods that create sinks is now DataStreamSink instead\n   of DataStream\n - Iterations cannot have feedback edges with differing parallelism\n - \"Preserve partitioning\" is not the default for feedback edges. The\n   previous option for this is removed.\n - You can close an iteration several times, no need for a union.\n - Strict checking of whether partitioning and parallelism work\n   together. I.e. if upstream and downstream parallelism don\u0027t match it\n   is not legal to have Forward partitioning anymore. This was not very\n   transparent: When you went from low parallelism to high dop some\n   downstream  operators would never get any input. When you went from high\n   parallelism to low dop you would get skew in the downstream operators\n   because all elements that would be forwarded to an operator that is not\n   \"there\" go to another operator. This requires insertion of global()\n   or rebalance() in some places. For example with most sources which\n   have parallelism one.\n\nThis also makes StreamExecutionEnvironment.execute() behave consistently\nacross different execution environments (local, remote ...): The list of\noperators to be executed are cleared after execute is called.\n",
      "commitDate": "2015/8/19 下午11:53",
      "commitName": "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
      "commitAuthor": "Aljoscha Krettek",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[FLINK-2398][api-breaking] Introduce StreamGraphGenerator\n\nThis decouples the building of the StreamGraph from the API methods.\nBefore the methods would build the StreamGraph as they go. Now the API\nmethods build a hierachy of StreamTransformation nodes. From these a\nStreamGraph is generated upon execution.\n\nThis also introduces some API breaking changes:\n\n - The result of methods that create sinks is now DataStreamSink instead\n   of DataStream\n - Iterations cannot have feedback edges with differing parallelism\n - \"Preserve partitioning\" is not the default for feedback edges. The\n   previous option for this is removed.\n - You can close an iteration several times, no need for a union.\n - Strict checking of whether partitioning and parallelism work\n   together. I.e. if upstream and downstream parallelism don\u0027t match it\n   is not legal to have Forward partitioning anymore. This was not very\n   transparent: When you went from low parallelism to high dop some\n   downstream  operators would never get any input. When you went from high\n   parallelism to low dop you would get skew in the downstream operators\n   because all elements that would be forwarded to an operator that is not\n   \"there\" go to another operator. This requires insertion of global()\n   or rebalance() in some places. For example with most sources which\n   have parallelism one.\n\nThis also makes StreamExecutionEnvironment.execute() behave consistently\nacross different execution environments (local, remote ...): The list of\noperators to be executed are cleared after execute is called.\n",
          "commitDate": "2015/8/19 下午11:53",
          "commitName": "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2015/8/11 下午6:08",
          "commitNameOld": "b42fbf7a81c5b57dcf9760825edb175ffd944fb2",
          "commitAuthorOld": "HuangWHWHW",
          "daysBetweenCommits": 8.24,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 645,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return transform(\"Filter\", getType(), new StreamFilter\u003cOUT\u003e(clean(filter)));\n+public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cOUT\u003e]",
            "newValue": "[filter-FilterFunction\u003cT\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "[FLINK-2398][api-breaking] Introduce StreamGraphGenerator\n\nThis decouples the building of the StreamGraph from the API methods.\nBefore the methods would build the StreamGraph as they go. Now the API\nmethods build a hierachy of StreamTransformation nodes. From these a\nStreamGraph is generated upon execution.\n\nThis also introduces some API breaking changes:\n\n - The result of methods that create sinks is now DataStreamSink instead\n   of DataStream\n - Iterations cannot have feedback edges with differing parallelism\n - \"Preserve partitioning\" is not the default for feedback edges. The\n   previous option for this is removed.\n - You can close an iteration several times, no need for a union.\n - Strict checking of whether partitioning and parallelism work\n   together. I.e. if upstream and downstream parallelism don\u0027t match it\n   is not legal to have Forward partitioning anymore. This was not very\n   transparent: When you went from low parallelism to high dop some\n   downstream  operators would never get any input. When you went from high\n   parallelism to low dop you would get skew in the downstream operators\n   because all elements that would be forwarded to an operator that is not\n   \"there\" go to another operator. This requires insertion of global()\n   or rebalance() in some places. For example with most sources which\n   have parallelism one.\n\nThis also makes StreamExecutionEnvironment.execute() behave consistently\nacross different execution environments (local, remote ...): The list of\noperators to be executed are cleared after execute is called.\n",
          "commitDate": "2015/8/19 下午11:53",
          "commitName": "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2015/8/11 下午6:08",
          "commitNameOld": "b42fbf7a81c5b57dcf9760825edb175ffd944fb2",
          "commitAuthorOld": "HuangWHWHW",
          "daysBetweenCommits": 8.24,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 645,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return transform(\"Filter\", getType(), new StreamFilter\u003cOUT\u003e(clean(filter)));\n+public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "SingleOutputStreamOperator\u003cOUT,?\u003e",
            "newValue": "SingleOutputStreamOperator\u003cT,?\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[FLINK-2398][api-breaking] Introduce StreamGraphGenerator\n\nThis decouples the building of the StreamGraph from the API methods.\nBefore the methods would build the StreamGraph as they go. Now the API\nmethods build a hierachy of StreamTransformation nodes. From these a\nStreamGraph is generated upon execution.\n\nThis also introduces some API breaking changes:\n\n - The result of methods that create sinks is now DataStreamSink instead\n   of DataStream\n - Iterations cannot have feedback edges with differing parallelism\n - \"Preserve partitioning\" is not the default for feedback edges. The\n   previous option for this is removed.\n - You can close an iteration several times, no need for a union.\n - Strict checking of whether partitioning and parallelism work\n   together. I.e. if upstream and downstream parallelism don\u0027t match it\n   is not legal to have Forward partitioning anymore. This was not very\n   transparent: When you went from low parallelism to high dop some\n   downstream  operators would never get any input. When you went from high\n   parallelism to low dop you would get skew in the downstream operators\n   because all elements that would be forwarded to an operator that is not\n   \"there\" go to another operator. This requires insertion of global()\n   or rebalance() in some places. For example with most sources which\n   have parallelism one.\n\nThis also makes StreamExecutionEnvironment.execute() behave consistently\nacross different execution environments (local, remote ...): The list of\noperators to be executed are cleared after execute is called.\n",
          "commitDate": "2015/8/19 下午11:53",
          "commitName": "bac21bf5d77c8e15c608ecbf006d29e7af1dd68a",
          "commitAuthor": "Aljoscha Krettek",
          "commitDateOld": "2015/8/11 下午6:08",
          "commitNameOld": "b42fbf7a81c5b57dcf9760825edb175ffd944fb2",
          "commitAuthorOld": "HuangWHWHW",
          "daysBetweenCommits": 8.24,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n}",
          "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 645,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return transform(\"Filter\", getType(), new StreamFilter\u003cOUT\u003e(clean(filter)));\n+public SingleOutputStreamOperator\u003cT, ?\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return transform(\"Filter\", getType(), new StreamFilter\u003cT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bc7f6d9e5b6d5d4788daf6f96a0e2f56055da06a": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Fixing some javadoc typos\n",
      "commitDate": "2015/6/3 下午5:00",
      "commitName": "bc7f6d9e5b6d5d4788daf6f96a0e2f56055da06a",
      "commitAuthor": "szape",
      "commitDateOld": "2015/5/29 下午9:08",
      "commitNameOld": "0930179f41dec179cb60882f699ee4ce8ba34d61",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003cOUT\u003e(clean(filter)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 601,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
        "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataStream.\n@return The filtered DataStream.\n"
      }
    },
    "4754a97b19c96647886a46131750db26a0b5f618": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Major internal renaming and restructure\n\nCloses #594\n",
      "commitDate": "2015/4/15 下午5:35",
      "commitName": "4754a97b19c96647886a46131750db26a0b5f618",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2015/4/15 下午1:41",
      "commitNameOld": "f1b445b0eb481d2f66d1a8598dd10af16c101f18",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return transform(\"Filter\", getType(), new StreamFilter\u003cOUT\u003e(clean(filter)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 594,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return transform(\"Filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n+    return transform(\"Filter\", getType(), new StreamFilter\u003cOUT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7": {
      "type": "Yfilerename",
      "commitMessage": "[FLINK-1452] Rename \u0027flink-addons\u0027 to \u0027flink-staging\u0027\n",
      "commitDate": "2015/2/3 上午2:40",
      "commitName": "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
      "commitAuthor": "Robert Metzger",
      "commitDateOld": "2015/2/2 上午7:27",
      "commitNameOld": "563e546236217dace58a8031d56d08a27e08160b",
      "commitAuthorOld": "zentol",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return transform(\"Filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n}",
      "path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 530,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
        "newPath": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java"
      }
    },
    "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1434] [FLINK-1401] Streaming support added for webclient\n\nCloses #334\n",
      "commitDate": "2015/1/28 上午6:31",
      "commitName": "82c420022ef3ffe3d7ad2172b4338ed12baf9e0e",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2015/1/28 上午4:42",
      "commitNameOld": "b263932e2e246824fa5e7538e62f39a53b5e9c17",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return transform(\"Filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 530,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return transform(\"filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n+    return transform(\"Filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34353f6658e9a4dd50ad860e17eee94804b76ccb": {
      "type": "Ybodychange",
      "commitMessage": "[scala] [streaming] Base functionality added for streaming scala api\n",
      "commitDate": "2015/1/3 上午1:34",
      "commitName": "34353f6658e9a4dd50ad860e17eee94804b76ccb",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2014/12/19 上午3:07",
      "commitNameOld": "c5e9a512242e050b71635cacaaca7890fadc6b67",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 14.94,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return transform(\"filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 459,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return addFunction(\"filter\", clean(filter), getType(), getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n+    return transform(\"filter\", getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5f7800702ad1762eef4d2a25b09615f65bf3761c": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1325] [streaming] Added clousure cleaning to streaming\n\nThis closes #273\n",
      "commitDate": "2014/12/18 上午3:34",
      "commitName": "5f7800702ad1762eef4d2a25b09615f65bf3761c",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/12/18 上午12:02",
      "commitNameOld": "fbd006051aa5a72cfebda9d8dfc50dc494b4c4ac",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return addFunction(\"filter\", clean(filter), getType(), getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 463,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return addFunction(\"filter\", filter, getType(), getType(), new FilterInvokable\u003cOUT\u003e(filter));\n+    return addFunction(\"filter\", clean(filter), getType(), getType(), new FilterInvokable\u003cOUT\u003e(clean(filter)));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "51c1f67791307c2b9355171f7398d104befc8de5": {
      "type": "Ybodychange",
      "commitMessage": "[FLINK-1161] [streaming] Streaming API type handling rework to support java 8 lambdas\n",
      "commitDate": "2014/12/10 下午8:27",
      "commitName": "51c1f67791307c2b9355171f7398d104befc8de5",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2014/12/5 下午11:47",
      "commitNameOld": "4e046a9bd43428820a409a0777ab281e3c366af5",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return addFunction(\"filter\", filter, getType(), getType(), new FilterInvokable\u003cOUT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 449,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,4 +1,3 @@\n public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    FunctionTypeWrapper\u003cOUT\u003e typeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(filter, FilterFunction.class, 0);\n-    return addFunction(\"filter\", filter, typeWrapper, typeWrapper, new FilterInvokable\u003cOUT\u003e(filter));\n+    return addFunction(\"filter\", filter, getType(), getType(), new FilterInvokable\u003cOUT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a221796e260133795624d057c430616be66756e2": {
      "type": "Ydocchange",
      "commitMessage": "[FLINK-1175] [streaming] GroupBy updated to allow multiple field and keyselector groupings\n",
      "commitDate": "2014/10/27 下午7:23",
      "commitName": "a221796e260133795624d057c430616be66756e2",
      "commitAuthor": "Gyula Fora",
      "commitDateOld": "2014/10/27 下午7:23",
      "commitNameOld": "5e29f681eeaa8d8b6533bd7f6f0bd8800443543c",
      "commitAuthorOld": "balidani",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    FunctionTypeWrapper\u003cOUT\u003e typeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(filter, FilterFunction.class, 0);\n    return addFunction(\"filter\", filter, typeWrapper, typeWrapper, new FilterInvokable\u003cOUT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 754,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
        "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the\n{@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n"
      }
    },
    "ba44459f66f3a73b831da5ae807775faf4843b06": {
      "type": "Ydocchange",
      "commitMessage": "Fix the Javadoc link in DataStream class\n\nFix the Javadoc link for org.apache.flink.api.common.functions.RichFunction and missing method reference in DataStream class.\n\nAuthor: Henry Saputra \u003chenry.saputra@gmail.com\u003e\n\nCloses #154 from hsaputra/fix_comments_streaming and squashes the following commits:\n\n127e47a [Henry Saputra] Fix the Javadoc link for org.apache.flink.api.common.functions.RichFunction and missing method reference.\n",
      "commitDate": "2014/10/18 上午7:37",
      "commitName": "ba44459f66f3a73b831da5ae807775faf4843b06",
      "commitAuthor": "Henry Saputra",
      "commitDateOld": "2014/10/1 下午11:11",
      "commitNameOld": "127470b85dbff9d9c3e57502f387fee97f5935f7",
      "commitAuthorOld": "Gyula Fora",
      "daysBetweenCommits": 16.35,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    FunctionTypeWrapper\u003cOUT\u003e typeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(filter, FilterFunction.class, 0);\n    return addFunction(\"filter\", filter, typeWrapper, typeWrapper, new FilterInvokable\u003cOUT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 688,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
        "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link org.apache.flink.api.common.functions.RichFunction} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n"
      }
    },
    "1b046f4e334926e560456c2b2ef3b67e635e4700": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Refactored stream components with InputHandler \u0026 OutputHandler\n",
      "commitDate": "2014/8/30 上午3:01",
      "commitName": "1b046f4e334926e560456c2b2ef3b67e635e4700",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/19 上午12:48",
      "commitNameOld": "923b508d18fdf471c0c74a263bc6c93b9c4ecf59",
      "commitAuthorOld": "Stephan Ewen",
      "daysBetweenCommits": 11.09,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    FunctionTypeWrapper\u003cOUT\u003e typeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(filter, FilterFunction.class, 0);\n    return addFunction(\"filter\", filter, typeWrapper, typeWrapper, new FilterInvokable\u003cOUT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
      "functionStartLine": 425,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,4 @@\n public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n+    FunctionTypeWrapper\u003cOUT\u003e typeWrapper \u003d new FunctionTypeWrapper\u003cOUT\u003e(filter, FilterFunction.class, 0);\n+    return addFunction(\"filter\", filter, typeWrapper, typeWrapper, new FilterInvokable\u003cOUT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
      "commitDate": "2014/8/18 下午10:23",
      "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
          "commitDate": "2014/8/18 下午10:23",
          "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 344,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
            "newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
          "commitDate": "2014/8/18 下午10:23",
          "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 344,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "StreamOperator\u003cT\u003e",
            "newValue": "SingleOutputStreamOperator\u003cOUT,?\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
          "commitDate": "2014/8/18 下午10:23",
          "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 344,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] API update with more differentiated DataStream types and javadoc + several fixes\n",
          "commitDate": "2014/8/18 下午10:23",
          "commitName": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/DataStream.java",
          "functionStartLine": 344,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public SingleOutputStreamOperator\u003cOUT, ?\u003e filter(FilterFunction\u003cOUT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cOUT, Tuple, OUT\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cOUT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e]",
            "newValue": "[filter-FilterFunction\u003cOUT\u003e]"
          }
        }
      ]
    },
    "e73ea29593cdb8b4d9a11137b2188ca72673e98c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] Updated Streaming function interfaces to match main project\n",
      "commitDate": "2014/8/18 下午10:22",
      "commitName": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] Updated Streaming function interfaces to match main project\n",
          "commitDate": "2014/8/18 下午10:22",
          "commitName": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
          "functionStartLine": 440,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-RichFilterFunction\u003cT\u003e]",
            "newValue": "[filter-FilterFunction\u003cT\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] Updated Streaming function interfaces to match main project\n",
          "commitDate": "2014/8/18 下午10:22",
          "commitName": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
          "functionStartLine": 440,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] Updated Streaming function interfaces to match main project\n",
          "commitDate": "2014/8/18 下午10:22",
          "commitName": "e73ea29593cdb8b4d9a11137b2188ca72673e98c",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
          "functionStartLine": 440,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public StreamOperator\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link RichFilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The RichFilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered. The\nuser can also extend {@link RichFilterFunction} to gain access to other\nfeatures provided by the {@link RichFuntion} interface.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db": {
      "type": "Yreturntypechange",
      "commitMessage": "[streaming] Added new DataStream types for operators\n",
      "commitDate": "2014/8/18 下午10:22",
      "commitName": "0465d300cbc6cf6c69dc4da2b64cecefaa2d77db",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午10:22",
      "commitNameOld": "f932700ae4e7e6110b729afa8530ac029ed0b700",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public StreamOperator\u003cT\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
      "functionStartLine": 424,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link RichFilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The RichFilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n+public StreamOperator\u003cT\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n     return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "StreamOperator\u003cT,T\u003e",
        "newValue": "StreamOperator\u003cT\u003e"
      }
    },
    "776bd3f6dbfd85db978ff4d5785935a19f43d77b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] Updated API to use RichFunctions\n",
      "commitDate": "2014/8/18 下午10:22",
      "commitName": "776bd3f6dbfd85db978ff4d5785935a19f43d77b",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] Updated API to use RichFunctions\n",
          "commitDate": "2014/8/18 下午10:22",
          "commitName": "776bd3f6dbfd85db978ff4d5785935a19f43d77b",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "1162caca857142f237c6c05a04e9f7f2afc89572",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
          "functionStartLine": 422,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link RichFilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The RichFilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e]",
            "newValue": "[filter-RichFilterFunction\u003cT\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] Updated API to use RichFunctions\n",
          "commitDate": "2014/8/18 下午10:22",
          "commitName": "776bd3f6dbfd85db978ff4d5785935a19f43d77b",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "1162caca857142f237c6c05a04e9f7f2afc89572",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
          "functionStartLine": 422,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link RichFilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The RichFilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] Updated API to use RichFunctions\n",
          "commitDate": "2014/8/18 下午10:22",
          "commitName": "776bd3f6dbfd85db978ff4d5785935a19f43d77b",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午10:22",
          "commitNameOld": "1162caca857142f237c6c05a04e9f7f2afc89572",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
          "functionStartLine": 422,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link RichFilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The RichFilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n+public StreamOperator\u003cT, T\u003e filter(RichFilterFunction\u003cT\u003e filter) {\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, RichFilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link RichFilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The RichFilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "799424d1a3237a8d1b32451f4b3ad23b342cf59e": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Wrapped serializers to make component construction simpler\n",
      "commitDate": "2014/8/18 下午10:22",
      "commitName": "799424d1a3237a8d1b32451f4b3ad23b342cf59e",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午10:20",
      "commitNameOld": "a2c4137feb4c8ad6e0f0b34c4b0062b577af0150",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
      "functionStartLine": 413,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", new DataStream\u003cT\u003e(this), filter, new FilterInvokable\u003cT\u003e(filter));\n+    return addFunction(\"filter\", filter, new FunctionTypeWrapper\u003cT, Tuple, T\u003e(filter, FilterFunction.class, 0, -1, 0), new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d72dd496cdad903dff455bbf510cbff68e4d21f": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Iteration update to use proper partitioning and forward connection + DataStream refactor and Javadoc update\n",
      "commitDate": "2014/8/18 下午10:14",
      "commitName": "5d72dd496cdad903dff455bbf510cbff68e4d21f",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午10:14",
      "commitNameOld": "859983cc2652b544b9830eb07e18d3a1e78be00a",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", new DataStream\u003cT\u003e(this), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
      "functionStartLine": 345,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+    return environment.addFunction(\"filter\", new DataStream\u003cT\u003e(this), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb": {
      "type": "Yreturntypechange",
      "commitMessage": "[streaming] Merged conflicts\n",
      "commitDate": "2014/8/18 下午10:11",
      "commitName": "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:58",
      "commitNameOld": "7238010e0864f20b5474268cb8e04cf5ec4720de",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
      "functionStartLine": 316,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+public StreamOperator\u003cT, T\u003e filter(FilterFunction\u003cT\u003e filter) {\n     return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "DataStream\u003cT\u003e",
        "newValue": "StreamOperator\u003cT,T\u003e"
      }
    },
    "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Module rename\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "12e52f8ac430c00ed38096944e50db1e185f3567",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
      "functionStartLine": 329,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java"
      }
    },
    "12e52f8ac430c00ed38096944e50db1e185f3567": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Package and Java Dependency rename\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "12e52f8ac430c00ed38096944e50db1e185f3567",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "b89fa9a2437a24ba311efaa8c3dac9bbf62e7a73",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java",
      "functionStartLine": 329,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/org/apache/flink/streaming/api/DataStream.java"
      }
    },
    "5b05ca635d1a661bf2be3baf60159d84834a9942": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
      "commitAuthor": "ghermann",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
          "commitAuthor": "ghermann",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 297,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
            "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
          "commitAuthor": "ghermann",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 297,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
          "commitAuthor": "ghermann",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 297,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] Updated RemoteStreamEnvironment\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "5b05ca635d1a661bf2be3baf60159d84834a9942",
          "commitAuthor": "ghermann",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 297,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e]"
          }
        }
      ]
    },
    "65d0e3245ece52c70505c40e56bd49ea93e0a15f": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "[streaming] Package restructure\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
      "commitAuthor": "jfeher",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "[streaming] Package restructure\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a9ed127ca76b26037c50f9899a61c10587721c39",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
            "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] Package restructure\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a9ed127ca76b26037c50f9899a61c10587721c39",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] Package restructure\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a9ed127ca76b26037c50f9899a61c10587721c39",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] Package restructure\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "65d0e3245ece52c70505c40e56bd49ea93e0a15f",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a9ed127ca76b26037c50f9899a61c10587721c39",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]"
          }
        }
      ]
    },
    "33884df84a9ec461b5c27233bc4859c0bb039ec8": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Javadoc fix\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "33884df84a9ec461b5c27233bc4859c0bb039ec8",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 297,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
        "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@return The filtered DataStream.\n"
      }
    },
    "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] jobgraphbuilder bugfix\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] jobgraphbuilder bugfix\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd",
          "commitAuthorOld": "mbalassi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 301,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return filter(filter, 1);\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] jobgraphbuilder bugfix\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "3e83eb4fc853bca0daadb9f7c50ffb1670e072cc",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd",
          "commitAuthorOld": "mbalassi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 301,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return filter(filter, 1);\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] merge\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd",
      "commitAuthor": "mbalassi",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] merge\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return filter(filter, 1);\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 316,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+    return filter(filter, 1);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] merge\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "e6da7089a2a5a7a8801cbf1dd1736817041ba5fd",
          "commitAuthor": "mbalassi",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return filter(filter, 1);\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 316,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+    return filter(filter, 1);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": ""
          }
        }
      ]
    },
    "47e2c8210930a5eb57fba3eebdf9afef07772ae3": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "[streaming] setParallelism added for datastream operators to match main project\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "[streaming] setParallelism added for datastream operators to match main project\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "90df95391049122969c39332bfd4ed852dba6ea0",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 301,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
            "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] setParallelism added for datastream operators to match main project\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "90df95391049122969c39332bfd4ed852dba6ea0",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 301,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] setParallelism added for datastream operators to match main project\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "90df95391049122969c39332bfd4ed852dba6ea0",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 301,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] setParallelism added for datastream operators to match main project\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "47e2c8210930a5eb57fba3eebdf9afef07772ae3",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "90df95391049122969c39332bfd4ed852dba6ea0",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 301,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e]"
          }
        }
      ]
    },
    "90df95391049122969c39332bfd4ed852dba6ea0": {
      "type": "Ymultichange(Yfilerename,Ydocchange)",
      "commitMessage": "[streaming] kafka sink and source for multiple types\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "90df95391049122969c39332bfd4ed852dba6ea0",
      "commitAuthor": "jfeher",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "[streaming] kafka sink and source for multiple types\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "90df95391049122969c39332bfd4ed852dba6ea0",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "f5cda1b459bc9459df4d124d4d8c7d4072e7c528",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
            "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] kafka sink and source for multiple types\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "90df95391049122969c39332bfd4ed852dba6ea0",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "f5cda1b459bc9459df4d124d4d8c7d4072e7c528",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "f5cda1b459bc9459df4d124d4d8c7d4072e7c528": {
      "type": "Ymultichange(Yfilerename,Ydocchange)",
      "commitMessage": "[streaming] javadoc update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "f5cda1b459bc9459df4d124d4d8c7d4072e7c528",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "[streaming] javadoc update\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "f5cda1b459bc9459df4d124d4d8c7d4072e7c528",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "2b831022d76c8a7ae9fbd96b4e4eecde9bbf311b",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 311,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
            "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] javadoc update\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "f5cda1b459bc9459df4d124d4d8c7d4072e7c528",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "2b831022d76c8a7ae9fbd96b4e4eecde9bbf311b",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 311,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a {@link DataStream}. The\ntransformation calls a {@link FilterFunction} for each element of the\nDataStream and retains only those element for which the function returns\ntrue. Elements for which the function returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "2b831022d76c8a7ae9fbd96b4e4eecde9bbf311b": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] rmq source refactored\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "2b831022d76c8a7ae9fbd96b4e4eecde9bbf311b",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "6225f15bdb7c5812f09031454ef8257079c57373",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 4,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 271,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "74ac9d499f72919033035f67f7b7771270a8c966": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Rat fixes\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "74ac9d499f72919033035f67f7b7771270a8c966",
      "commitAuthor": "mbalassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "f0c57317634a5d803e64494a5d2f4133c1cf9a3b",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 261,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "f0c57317634a5d803e64494a5d2f4133c1cf9a3b": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] RMQ source for multiple types\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "f0c57317634a5d803e64494a5d2f4133c1cf9a3b",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "df9dac28eafcd92348c4ca49a649cf669110501f",
      "commitAuthorOld": "mbalassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 2,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 271,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "4363991c20959421314d1249a1e78ad764371d66": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] test update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "4363991c20959421314d1249a1e78ad764371d66",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "cdce868a156f9630978aedbdfc4eed582a055862",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 284,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "cdce868a156f9630978aedbdfc4eed582a055862": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] RMQ Sink for other types\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "cdce868a156f9630978aedbdfc4eed582a055862",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "5db9601d81d583cb7edc943786ef81ef8e32fe77",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 7,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 271,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "b44650b0ed0d4e7c900a0682a4a805ed7abeca04": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Removed unused StreamInvokableComponent\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "b44650b0ed0d4e7c900a0682a4a805ed7abeca04",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "086d1a72b38a8ec0a5e4300a02daf4097e0897f3",
      "commitAuthorOld": "Yingjun Wu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 284,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "086d1a72b38a8ec0a5e4300a02daf4097e0897f3": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] add disk dump sink, prepare to support multiple output stream\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "086d1a72b38a8ec0a5e4300a02daf4097e0897f3",
      "commitAuthor": "Yingjun Wu",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "916b1eb94ad63be2f1b028be9f2e0fe86c17bdb3",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 271,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "916b1eb94ad63be2f1b028be9f2e0fe86c17bdb3": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] merge\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "916b1eb94ad63be2f1b028be9f2e0fe86c17bdb3",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "0fd098febb7c720f0ab4adeb0cc778feab8c9076",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 271,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "e02b72963bb57050245291ea8aaef0eedf37ffdf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] test cleanup\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "e02b72963bb57050245291ea8aaef0eedf37ffdf",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] test cleanup\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "e02b72963bb57050245291ea8aaef0eedf37ffdf",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "75d94931ef45fb95cd59195ef99578654c47c227",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, paralelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] test cleanup\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "e02b72963bb57050245291ea8aaef0eedf37ffdf",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "75d94931ef45fb95cd59195ef99578654c47c227",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] test cleanup\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "e02b72963bb57050245291ea8aaef0eedf37ffdf",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "75d94931ef45fb95cd59195ef99578654c47c227",
          "commitAuthorOld": "jfeher",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "75d94931ef45fb95cd59195ef99578654c47c227": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] BatchTest refactored\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "75d94931ef45fb95cd59195ef99578654c47c227",
      "commitAuthor": "jfeher",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] BatchTest refactored\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "75d94931ef45fb95cd59195ef99578654c47c227",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 259,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, paralelism-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] BatchTest refactored\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "75d94931ef45fb95cd59195ef99578654c47c227",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 259,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] BatchTest refactored\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "75d94931ef45fb95cd59195ef99578654c47c227",
          "commitAuthor": "jfeher",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 259,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] streamcomponent cleanup\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] streamcomponent cleanup\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "4728eb9d9cfe640495e3edea80238e2c93f11522",
          "commitAuthorOld": "Yingjun Wu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 284,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, paralelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] streamcomponent cleanup\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "4728eb9d9cfe640495e3edea80238e2c93f11522",
          "commitAuthorOld": "Yingjun Wu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 284,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] streamcomponent cleanup\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "a3ac7af6077104dfd92a1f7acfd7e32f20bb9601",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "4728eb9d9cfe640495e3edea80238e2c93f11522",
          "commitAuthorOld": "Yingjun Wu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 284,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "4728eb9d9cfe640495e3edea80238e2c93f11522": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] fix kafka producer bug\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "4728eb9d9cfe640495e3edea80238e2c93f11522",
      "commitAuthor": "Yingjun Wu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] fix kafka producer bug\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "4728eb9d9cfe640495e3edea80238e2c93f11522",
          "commitAuthor": "Yingjun Wu",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "0e2008bc80e256220783e45b2e034519b8ec5a62",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 259,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, paralelism-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] fix kafka producer bug\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "4728eb9d9cfe640495e3edea80238e2c93f11522",
          "commitAuthor": "Yingjun Wu",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "0e2008bc80e256220783e45b2e034519b8ec5a62",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 259,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] fix kafka producer bug\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "4728eb9d9cfe640495e3edea80238e2c93f11522",
          "commitAuthor": "Yingjun Wu",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "0e2008bc80e256220783e45b2e034519b8ec5a62",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 259,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "[streaming] javadoc update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29",
      "commitAuthor": "gyfora",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] javadoc update\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "23788bcdd79030d98860d5ca8d907e995397f553",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e, paralelism-int]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, parallelism-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] javadoc update\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "23788bcdd79030d98860d5ca8d907e995397f553",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[streaming] javadoc update\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "edf3a0f49dd0b18440f1135e08c73e2f0bd49d29",
          "commitAuthor": "gyfora",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "23788bcdd79030d98860d5ca8d907e995397f553",
          "commitAuthorOld": "gyfora",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 271,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int parallelism) {\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), parallelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
            "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param parallelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
          }
        }
      ]
    },
    "b2f8f6e10ad8a36a92928185b23827944990748a": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Remove dms repo from pom\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "b2f8f6e10ad8a36a92928185b23827944990748a",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "e416f39f1f78d4589badaa6d5ab6e33a5002548a",
      "commitAuthorOld": "Márton Balassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 251,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "e416f39f1f78d4589badaa6d5ab6e33a5002548a": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] pom update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "e416f39f1f78d4589badaa6d5ab6e33a5002548a",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "a2cabbb7ce1d0d12218934c5c58c67f89cd0bef0",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 259,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "a2cabbb7ce1d0d12218934c5c58c67f89cd0bef0": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] DataStream id update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "a2cabbb7ce1d0d12218934c5c58c67f89cd0bef0",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "a31df65316aa54662515ddf4f95de71b87c64476",
      "commitAuthorOld": "Márton Balassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 259,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "a31df65316aa54662515ddf4f95de71b87c64476": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] First succesful decomposed build\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "a31df65316aa54662515ddf4f95de71b87c64476",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "f054ac028d3bbdabde4946dcf18c2f04ba0dffbb",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 3,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 259,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "9b49450045e4f6fc436818470f9a8b5bc95eba15": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Started moving to 0.6\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "9b49450045e4f6fc436818470f9a8b5bc95eba15",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "b0219bbaad12f00820bfbe7c16d231cb42b6eebc",
      "commitAuthorOld": "Márton Balassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 251,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "b0219bbaad12f00820bfbe7c16d231cb42b6eebc": {
      "type": "Yfilerename",
      "commitMessage": "[streaming] Decomposing project mv\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "b0219bbaad12f00820bfbe7c16d231cb42b6eebc",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "63751058f8a0643b8e9e6c18dcd44a734f93be68",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 259,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
        "newPath": "flink-addons/flink-streaming/stratosphere-streaming-core/src/main/java/eu/stratosphere/streaming/api/DataStream.java"
      }
    },
    "90281974bd9ba155164356bd17265198db4091d5": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Test refactor\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "90281974bd9ba155164356bd17265198db4091d5",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "0ede93947d36ec176df8ee80bfe7eda5198a0578",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 259,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
        "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
      }
    },
    "0ede93947d36ec176df8ee80bfe7eda5198a0578": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] test for connect with\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "0ede93947d36ec176df8ee80bfe7eda5198a0578",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "f08d55d0a5d45e3976a144f776ee8abeddbd34a4",
      "commitAuthorOld": "Márton Balassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 248,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
        "newValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n"
      }
    },
    "f08d55d0a5d45e3976a144f776ee8abeddbd34a4": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] Strato dependency to 0.5.1\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "f08d55d0a5d45e3976a144f776ee8abeddbd34a4",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "b6a17eb9dc4251cdb91dd7f9f64ac20e467d2d73",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 251,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
        "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
      }
    },
    "b6a17eb9dc4251cdb91dd7f9f64ac20e467d2d73": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] connectwith function with multiple streams in the argumentum list\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "b6a17eb9dc4251cdb91dd7f9f64ac20e467d2d73",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "c3fe7358429b96fca5c7604d6f780a214f1957a0",
      "commitAuthorOld": "gyfora",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 256,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
        "newValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n"
      }
    },
    "c3fe7358429b96fca5c7604d6f780a214f1957a0": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] datastream and streamexecution environment javadoc update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "c3fe7358429b96fca5c7604d6f780a214f1957a0",
      "commitAuthor": "gyfora",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "54a66d7aac74083612510b8e4a03c9de3e7e8aab",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 251,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
        "newValue": "Applies a Filter transformation on a DataStream. The transformation calls\na FilterFunction for each element of the DataStream and retains only\nthose element for which the function returns true. Elements for which the\nfunction returns false are filtered.\n\n@param filter The FilterFunction that is called for each element of the\n           DataSet.\n@param paralelism The number of threads the function runs on.\n@return The filtered DataStream.\n"
      }
    },
    "54a66d7aac74083612510b8e4a03c9de3e7e8aab": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] using Sets for testing parallelism\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "54a66d7aac74083612510b8e4a03c9de3e7e8aab",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "7b7ac3d09b7769c4c13961abb4f51c58895e8e3d",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 240,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n"
      }
    },
    "7b7ac3d09b7769c4c13961abb4f51c58895e8e3d": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Fixed BatchTest\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "7b7ac3d09b7769c4c13961abb4f51c58895e8e3d",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "7345bf6a330d6cba0f8f0f72761ff05e23543581",
      "commitAuthorOld": "Márton Balassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 151,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n-    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n+    return environment.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7345bf6a330d6cba0f8f0f72761ff05e23543581": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] StreamExecutionEnvironment javadoc update\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "7345bf6a330d6cba0f8f0f72761ff05e23543581",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "f60f28678e619eaf0448357f3177eae59be9d7bc",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 151,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
        "newValue": ""
      }
    },
    "f60f28678e619eaf0448357f3177eae59be9d7bc": {
      "type": "Ydocchange",
      "commitMessage": "[streaming] javadoc for DataStream\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "f60f28678e619eaf0448357f3177eae59be9d7bc",
      "commitAuthor": "jfeher",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "8457ed23d26c2faf85e36e3700536bd0f76663cf",
      "commitAuthorOld": "jfeher",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 240,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Sets the given filter function.\n\n@param filter The object containing the filter function.\n@param paralelism The number of threads the function runs on.\n@return The modified datastream.\n"
      }
    },
    "b39305f864b40eaf52d5a799edb09c7b898095b0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "[streaming] parallelism parameter added to operators\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "b39305f864b40eaf52d5a799edb09c7b898095b0",
      "commitAuthor": "Eszes Dávid",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "[streaming] parallelism parameter added to operators\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "b39305f864b40eaf52d5a799edb09c7b898095b0",
          "commitAuthor": "Eszes Dávid",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "697eb774e84b43e9b7cfef07fe812a05e1a836ce",
          "commitAuthorOld": "Márton Balassi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 151,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[filter-FilterFunction\u003cT\u003e]",
            "newValue": "[filter-FilterFunction\u003cT\u003e, paralelism-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[streaming] parallelism parameter added to operators\n",
          "commitDate": "2014/8/18 下午9:57",
          "commitName": "b39305f864b40eaf52d5a799edb09c7b898095b0",
          "commitAuthor": "Eszes Dávid",
          "commitDateOld": "2014/8/18 下午9:57",
          "commitNameOld": "697eb774e84b43e9b7cfef07fe812a05e1a836ce",
          "commitAuthorOld": "Márton Balassi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n}",
          "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
          "functionStartLine": 151,
          "functionName": "filter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n-public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter, int paralelism) {\n+    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter), paralelism);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "697eb774e84b43e9b7cfef07fe812a05e1a836ce": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] minor fixes\n\n[streaming] minor example refactor\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "697eb774e84b43e9b7cfef07fe812a05e1a836ce",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "3e93ea6d5f2ac89d4df9d55642f1d0e80418d26f",
      "commitAuthorOld": "Márton Balassi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 151,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return context.addFunction(\"filter\", this, filter, new FilterInvokable\u003cT\u003e(filter));\n+    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e93ea6d5f2ac89d4df9d55642f1d0e80418d26f": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] TestDataUtil update with Logging\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "3e93ea6d5f2ac89d4df9d55642f1d0e80418d26f",
      "commitAuthor": "Márton Balassi",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "3e337a0435c0980d4780e706f98a92f3e12d1fd5",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return context.addFunction(\"filter\", this, filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 127,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n+    return context.addFunction(\"filter\", this, filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3e337a0435c0980d4780e706f98a92f3e12d1fd5": {
      "type": "Ybodychange",
      "commitMessage": "[streaming] Added DataStream copying\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "3e337a0435c0980d4780e706f98a92f3e12d1fd5",
      "commitAuthor": "ghermann",
      "commitDateOld": "2014/8/18 下午9:57",
      "commitNameOld": "6691674b08829412a2e14a5e43302c889c22e540",
      "commitAuthorOld": "ghermann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 151,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,3 @@\n public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n-    return context.addFunction(\"filter\", this, filter, new FilterInvokable\u003cT\u003e(filter));\n+    return context.addFunction(\"filter\", this.copy(), filter, new FilterInvokable\u003cT\u003e(filter));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f8425f1d1e9c6846a684bd2745623b14b11ddd51": {
      "type": "Yintroduced",
      "commitMessage": "[streaming] Added FilterInvokable, eliminated code repetition at adding a function to DataStream\n",
      "commitDate": "2014/8/18 下午9:57",
      "commitName": "f8425f1d1e9c6846a684bd2745623b14b11ddd51",
      "commitAuthor": "ghermann",
      "diff": "@@ -0,0 +1,3 @@\n+public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n+    return context.addFunction(\"filter\", this, filter, new FilterInvokable\u003cT\u003e(filter));\n+}\n\\ No newline at end of file\n",
      "actualSource": "public DataStream\u003cT\u003e filter(FilterFunction\u003cT\u003e filter) {\n    return context.addFunction(\"filter\", this, filter, new FilterInvokable\u003cT\u003e(filter));\n}",
      "path": "flink-addons/flink-streaming/src/main/java/eu/stratosphere/streaming/api/DataStream.java",
      "functionStartLine": 102,
      "functionName": "filter",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}