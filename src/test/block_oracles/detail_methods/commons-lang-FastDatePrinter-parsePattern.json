{
  "origin": "codeshovel",
  "repositoryName": "commons-lang",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/commons-lang/.git",
  "startCommitName": "a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83",
  "sourceFileName": "FastDatePrinter.java",
  "functionName": "parsePattern",
  "functionId": "parsePattern",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
  "functionStartLine": 181,
  "functionEndLine": 314,
  "numCommitsSeen": 111,
  "timeTaken": 2930,
  "changeHistory": [
    "4f82195afdc4279c05826fc20f8642bfdaaafec3",
    "afc942c7b2bc0317cb549a3fd05080646e7274fc",
    "1002c9e243883654f9c1e6beae643fb4e72fc172",
    "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
    "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
    "0add1e8975336c65513b26123d48b221e2515ddc",
    "bbfa8eb7df16baf17239b412ff7efa11c7e0926b",
    "22b6781a0b96418198dc9146e5191e51d381102f",
    "5292526e476ffbb19c6613a98464054236c86ace",
    "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c",
    "34a6449c90a3b6074111a6bcbd31ad00ac1570f3",
    "5f9fd135a2b5bb89ec2fe9ae16c8517bb8bb8ac9",
    "9ef322c33c465d8ae9a1d854dfa977f47f629009",
    "fc5c081e22a61bb5a6810af302be3f22f7966df4",
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
    "654fb75d80a63fa551ced73c3b652f4120573590",
    "3aab5ae02692d3ceac2618ec0b4514787f4b17d7",
    "247c97f507c7ce3556f040624b6af28e911e6dfb",
    "eadb45d1a7b8b16164171c7caa171fd9f911a414",
    "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
    "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
    "a99f7965b34b8dd0532c8d6f5e592d990ca220fc"
  ],
  "changeHistoryShort": {
    "4f82195afdc4279c05826fc20f8642bfdaaafec3": "Ybodychange",
    "afc942c7b2bc0317cb549a3fd05080646e7274fc": "Ybodychange",
    "1002c9e243883654f9c1e6beae643fb4e72fc172": "Ybodychange",
    "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b": "Ybodychange",
    "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574": "Ybodychange",
    "0add1e8975336c65513b26123d48b221e2515ddc": "Ybodychange",
    "bbfa8eb7df16baf17239b412ff7efa11c7e0926b": "Ybodychange",
    "22b6781a0b96418198dc9146e5191e51d381102f": "Ybodychange",
    "5292526e476ffbb19c6613a98464054236c86ace": "Ybodychange",
    "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c": "Ymovefromfile",
    "34a6449c90a3b6074111a6bcbd31ad00ac1570f3": "Ybodychange",
    "5f9fd135a2b5bb89ec2fe9ae16c8517bb8bb8ac9": "Ydocchange",
    "9ef322c33c465d8ae9a1d854dfa977f47f629009": "Ybodychange",
    "fc5c081e22a61bb5a6810af302be3f22f7966df4": "Yfilerename",
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52": "Yfilerename",
    "654fb75d80a63fa551ced73c3b652f4120573590": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3aab5ae02692d3ceac2618ec0b4514787f4b17d7": "Ybodychange",
    "247c97f507c7ce3556f040624b6af28e911e6dfb": "Ybodychange",
    "eadb45d1a7b8b16164171c7caa171fd9f911a414": "Ydocchange",
    "73ee6c3d270a91bd447f732b24c4d65169b0c8d6": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "6d4516cccc1cd836e6a594e2df9a3c920ef177df": "Ydocchange",
    "a99f7965b34b8dd0532c8d6f5e592d990ca220fc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4f82195afdc4279c05826fc20f8642bfdaaafec3": {
      "type": "Ybodychange",
      "commitMessage": "Remove redundant type arguments.",
      "commitDate": "2016/10/24 上午1:52",
      "commitName": "4f82195afdc4279c05826fc20f8642bfdaaafec3",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "2016/9/19 下午7:21",
      "commitNameOld": "0807eedad6aa9544d90b2e7cec103fb9c40b714d",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 34.27,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003c\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n            case \u0027Y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                if (c \u003d\u003d \u0027Y\u0027) {\n                    rule \u003d new WeekYear((NumberRule) rule);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027:\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,126 +1,126 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n+    final List\u003cRule\u003e rules \u003d new ArrayList\u003c\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n             case \u0027Y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 if (c \u003d\u003d \u0027Y\u0027) {\n                     rule \u003d new WeekYear((NumberRule) rule);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027:\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027:\n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "afc942c7b2bc0317cb549a3fd05080646e7274fc": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1192: FastDateFormat support of the week-year component (uppercase \u0027Y\u0027)\n",
      "commitDate": "2015/12/26 上午4:44",
      "commitName": "afc942c7b2bc0317cb549a3fd05080646e7274fc",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015/12/17 下午10:52",
      "commitNameOld": "1002c9e243883654f9c1e6beae643fb4e72fc172",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 8.24,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n            case \u0027Y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                if (c \u003d\u003d \u0027Y\u0027) {\n                    rule \u003d new WeekYear((NumberRule) rule);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027:\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,122 +1,126 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n+            case \u0027Y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n+                if (c \u003d\u003d \u0027Y\u0027) {\n+                    rule \u003d new WeekYear((NumberRule) rule);\n+                }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027:\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027:\n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1002c9e243883654f9c1e6beae643fb4e72fc172": {
      "type": "Ybodychange",
      "commitMessage": "revert LANG-1192 while investigating travis failures\n",
      "commitDate": "2015/12/17 下午10:52",
      "commitName": "1002c9e243883654f9c1e6beae643fb4e72fc172",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015/12/14 上午8:38",
      "commitNameOld": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 3.59,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027:\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 182,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,126 +1,122 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n-            case \u0027Y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n-                if (c \u003d\u003d \u0027Y\u0027) {\n-                    rule \u003d new WeekYear((NumberRule) rule);\n-                }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027:\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027:\n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1192: FastDateFormat support of the week-year component (uppercase \u0027Y\u0027)\n",
      "commitDate": "2015/12/14 上午8:38",
      "commitName": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015/12/12 下午12:36",
      "commitNameOld": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n            case \u0027Y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                if (c \u003d\u003d \u0027Y\u0027) {\n                    rule \u003d new WeekYear((NumberRule) rule);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027:\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,122 +1,126 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n+            case \u0027Y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n+                if (c \u003d\u003d \u0027Y\u0027) {\n+                    rule \u003d new WeekYear((NumberRule) rule);\n+                }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027:\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027:\n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1192 partial: implement format \u0027u\u0027 for FastDateFormat, day number of week\n",
      "commitDate": "2015/12/12 下午12:36",
      "commitName": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015/10/14 下午6:46",
      "commitNameOld": "6d3796e64bdd5f3f4857bfca6982e6ecf98a2b33",
      "commitAuthorOld": "Michael Osipov",
      "daysBetweenCommits": 58.74,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027:\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 182,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,119 +1,122 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n+            case \u0027u\u0027:\n+                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n+                break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027:\n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0add1e8975336c65513b26123d48b221e2515ddc": {
      "type": "Ybodychange",
      "commitMessage": "ZZ format not displaying Z for UTC with OpenJDK 6\n",
      "commitDate": "2015/5/3 上午2:21",
      "commitName": "0add1e8975336c65513b26123d48b221e2515ddc",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015/5/1 上午10:21",
      "commitNameOld": "775203dd2cfce017910d04c58a0b1b4e0a64923c",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 1.67,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,119 +1,119 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027:\n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n+                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbfa8eb7df16baf17239b412ff7efa11c7e0926b": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1101 FastDateParser and FastDatePrinter support \u0027X\u0027 format\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1668511 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2015/3/23 上午10:33",
      "commitName": "bbfa8eb7df16baf17239b412ff7efa11c7e0926b",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015/3/14 上午4:29",
      "commitNameOld": "8aa1b44ada759e7948f87f55bb29ab87b5eb5469",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 9.25,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027:\n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 183,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,116 +1,119 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n+            case \u0027X\u0027:\n+                rule \u003d Iso8601_Rule.getRule(tokenLen);\n+                break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "22b6781a0b96418198dc9146e5191e51d381102f": {
      "type": "Ybodychange",
      "commitMessage": "Added missing support for ISO 8601 parsing and printing using \"ZZ\" pattern (code now matches Javadoc). Addresses LANG-1000.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1628061 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2014/9/28 下午6:11",
      "commitName": "22b6781a0b96418198dc9146e5191e51d381102f",
      "commitAuthor": "Duncan Jones",
      "commitDateOld": "2014/5/1 上午5:49",
      "commitNameOld": "b4b51a8fc9eed7274a045b2f3192d77782b0e4fa",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 150.52,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 176,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,116 @@\n protected List\u003cRule\u003e parsePattern() {\n     final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     final String[] ERAs \u003d symbols.getEras();\n     final String[] months \u003d symbols.getMonths();\n     final String[] shortMonths \u003d symbols.getShortMonths();\n     final String[] weekdays \u003d symbols.getWeekdays();\n     final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     final int length \u003d mPattern.length();\n     final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else if (tokenLen \u003d\u003d 2) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5292526e476ffbb19c6613a98464054236c86ace": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1436770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2013/1/22 下午3:09",
      "commitName": "5292526e476ffbb19c6613a98464054236c86ace",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2013/1/22 下午3:07",
      "commitNameOld": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    final String[] ERAs \u003d symbols.getEras();\n    final String[] months \u003d symbols.getMonths();\n    final String[] shortMonths \u003d symbols.getShortMonths();\n    final String[] weekdays \u003d symbols.getWeekdays();\n    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    final int length \u003d mPattern.length();\n    final int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        final String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        final int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        final char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 167,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List\u003cRule\u003e parsePattern() {\n-    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n-    String[] ERAs \u003d symbols.getEras();\n-    String[] months \u003d symbols.getMonths();\n-    String[] shortMonths \u003d symbols.getShortMonths();\n-    String[] weekdays \u003d symbols.getWeekdays();\n-    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n-    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d mPattern.length();\n-    int[] indexRef \u003d new int[1];\n+    final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n+    final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n+    final String[] ERAs \u003d symbols.getEras();\n+    final String[] months \u003d symbols.getMonths();\n+    final String[] shortMonths \u003d symbols.getShortMonths();\n+    final String[] weekdays \u003d symbols.getWeekdays();\n+    final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n+    final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n+    final int length \u003d mPattern.length();\n+    final int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(mPattern, indexRef);\n+        final String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n-        int tokenLen \u003d token.length();\n+        final int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n-        char c \u003d token.charAt(0);\n+        final char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n-                String sub \u003d token.substring(1);\n+                final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c": {
      "type": "Ymovefromfile",
      "commitMessage": "Applying Chas Honton\u0027s implementation of DateParser and subsequent integration into FastDateFormat and the time package. See LANG-462. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1236055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012/1/26 下午3:00",
      "commitName": "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2012/1/24 上午1:47",
      "commitNameOld": "dfa6882a3b9ae6d17c386312ad5e5902d852fb4e",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 2.55,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 167,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "newPath": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "oldMethodName": "parsePattern",
        "newMethodName": "parsePattern"
      }
    },
    "34a6449c90a3b6074111a6bcbd31ad00ac1570f3": {
      "type": "Ybodychange",
      "commitMessage": "Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1146138 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011/7/14 上午1:01",
      "commitName": "34a6449c90a3b6074111a6bcbd31ad00ac1570f3",
      "commitAuthor": "Joerg Schaible",
      "commitDateOld": "2011/5/4 下午7:11",
      "commitNameOld": "bfb76fae2f43d883d60b402e2114159cc198513d",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 70.24,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 463,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List\u003cRule\u003e parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n-                if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n-                } else {\n+                if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n+                } else {\n+                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5f9fd135a2b5bb89ec2fe9ae16c8517bb8bb8ac9": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1099401 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011/5/4 下午6:37",
      "commitName": "5f9fd135a2b5bb89ec2fe9ae16c8517bb8bb8ac9",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2011/4/20 下午2:51",
      "commitNameOld": "9ef322c33c465d8ae9a1d854dfa977f47f629009",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 14.16,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 456,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
        "newValue": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a {@code List} of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
      }
    },
    "9ef322c33c465d8ae9a1d854dfa977f47f629009": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring FastDateFormat per LANG-462 to use the FormatCache class created for an upcoming DateParser functionality. I\u0027ve kept FormatCache package-private for now. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1095299 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011/4/20 下午2:51",
      "commitName": "9ef322c33c465d8ae9a1d854dfa977f47f629009",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2011/4/5 下午1:31",
      "commitNameOld": "3a0c152c22b6e96fc809fdee2d6ea5b816a139e6",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 457,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List\u003cRule\u003e parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc5c081e22a61bb5a6810af302be3f22f7966df4": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010/1/3 上午10:11",
      "commitName": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "2010/1/3 上午10:09",
      "commitNameOld": "6b32246f5f9f77c74b32a5290cdbdd4e0f5c71c6",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 577,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "newPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java"
      }
    },
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2009/12/10 下午7:33",
      "commitName": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2009/12/10 下午7:31",
      "commitNameOld": "375d7d0954cae60c4c7292cc65abbc972178857c",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 577,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "newPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java"
      }
    },
    "654fb75d80a63fa551ced73c3b652f4120573590": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2009/3/16 上午11:35",
      "commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2009/3/16 上午11:35",
          "commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2009/3/14 下午10:57",
          "commitNameOld": "7585da946c5bab3fd60188718d0be17ee6fa59e2",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 577,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,114 +1,114 @@\n-protected List parsePattern() {\n+protected List\u003cRule\u003e parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-    List rules \u003d new ArrayList();\n+    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "List",
            "newValue": "List\u003cRule\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2009/3/16 上午11:35",
          "commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2009/3/14 下午10:57",
          "commitNameOld": "7585da946c5bab3fd60188718d0be17ee6fa59e2",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cRule\u003e parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 577,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,114 +1,114 @@\n-protected List parsePattern() {\n+protected List\u003cRule\u003e parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-    List rules \u003d new ArrayList();\n+    List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3aab5ae02692d3ceac2618ec0b4514787f4b17d7": {
      "type": "Ybodychange",
      "commitMessage": "Fix for zero-padding of years.\n\nA commented out set of failing tests are added to the Unit Test and need to be addressed.\n\nSubmitted by:\tJerson Chua\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137932 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2004/9/12 下午1:03",
      "commitName": "3aab5ae02692d3ceac2618ec0b4514787f4b17d7",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2004/7/6 上午6:37",
      "commitNameOld": "4301e384b8773c427609fdd2b38b8db2c78e10d6",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 68.27,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 561,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n+                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "247c97f507c7ce3556f040624b6af28e911e6dfb": {
      "type": "Ybodychange",
      "commitMessage": "Remove unneeded String constructor as found by findBugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137495 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003/7/26 上午6:53",
      "commitName": "247c97f507c7ce3556f040624b6af28e911e6dfb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2003/7/22 上午8:09",
      "commitNameOld": "e00c4a254616e100b02b0877f13077a30edca0ae",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 3.95,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 465,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "@@ -1,114 +1,114 @@\n protected List parsePattern() {\n     DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n     int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n         String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027:\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n-                    rule \u003d new StringLiteral(new String(sub));\n+                    rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eadb45d1a7b8b16164171c7caa171fd9f911a414": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc fixes. Shouldn\u0027t have been anything other than javadoc changes in this.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137416 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003/7/15 上午6:25",
      "commitName": "eadb45d1a7b8b16164171c7caa171fd9f911a414",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2003/7/12 下午4:26",
      "commitNameOld": "0aa557cd562a946675824d588e0139a08fbb6712",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 2.58,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 459,
      "functionName": "parsePattern",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
        "newValue": "\u003cp\u003eReturns a list of Rules given a pattern.\u003c/p\u003e\n\n@return a \u003ccode\u003eList\u003c/code\u003e of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
      }
    },
    "73ee6c3d270a91bd447f732b24c4d65169b0c8d6": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003/6/9 上午7:14",
      "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003/6/9 上午7:14",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003/5/22 上午7:39",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "parse",
            "newValue": "parsePattern"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003/6/9 上午7:14",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003/5/22 上午7:39",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String, timeZone-TimeZone, locale-Locale, symbols-DateFormatSymbols]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003/6/9 上午7:14",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003/5/22 上午7:39",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003/6/9 上午7:14",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003/5/22 上午7:39",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003/6/9 上午7:14",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003/5/22 上午7:39",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List parsePattern() {\n    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d mPattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(mPattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027:\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "functionAnnotation": "",
          "functionDoc": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
          "diff": "@@ -1,106 +1,114 @@\n-private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+protected List parsePattern() {\n+    DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n     List rules \u003d new ArrayList();\n     String[] ERAs \u003d symbols.getEras();\n     String[] months \u003d symbols.getMonths();\n     String[] shortMonths \u003d symbols.getShortMonths();\n     String[] weekdays \u003d symbols.getWeekdays();\n     String[] shortWeekdays \u003d symbols.getShortWeekdays();\n     String[] AmPmStrings \u003d symbols.getAmPmStrings();\n-    int length \u003d pattern.length();\n+    int length \u003d mPattern.length();\n     int[] indexRef \u003d new int[1];\n     for (int i \u003d 0; i \u003c length; i++) {\n         indexRef[0] \u003d i;\n-        String token \u003d parseToken(pattern, indexRef);\n+        String token \u003d parseToken(mPattern, indexRef);\n         i \u003d indexRef[0];\n         int tokenLen \u003d token.length();\n         if (tokenLen \u003d\u003d 0) {\n             break;\n         }\n         Rule rule;\n         char c \u003d token.charAt(0);\n         switch(c) {\n             case \u0027G\u0027:\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027:\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027:\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027:\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027:\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027:\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027:\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027:\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027:\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027:\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027:\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027:\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027:\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027:\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n         }\n         rules.add(rule);\n     }\n     return rules;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
            "newValue": "Returns a list of Rules given a pattern.\n\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
          }
        }
      ]
    },
    "6d4516cccc1cd836e6a594e2df9a3c920ef177df": {
      "type": "Ydocchange",
      "commitMessage": "Update class and add javadoc ready for release\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137326 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003/5/22 上午7:39",
      "commitName": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2003/2/5 上午6:19",
      "commitNameOld": "2023467c0595f2561be7e5874e2bcaae972c37bc",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 106.06,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d pattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(pattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                } else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 355,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Returns a list of Rules.\n",
        "newValue": "Returns a list of Rules given a pattern.\n\n@param pattern the pattern to parse\n@param timeZone the time zone to use\n@param locale the locale to use\n@param symbols the symbols to use\n@return a List of Rule objects\n@throws IllegalArgumentException if pattern is invalid\n"
      }
    },
    "a99f7965b34b8dd0532c8d6f5e592d990ca220fc": {
      "type": "Yintroduced",
      "commitMessage": "A thread-safe, faster version of java.text\u0027s DateFormat. While JODA contains\nbetter, this version is religion-free.\n\nPermission given by Brian S O\u0027Neill:\nhttp://archives.apache.org/eyebrowse/ReadMsg?listName\u003dcommons-dev@jakarta.apache.org\u0026msgNo\u003d20612\n\nSubmitted by:\tSean Schofield\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137221 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003/1/8 上午3:55",
      "commitName": "a99f7965b34b8dd0532c8d6f5e592d990ca220fc",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,106 @@\n+private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    List rules \u003d new ArrayList();\n+    String[] ERAs \u003d symbols.getEras();\n+    String[] months \u003d symbols.getMonths();\n+    String[] shortMonths \u003d symbols.getShortMonths();\n+    String[] weekdays \u003d symbols.getWeekdays();\n+    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n+    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n+    int length \u003d pattern.length();\n+    int[] indexRef \u003d new int[1];\n+    for (int i \u003d 0; i \u003c length; i++) {\n+        indexRef[0] \u003d i;\n+        String token \u003d parseToken(pattern, indexRef);\n+        i \u003d indexRef[0];\n+        int tokenLen \u003d token.length();\n+        if (tokenLen \u003d\u003d 0) {\n+            break;\n+        }\n+        Rule rule;\n+        char c \u003d token.charAt(0);\n+        switch(c) {\n+            case \u0027G\u0027:\n+                rule \u003d new TextField(Calendar.ERA, ERAs);\n+                break;\n+            case \u0027y\u0027:\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                } else {\n+                    rule \u003d new TwoDigitYearField();\n+                }\n+                break;\n+            case \u0027M\u0027:\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new TextField(Calendar.MONTH, months);\n+                } else if (tokenLen \u003d\u003d 3) {\n+                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n+                } else if (tokenLen \u003d\u003d 2) {\n+                    rule \u003d new TwoDigitMonthField();\n+                } else {\n+                    rule \u003d new UnpaddedMonthField();\n+                }\n+                break;\n+            case \u0027d\u0027:\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n+                break;\n+            case \u0027h\u0027:\n+                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n+                break;\n+            case \u0027H\u0027:\n+                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n+                break;\n+            case \u0027m\u0027:\n+                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n+                break;\n+            case \u0027s\u0027:\n+                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n+                break;\n+            case \u0027S\u0027:\n+                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n+                break;\n+            case \u0027E\u0027:\n+                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n+                break;\n+            case \u0027D\u0027:\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n+                break;\n+            case \u0027F\u0027:\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n+                break;\n+            case \u0027w\u0027:\n+                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n+                break;\n+            case \u0027W\u0027:\n+                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n+                break;\n+            case \u0027a\u0027:\n+                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n+                break;\n+            case \u0027k\u0027:\n+                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n+                break;\n+            case \u0027K\u0027:\n+                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n+                break;\n+            case \u0027z\u0027:\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                } else {\n+                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027\\\u0027\u0027:\n+                String sub \u003d token.substring(1);\n+                if (sub.length() \u003d\u003d 1) {\n+                    rule \u003d new CharacterLiteral(sub.charAt(0));\n+                } else {\n+                    rule \u003d new StringLiteral(new String(sub));\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n+        }\n+        rules.add(rule);\n+    }\n+    return rules;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules \u003d new ArrayList();\n    String[] ERAs \u003d symbols.getEras();\n    String[] months \u003d symbols.getMonths();\n    String[] shortMonths \u003d symbols.getShortMonths();\n    String[] weekdays \u003d symbols.getWeekdays();\n    String[] shortWeekdays \u003d symbols.getShortWeekdays();\n    String[] AmPmStrings \u003d symbols.getAmPmStrings();\n    int length \u003d pattern.length();\n    int[] indexRef \u003d new int[1];\n    for (int i \u003d 0; i \u003c length; i++) {\n        indexRef[0] \u003d i;\n        String token \u003d parseToken(pattern, indexRef);\n        i \u003d indexRef[0];\n        int tokenLen \u003d token.length();\n        if (tokenLen \u003d\u003d 0) {\n            break;\n        }\n        Rule rule;\n        char c \u003d token.charAt(0);\n        switch(c) {\n            case \u0027G\u0027:\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                } else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027:\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027:\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027:\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027:\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027:\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027:\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027:\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027:\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027:\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027:\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027:\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027:\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 371,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Returns a list of Rules.\n"
    }
  }
}