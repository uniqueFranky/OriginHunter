{
  "origin": "codeshovel",
  "repositoryName": "mockito",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/mockito/.git",
  "startCommitName": "077562ea54f1fa87ff8dd233c3060ddbf0f1ce26",
  "sourceFileName": "PluginLoader.java",
  "functionName": "loadPlugin",
  "functionId": "loadPlugin___preferredPluginType-Class__PreferredType__(modifiers-final)__alternatePluginType-Class__AlternateType__(modifiers-final)",
  "sourceFilePath": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Scans the classpath for given {@code preferredPluginType}. If not found scan for {@code\nalternatePluginType}. If neither a preferred or alternate plugin is found, default to default\nclass of {@code preferredPluginType}.\n\n@return An object of either {@code preferredPluginType} or {@code alternatePluginType}\n",
  "functionStartLine": 55,
  "functionEndLine": 78,
  "numCommitsSeen": 14,
  "timeTaken": 569,
  "changeHistory": [
    "ce111925adc1bf72df4e8d518c3af64e33daec2e",
    "b1c419992e2c88dcf57dceaadc2bd648cb3af25a",
    "fc6afc103ebddba5794856f90244b14c4a042a14",
    "08c0931684159e5f00f388e3de55cec97020e107"
  ],
  "changeHistoryShort": {
    "ce111925adc1bf72df4e8d518c3af64e33daec2e": "Ybodychange",
    "b1c419992e2c88dcf57dceaadc2bd648cb3af25a": "Ybodychange",
    "fc6afc103ebddba5794856f90244b14c4a042a14": "Ybodychange",
    "08c0931684159e5f00f388e3de55cec97020e107": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce111925adc1bf72df4e8d518c3af64e33daec2e": {
      "type": "Ybodychange",
      "commitMessage": "Added missing unit test coverage\n",
      "commitDate": "2018/2/19 下午1:36",
      "commitName": "ce111925adc1bf72df4e8d518c3af64e33daec2e",
      "commitAuthor": "Szczepan Faber",
      "commitDateOld": "2018/2/19 下午1:36",
      "commitNameOld": "b1c419992e2c88dcf57dceaadc2bd648cb3af25a",
      "commitAuthorOld": "Szczepan Faber",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\n\u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n    try {\n        PreferredType preferredPlugin \u003d initializer.loadImpl(preferredPluginType);\n        if (preferredPlugin !\u003d null) {\n            return preferredPlugin;\n        } else if (alternatePluginType !\u003d null) {\n            AlternateType alternatePlugin \u003d initializer.loadImpl(alternatePluginType);\n            if (alternatePlugin !\u003d null) {\n                return alternatePlugin;\n            }\n        }\n        return plugins.getDefaultPlugin(preferredPluginType);\n    } catch (final Throwable t) {\n        return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate: \" + alternatePluginType + \")\", t);\n            }\n        });\n    }\n}",
      "path": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java",
      "functionStartLine": 55,
      "functionName": "loadPlugin",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Scans the classpath for given {@code preferredPluginType}. If not found scan for {@code\nalternatePluginType}. If neither a preferred or alternate plugin is found, default to default\nclass of {@code preferredPluginType}.\n\n@return An object of either {@code preferredPluginType} or {@code alternatePluginType}\n",
      "diff": "@@ -1,27 +1,23 @@\n @SuppressWarnings(\"unchecked\")\n \u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n     try {\n         PreferredType preferredPlugin \u003d initializer.loadImpl(preferredPluginType);\n         if (preferredPlugin !\u003d null) {\n             return preferredPlugin;\n         } else if (alternatePluginType !\u003d null) {\n             AlternateType alternatePlugin \u003d initializer.loadImpl(alternatePluginType);\n             if (alternatePlugin !\u003d null) {\n                 return alternatePlugin;\n             }\n         }\n         return plugins.getDefaultPlugin(preferredPluginType);\n     } catch (final Throwable t) {\n         return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n \n             @Override\n             public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                if (alternatePluginType \u003d\u003d null) {\n-                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType, t);\n-                } else {\n-                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n-                }\n+                throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate: \" + alternatePluginType + \")\", t);\n             }\n         });\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b1c419992e2c88dcf57dceaadc2bd648cb3af25a": {
      "type": "Ybodychange",
      "commitMessage": "Busted complexity into separate classes\n\nThis way, it will be easier to write unit tests\n",
      "commitDate": "2018/2/19 下午1:36",
      "commitName": "b1c419992e2c88dcf57dceaadc2bd648cb3af25a",
      "commitAuthor": "Szczepan Faber",
      "commitDateOld": "2018/2/19 上午11:59",
      "commitNameOld": "fc6afc103ebddba5794856f90244b14c4a042a14",
      "commitAuthorOld": "Philip P. Moltmann",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\n\u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n    try {\n        PreferredType preferredPlugin \u003d initializer.loadImpl(preferredPluginType);\n        if (preferredPlugin !\u003d null) {\n            return preferredPlugin;\n        } else if (alternatePluginType !\u003d null) {\n            AlternateType alternatePlugin \u003d initializer.loadImpl(alternatePluginType);\n            if (alternatePlugin !\u003d null) {\n                return alternatePlugin;\n            }\n        }\n        return plugins.getDefaultPlugin(preferredPluginType);\n    } catch (final Throwable t) {\n        return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                if (alternatePluginType \u003d\u003d null) {\n                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType, t);\n                } else {\n                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n                }\n            }\n        });\n    }\n}",
      "path": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java",
      "functionStartLine": 50,
      "functionName": "loadPlugin",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Scans the classpath for given {@code preferredPluginType}. If not found scan for {@code\nalternatePluginType}. If neither a preferred or alternate plugin is found, default to default\nclass of {@code preferredPluginType}.\n\n@return An object of either {@code preferredPluginType} or {@code alternatePluginType}\n",
      "diff": "@@ -1,27 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n \u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n     try {\n-        PreferredType preferredPlugin \u003d loadImpl(preferredPluginType);\n+        PreferredType preferredPlugin \u003d initializer.loadImpl(preferredPluginType);\n         if (preferredPlugin !\u003d null) {\n             return preferredPlugin;\n         } else if (alternatePluginType !\u003d null) {\n-            AlternateType alternatePlugin \u003d loadImpl(alternatePluginType);\n+            AlternateType alternatePlugin \u003d initializer.loadImpl(alternatePluginType);\n             if (alternatePlugin !\u003d null) {\n                 return alternatePlugin;\n             }\n         }\n         return plugins.getDefaultPlugin(preferredPluginType);\n     } catch (final Throwable t) {\n         return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n \n             @Override\n             public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                 if (alternatePluginType \u003d\u003d null) {\n                     throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType, t);\n                 } else {\n                     throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n                 }\n             }\n         });\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc6afc103ebddba5794856f90244b14c4a042a14": {
      "type": "Ybodychange",
      "commitMessage": "Unify loadPlugin methods and add @since to new APIs\n",
      "commitDate": "2018/2/19 上午11:59",
      "commitName": "fc6afc103ebddba5794856f90244b14c4a042a14",
      "commitAuthor": "Philip P. Moltmann",
      "commitDateOld": "2018/2/19 上午11:59",
      "commitNameOld": "08c0931684159e5f00f388e3de55cec97020e107",
      "commitAuthorOld": "Philip P. Moltmann",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\n\u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n    try {\n        PreferredType preferredPlugin \u003d loadImpl(preferredPluginType);\n        if (preferredPlugin !\u003d null) {\n            return preferredPlugin;\n        } else if (alternatePluginType !\u003d null) {\n            AlternateType alternatePlugin \u003d loadImpl(alternatePluginType);\n            if (alternatePlugin !\u003d null) {\n                return alternatePlugin;\n            }\n        }\n        return plugins.getDefaultPlugin(preferredPluginType);\n    } catch (final Throwable t) {\n        return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                if (alternatePluginType \u003d\u003d null) {\n                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType, t);\n                } else {\n                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n                }\n            }\n        });\n    }\n}",
      "path": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java",
      "functionStartLine": 58,
      "functionName": "loadPlugin",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Scans the classpath for given {@code preferredPluginType}. If not found scan for {@code\nalternatePluginType}. If neither a preferred or alternate plugin is found, default to default\nclass of {@code preferredPluginType}.\n\n@return An object of either {@code preferredPluginType} or {@code alternatePluginType}\n",
      "diff": "@@ -1,23 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n \u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n     try {\n         PreferredType preferredPlugin \u003d loadImpl(preferredPluginType);\n         if (preferredPlugin !\u003d null) {\n             return preferredPlugin;\n-        } else {\n+        } else if (alternatePluginType !\u003d null) {\n             AlternateType alternatePlugin \u003d loadImpl(alternatePluginType);\n             if (alternatePlugin !\u003d null) {\n                 return alternatePlugin;\n             }\n         }\n         return plugins.getDefaultPlugin(preferredPluginType);\n     } catch (final Throwable t) {\n         return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n \n             @Override\n             public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n+                if (alternatePluginType \u003d\u003d null) {\n+                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType, t);\n+                } else {\n+                    throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n+                }\n             }\n         });\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "08c0931684159e5f00f388e3de55cec97020e107": {
      "type": "Yintroduced",
      "commitMessage": "Move compatiblity plugin loading to PluginLoader\n",
      "commitDate": "2018/2/19 上午11:59",
      "commitName": "08c0931684159e5f00f388e3de55cec97020e107",
      "commitAuthor": "Philip P. Moltmann",
      "diff": "@@ -0,0 +1,23 @@\n+@SuppressWarnings(\"unchecked\")\n+\u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n+    try {\n+        PreferredType preferredPlugin \u003d loadImpl(preferredPluginType);\n+        if (preferredPlugin !\u003d null) {\n+            return preferredPlugin;\n+        } else {\n+            AlternateType alternatePlugin \u003d loadImpl(alternatePluginType);\n+            if (alternatePlugin !\u003d null) {\n+                return alternatePlugin;\n+            }\n+        }\n+        return plugins.getDefaultPlugin(preferredPluginType);\n+    } catch (final Throwable t) {\n+        return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n+\n+            @Override\n+            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n+            }\n+        });\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\n\u003cPreferredType, AlternateType\u003e Object loadPlugin(final Class\u003cPreferredType\u003e preferredPluginType, final Class\u003cAlternateType\u003e alternatePluginType) {\n    try {\n        PreferredType preferredPlugin \u003d loadImpl(preferredPluginType);\n        if (preferredPlugin !\u003d null) {\n            return preferredPlugin;\n        } else {\n            AlternateType alternatePlugin \u003d loadImpl(alternatePluginType);\n            if (alternatePlugin !\u003d null) {\n                return alternatePlugin;\n            }\n        }\n        return plugins.getDefaultPlugin(preferredPluginType);\n    } catch (final Throwable t) {\n        return Proxy.newProxyInstance(preferredPluginType.getClassLoader(), new Class\u003c?\u003e[] { preferredPluginType }, new InvocationHandler() {\n\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                throw new IllegalStateException(\"Could not initialize plugin: \" + preferredPluginType + \" (alternate \" + alternatePluginType + \")\", t);\n            }\n        });\n    }\n}",
      "path": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java",
      "functionStartLine": 74,
      "functionName": "loadPlugin",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Scans the classpath for given {@code preferredPluginType}. If not found scan for {@code\nalternatePluginType}. If neither a preferred or alternate plugin is found, default to default\nclass of {@code preferredPluginType}.\n\n@return An object of either {@code preferredPluginType} or {@code alternatePluginType}\n"
    }
  }
}