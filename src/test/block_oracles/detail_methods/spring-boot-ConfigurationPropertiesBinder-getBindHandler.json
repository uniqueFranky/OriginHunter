{
  "origin": "codeshovel",
  "repositoryName": "spring-boot",
  "repositoryPath": "/Users/franky/Documents/Homework/毕业设计/testcase/spring-boot/.git",
  "startCommitName": "5cfe8dbee950dbf3a8de3ece2f6f3363f13d904a",
  "sourceFileName": "ConfigurationPropertiesBinder.java",
  "functionName": "getBindHandler",
  "functionId": "getBindHandler___annotation-ConfigurationProperties__validators-List__Validator__",
  "sourceFilePath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 115,
  "functionEndLine": 130,
  "numCommitsSeen": 91,
  "timeTaken": 2825,
  "changeHistory": [
    "26811b89746debffe33c27e7f78a139e1a4a0106",
    "4b9c3c137e39806e0459552e8474fd8a5bb59a9a",
    "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
    "0ba4830b4fb20deea040ca5e1c9a34651708b222",
    "67fc5ca4335d5692707a25d22fc0045d9237bccf",
    "00430ac2161e3d9e7ee9546e87d74e2bd85f2f85"
  ],
  "changeHistoryShort": {
    "26811b89746debffe33c27e7f78a139e1a4a0106": "Ybodychange",
    "4b9c3c137e39806e0459552e8474fd8a5bb59a9a": "Ybodychange",
    "1d83e87bcdcd0a70680ac834900ddd3821cc65b9": "Ymultichange(Yparameterchange,Ybodychange)",
    "0ba4830b4fb20deea040ca5e1c9a34651708b222": "Yfilerename",
    "67fc5ca4335d5692707a25d22fc0045d9237bccf": "Ymovefromfile",
    "00430ac2161e3d9e7ee9546e87d74e2bd85f2f85": "Ybodychange"
  },
  "changeHistoryDetails": {
    "26811b89746debffe33c27e7f78a139e1a4a0106": {
      "type": "Ybodychange",
      "commitMessage": "Ignore top-level ConfigurationProperty binding failures\n\nFixes gh-12357\n",
      "commitDate": "2018/3/10 上午2:36",
      "commitName": "26811b89746debffe33c27e7f78a139e1a4a0106",
      "commitAuthor": "Madhura Bhave",
      "commitDateOld": "2018/2/23 下午1:11",
      "commitNameOld": "4b9c3c137e39806e0459552e8474fd8a5bb59a9a",
      "commitAuthorOld": "Phillip Webb",
      "daysBetweenCommits": 14.56,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n    BindHandler handler \u003d new IgnoreTopLevelConverterNotFoundBindHandler();\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (!validators.isEmpty()) {\n        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[0]));\n    }\n    return handler;\n}",
      "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
      "functionStartLine": 105,
      "functionName": "getBindHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n-    BindHandler handler \u003d BindHandler.DEFAULT;\n+    BindHandler handler \u003d new IgnoreTopLevelConverterNotFoundBindHandler();\n     if (annotation.ignoreInvalidFields()) {\n         handler \u003d new IgnoreErrorsBindHandler(handler);\n     }\n     if (!annotation.ignoreUnknownFields()) {\n         UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n         handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n     }\n     if (!validators.isEmpty()) {\n         handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[0]));\n     }\n     return handler;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b9c3c137e39806e0459552e8474fd8a5bb59a9a": {
      "type": "Ybodychange",
      "commitMessage": "Polish Collection.toArray\n\nConsistently use `StringUtils.toStringArray`, `ClassUtils.toClassArray`\nor zero length when converting collections to arrays.\n\nFixes gh-12160\n",
      "commitDate": "2018/2/23 下午1:11",
      "commitName": "4b9c3c137e39806e0459552e8474fd8a5bb59a9a",
      "commitAuthor": "Phillip Webb",
      "commitDateOld": "2018/2/20 下午12:25",
      "commitNameOld": "20109e27be24da74e884c14a03afc8f9561e4196",
      "commitAuthorOld": "Phillip Webb",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n    BindHandler handler \u003d BindHandler.DEFAULT;\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (!validators.isEmpty()) {\n        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[0]));\n    }\n    return handler;\n}",
      "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
      "functionStartLine": 104,
      "functionName": "getBindHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n     BindHandler handler \u003d BindHandler.DEFAULT;\n     if (annotation.ignoreInvalidFields()) {\n         handler \u003d new IgnoreErrorsBindHandler(handler);\n     }\n     if (!annotation.ignoreUnknownFields()) {\n         UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n         handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n     }\n     if (!validators.isEmpty()) {\n-        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[validators.size()]));\n+        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[0]));\n     }\n     return handler;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1d83e87bcdcd0a70680ac834900ddd3821cc65b9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Validate @ConfigurationProperties on @Bean methods\n\nRefactor `ConfigurationPropertiesBindingPostProcessor` to allow JSR-303\nvalidation on `@ConfigurationProperties` defined at the `@Bean` method\nlevel.\n\nJSR-303 validation is now applied when a JSR-303 implementation is\navailable and `@Validated` is present on either the configuration\nproperties class itself or the `@Bean` method that creates it.\n\nStandard Spring validation is also supported using a validator bean\nnamed `configurationPropertiesValidator`, or by having the configuration\nproperties implement `Validator`.\n\nThe commit also consolidates tests into a single location.\n\nFixes gh-10803\n",
      "commitDate": "2018/2/17 上午10:11",
      "commitName": "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
      "commitAuthor": "Phillip Webb",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Validate @ConfigurationProperties on @Bean methods\n\nRefactor `ConfigurationPropertiesBindingPostProcessor` to allow JSR-303\nvalidation on `@ConfigurationProperties` defined at the `@Bean` method\nlevel.\n\nJSR-303 validation is now applied when a JSR-303 implementation is\navailable and `@Validated` is present on either the configuration\nproperties class itself or the `@Bean` method that creates it.\n\nStandard Spring validation is also supported using a validator bean\nnamed `configurationPropertiesValidator`, or by having the configuration\nproperties implement `Validator`.\n\nThe commit also consolidates tests into a single location.\n\nFixes gh-10803\n",
          "commitDate": "2018/2/17 上午10:11",
          "commitName": "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
          "commitAuthor": "Phillip Webb",
          "commitDateOld": "2018/2/8 下午6:53",
          "commitNameOld": "76a450dfba1b79a511eed0ea426a911207e9d3a2",
          "commitAuthorOld": "Andy Wilkinson",
          "daysBetweenCommits": 8.64,
          "commitsBetweenForRepo": 162,
          "commitsBetweenForFile": 1,
          "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n    BindHandler handler \u003d BindHandler.DEFAULT;\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (!validators.isEmpty()) {\n        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[validators.size()]));\n    }\n    return handler;\n}",
          "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
          "functionStartLine": 99,
          "functionName": "getBindHandler",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,14 @@\n-private BindHandler getBindHandler(ConfigurationProperties annotation, Validator validator) {\n+private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n     BindHandler handler \u003d BindHandler.DEFAULT;\n     if (annotation.ignoreInvalidFields()) {\n         handler \u003d new IgnoreErrorsBindHandler(handler);\n     }\n     if (!annotation.ignoreUnknownFields()) {\n         UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n         handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n     }\n-    if (validator !\u003d null) {\n-        handler \u003d new ValidationBindHandler(handler, validator);\n+    if (!validators.isEmpty()) {\n+        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[validators.size()]));\n     }\n     return handler;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[annotation-ConfigurationProperties, validator-Validator]",
            "newValue": "[annotation-ConfigurationProperties, validators-List\u003cValidator\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Validate @ConfigurationProperties on @Bean methods\n\nRefactor `ConfigurationPropertiesBindingPostProcessor` to allow JSR-303\nvalidation on `@ConfigurationProperties` defined at the `@Bean` method\nlevel.\n\nJSR-303 validation is now applied when a JSR-303 implementation is\navailable and `@Validated` is present on either the configuration\nproperties class itself or the `@Bean` method that creates it.\n\nStandard Spring validation is also supported using a validator bean\nnamed `configurationPropertiesValidator`, or by having the configuration\nproperties implement `Validator`.\n\nThe commit also consolidates tests into a single location.\n\nFixes gh-10803\n",
          "commitDate": "2018/2/17 上午10:11",
          "commitName": "1d83e87bcdcd0a70680ac834900ddd3821cc65b9",
          "commitAuthor": "Phillip Webb",
          "commitDateOld": "2018/2/8 下午6:53",
          "commitNameOld": "76a450dfba1b79a511eed0ea426a911207e9d3a2",
          "commitAuthorOld": "Andy Wilkinson",
          "daysBetweenCommits": 8.64,
          "commitsBetweenForRepo": 162,
          "commitsBetweenForFile": 1,
          "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n    BindHandler handler \u003d BindHandler.DEFAULT;\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (!validators.isEmpty()) {\n        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[validators.size()]));\n    }\n    return handler;\n}",
          "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
          "functionStartLine": 99,
          "functionName": "getBindHandler",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,14 @@\n-private BindHandler getBindHandler(ConfigurationProperties annotation, Validator validator) {\n+private BindHandler getBindHandler(ConfigurationProperties annotation, List\u003cValidator\u003e validators) {\n     BindHandler handler \u003d BindHandler.DEFAULT;\n     if (annotation.ignoreInvalidFields()) {\n         handler \u003d new IgnoreErrorsBindHandler(handler);\n     }\n     if (!annotation.ignoreUnknownFields()) {\n         UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n         handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n     }\n-    if (validator !\u003d null) {\n-        handler \u003d new ValidationBindHandler(handler, validator);\n+    if (!validators.isEmpty()) {\n+        handler \u003d new ValidationBindHandler(handler, validators.toArray(new Validator[validators.size()]));\n     }\n     return handler;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0ba4830b4fb20deea040ca5e1c9a34651708b222": {
      "type": "Yfilerename",
      "commitMessage": "Relocate projects to spring-boot-project\n\nMove projects to better reflect the way that Spring Boot is released.\n\nThe following projects are under `spring-boot-project`:\n\n  - `spring-boot`\n  - `spring-boot-autoconfigure`\n  - `spring-boot-tools`\n  - `spring-boot-starters`\n  - `spring-boot-actuator`\n  - `spring-boot-actuator-autoconfigure`\n  - `spring-boot-test`\n  - `spring-boot-test-autoconfigure`\n  - `spring-boot-devtools`\n  - `spring-boot-cli`\n  - `spring-boot-docs`\n\nSee gh-9316\n",
      "commitDate": "2017/10/5 上午7:34",
      "commitName": "0ba4830b4fb20deea040ca5e1c9a34651708b222",
      "commitAuthor": "Phillip Webb",
      "commitDateOld": "2017/10/5 上午7:04",
      "commitNameOld": "0419d42b7ca37611955bc0211359c215e5477fa4",
      "commitAuthorOld": "Phillip Webb",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, Validator validator) {\n    BindHandler handler \u003d BindHandler.DEFAULT;\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (validator !\u003d null) {\n        handler \u003d new ValidationBindHandler(handler, validator);\n    }\n    return handler;\n}",
      "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
      "functionStartLine": 130,
      "functionName": "getBindHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
        "newPath": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java"
      }
    },
    "67fc5ca4335d5692707a25d22fc0045d9237bccf": {
      "type": "Ymovefromfile",
      "commitMessage": "Create a public API to bind a ConfigurationProperties object\n\nPreviously, the API used to bind a ConfigurationProperties annotated\nobject was private to the BeanPostProcessor implementation.\n\nThis commit moves most of the logic to ConfigurationPropertiesBinder. As\nwe want this object to have the same state regardless of how it is built,\na builder is now provided that detects the components that the binder\nneeds if not specified explicitly.\n\nCloses gh-8344\n",
      "commitDate": "2017/9/5 下午2:51",
      "commitName": "67fc5ca4335d5692707a25d22fc0045d9237bccf",
      "commitAuthor": "Stephane Nicoll",
      "commitDateOld": "2017/9/4 下午9:40",
      "commitNameOld": "9242def4c0753278599614d22e07c076f5e246ec",
      "commitAuthorOld": "Andy Wilkinson",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, Validator validator) {\n    BindHandler handler \u003d BindHandler.DEFAULT;\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (validator !\u003d null) {\n        handler \u003d new ValidationBindHandler(handler, validator);\n    }\n    return handler;\n}",
      "path": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
      "functionStartLine": 130,
      "functionName": "getBindHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java",
        "newPath": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java",
        "oldMethodName": "getBindHandler",
        "newMethodName": "getBindHandler"
      }
    },
    "00430ac2161e3d9e7ee9546e87d74e2bd85f2f85": {
      "type": "Ybodychange",
      "commitMessage": "Ignore unbound env variables and system props\n\nCloses gh-3832\n",
      "commitDate": "2017/7/18 上午6:09",
      "commitName": "00430ac2161e3d9e7ee9546e87d74e2bd85f2f85",
      "commitAuthor": "Madhura Bhave",
      "commitDateOld": "2017/7/7 上午9:38",
      "commitNameOld": "eb17aa06f9e542f5d8fdfdb5423adcd16e5efb57",
      "commitAuthorOld": "",
      "daysBetweenCommits": 10.85,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "private BindHandler getBindHandler(ConfigurationProperties annotation, Validator validator) {\n    BindHandler handler \u003d BindHandler.DEFAULT;\n    if (annotation.ignoreInvalidFields()) {\n        handler \u003d new IgnoreErrorsBindHandler(handler);\n    }\n    if (!annotation.ignoreUnknownFields()) {\n        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n    }\n    if (validator !\u003d null) {\n        handler \u003d new ValidationBindHandler(handler, validator);\n    }\n    return handler;\n}",
      "path": "spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java",
      "functionStartLine": 417,
      "functionName": "getBindHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,14 @@\n private BindHandler getBindHandler(ConfigurationProperties annotation, Validator validator) {\n     BindHandler handler \u003d BindHandler.DEFAULT;\n     if (annotation.ignoreInvalidFields()) {\n         handler \u003d new IgnoreErrorsBindHandler(handler);\n     }\n     if (!annotation.ignoreUnknownFields()) {\n-        handler \u003d new NoUnboundElementsBindHandler(handler);\n+        UnboundElementsSourceFilter filter \u003d new UnboundElementsSourceFilter();\n+        handler \u003d new NoUnboundElementsBindHandler(handler, filter);\n     }\n     if (validator !\u003d null) {\n         handler \u003d new ValidationBindHandler(handler, validator);\n     }\n     return handler;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    }
  }
}