{
  "statementVersions": [
    {
      "commit": "5cb71ec0e66a7e411c7d238d4b4e53b1c2c27316",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource defaultTestSource = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                Optional<JupiterTestDescriptor> descriptor = createDynamicDescriptor(this, dynamicNode, index++, defaultTestSource, getDynamicDescendantFilter());\n                descriptor.ifPresent(dynamicTestExecutor::execute);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "fbbd70b7cbbe299b01794446dfa251b3b9e727ad",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                Optional<JupiterTestDescriptor> descriptor = createDynamicDescriptor(this, dynamicNode, index++, source, getDynamicDescendantFilter());\n                descriptor.ifPresent(dynamicTestExecutor::execute);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "bef03b5ce4c2385a99b13ac1a3354ac2ca8acc96",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "7b9267e3665c8550f4d2c9fda4cc6ce24e054cff",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = getRequiredTestInstance(extensionContext);\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "a97e4d3088f97b58031b139c006a98c8e0f49422",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "0836f8f28601d1d27d07ad302c6aa1ef9f2ab023",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    AbstractExtensionContext<?> extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = extensionContext.getRequiredTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "83b3eb665aa35a87cfd8484e0d06cc3b3d0478c7",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    ExtensionContext extensionContext = context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = extensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, extensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "47f824eb5602822093a2cd4fe31c5209ee1e5cbb",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Illegal state: TestSource must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "fdadf905479b4cd63f1987d08940eddfbf89d088",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance().orElseThrow(() -> new JUnitException(\"Illegal state: test instance not present for method: \" + getTestMethod().toGenericString()));\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "ee8cb2e44a92c511bc73553f2005ecc890bec141",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance().get();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "afcec01a9c1c8302a81785dc2ad22e01ddb249b7",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "66cfa8aecb6dcadacd4c2c09eaa3f1f3855db080",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n        try (BaseStream<DynamicNode, ?> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "1a57e4f386a9f8cd6be0a08a4d914349d32a7f01",
      "startLine": 3,
      "endLine": 19,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        TestSource source = getSource().orElseThrow(() -> new JUnitException(\"Test source must be present\"));\n        try (Stream<DynamicNode> dynamicNodeStream = toDynamicNodeStream(testFactoryMethodResult)) {\n            int index = 1;\n            Iterator<DynamicNode> iterator = dynamicNodeStream.iterator();\n            while (iterator.hasNext()) {\n                DynamicNode dynamicNode = iterator.next();\n                JupiterTestDescriptor descriptor = createDynamicDescriptor(this, dynamicNode, index++, source);\n                dynamicTestExecutor.execute(descriptor);\n            }\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "3bfdaa969d89efce3f1d0bd1320c0212ef07a6cb",
      "startLine": 3,
      "endLine": 13,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        try (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult)) {\n            AtomicInteger index = new AtomicInteger();\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "9838fabf19e19b0e6cc80da85aeac94b427867d5",
      "startLine": 3,
      "endLine": 13,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(getTestMethod(), instance, testExtensionContext, context.getExtensionRegistry());\n        try (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n            AtomicInteger index = new AtomicInteger();\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(ex);\n        }\n    });\n}"
    },
    {
      "commit": "21b61f5b1b5337625a505cd28dd2761f09a35536",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try (Stream<DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext, testFactoryMethodResult)) {\n            AtomicInteger index = new AtomicInteger();\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "fc3c61b41f014a2500f176e23fe8ad2989d20565",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, DynamicTestExecutor dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "4b41518fa052b28a953e99b087d505603a22c175",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, Consumer<TestDescriptor> dynamicTestExecutor) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    context.getThrowableCollector().execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), dynamicTestExecutor));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "3e3b402131a99f01480c57dd82c2e81ad6d9a4ea",
      "startLine": 3,
      "endLine": 15,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context) {\n    TestExtensionContext testExtensionContext = (TestExtensionContext) context.getExtensionContext();\n    EngineExecutionListener listener = context.getExecutionListener();\n    context.getThrowableCollector().execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "babcc661bd906b38a272f287ac8779669268fc58",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JupiterEngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "507e50872c6df8a66c32f45cb2153555f510c4b1",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "502a023f5c878321f08ab83bfe9e9395599cbb4e",
      "startLine": 3,
      "endLine": 14,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        try {\n            AtomicInteger index = new AtomicInteger();\n            toDynamicTestStream(testExtensionContext, testFactoryMethodResult).forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException ex) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "e0e131335d2117a2a1630db22260a258e47d8c4d",
      "startLine": 3,
      "endLine": 15,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        Object testFactoryMethodResult = executableInvoker.invoke(method, instance, testExtensionContext, context.getExtensionRegistry());\n        Stream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n        AtomicInteger index = new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "9eacc9c2d51557bffa003ca24fa125b8cbe69bbb",
      "startLine": 3,
      "endLine": 16,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        Method method = testExtensionContext.getTestMethod().get();\n        Object instance = testExtensionContext.getTestInstance();\n        ExecutableInvoker methodInvoker = new ExecutableInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult = methodInvoker.invoke(method, instance);\n        Stream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n        AtomicInteger index = new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "24339be6d3fcc499da1c7623cfb8f8b08c183727",
      "startLine": 3,
      "endLine": 15,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        MethodInvocationContext methodInvocationContext = methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n        MethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n        Stream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testExtensionContext, testFactoryMethodResult);\n        AtomicInteger index = new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw invalidReturnTypeException(testExtensionContext);\n        }\n    });\n}"
    },
    {
      "commit": "64b948139b96395899f2852d3cab932a852ed5d8",
      "startLine": 3,
      "endLine": 15,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        MethodInvocationContext methodInvocationContext = methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod().get());\n        MethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n        Stream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult);\n        AtomicInteger index = new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}"
    },
    {
      "commit": "77f7820ffc9ec56f3e6ec88c9bb1f5b77445a25d",
      "startLine": 3,
      "endLine": 15,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        MethodInvocationContext methodInvocationContext = methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        MethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object testFactoryMethodResult = methodInvoker.invoke(methodInvocationContext);\n        Stream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(testFactoryMethodResult);\n        AtomicInteger index = new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}"
    },
    {
      "commit": "abcdd7d3b4e072923ac92a2ed99dbc6ce0954319",
      "startLine": 3,
      "endLine": 15,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        MethodInvocationContext methodInvocationContext = methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        MethodInvoker methodInvoker = new MethodInvoker(testExtensionContext, context.getExtensionRegistry());\n        Object dynamicMethodResult = methodInvoker.invoke(methodInvocationContext);\n        Stream<? extends DynamicTest> dynamicTestStream = toDynamicTestStream(dynamicMethodResult);\n        AtomicInteger index = new AtomicInteger();\n        try {\n            dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n        } catch (ClassCastException cce) {\n            throw new JUnitException(\"Dynamic test must return Stream, Collection or Iterator of \" + DynamicTest.class);\n        }\n    });\n}"
    },
    {
      "commit": "ac7bb522519cd8a600324aa909a5c17a110cb97f",
      "startLine": 3,
      "endLine": 9,
      "methodCode": "@Override\nprotected void invokeTestMethod(JUnit5EngineExecutionContext context, TestExtensionContext testExtensionContext, ThrowableCollector throwableCollector) {\n    EngineExecutionListener listener = context.getExecutionListener();\n    throwableCollector.execute(() -> {\n        MethodInvocationContext methodInvocationContext = methodInvocationContext(testExtensionContext.getTestInstance(), testExtensionContext.getTestMethod());\n        Stream<DynamicTest> dynamicTestStream = (Stream<DynamicTest>) new MethodInvoker(testExtensionContext, context.getExtensionRegistry()).invoke(methodInvocationContext);\n        AtomicInteger index = new AtomicInteger();\n        dynamicTestStream.forEach(dynamicTest -> registerAndExecute(dynamicTest, index.incrementAndGet(), listener));\n    });\n}"
    }
  ]
}