{
  "statementVersions": [
    {
      "commit": "88654b79c92386b7c411f064cc373e7698a49449",
      "startLine": 47,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Character.MAX_CODE_POINT;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final int zero_digit_ascii = 48;\n    final int first_letter_ascii = 65;\n    if (chars == null && (numbers && end <= zero_digit_ascii || letters && end <= first_letter_ascii)) {\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" + \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n    }\n    final StringBuilder builder = new StringBuilder(count);\n    final int gap = end - start;\n    while (count-- != 0) {\n        int codePoint;\n        if (chars == null) {\n            codePoint = random.nextInt(gap) + start;\n            switch(Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n            }\n        } else {\n            codePoint = chars[random.nextInt(gap) + start];\n        }\n        final int numberOfChars = Character.charCount(codePoint);\n        if (count == 0 && numberOfChars > 1) {\n            count++;\n            continue;\n        }\n        if (letters && Character.isLetter(codePoint) || numbers && Character.isDigit(codePoint) || !letters && !numbers) {\n            builder.appendCodePoint(codePoint);\n            if (numberOfChars == 2) {\n                count--;\n            }\n        } else {\n            count++;\n        }\n    }\n    return builder.toString();\n}"
    },
    {
      "commit": "1da8ccdbfe2faa3e6801fe44eaf3c336aab48bec",
      "startLine": 47,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Character.MAX_CODE_POINT;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final int zero_digit_ascii = 48;\n    final int first_letter_ascii = 65;\n    if (chars == null && (numbers && end <= zero_digit_ascii || letters && end <= first_letter_ascii)) {\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" + \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n    }\n    StringBuilder builder = new StringBuilder(count);\n    final int gap = end - start;\n    while (count-- != 0) {\n        int codePoint;\n        if (chars == null) {\n            codePoint = random.nextInt(gap) + start;\n            switch(Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n            }\n        } else {\n            codePoint = chars[random.nextInt(gap) + start];\n        }\n        final int numberOfChars = Character.charCount(codePoint);\n        if (count == 0 && numberOfChars > 1) {\n            count++;\n            continue;\n        }\n        if (letters && Character.isLetter(codePoint) || numbers && Character.isDigit(codePoint) || !letters && !numbers) {\n            builder.appendCodePoint(codePoint);\n            if (numberOfChars == 2) {\n                count--;\n            }\n        } else {\n            count++;\n        }\n    }\n    return builder.toString();\n}"
    },
    {
      "commit": "c82b1f062af2a1a376e514020707597f6ed1f82d",
      "startLine": 47,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Character.MAX_CODE_POINT;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final int zero_digit_ascii = 48;\n    final int first_letter_ascii = 65;\n    if (chars == null && (numbers && end <= zero_digit_ascii || letters && end <= first_letter_ascii)) {\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" + \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n    }\n    StringBuilder builder = new StringBuilder(count);\n    final int gap = end - start;\n    while (count-- != 0) {\n        int codePoint;\n        if (chars == null) {\n            codePoint = random.nextInt(gap) + start;\n            switch(Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n            }\n        } else {\n            codePoint = chars[random.nextInt(gap) + start];\n        }\n        final int numberOfChars = Character.charCount(codePoint);\n        if (count == 0 && numberOfChars > 1) {\n            count++;\n            continue;\n        }\n        if (letters && Character.isLetter(codePoint) || numbers && Character.isDigit(codePoint) || !letters && !numbers) {\n            builder.appendCodePoint(codePoint);\n            if (numberOfChars == 2) {\n                count--;\n            }\n        } else {\n            count++;\n        }\n    }\n    return builder.toString();\n}"
    },
    {
      "commit": "30c85ad05363767deeefee577063c2c432b971d4",
      "startLine": 49,
      "endLine": 61,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Character.MAX_CODE_POINT;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final int zero_digit_ascii = 48;\n    final int first_letter_ascii = 65;\n    if (chars == null) {\n        if (numbers && end <= zero_digit_ascii || letters && end <= first_letter_ascii) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" + \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n        }\n    }\n    StringBuilder builder = new StringBuilder(count);\n    final int gap = end - start;\n    while (count-- != 0) {\n        int codePoint;\n        if (chars == null) {\n            codePoint = random.nextInt(gap) + start;\n            switch(Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n            }\n        } else {\n            codePoint = chars[random.nextInt(gap) + start];\n        }\n        final int numberOfChars = Character.charCount(codePoint);\n        if (count == 0 && numberOfChars > 1) {\n            count++;\n            continue;\n        }\n        if (letters && Character.isLetter(codePoint) || numbers && Character.isDigit(codePoint) || !letters && !numbers) {\n            builder.appendCodePoint(codePoint);\n            if (numberOfChars == 2) {\n                count--;\n            }\n        } else {\n            count++;\n        }\n    }\n    return builder.toString();\n}"
    },
    {
      "commit": "f643b4fa939e89348618ddffae20a804f4461363",
      "startLine": 49,
      "endLine": 61,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Character.MAX_CODE_POINT;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final int zero_digit_ascii = 48;\n    final int first_letter_ascii = 65;\n    if (chars == null) {\n        if (numbers && end <= zero_digit_ascii || letters && end <= first_letter_ascii) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" + \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n        }\n    }\n    StringBuffer buffer = new StringBuffer(count);\n    final int gap = end - start;\n    while (count-- != 0) {\n        int codePoint;\n        if (chars == null) {\n            codePoint = random.nextInt(gap) + start;\n            switch(Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n            }\n        } else {\n            codePoint = chars[random.nextInt(gap) + start];\n        }\n        final int numberOfChars = Character.charCount(codePoint);\n        if (count == 0 && numberOfChars > 1) {\n            count++;\n            continue;\n        }\n        if (letters && Character.isLetter(codePoint) || numbers && Character.isDigit(codePoint) || !letters && !numbers) {\n            buffer.appendCodePoint(codePoint);\n            if (numberOfChars == 2) {\n                count--;\n            }\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "695342cb1cef42f30fd1a8496f181c92b21ae82d",
      "startLine": 42,
      "endLine": 66,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final int zero_digit_ascii = 48;\n    final int first_letter_ascii = 65;\n    if (chars == null) {\n        if (numbers && end <= zero_digit_ascii || letters && end <= first_letter_ascii) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" + \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n        }\n    }\n    final char[] buffer = new char[count];\n    final int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "15b80753a6e8f481ea5029bc278e362994cb7bee",
      "startLine": 35,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return StringUtils.EMPTY;\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final char[] buffer = new char[count];\n    final int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "5292526e476ffbb19c6613a98464054236c86ace",
      "startLine": 35,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    final char[] buffer = new char[count];\n    final int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "startLine": 35,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "4a65cb8da23d6667ac6f91775309b4da9b315d95",
      "startLine": 35,
      "endLine": 59,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    } else {\n        if (end <= start) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "27bcbcc728434ffb2c45e81c0e75e6a3d6da3441",
      "startLine": 31,
      "endLine": 55,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = 'z' + 1;\n                start = ' ';\n            }\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "371e866442f46131cc38a9a5018e1703f52f9b60",
      "startLine": 24,
      "endLine": 48,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (start == 0 && end == 0) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "0ca84735ad3df33dfb48e9e165db5cb689783869",
      "startLine": 24,
      "endLine": 48,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "startLine": 24,
      "endLine": 48,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "startLine": 24,
      "endLine": 48,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "b01434196523fc67daa5d9379c4465b68961fd53",
      "startLine": 24,
      "endLine": 48,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            if (ch >= 56320 && ch <= 57343) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (55296 + random.nextInt(128));\n                }\n            } else if (ch >= 55296 && ch <= 56191) {\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (56320 + random.nextInt(128));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 56192 && ch <= 56319) {\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "c79adcc3f0b99cb838155909a989fbd7bd71e600",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer[count] = ch;\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}"
    },
    {
      "commit": "fac4f8d2d6c980440cbf582f3e0bfff3055aab3b",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "7edd55554a03d7cdaefd12e4a319a0059414fb99",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = set[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "e81e45f27fb6b3b4d82baa473e90e49d0317b77a",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = 'z' + 1;\n        start = ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = set[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "0dd253a756b2cf808ea9c534f323a9a7d590cc74",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z' + 1;\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = set[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "8f45918465c1c992d55fe08f2d7e49689b722b38",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z' + 1;\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = set[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "3ac32dd142df1d1e0a5a36f224dcc73b1fa066e5",
      "startLine": 24,
      "endLine": 28,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z';\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = set[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242",
      "startLine": 19,
      "endLine": 23,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z';\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = set[random.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "7477a1e08fae75215763db8a837b8ca2a2bc9e6b",
      "startLine": 19,
      "endLine": 23,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z';\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (RANDOM.nextInt(gap) + start);\n        } else {\n            ch = set[RANDOM.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "031ff96cd3a9e319689e7df5a0b6272c16202256",
      "startLine": 19,
      "endLine": 23,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z';\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (RANDOM.nextInt(gap) + start);\n        } else {\n            ch = set[RANDOM.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    },
    {
      "commit": "6627f7ad8fb08d6c23b83d6c9f0a6830e9e7085a",
      "startLine": 19,
      "endLine": 23,
      "methodCode": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n    if ((start == 0) && (end == 0)) {\n        end = (int) 'z';\n        start = (int) ' ';\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        }\n    }\n    StringBuffer buffer = new StringBuffer();\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (set == null) {\n            ch = (char) (RANDOM.nextInt(gap) + start);\n        } else {\n            ch = set[RANDOM.nextInt(gap) + start];\n        }\n        if ((letters && numbers && Character.isLetterOrDigit(ch)) || (letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            buffer.append(ch);\n        } else {\n            count++;\n        }\n    }\n    return buffer.toString();\n}"
    }
  ]
}