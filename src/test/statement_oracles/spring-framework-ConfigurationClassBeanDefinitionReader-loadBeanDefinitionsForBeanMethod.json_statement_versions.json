{
  "statementVersions": [
    {
      "commit": "c037e75f26ac5ef69e4d5fc3045e101ca674dcaf",
      "startLine": 13,
      "endLine": 25,
      "methodCode": "@SuppressWarnings(\"deprecation\")\nprivate void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    Assert.state(bean != null, \"No @Bean annotation attributes\");\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {\n            throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(), beanName, \"Bean name derived from @Bean method '\" + beanMethod.getMetadata().getMethodName() + \"' clashes with bean name for containing configuration class; please make those names unique!\");\n        }\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    boolean autowireCandidate = bean.getBoolean(\"autowireCandidate\");\n    if (!autowireCandidate) {\n        beanDef.setAutowireCandidate(false);\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    beanDef.setDestroyMethodName(destroyMethodName);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isTraceEnabled()) {\n        logger.trace(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "fc699b2b3784413bb7348b8c2a92eb2ab871479f",
      "startLine": 13,
      "endLine": 25,
      "methodCode": "@SuppressWarnings(\"deprecation\")\nprivate void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    Assert.state(bean != null, \"No @Bean annotation attributes\");\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {\n            throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(), beanName, \"Bean name derived from @Bean method '\" + beanMethod.getMetadata().getMethodName() + \"' clashes with bean name for containing configuration class; please make those names unique!\");\n        }\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    boolean autowireCandidate = bean.getBoolean(\"autowireCandidate\");\n    if (!autowireCandidate) {\n        beanDef.setAutowireCandidate(false);\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    beanDef.setDestroyMethodName(destroyMethodName);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "81cb740e0ae23b6bd167f5c42ceae8294a27a14a",
      "startLine": 13,
      "endLine": 25,
      "methodCode": "@SuppressWarnings(\"deprecation\")\nprivate void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    Assert.state(bean != null, \"No @Bean annotation attributes\");\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {\n            throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(), beanName, \"Bean name derived from @Bean method '\" + beanMethod.getMetadata().getMethodName() + \"' clashes with bean name for containing configuration class; please make those names unique!\");\n        }\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    beanDef.setDestroyMethodName(destroyMethodName);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "bca5a362168e2dad27f273966857fb2f6b9fcd88",
      "startLine": 12,
      "endLine": 24,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    Assert.state(bean != null, \"No @Bean annotation attributes\");\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {\n            throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(), beanName, \"Bean name derived from @Bean method '\" + beanMethod.getMetadata().getMethodName() + \"' clashes with bean name for containing configuration class; please make those names unique!\");\n        }\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    beanDef.setDestroyMethodName(destroyMethodName);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "f813712f5b413b354560cd7cc006352e9defa9a3",
      "startLine": 12,
      "endLine": 21,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    Assert.state(bean != null, \"No @Bean annotation attributes\");\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    beanDef.setDestroyMethodName(destroyMethodName);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "e892e02f41031ae18f09aef34bf82d31ddbb12c7",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (!names.isEmpty() ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "3d3407c78992bbb504ae96a8f3eb17dbca07bcc7",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getString(\"value\"));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "00d2606b000f9bdafbd7f4a16b6599fb51b53fa4",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getAliasedString(\"value\", Scope.class, configClass.getResource()));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "f0ac2784a4e9602a06bc91c3368f7cf423fc52dc",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getAliasedString(\"value\", Scope.class, configClass.getResource()));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "aae0bd2fb43092bd3e1bc5c3296265e760b4fc43",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getAliasedString(\"value\", Scope.class, configClass.getResource()));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "2d23f42609c2e6a2ee6b0507f4b800870a63ca26",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (attributes != null) {\n        beanDef.setScope(attributes.getAliasedString(\"value\", Scope.class, configClass.getResource()));\n        proxyMode = attributes.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "0ed9ca097bb499b46c67d34d59e08a1337758097",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (destroyMethodName != null) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "bb5b5d52edf60350f09cf11c41e6fba534bebb54",
      "startLine": 12,
      "endLine": 20,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    String methodName = metadata.getMethodName();\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeanMethods.add(methodName);\n        return;\n    }\n    if (configClass.skippedBeanMethods.contains(methodName)) {\n        return;\n    }\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : methodName);\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(methodName);\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(methodName);\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "981aefc2c0d2a6fbf9c08d4d54d17923a75a2e01",
      "startLine": 4,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) {\n        configClass.skippedBeans.add(beanName);\n        return;\n    }\n    if (configClass.skippedBeans.contains(beanName)) {\n        return;\n    }\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "f46c706e443860e9ada7768a16cfa01526c10645",
      "startLine": 19,
      "endLine": 27,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "6d80da2e3129044df2294e5c3e7fb137b9286e6a",
      "startLine": 19,
      "endLine": 27,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "fe8dec912d53db4819064b50d667c34300bb59b1",
      "startLine": 19,
      "endLine": 27,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (isOverriddenByExistingDefinition(beanMethod, beanName)) {\n        return;\n    }\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    this.registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "c9771012e98afe1679cd1c3ebf5ab6c1a018fd65",
      "startLine": 19,
      "endLine": 33,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (this.conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata);\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = AnnotationConfigUtils.attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "2e2e9b8dd0ecb113c86ec3a5d0cf87d4f6f72fd6",
      "startLine": 23,
      "endLine": 37,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (conditionEvaluator.shouldSkip(beanMethod.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes role = attributesFor(metadata, Role.class);\n    if (role != null) {\n        beanDef.setRole(role.<Integer>getNumber(\"value\"));\n    }\n    AnnotationAttributes bean = attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(metadata, Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class);\n        String[] otherBeans = dependsOn.getStringArray(\"value\");\n        if (otherBeans.length > 0) {\n            beanDef.setDependsOn(otherBeans);\n        }\n    }\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "239ce1466ce118294f5c7b8e842a80815fd813de",
      "startLine": 23,
      "endLine": 37,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (ConditionEvaluator.get(beanMethod.getMetadata(), false).shouldSkip(this.registry, this.environment)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes role = attributesFor(metadata, Role.class);\n    if (role != null) {\n        beanDef.setRole(role.<Integer>getNumber(\"value\"));\n    }\n    AnnotationAttributes bean = attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(metadata, Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class);\n        String[] otherBeans = dependsOn.getStringArray(\"value\");\n        if (otherBeans.length > 0) {\n            beanDef.setDependsOn(otherBeans);\n        }\n    }\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "b257253a2b6890ef532f27a662c441fc4fd21f3b",
      "startLine": 23,
      "endLine": 37,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    if (ConditionalAnnotationHelper.shouldSkip(beanMethod, this.registry, this.environment, this.importBeanNameGenerator)) {\n        return;\n    }\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes role = attributesFor(metadata, Role.class);\n    if (role != null) {\n        beanDef.setRole(role.<Integer>getNumber(\"value\"));\n    }\n    AnnotationAttributes bean = attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(metadata, Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class);\n        String[] otherBeans = dependsOn.getStringArray(\"value\");\n        if (otherBeans.length > 0) {\n            beanDef.setDependsOn(otherBeans);\n        }\n    }\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "6b82d293d5ed2ec6f4e02432594a73e354d17928",
      "startLine": 20,
      "endLine": 34,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    AnnotationAttributes role = attributesFor(metadata, Role.class);\n    if (role != null) {\n        beanDef.setRole(role.<Integer>getNumber(\"value\"));\n    }\n    AnnotationAttributes bean = attributesFor(metadata, Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(metadata, Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        AnnotationAttributes lazy = attributesFor(configClass.getMetadata(), Lazy.class);\n        beanDef.setLazyInit(lazy.getBoolean(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class);\n        String[] otherBeans = dependsOn.getStringArray(\"value\");\n        if (otherBeans.length > 0) {\n            beanDef.setDependsOn(otherBeans);\n        }\n    }\n    Autowire autowire = bean.getEnum(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.getString(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.getString(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    AnnotationAttributes scope = attributesFor(metadata, Scope.class);\n    if (scope != null) {\n        beanDef.setScope(scope.getString(\"value\"));\n        proxyMode = scope.getEnum(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass);\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "02a4473c62d8240837bec297f0a1f3cb67ef8a7b",
      "startLine": 21,
      "endLine": 35,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> roleAttributes = metadata.getAnnotationAttributes(Role.class.getName());\n    if (roleAttributes != null) {\n        int role = (Integer) roleAttributes.get(\"value\");\n        beanDef.setRole(role);\n    }\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "52bef0b7b024e794186437dee78945fbb5bd209a",
      "startLine": 21,
      "endLine": 35,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    if (metadata.isStatic()) {\n        beanDef.setBeanClassName(configClass.getMetadata().getClassName());\n        beanDef.setFactoryMethodName(metadata.getMethodName());\n    } else {\n        beanDef.setFactoryBeanName(configClass.getBeanName());\n        beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    }\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> roleAttributes = metadata.getAnnotationAttributes(Role.class.getName());\n    if (roleAttributes != null) {\n        int role = (Integer) roleAttributes.get(\"value\");\n        beanDef.setRole(role);\n    }\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "cf0fc278bbc5ef4a3b08cc0a98d581ee8f930eae",
      "startLine": 16,
      "endLine": 30,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> roleAttributes = metadata.getAnnotationAttributes(Role.class.getName());\n    if (roleAttributes != null) {\n        int role = (Integer) roleAttributes.get(\"value\");\n        beanDef.setRole(role);\n    }\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "111fb71fe1ccb8d3a5e06e61461edd87d6d025f4",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "0a790c143feeabf571e98f8ee0700a4586cbb67c",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "b4fea47d5cff9f3c85e62c233c2fe86b1d616592",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForBeanMethod(ConfigurationClassMethod beanMethod) {\n    ConfigurationClass configClass = beanMethod.getConfigurationClass();\n    MethodMetadata metadata = beanMethod.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : beanMethod.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", beanMethod, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "e693d9fa587db6f3392fb545cffbd3e50893c4a1",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getConfigurationClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "d78eda8aebda0704e29fdccf619e9931b5446efc",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getConfigurationClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "6b2b5c4c233bba63fa5da2b11146ffaf66f9de80",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getConfigurationClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "d1b3f57320d5567ff8f6420c9bcf07521ea5e2b9",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getConfigurationClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "c7b019cd5c5285d81f0aea967be8af021eac8b07",
      "startLine": 11,
      "endLine": 25,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getDeclaringClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "f519406c37b23eef816704baeb3a496f7430bb89",
      "startLine": 10,
      "endLine": 24,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getDeclaringClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        this.registry.registerAlias(beanName, alias);\n    }\n    if (this.registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.isAnnotated(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.isAnnotated(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "ec1f0e6211172f43e842aabef8d4c66d946d99f2",
      "startLine": 10,
      "endLine": 24,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getDeclaringClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.hasAnnotation(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.hasAnnotation(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n    if (scopeAttributes != null) {\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "433d52b72849054ed64e1543b1111075da18f9db",
      "startLine": 10,
      "endLine": 24,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getDeclaringClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.hasAnnotation(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.hasAnnotation(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (metadata.hasAnnotation(Scope.class.getName())) {\n        Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "da71f266aed8c3dbea7c995ab4e2f3dae51cca45",
      "startLine": 10,
      "endLine": 24,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    ConfigurationClass configClass = method.getDeclaringClass();\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass);\n    beanDef.setResource(configClass.getResource());\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.hasAnnotation(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.hasAnnotation(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (metadata.hasAnnotation(Scope.class.getName())) {\n        Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "cce6e2f4cdfed4233805a32fb82626fa5e901cc0",
      "startLine": 9,
      "endLine": 23,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.hasAnnotation(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.hasAnnotation(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (metadata.hasAnnotation(Scope.class.getName())) {\n        Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "cea8f7f69e8939d4d20073862890f0b1c1824499",
      "startLine": 8,
      "endLine": 22,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.hasAnnotation(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.hasAnnotation(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (metadata.hasAnnotation(Scope.class.getName())) {\n        Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "b5d21108da24f8344be3bc708c7afdfca9a1d089",
      "startLine": 8,
      "endLine": 22,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    MethodMetadata metadata = method.getMetadata();\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(metadata.getMethodName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Map<String, Object> beanAttributes = metadata.getAnnotationAttributes(Bean.class.getName());\n    List<String> names = new ArrayList<String>(Arrays.asList((String[]) beanAttributes.get(\"name\")));\n    String beanName = (names.size() > 0 ? names.remove(0) : method.getMetadata().getMethodName());\n    for (String alias : names) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (metadata.hasAnnotation(Primary.class.getName())) {\n        beanDef.setPrimary(true);\n    }\n    if (metadata.hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) metadata.getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    } else if (configClass.getMetadata().hasAnnotation(Lazy.class.getName())) {\n        beanDef.setLazyInit((Boolean) configClass.getMetadata().getAnnotationAttributes(Lazy.class.getName()).get(\"value\"));\n    }\n    if (metadata.hasAnnotation(DependsOn.class.getName())) {\n        String[] dependsOn = (String[]) metadata.getAnnotationAttributes(DependsOn.class.getName()).get(\"value\");\n        if (dependsOn.length > 0) {\n            beanDef.setDependsOn(dependsOn);\n        }\n    }\n    Autowire autowire = (Autowire) beanAttributes.get(\"autowire\");\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = (String) beanAttributes.get(\"initMethod\");\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = (String) beanAttributes.get(\"destroyMethod\");\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (metadata.hasAnnotation(Scope.class.getName())) {\n        Map<String, Object> scopeAttributes = metadata.getAnnotationAttributes(Scope.class.getName());\n        beanDef.setScope((String) scopeAttributes.get(\"value\"));\n        proxyMode = (ScopedProxyMode) scopeAttributes.get(\"proxyMode\");\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getMetadata().getClassName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "ea9d8925a27e80d31d924826cf54f70b2bbcc638",
      "startLine": 7,
      "endLine": 21,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setUniqueFactoryMethodName(method.getName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (method.getAnnotation(Primary.class) != null) {\n        beanDef.setPrimary(true);\n    }\n    Lazy lazy = method.getAnnotation(Lazy.class);\n    if (lazy != null) {\n        beanDef.setLazyInit(lazy.value());\n    } else {\n        Lazy defaultLazy = configClass.getAnnotation(Lazy.class);\n        if (defaultLazy != null) {\n            beanDef.setLazyInit(defaultLazy.value());\n        }\n    }\n    DependsOn dependsOn = method.getAnnotation(DependsOn.class);\n    if (dependsOn != null && dependsOn.value().length > 0) {\n        beanDef.setDependsOn(dependsOn.value());\n    }\n    Autowire autowire = bean.autowire();\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.initMethod();\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.destroyMethod();\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    Scope scope = method.getAnnotation(Scope.class);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (scope != null) {\n        beanDef.setScope(scope.value());\n        proxyMode = scope.proxyMode();\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "14bd47551900ced88eeacf2a5f63c187ff72028c",
      "startLine": 7,
      "endLine": 21,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(ConfigurationClassMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    List<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) {\n        registry.registerAlias(beanName, alias);\n    }\n    if (registry.containsBeanDefinition(beanName)) {\n        BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(String.format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            }\n            return;\n        }\n    }\n    if (method.getAnnotation(Primary.class) != null) {\n        beanDef.setPrimary(true);\n    }\n    Lazy lazy = method.getAnnotation(Lazy.class);\n    if (lazy != null) {\n        beanDef.setLazyInit(lazy.value());\n    } else {\n        Lazy defaultLazy = configClass.getAnnotation(Lazy.class);\n        if (defaultLazy != null) {\n            beanDef.setLazyInit(defaultLazy.value());\n        }\n    }\n    DependsOn dependsOn = method.getAnnotation(DependsOn.class);\n    if (dependsOn != null && dependsOn.value().length > 0) {\n        beanDef.setDependsOn(dependsOn.value());\n    }\n    Autowire autowire = bean.autowire();\n    if (autowire.isAutowire()) {\n        beanDef.setAutowireMode(autowire.value());\n    }\n    String initMethodName = bean.initMethod();\n    if (StringUtils.hasText(initMethodName)) {\n        beanDef.setInitMethodName(initMethodName);\n    }\n    String destroyMethodName = bean.destroyMethod();\n    if (StringUtils.hasText(destroyMethodName)) {\n        beanDef.setDestroyMethodName(destroyMethodName);\n    }\n    Scope scope = method.getAnnotation(Scope.class);\n    ScopedProxyMode proxyMode = ScopedProxyMode.NO;\n    if (scope != null) {\n        beanDef.setScope(scope.value());\n        proxyMode = scope.proxyMode();\n        if (proxyMode == ScopedProxyMode.DEFAULT) {\n            proxyMode = ScopedProxyMode.NO;\n        }\n    }\n    BeanDefinition beanDefToRegister = beanDef;\n    if (proxyMode != ScopedProxyMode.NO) {\n        BeanDefinitionHolder proxyDef = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), registry, proxyMode == ScopedProxyMode.TARGET_CLASS);\n        beanDefToRegister = proxyDef.getBeanDefinition();\n    }\n    if (logger.isDebugEnabled()) {\n        logger.debug(String.format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    }\n    registry.registerBeanDefinition(beanName, beanDefToRegister);\n}"
    },
    {
      "commit": "69a762e86ac075035bfcdc899aadf2b36abaf167",
      "startLine": 6,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(BeanMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    Scope scope = method.getAnnotation(Scope.class);\n    if (scope != null)\n        beanDef.setScope(scope.value());\n    ArrayList<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) registry.registerAlias(beanName, alias);\n    if (containsBeanDefinitionIncludingAncestry(beanName, registry)) {\n        BeanDefinition existingBeanDef = getBeanDefinitionIncludingAncestry(beanName, registry);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            log.info(format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            return;\n        }\n    }\n    if (method.getAnnotation(Primary.class) != null)\n        beanDef.setPrimary(true);\n    Lazy defaultLazy = configClass.getAnnotation(Lazy.class);\n    if (defaultLazy != null)\n        beanDef.setLazyInit(defaultLazy.value());\n    Lazy lazy = method.getAnnotation(Lazy.class);\n    if (lazy != null)\n        beanDef.setLazyInit(lazy.value());\n    String initMethodName = bean.initMethod();\n    if (hasText(initMethodName))\n        beanDef.setInitMethodName(initMethodName);\n    String destroyMethodName = bean.destroyMethod();\n    if (hasText(destroyMethodName))\n        beanDef.setDestroyMethodName(destroyMethodName);\n    if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {\n        RootBeanDefinition targetDef = beanDef;\n        String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);\n        RootBeanDefinition scopedProxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        scopedProxyDefinition.getPropertyValues().addPropertyValue(\"targetBeanName\", targetBeanName);\n        if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS)\n            targetDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        else\n            scopedProxyDefinition.getPropertyValues().addPropertyValue(\"proxyTargetClass\", Boolean.FALSE);\n        targetDef.setAutowireCandidate(false);\n        registry.registerBeanDefinition(targetBeanName, targetDef);\n        beanDef = scopedProxyDefinition;\n    }\n    if (bean.dependsOn().length > 0)\n        beanDef.setDependsOn(bean.dependsOn());\n    log.info(format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    registry.registerBeanDefinition(beanName, beanDef);\n}"
    },
    {
      "commit": "1697932c57af5389fe07971e91866980e966403f",
      "startLine": 6,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(BeanMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    Scope scope = method.getAnnotation(Scope.class);\n    if (scope != null)\n        beanDef.setScope(scope.value());\n    ArrayList<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) registry.registerAlias(beanName, alias);\n    if (containsBeanDefinitionIncludingAncestry(beanName, registry)) {\n        BeanDefinition existingBeanDef = getBeanDefinitionIncludingAncestry(beanName, registry);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            log.info(format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            return;\n        }\n    }\n    String initMethodName = bean.initMethod();\n    if (hasText(initMethodName))\n        beanDef.setInitMethodName(initMethodName);\n    String destroyMethodName = bean.destroyMethod();\n    if (hasText(destroyMethodName))\n        beanDef.setDestroyMethodName(destroyMethodName);\n    if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {\n        RootBeanDefinition targetDef = beanDef;\n        String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);\n        RootBeanDefinition scopedProxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        scopedProxyDefinition.getPropertyValues().addPropertyValue(\"targetBeanName\", targetBeanName);\n        if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS)\n            targetDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        else\n            scopedProxyDefinition.getPropertyValues().addPropertyValue(\"proxyTargetClass\", Boolean.FALSE);\n        targetDef.setAutowireCandidate(false);\n        registry.registerBeanDefinition(targetBeanName, targetDef);\n        beanDef = scopedProxyDefinition;\n    }\n    if (bean.dependsOn().length > 0)\n        beanDef.setDependsOn(bean.dependsOn());\n    log.info(format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    registry.registerBeanDefinition(beanName, beanDef);\n}"
    },
    {
      "commit": "7f96f57375d3b33d08bf3be6d5206066f3142cfe",
      "startLine": 6,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(BeanMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    Scope scope = method.getAnnotation(Scope.class);\n    if (scope != null)\n        beanDef.setScope(scope.value());\n    ArrayList<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) registry.registerAlias(beanName, alias);\n    if (containsBeanDefinitionIncludingAncestry(beanName, registry)) {\n        BeanDefinition existingBeanDef = getBeanDefinitionIncludingAncestry(beanName, registry);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            log.info(format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            return;\n        }\n    }\n    String initMethodName = bean.initMethod();\n    if (hasText(initMethodName))\n        beanDef.setInitMethodName(initMethodName);\n    String destroyMethodName = bean.destroyMethod();\n    if (hasText(destroyMethodName))\n        beanDef.setDestroyMethodName(destroyMethodName);\n    if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {\n        RootBeanDefinition targetDef = beanDef;\n        String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);\n        RootBeanDefinition scopedProxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        scopedProxyDefinition.getPropertyValues().addPropertyValue(\"targetBeanName\", targetBeanName);\n        if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS)\n            targetDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        else\n            scopedProxyDefinition.getPropertyValues().addPropertyValue(\"proxyTargetClass\", Boolean.FALSE);\n        targetDef.setAutowireCandidate(false);\n        registry.registerBeanDefinition(targetBeanName, targetDef);\n        beanDef = scopedProxyDefinition;\n    }\n    if (bean.dependsOn().length > 0)\n        beanDef.setDependsOn(bean.dependsOn());\n    log.info(format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    registry.registerBeanDefinition(beanName, beanDef);\n}"
    },
    {
      "commit": "cd50e456457ecac48f61e2da991b6fd5dc0c6ee7",
      "startLine": 6,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(BeanMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    Scope scope = method.getAnnotation(Scope.class);\n    if (scope != null)\n        beanDef.setScope(scope.value());\n    ArrayList<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) registry.registerAlias(beanName, alias);\n    if (containsBeanDefinitionIncludingAncestry(beanName, registry)) {\n        BeanDefinition existingBeanDef = getBeanDefinitionIncludingAncestry(beanName, registry);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            log.info(format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            return;\n        }\n    }\n    String initMethodName = bean.initMethod();\n    if (hasText(initMethodName))\n        beanDef.setInitMethodName(initMethodName);\n    String destroyMethodName = bean.destroyMethod();\n    if (hasText(destroyMethodName))\n        beanDef.setDestroyMethodName(destroyMethodName);\n    if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {\n        RootBeanDefinition targetDef = beanDef;\n        String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);\n        RootBeanDefinition scopedProxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        scopedProxyDefinition.getPropertyValues().addPropertyValue(\"targetBeanName\", targetBeanName);\n        if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS)\n            targetDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        else\n            scopedProxyDefinition.getPropertyValues().addPropertyValue(\"proxyTargetClass\", Boolean.FALSE);\n        targetDef.setAutowireCandidate(false);\n        registry.registerBeanDefinition(targetBeanName, targetDef);\n        beanDef = scopedProxyDefinition;\n    }\n    if (bean.dependsOn().length > 0)\n        beanDef.setDependsOn(bean.dependsOn());\n    log.info(format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    registry.registerBeanDefinition(beanName, beanDef);\n}"
    },
    {
      "commit": "ef02c61e581dcd1f3cf110608da72ed133777d62",
      "startLine": 6,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(BeanMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    Scope scope = method.getAnnotation(Scope.class);\n    if (scope != null)\n        beanDef.setScope(scope.value());\n    ArrayList<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) registry.registerAlias(beanName, alias);\n    if (containsBeanDefinitionIncludingAncestry(beanName, registry)) {\n        BeanDefinition existingBeanDef = getBeanDefinitionIncludingAncestry(beanName, registry);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            log.info(format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            return;\n        }\n    }\n    String initMethodName = bean.initMethod();\n    if (hasText(initMethodName))\n        beanDef.setInitMethodName(initMethodName);\n    String destroyMethodName = bean.destroyMethod();\n    if (hasText(destroyMethodName))\n        beanDef.setDestroyMethodName(destroyMethodName);\n    if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {\n        RootBeanDefinition targetDef = beanDef;\n        String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);\n        RootBeanDefinition scopedProxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        scopedProxyDefinition.getPropertyValues().addPropertyValue(\"targetBeanName\", targetBeanName);\n        if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS)\n            targetDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        else\n            scopedProxyDefinition.getPropertyValues().addPropertyValue(\"proxyTargetClass\", Boolean.FALSE);\n        targetDef.setAutowireCandidate(false);\n        registry.registerBeanDefinition(targetBeanName, targetDef);\n        beanDef = scopedProxyDefinition;\n    }\n    if (bean.dependsOn().length > 0)\n        beanDef.setDependsOn(bean.dependsOn());\n    log.info(format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    registry.registerBeanDefinition(beanName, beanDef);\n}"
    },
    {
      "commit": "8a5c2a6a56e7b88b44af7111edb2bfc8b1781f48",
      "startLine": 6,
      "endLine": 19,
      "methodCode": "private void loadBeanDefinitionsForModelMethod(BeanMethod method) {\n    RootBeanDefinition beanDef = new ConfigurationClassBeanDefinition();\n    ConfigurationClass configClass = method.getDeclaringClass();\n    beanDef.setFactoryBeanName(configClass.getBeanName());\n    beanDef.setFactoryMethodName(method.getName());\n    Bean bean = method.getRequiredAnnotation(Bean.class);\n    Scope scope = method.getAnnotation(Scope.class);\n    if (scope != null)\n        beanDef.setScope(scope.value());\n    ArrayList<String> names = new ArrayList<String>(Arrays.asList(bean.name()));\n    String beanName = (names.size() > 0) ? names.remove(0) : method.getName();\n    for (String alias : bean.name()) registry.registerAlias(beanName, alias);\n    if (containsBeanDefinitionIncludingAncestry(beanName, registry)) {\n        BeanDefinition existingBeanDef = getBeanDefinitionIncludingAncestry(beanName, registry);\n        if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {\n            log.info(format(\"Skipping loading bean definition for %s: a definition for bean \" + \"'%s' already exists. This is likely due to an override in XML.\", method, beanName));\n            return;\n        }\n    }\n    String initMethodName = bean.initMethod();\n    if (hasText(initMethodName))\n        beanDef.setInitMethodName(initMethodName);\n    String destroyMethodName = bean.destroyMethod();\n    if (hasText(destroyMethodName))\n        beanDef.setDestroyMethodName(destroyMethodName);\n    if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {\n        RootBeanDefinition targetDef = beanDef;\n        String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);\n        RootBeanDefinition scopedProxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        scopedProxyDefinition.getPropertyValues().addPropertyValue(\"targetBeanName\", targetBeanName);\n        if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS)\n            targetDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        else\n            scopedProxyDefinition.getPropertyValues().addPropertyValue(\"proxyTargetClass\", Boolean.FALSE);\n        targetDef.setAutowireCandidate(false);\n        registry.registerBeanDefinition(targetBeanName, targetDef);\n        beanDef = scopedProxyDefinition;\n    }\n    if (bean.dependsOn().length > 0)\n        beanDef.setDependsOn(bean.dependsOn());\n    log.info(format(\"Registering bean definition for @Bean method %s.%s()\", configClass.getName(), beanName));\n    registry.registerBeanDefinition(beanName, beanDef);\n}"
    }
  ]
}