{
  "statementVersions": [
    {
      "commit": "9caca0ce37d5a2763d476c6fa2471addcca710ca",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, MetadataBuildingContext context, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHintDefinition hints = new QueryHintDefinition(queryAnn.hints());\n    String queryName = queryAnn.query();\n    NamedQueryDefinition queryDefinition = new NamedQueryDefinitionBuilder(queryAnn.name()).setLockOptions(hints.determineLockOptions(queryAnn)).setQuery(queryName).setCacheable(hints.getBoolean(queryName, QueryHints.CACHEABLE)).setCacheRegion(hints.getString(queryName, QueryHints.CACHE_REGION)).setTimeout(hints.getTimeout(queryName)).setFetchSize(hints.getInteger(queryName, QueryHints.FETCH_SIZE)).setFlushMode(hints.getFlushMode(queryName)).setCacheMode(hints.getCacheMode(queryName)).setReadOnly(hints.getBoolean(queryName, QueryHints.READ_ONLY)).setComment(hints.getString(queryName, QueryHints.COMMENT)).setParameterTypes(null).createNamedQueryDefinition();\n    if (isDefault) {\n        context.getMetadataCollector().addDefaultQuery(queryDefinition);\n    } else {\n        context.getMetadataCollector().addNamedQuery(queryDefinition);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named query: %s => %s\", queryDefinition.getName(), queryDefinition.getQueryString());\n    }\n}"
    },
    {
      "commit": "a03d44f290deb8ccddc0827834e49e03fc8da275",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHintDefinition hints = new QueryHintDefinition(queryAnn.hints());\n    String queryName = queryAnn.query();\n    NamedQueryDefinition queryDefinition = new NamedQueryDefinitionBuilder(queryAnn.name()).setLockOptions(hints.determineLockOptions(queryAnn)).setQuery(queryName).setCacheable(hints.getBoolean(queryName, QueryHints.CACHEABLE)).setCacheRegion(hints.getString(queryName, QueryHints.CACHE_REGION)).setTimeout(hints.getTimeout(queryName)).setFetchSize(hints.getInteger(queryName, QueryHints.FETCH_SIZE)).setFlushMode(hints.getFlushMode(queryName)).setCacheMode(hints.getCacheMode(queryName)).setReadOnly(hints.getBoolean(queryName, QueryHints.READ_ONLY)).setComment(hints.getString(queryName, QueryHints.COMMENT)).setParameterTypes(null).createNamedQueryDefinition();\n    if (isDefault) {\n        mappings.addDefaultQuery(queryDefinition.getName(), queryDefinition);\n    } else {\n        mappings.addQuery(queryDefinition.getName(), queryDefinition);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named query: %s => %s\", queryDefinition.getName(), queryDefinition.getQueryString());\n    }\n}"
    },
    {
      "commit": "3edb72db4844c10aa8490472c4b1af05d75076ab",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition queryDefinition = new NamedQueryDefinitionBuilder(queryAnn.name()).setLockOptions(determineLockOptions(queryAnn, hints)).setQuery(queryName).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).createNamedQueryDefinition();\n    if (isDefault) {\n        mappings.addDefaultQuery(queryDefinition.getName(), queryDefinition);\n    } else {\n        mappings.addQuery(queryDefinition.getName(), queryDefinition);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named query: %s => %s\", queryDefinition.getName(), queryDefinition.getQueryString());\n    }\n}"
    },
    {
      "commit": "0c1569c4f4ade941398d749401f03fdf04306e35",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryAnn.name(), queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"javax.persistence.lock.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(query.getName(), query);\n    } else {\n        mappings.addQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named query: %s => %s\", query.getName(), query.getQueryString());\n    }\n}"
    },
    {
      "commit": "4266cd35850e05c039dfa952952b48b4a1c389e6",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryAnn.name(), queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getLockTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(query.getName(), query);\n    } else {\n        mappings.addQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named query: %s => %s\", query.getName(), query.getQueryString());\n    }\n}"
    },
    {
      "commit": "129c0f13482b99e2705f0e234b6bc0572a95c271",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryAnn.name(), queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(query.getName(), query);\n    } else {\n        mappings.addQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named query: %s => %s\", query.getName(), query.getQueryString());\n    }\n}"
    },
    {
      "commit": "814b51493375bb781713a992353b6babba12dd31",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryAnn.name(), queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(query.getName(), query);\n    } else {\n        mappings.addQuery(query.getName(), query);\n    }\n    LOG.debugf(\"Binding named query: %s => %s\", query.getName(), query.getQueryString());\n}"
    },
    {
      "commit": "ad17f89c4c29f0327c843cf5265e156d65743ab1",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    LOG.debugf(\"Binding named query: %s => %s\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "8c806d361d63764e8523006944dde52aff70532c",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    LOG.bindingNamedQuery(queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "a9b1425f3f07021dae556e710b2bdfdc3812661b",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    LOG.bindingNamedQuery(queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "7419fc298dab9afe82fbdbb8b64854fa37f60817",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "1ca2bc19a5f667e10f9a2c2b10320b9c40921563",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "02451f12fbc3957ef3bc09ac0af79ffef1259bfb",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "9d7a03a5f7f03bc803d897baa590861154b39f5e",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getInteger(queryName, \"org.hibernate.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "7337743c93574823424ed6c399cfcf6bd75614f8",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "public static void bindQuery(NamedQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedQueryDefinition query = new NamedQueryDefinition(queryName, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getInteger(queryName, \"org.hibernate.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null);\n    if (isDefault) {\n        mappings.addDefaultQuery(queryAnn.name(), query);\n    } else {\n        mappings.addQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding Named query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    }
  ]
}