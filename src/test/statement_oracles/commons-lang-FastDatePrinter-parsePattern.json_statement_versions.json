{
  "statementVersions": [
    {
      "commit": "4f82195afdc4279c05826fc20f8642bfdaaafec3",
      "startLine": 96,
      "endLine": 111,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n            case 'Y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                if (c == 'Y') {\n                    rule = new WeekYear((NumberRule) rule);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'u':\n                rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "afc942c7b2bc0317cb549a3fd05080646e7274fc",
      "startLine": 96,
      "endLine": 111,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n            case 'Y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                if (c == 'Y') {\n                    rule = new WeekYear((NumberRule) rule);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'u':\n                rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "1002c9e243883654f9c1e6beae643fb4e72fc172",
      "startLine": 92,
      "endLine": 107,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'u':\n                rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
      "startLine": 96,
      "endLine": 111,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n            case 'Y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                if (c == 'Y') {\n                    rule = new WeekYear((NumberRule) rule);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'u':\n                rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
      "startLine": 92,
      "endLine": 107,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'u':\n                rule = new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "0add1e8975336c65513b26123d48b221e2515ddc",
      "startLine": 89,
      "endLine": 104,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "bbfa8eb7df16baf17239b412ff7efa11c7e0926b",
      "startLine": 89,
      "endLine": 104,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'X':\n                rule = Iso8601_Rule.getRule(tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "22b6781a0b96418198dc9146e5191e51d381102f",
      "startLine": 86,
      "endLine": 101,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen == 2) {\n                    rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "5292526e476ffbb19c6613a98464054236c86ace",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    final DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    final List<Rule> rules = new ArrayList<Rule>();\n    final String[] ERAs = symbols.getEras();\n    final String[] months = symbols.getMonths();\n    final String[] shortMonths = symbols.getShortMonths();\n    final String[] weekdays = symbols.getWeekdays();\n    final String[] shortWeekdays = symbols.getShortWeekdays();\n    final String[] AmPmStrings = symbols.getAmPmStrings();\n    final int length = mPattern.length();\n    final int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        final String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        final int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        final char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                final String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "34a6449c90a3b6074111a6bcbd31ad00ac1570f3",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n                } else {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "5f9fd135a2b5bb89ec2fe9ae16c8517bb8bb8ac9",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "9ef322c33c465d8ae9a1d854dfa977f47f629009",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "654fb75d80a63fa551ced73c3b652f4120573590",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "3aab5ae02692d3ceac2618ec0b4514787f4b17d7",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List rules = new ArrayList();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "247c97f507c7ce3556f040624b6af28e911e6dfb",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List rules = new ArrayList();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "eadb45d1a7b8b16164171c7caa171fd9f911a414",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List rules = new ArrayList();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
      "startLine": 86,
      "endLine": 99,
      "methodCode": "protected List parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List rules = new ArrayList();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z':\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
      "startLine": 85,
      "endLine": 91,
      "methodCode": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules = new ArrayList();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = pattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(pattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule = new TwoDigitYearField();\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = new TwoDigitMonthField();\n                } else {\n                    rule = new UnpaddedMonthField();\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    },
    {
      "commit": "a99f7965b34b8dd0532c8d6f5e592d990ca220fc",
      "startLine": 85,
      "endLine": 91,
      "methodCode": "private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n    List rules = new ArrayList();\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n    int length = pattern.length();\n    int[] indexRef = new int[1];\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(pattern, indexRef);\n        i = indexRef[0];\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n        Rule rule;\n        char c = token.charAt(0);\n        switch(c) {\n            case 'G':\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y':\n                if (tokenLen >= 4) {\n                    rule = new UnpaddedNumberField(Calendar.YEAR);\n                } else {\n                    rule = new TwoDigitYearField();\n                }\n                break;\n            case 'M':\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = new TwoDigitMonthField();\n                } else {\n                    rule = new UnpaddedMonthField();\n                }\n                break;\n            case 'd':\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h':\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H':\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm':\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's':\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S':\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E':\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D':\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F':\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w':\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W':\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a':\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k':\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K':\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z':\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case '\\'':\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n        rules.add(rule);\n    }\n    return rules;\n}"
    }
  ]
}