{
  "statementVersions": [
    {
      "commit": "5af88756a6d89a44c191225d58953204b11e1bc2",
      "startLine": 6,
      "endLine": 11,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n            downloaded = self.status.downloaded\n            try:\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n            except ZeroDivisionError:\n                speed = 0\n\n            if not self.status.total_size:\n                self._status_line = PROGRESS_NO_CONTENT_LENGTH.format(\n                    downloaded=humanize_bytes(downloaded),\n                    speed=humanize_bytes(speed),\n                )\n            else:\n                try:\n                    percentage = downloaded / self.status.total_size * 100\n                except ZeroDivisionError:\n                    percentage = 0\n\n                if not speed:\n                    eta = '-:--:--'\n                else:\n                    s = int((self.status.total_size - downloaded) / speed)\n                    h, s = divmod(s, 60 * 60)\n                    m, s = divmod(s, 60)\n                    eta = '{0}:{1:0>2}:{2:0>2}'.format(h, m, s)\n\n                self._status_line = PROGRESS.format(\n                    percentage=percentage,\n                    downloaded=humanize_bytes(downloaded),\n                    speed=humanize_bytes(speed),\n                    eta=eta,\n                )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + ' '\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (self._spinner_pos + 1\n                             if self._spinner_pos + 1 != len(SPINNER)\n                             else 0)\n"
    },
    {
      "commit": "1fc8396c4ba6b6e6fda19fb1d3a7d8fa40296cd5",
      "startLine": 6,
      "endLine": 11,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n            downloaded = self.status.downloaded\n            try:\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n            except ZeroDivisionError:\n                speed = 0\n\n            if not self.status.total_size:\n                self._status_line = PROGRESS_NO_CONTENT_LENGTH.format(\n                    downloaded=humanize_bytes(downloaded),\n                    speed=humanize_bytes(speed),\n                )\n            else:\n                try:\n                    percentage = downloaded / self.status.total_size * 100\n                except ZeroDivisionError:\n                    percentage = 0\n\n                if not speed:\n                    eta = '-:--:--'\n                else:\n                    s = int((self.status.total_size - downloaded) / speed)\n                    h, s = divmod(s, 60 * 60)\n                    m, s = divmod(s, 60)\n                    eta = '{}:{:0>2}:{:0>2}'.format(h, m, s)\n\n                self._status_line = PROGRESS.format(\n                    percentage=percentage,\n                    downloaded=humanize_bytes(downloaded),\n                    speed=humanize_bytes(speed),\n                    eta=eta,\n                )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + ' '\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (self._spinner_pos + 1\n                             if self._spinner_pos + 1 != len(SPINNER)\n                             else 0)\n"
    },
    {
      "commit": "cfa7199f0b505424343bac0b904f333ea6a67673",
      "startLine": 7,
      "endLine": 14,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n\n            downloaded = self.progress.downloaded\n\n            try:\n                # TODO: Use a longer interval for the speed/eta calculation?\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n            except ZeroDivisionError:\n                speed = 0\n\n            if not self.progress.total_size:\n                self._status_line = PROGRESS_NO_CONTENT_LENGTH.format(\n                    downloaded=humanize_bytes(downloaded),\n                    speed=humanize_bytes(speed),\n                )\n            else:\n                try:\n                    percentage = downloaded / self.progress.total_size * 100\n                except ZeroDivisionError:\n                    percentage = 0\n\n                if not speed:\n                    eta = '-:--:--'\n                else:\n                    s = int((self.progress.total_size - downloaded) / speed)\n                    h, s = divmod(s, 60 * 60)\n                    m, s = divmod(s, 60)\n                    eta = '{}:{:0>2}:{:0>2}'.format(h, m, s)\n\n                self._status_line = PROGRESS.format(\n                    percentage=percentage,\n                    downloaded=humanize_bytes(downloaded),\n                    speed=humanize_bytes(speed),\n                    eta=eta,\n                )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + ' '\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (\n            self._spinner_pos + 1\n            if self._spinner_pos + 1 != len(SPINNER)\n            else 0\n        )\n"
    },
    {
      "commit": "5a1177d57e58072d929a674a28e80661b81a393a",
      "startLine": 7,
      "endLine": 14,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n\n            downloaded = self.progress.downloaded\n\n            try:\n                # TODO: Use a longer interval for the speed/eta calculation?\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n            except ZeroDivisionError:\n                speed = 0\n\n            if not self.progress.total_size:\n                template = PROGRESS_NO_CONTENT_LENGTH\n                percentage = None\n                eta = None\n            else:\n                template = PROGRESS\n                percentage = downloaded / self.progress.total_size * 100\n                if not speed:\n                    eta = '-:--:--'\n                else:\n                    s = int((self.progress.total_size - downloaded) / speed)\n                    h, s = divmod(s, 60 * 60)\n                    m, s = divmod(s, 60)\n                    eta = '{}:{:0>2}:{:0>2}'.format(h, m, s)\n\n            self._status_line = template.format(\n                percentage=percentage,\n                downloaded=humanize_bytes(downloaded),\n                speed=humanize_bytes(speed),\n                eta=eta,\n            )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + ' '\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (\n            self._spinner_pos + 1\n            if self._spinner_pos + 1 != len(SPINNER)\n            else 0\n        )\n"
    },
    {
      "commit": "c63a92f9b7fe6159ab83d49921131d725b3c5cfd",
      "startLine": 7,
      "endLine": 28,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n\n            downloaded = self.progress.downloaded\n\n            if self.progress.total_size:\n                template = PROGRESS\n                percentage = (\n                    downloaded / self.progress.total_size * 100)\n            else:\n                template = PROGRESS_NO_CONTENT_LENGTH\n                percentage = None\n\n            try:\n                # TODO: Use a longer interval for the speed/eta calculation?\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n                s = int((self.progress.total_size - downloaded) / speed)\n            except ZeroDivisionError:\n                speed = 0\n                eta = '-:--:--'\n            else:\n                h, s = divmod(s, 60 * 60)\n                m, s = divmod(s, 60)\n                eta = '{}:{:0>2}:{:0>2}'.format(h, m, s)\n\n            self._status_line = template.format(\n                percentage=percentage,\n                downloaded=humanize_bytes(downloaded),\n                speed=humanize_bytes(speed),\n                eta=eta,\n            )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + ' '\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (\n            self._spinner_pos + 1\n            if self._spinner_pos + 1 != len(SPINNER)\n            else 0\n        )\n"
    },
    {
      "commit": "d17e02792b5a2150f7be0ace1effcd361b0b5fd1",
      "startLine": 7,
      "endLine": 28,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n\n            downloaded = self.progress.downloaded\n\n            if self.progress.total_size:\n                template = PROGRESS\n                percentage = (\n                    downloaded / self.progress.total_size * 100)\n            else:\n                template = PROGRESS_NO_CONTENT_LENGTH\n                percentage = None\n\n            try:\n                # TODO: Use a longer interval for the speed/eta calculation?\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n                s = int((self.progress.total_size - downloaded) / speed)\n            except ZeroDivisionError:\n                speed = 0\n                eta = '-:--:--'\n            else:\n                h, s = divmod(s, 60 * 60)\n                m, s = divmod(s, 60)\n                eta = '{}:{:0>2}:{:0>2}'.format(h, m, s)\n\n            self._status_line = template.format(\n                percentage=percentage,\n                downloaded=humanize_bytes(downloaded),\n                total=self.progress.total_size_humanized,\n                speed=humanize_bytes(speed),\n                eta=eta,\n            )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + ' '\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (\n            self._spinner_pos + 1\n            if self._spinner_pos + 1 != len(SPINNER)\n            else 0\n        )\n"
    },
    {
      "commit": "347653b369298c66fc046597d20981380a2c9394",
      "startLine": 7,
      "endLine": 25,
      "methodCode": "    def report_speed(self):\n\n        now = time()\n\n        if now - self._prev_time >= self._update_interval:\n\n            downloaded = self.progress.downloaded\n\n            if self.progress.total_size:\n                template = PROGRESS\n                percentage = (\n                    downloaded / self.progress.total_size * 100)\n            else:\n                template = PROGRESS_NO_CONTENT_LENGTH\n                percentage = None\n\n            try:\n                # TODO: Use a longer interval for the speed/eta calculation?\n                speed = ((downloaded - self._prev_bytes)\n                         / (now - self._prev_time))\n                eta = int((self.progress.total_size - downloaded) / speed)\n                eta = str(timedelta(seconds=eta))\n            except ZeroDivisionError:\n                speed = 0\n                eta = '?'\n\n            self._status_line = template.format(\n                percentage=percentage,\n                downloaded=humanize_bytes(downloaded),\n                total=self.progress.total_size_humanized,\n                speed=humanize_bytes(speed),\n                eta=eta,\n            )\n\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(\n            CLEAR_LINE\n            + SPINNER[self._spinner_pos]\n            + ' '\n            + self._status_line\n        )\n        self.output.flush()\n\n        self._spinner_pos = (\n            self._spinner_pos + 1\n            if self._spinner_pos + 1 != len(SPINNER)\n            else 0\n        )\n"
    },
    {
      "commit": "ebfce6fb93b077a039a5aef7f5deb0e5f23b5c28",
      "startLine": 3,
      "endLine": 17,
      "methodCode": "    def report_speed(self):\n\n        downloaded = self.progress.downloaded\n        now = time()\n\n        if self.progress.total_size:\n            template = PROGRESS\n            percentage = (\n                downloaded / self.progress.total_size * 100)\n        else:\n            template = PROGRESS_NO_CONTENT_LENGTH\n            percentage = None\n\n        if now - self._prev_time >= self._speed_interval:\n            # Update reported speed\n            self._speed = (\n                (downloaded - self._prev_bytes) / (now - self._prev_time))\n            self._prev_time = now\n            self._prev_bytes = downloaded\n\n        self.output.write(CLEAR_LINE)\n        self.output.write(template.format(\n            spinner=SPINNER[self._spinner_pos],\n            percentage=percentage,\n            downloaded=humanize_bytes(downloaded),\n            total=self.progress.total_size_humanized,\n            speed=humanize_bytes(self._speed)\n        ))\n        self.output.flush()\n\n        if downloaded > self._prev_bytes:\n            self._spinner_pos += 1\n            if self._spinner_pos == len(SPINNER):\n                self._spinner_pos = 0\n"
    }
  ]
}