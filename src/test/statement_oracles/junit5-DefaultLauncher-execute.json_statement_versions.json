{
  "statementVersions": [
    {
      "commit": "2f3440e0f221255a83b28c42cf77407bde92a8b4",
      "startLine": 4,
      "endLine": 10,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry = buildListenerRegistryForExecution(listeners);\n    withInterceptedStreams(configurationParameters, listenerRegistry, testExecutionListener -> {\n        TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n        testExecutionListener.testPlanExecutionStarted(testPlan);\n        ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n        for (TestEngine testEngine : root.getTestEngines()) {\n            TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n            execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n        }\n        testExecutionListener.testPlanExecutionFinished(testPlan);\n    });\n}"
    },
    {
      "commit": "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
      "startLine": 3,
      "endLine": 10,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry = buildListenerRegistryForExecution(listeners);\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        execute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
      "startLine": 3,
      "endLine": 10,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters, TestExecutionListener... listeners) {\n    TestExecutionListenerRegistry listenerRegistry = buildListenerRegistryForExecution(listeners);\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "4537bec58804c392a8bce296dced0337c8ec1a8d",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "e273d6681b96509b0bd35916a82fcfada21f18c6",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "5f6f33a074e8469211e5d648a4f98a3628be18a1",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = this.listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root, ConfigurationParameters configurationParameters) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "961fd47344c55d21907607ec9672df6d4f3d2362",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root) {\n    TestPlan testPlan = TestPlan.from(root.getEngineDescriptors());\n    TestExecutionListener testExecutionListener = testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root) {\n    TestPlan testPlan = TestPlan.from(root);\n    TestExecutionListener testExecutionListener = testExecutionListenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(Root root) {\n    TestPlan testPlan = TestPlan.from(root);\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "9f7d082872c4b4109729a3a480f1dedad3083bad",
      "startLine": 2,
      "endLine": 9,
      "methodCode": "private void execute(RootTestDescriptor root) {\n    TestPlan testPlan = TestPlan.from(root);\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    ExecutionListenerAdapter engineExecutionListener = new ExecutionListenerAdapter(testPlan, testExecutionListener);\n    for (TestEngine testEngine : root.getTestEngines()) {\n        TestDescriptor testDescriptor = root.getTestDescriptorFor(testEngine);\n        testEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "99aaaf56f401af1e08cccd0c013a8633c04eb22b",
      "startLine": 2,
      "endLine": 10,
      "methodCode": "private void execute(RootTestDescriptor root) {\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan = TestPlan.from(root);\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional<TestDescriptor> testDescriptorOptional = root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -> {\n            testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n        });\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "e4c640078022076935caef8edd312ea547f3b9d1",
      "startLine": 2,
      "endLine": 12,
      "methodCode": "private void execute(RootTestDescriptor root) {\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan = TestPlan.from(root);\n    testExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional<TestDescriptor> testDescriptorOptional = root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -> {\n            testExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, new ExecutionListenerAdapter(testPlan, testExecutionListener)));\n            testExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
      "startLine": 3,
      "endLine": 13,
      "methodCode": "private void execute(RootTestDescriptor root) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    TestPlan testPlan = TestPlan.from(root);\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional<TestDescriptor> testDescriptorOptional = root.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -> {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
      "startLine": 3,
      "endLine": 12,
      "methodCode": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : getAvailableEngines()) {\n        Optional<TestDescriptor> testDescriptorOptional = testPlan.getTestDescriptorFor(testEngine);\n        testDescriptorOptional.ifPresent(testDescriptor -> {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "c2b82a7de0e755b137e595906f8dc415f1619727",
      "startLine": 3,
      "endLine": 12,
      "methodCode": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        Optional<EngineDescriptor> engineDescriptorOptional = testPlan.getEngineDescriptorFor(testEngine);\n        engineDescriptorOptional.ifPresent(engineDescriptor -> {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "891efa3653cb899ca27afcd1abc385fc3fa663fa",
      "startLine": 3,
      "endLine": 12,
      "methodCode": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        Optional<EngineDescriptor> engineDescriptorOptional = testPlan.getEngineDescriptorFor(testEngine);\n        engineDescriptorOptional.ifPresent(engineDescriptor -> {\n            testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n            testEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n            testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n        });\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
      "startLine": 3,
      "endLine": 10,
      "methodCode": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n        Optional<EngineDescriptor> engineDescriptor = testPlan.getEngineDescriptorFor(testEngine);\n        testEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n        testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "90557f5414831ca924bca50c1591dd348c1c7162",
      "startLine": 3,
      "endLine": 10,
      "methodCode": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n        List<TestDescriptor> testDescriptors = testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n        testPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "5b99f734253c15189a88cd5704ec30ded2f24694",
      "startLine": 3,
      "endLine": 8,
      "methodCode": "public void execute(TestPlan testPlan) {\n    TestPlanExecutionListener testPlanExecutionListener = listenerRegistry.getCompositeTestPlanExecutionListener();\n    TestExecutionListener testExecutionListener = listenerRegistry.getCompositeTestExecutionListener();\n    testPlanExecutionListener.testPlanExecutionStarted(testPlan);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List<TestDescriptor> testDescriptors = testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n        testEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n    }\n    testPlanExecutionListener.testPlanExecutionFinished(testPlan);\n}"
    },
    {
      "commit": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n    TestExecutionListener compositeListener = listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n    TestExecutionListener compositeListener = listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(new EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "487bbff85f6651921a4c4a3520a9e315b0f2b381",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n    TestExecutionListener compositeListener = listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "b2854484a0f6076f623028376c9b0827ba6ee8fe",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    TestExecutionListener compositeListener = listenerRegistry.getCompositeTestExecutionListener();\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
      "startLine": 2,
      "endLine": 37,
      "methodCode": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    TestExecutionListener compositeListener = new TestExecutionListener() {\n\n        @Override\n        public void dynamicTestFound(TestDescriptor testDescriptor) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -> testExecutionListener.dynamicTestFound(testDescriptor));\n        }\n\n        @Override\n        public void testStarted(TestDescriptor testDescriptor) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -> testExecutionListener.testStarted(testDescriptor));\n        }\n\n        @Override\n        public void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -> testExecutionListener.testSkipped(testDescriptor, t));\n        }\n\n        @Override\n        public void testAborted(TestDescriptor testDescriptor, Throwable t) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -> testExecutionListener.testAborted(testDescriptor, t));\n        }\n\n        @Override\n        public void testFailed(TestDescriptor testDescriptor, Throwable t) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -> testExecutionListener.testFailed(testDescriptor, t));\n        }\n\n        @Override\n        public void testSucceeded(TestDescriptor testDescriptor) {\n            listenerRegistry.notifyTestExecutionListeners(testExecutionListener -> testExecutionListener.testSucceeded(testDescriptor));\n        }\n    };\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "private void execute(TestPlan testPlan) {\n    listenerRegistry.notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    listenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "private void execute(TestPlan testPlan) {\n    notifyTestPlanExecutionListeners(testPlanExecutionListener -> testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size()));\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "public void execute(TestPlan testPlan) {\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "public void execute(TestPlan testPlan) {\n    notifyListeners(TestListener::testPlanExecutionStarted);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyListeners(TestListener::testPlanExecutionFinished);\n}"
    },
    {
      "commit": "36f0d62665a55a1250823ea1b7a7d9148efb27a8",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "public void execute(TestPlan testPlan) {\n    notifyListeners(TestListener::testExecutionStarted);\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n    notifyListeners(TestListener::testExecutionFinished);\n}"
    },
    {
      "commit": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n        List<TestDescriptor> tests = testPlan.getAllTestsForTestEngine(testEngine);\n        testEngine.execute(tests);\n    }\n}"
    },
    {
      "commit": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
      "startLine": 2,
      "endLine": 11,
      "methodCode": "public void execute(TestExecutionPlan testPlan) throws Throwable {\n    for (Engine engine : discoverEngines()) {\n        Map<TestIdentifier, TestDescriptor> engineTestDescriptions = testDescriptionsByEngine.get(engine.getId());\n        List<TestIdentifier> testIdentifiers = testPlan.getTestIdentifiers();\n        List<TestIdentifier> filtered = engineTestDescriptions.keySet().stream().filter(testIdentifier -> testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List<TestDescriptor> testDescriptions = new ArrayList<>();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}"
    },
    {
      "commit": "226ecd8efc45e4540bba43f6c604e891b5a94689",
      "startLine": 2,
      "endLine": 11,
      "methodCode": "public void execute(TestExecutionPlan testPlan) throws Exception {\n    for (Engine engine : discoverEngines()) {\n        Map<TestIdentifier, TestDescriptor> engineTestDescriptions = testDescriptionsByEngine.get(engine.getId());\n        List<TestIdentifier> testIdentifiers = testPlan.getTestIdentifiers();\n        List<TestIdentifier> filtered = engineTestDescriptions.keySet().stream().filter(testIdentifier -> testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List<TestDescriptor> testDescriptions = new ArrayList<>();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}"
    },
    {
      "commit": "75a91267a92e9fd4d171a3f18f2135e675687961",
      "startLine": 2,
      "endLine": 11,
      "methodCode": "public void execute(TestPlan testPlan) throws Exception {\n    for (Engine engine : discoverEngines()) {\n        Map<TestIdentifier, EngineTestDescription> engineTestDescriptions = testDescriptionsByEngine.get(engine.getId());\n        List<TestIdentifier> testIdentifiers = testPlan.getTestIdentifiers();\n        List<TestIdentifier> filtered = engineTestDescriptions.keySet().stream().filter(testIdentifier -> testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n        List<EngineTestDescription> testDescriptions = new ArrayList<>();\n        for (TestIdentifier testIdentifier : filtered) {\n            testDescriptions.add(lookup(engine, testIdentifier));\n        }\n        engine.execute(testDescriptions);\n    }\n}"
    }
  ]
}