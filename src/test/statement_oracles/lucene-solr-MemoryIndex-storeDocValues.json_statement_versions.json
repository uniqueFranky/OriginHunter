{
  "statementVersions": [
    {
      "commit": "e7a0a12926c399758a4021715a7419e22e59dab6",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "private void storeDocValues(Info info, DocValuesType docValuesType, Object docValuesValue) {\n    String fieldName = info.fieldInfo.name;\n    DocValuesType existingDocValuesType = info.fieldInfo.getDocValuesType();\n    if (existingDocValuesType == DocValuesType.NONE) {\n        info.fieldInfo = new FieldInfo(info.fieldInfo.name, info.fieldInfo.number, info.fieldInfo.hasVectors(), info.fieldInfo.hasPayloads(), info.fieldInfo.hasPayloads(), info.fieldInfo.getIndexOptions(), docValuesType, -1, info.fieldInfo.attributes(), info.fieldInfo.getPointDimensionCount(), info.fieldInfo.getPointNumBytes(), info.fieldInfo.isSoftDeletesField());\n    } else if (existingDocValuesType != docValuesType) {\n        throw new IllegalArgumentException(\"Can't add [\" + docValuesType + \"] doc values field [\" + fieldName + \"], because [\" + existingDocValuesType + \"] doc values field already exists\");\n    }\n    switch(docValuesType) {\n        case NUMERIC:\n            if (info.numericProducer.dvLongValues != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.numericProducer.dvLongValues = new long[] { (long) docValuesValue };\n            info.numericProducer.count++;\n            break;\n        case SORTED_NUMERIC:\n            if (info.numericProducer.dvLongValues == null) {\n                info.numericProducer.dvLongValues = new long[4];\n            }\n            info.numericProducer.dvLongValues = ArrayUtil.grow(info.numericProducer.dvLongValues, info.numericProducer.count + 1);\n            info.numericProducer.dvLongValues[info.numericProducer.count++] = (long) docValuesValue;\n            break;\n        case BINARY:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED_SET:\n            if (info.binaryProducer.dvBytesValuesSet == null) {\n                info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            }\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        default:\n            throw new UnsupportedOperationException(\"unknown doc values type [\" + docValuesType + \"]\");\n    }\n}"
    },
    {
      "commit": "3dc4fa199c175ed6351f66bac5c23c73b4e3f89a",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "private void storeDocValues(Info info, DocValuesType docValuesType, Object docValuesValue) {\n    String fieldName = info.fieldInfo.name;\n    DocValuesType existingDocValuesType = info.fieldInfo.getDocValuesType();\n    if (existingDocValuesType == DocValuesType.NONE) {\n        info.fieldInfo = new FieldInfo(info.fieldInfo.name, info.fieldInfo.number, info.fieldInfo.hasVectors(), info.fieldInfo.hasPayloads(), info.fieldInfo.hasPayloads(), info.fieldInfo.getIndexOptions(), docValuesType, -1, info.fieldInfo.attributes(), info.fieldInfo.getPointDimensionCount(), info.fieldInfo.getPointNumBytes());\n    } else if (existingDocValuesType != docValuesType) {\n        throw new IllegalArgumentException(\"Can't add [\" + docValuesType + \"] doc values field [\" + fieldName + \"], because [\" + existingDocValuesType + \"] doc values field already exists\");\n    }\n    switch(docValuesType) {\n        case NUMERIC:\n            if (info.numericProducer.dvLongValues != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.numericProducer.dvLongValues = new long[] { (long) docValuesValue };\n            info.numericProducer.count++;\n            break;\n        case SORTED_NUMERIC:\n            if (info.numericProducer.dvLongValues == null) {\n                info.numericProducer.dvLongValues = new long[4];\n            }\n            info.numericProducer.dvLongValues = ArrayUtil.grow(info.numericProducer.dvLongValues, info.numericProducer.count + 1);\n            info.numericProducer.dvLongValues[info.numericProducer.count++] = (long) docValuesValue;\n            break;\n        case BINARY:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED_SET:\n            if (info.binaryProducer.dvBytesValuesSet == null) {\n                info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            }\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        default:\n            throw new UnsupportedOperationException(\"unknown doc values type [\" + docValuesType + \"]\");\n    }\n}"
    },
    {
      "commit": "a2d927667418d17a1f5f31a193092d5b04a4219e",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "private void storeDocValues(Info info, DocValuesType docValuesType, Object docValuesValue) {\n    String fieldName = info.fieldInfo.name;\n    DocValuesType existingDocValuesType = info.fieldInfo.getDocValuesType();\n    if (existingDocValuesType == DocValuesType.NONE) {\n        info.fieldInfo = new FieldInfo(info.fieldInfo.name, info.fieldInfo.number, info.fieldInfo.hasVectors(), info.fieldInfo.hasPayloads(), info.fieldInfo.hasPayloads(), info.fieldInfo.getIndexOptions(), docValuesType, -1, info.fieldInfo.attributes(), info.fieldInfo.getPointDimensionCount(), info.fieldInfo.getPointNumBytes(), info.fieldInfo.isSoftDeletesField());\n    } else if (existingDocValuesType != docValuesType) {\n        throw new IllegalArgumentException(\"Can't add [\" + docValuesType + \"] doc values field [\" + fieldName + \"], because [\" + existingDocValuesType + \"] doc values field already exists\");\n    }\n    switch(docValuesType) {\n        case NUMERIC:\n            if (info.numericProducer.dvLongValues != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.numericProducer.dvLongValues = new long[] { (long) docValuesValue };\n            info.numericProducer.count++;\n            break;\n        case SORTED_NUMERIC:\n            if (info.numericProducer.dvLongValues == null) {\n                info.numericProducer.dvLongValues = new long[4];\n            }\n            info.numericProducer.dvLongValues = ArrayUtil.grow(info.numericProducer.dvLongValues, info.numericProducer.count + 1);\n            info.numericProducer.dvLongValues[info.numericProducer.count++] = (long) docValuesValue;\n            break;\n        case BINARY:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED_SET:\n            if (info.binaryProducer.dvBytesValuesSet == null) {\n                info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            }\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        default:\n            throw new UnsupportedOperationException(\"unknown doc values type [\" + docValuesType + \"]\");\n    }\n}"
    },
    {
      "commit": "cf3eea26406692306505d2606d7ff73ee3634c30",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "private void storeDocValues(Info info, DocValuesType docValuesType, Object docValuesValue) {\n    String fieldName = info.fieldInfo.name;\n    DocValuesType existingDocValuesType = info.fieldInfo.getDocValuesType();\n    if (existingDocValuesType == DocValuesType.NONE) {\n        info.fieldInfo = new FieldInfo(info.fieldInfo.name, info.fieldInfo.number, info.fieldInfo.hasVectors(), info.fieldInfo.hasPayloads(), info.fieldInfo.hasPayloads(), info.fieldInfo.getIndexOptions(), docValuesType, -1, info.fieldInfo.attributes(), info.fieldInfo.getPointDimensionCount(), info.fieldInfo.getPointNumBytes());\n    } else if (existingDocValuesType != docValuesType) {\n        throw new IllegalArgumentException(\"Can't add [\" + docValuesType + \"] doc values field [\" + fieldName + \"], because [\" + existingDocValuesType + \"] doc values field already exists\");\n    }\n    switch(docValuesType) {\n        case NUMERIC:\n            if (info.numericProducer.dvLongValues != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.numericProducer.dvLongValues = new long[] { (long) docValuesValue };\n            info.numericProducer.count++;\n            break;\n        case SORTED_NUMERIC:\n            if (info.numericProducer.dvLongValues == null) {\n                info.numericProducer.dvLongValues = new long[4];\n            }\n            info.numericProducer.dvLongValues = ArrayUtil.grow(info.numericProducer.dvLongValues, info.numericProducer.count + 1);\n            info.numericProducer.dvLongValues[info.numericProducer.count++] = (long) docValuesValue;\n            break;\n        case BINARY:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED:\n            if (info.binaryProducer.dvBytesValuesSet != null) {\n                throw new IllegalArgumentException(\"Only one value per field allowed for [\" + docValuesType + \"] doc values field [\" + fieldName + \"]\");\n            }\n            info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        case SORTED_SET:\n            if (info.binaryProducer.dvBytesValuesSet == null) {\n                info.binaryProducer.dvBytesValuesSet = new BytesRefHash(byteBlockPool);\n            }\n            info.binaryProducer.dvBytesValuesSet.add((BytesRef) docValuesValue);\n            break;\n        default:\n            throw new UnsupportedOperationException(\"unknown doc values type [\" + docValuesType + \"]\");\n    }\n}"
    }
  ]
}