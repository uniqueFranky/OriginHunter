{
  "statementVersions": [
    {
      "commit": "2e9f3a80146262511ca7bcdd3411f095dff4951d",
      "startLine": 36,
      "endLine": 40,
      "methodCode": "public EqualsBuilder reflectionAppend(final Object lhs, final Object rhs) {\n    if (!isEquals) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        isEquals = false;\n        return this;\n    }\n    final Class<?> lhsClass = lhs.getClass();\n    final Class<?> rhsClass = rhs.getClass();\n    Class<?> testClass;\n    if (lhsClass.isInstance(rhs)) {\n        testClass = lhsClass;\n        if (!rhsClass.isInstance(lhs)) {\n            testClass = rhsClass;\n        }\n    } else if (rhsClass.isInstance(lhs)) {\n        testClass = rhsClass;\n        if (!lhsClass.isInstance(rhs)) {\n            testClass = lhsClass;\n        }\n    } else {\n        isEquals = false;\n        return this;\n    }\n    try {\n        if (testClass.isArray()) {\n            append(lhs, rhs);\n        } else {\n            if (bypassReflectionClasses != null && (bypassReflectionClasses.contains(lhsClass) || bypassReflectionClasses.contains(rhsClass))) {\n                isEquals = lhs.equals(rhs);\n            } else {\n                reflectionAppend(lhs, rhs, testClass);\n                while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {\n                    testClass = testClass.getSuperclass();\n                    reflectionAppend(lhs, rhs, testClass);\n                }\n            }\n        }\n    } catch (final IllegalArgumentException e) {\n        isEquals = false;\n        return this;\n    }\n    return this;\n}"
    },
    {
      "commit": "1da8ccdbfe2faa3e6801fe44eaf3c336aab48bec",
      "startLine": 33,
      "endLine": 37,
      "methodCode": "public EqualsBuilder reflectionAppend(final Object lhs, final Object rhs) {\n    if (!isEquals) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        isEquals = false;\n        return this;\n    }\n    final Class<?> lhsClass = lhs.getClass();\n    final Class<?> rhsClass = rhs.getClass();\n    Class<?> testClass;\n    if (lhsClass.isInstance(rhs)) {\n        testClass = lhsClass;\n        if (!rhsClass.isInstance(lhs)) {\n            testClass = rhsClass;\n        }\n    } else if (rhsClass.isInstance(lhs)) {\n        testClass = rhsClass;\n        if (!lhsClass.isInstance(rhs)) {\n            testClass = lhsClass;\n        }\n    } else {\n        isEquals = false;\n        return this;\n    }\n    try {\n        if (testClass.isArray()) {\n            append(lhs, rhs);\n        } else {\n            reflectionAppend(lhs, rhs, testClass);\n            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {\n                testClass = testClass.getSuperclass();\n                reflectionAppend(lhs, rhs, testClass);\n            }\n        }\n    } catch (final IllegalArgumentException e) {\n        isEquals = false;\n        return this;\n    }\n    return this;\n}"
    },
    {
      "commit": "0f6a292a29fedd49741310cd517ac4ba907bf8d4",
      "startLine": 33,
      "endLine": 37,
      "methodCode": "public EqualsBuilder reflectionAppend(final Object lhs, final Object rhs) {\n    if (!isEquals) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        isEquals = false;\n        return this;\n    }\n    final Class<?> lhsClass = lhs.getClass();\n    final Class<?> rhsClass = rhs.getClass();\n    Class<?> testClass;\n    if (lhsClass.isInstance(rhs)) {\n        testClass = lhsClass;\n        if (!rhsClass.isInstance(lhs)) {\n            testClass = rhsClass;\n        }\n    } else if (rhsClass.isInstance(lhs)) {\n        testClass = rhsClass;\n        if (!lhsClass.isInstance(rhs)) {\n            testClass = lhsClass;\n        }\n    } else {\n        isEquals = false;\n        return this;\n    }\n    try {\n        if (testClass.isArray()) {\n            append(lhs, rhs);\n        } else {\n            reflectionAppend(lhs, rhs, testClass);\n            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {\n                testClass = testClass.getSuperclass();\n                reflectionAppend(lhs, rhs, testClass);\n            }\n        }\n    } catch (final IllegalArgumentException e) {\n        isEquals = false;\n        return this;\n    }\n    return this;\n}"
    },
    {
      "commit": "0095d8adf26b9469115b1be0358cb09d1fcb5fd4",
      "startLine": 32,
      "endLine": 36,
      "methodCode": "public EqualsBuilder reflectionAppend(final Object lhs, final Object rhs) {\n    if (!isEquals)\n        return this;\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        isEquals = false;\n        return this;\n    }\n    final Class<?> lhsClass = lhs.getClass();\n    final Class<?> rhsClass = rhs.getClass();\n    Class<?> testClass;\n    if (lhsClass.isInstance(rhs)) {\n        testClass = lhsClass;\n        if (!rhsClass.isInstance(lhs)) {\n            testClass = rhsClass;\n        }\n    } else if (rhsClass.isInstance(lhs)) {\n        testClass = rhsClass;\n        if (!lhsClass.isInstance(rhs)) {\n            testClass = lhsClass;\n        }\n    } else {\n        isEquals = false;\n        return this;\n    }\n    try {\n        if (testClass.isArray()) {\n            append(lhs, rhs);\n        } else {\n            reflectionAppend(lhs, rhs, testClass);\n            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {\n                testClass = testClass.getSuperclass();\n                reflectionAppend(lhs, rhs, testClass);\n            }\n        }\n    } catch (final IllegalArgumentException e) {\n        isEquals = false;\n        return this;\n    }\n    return this;\n}"
    }
  ]
}