{
  "statementVersions": [
    {
      "commit": "b610707cd072f07efb816074a4844bb1b31e482c",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(final Calendar val, final int field, final ModifyType modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    final Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    final int millisecs = val.get(Calendar.MILLISECOND);\n    if (ModifyType.TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    final int seconds = val.get(Calendar.SECOND);\n    if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    final int minutes = val.get(Calendar.MINUTE);\n    if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (final int[] aField : fields) {\n        for (final int element : aField) {\n            if (element == field) {\n                if (modType == ModifyType.CEILING || modType == ModifyType.ROUND && roundUp) {\n                    if (field == SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n            default:\n                break;\n        }\n        if (!offsetSet) {\n            final int min = val.getActualMinimum(aField[0]);\n            final int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "35f1cc00274122c0274b522d0b544a06faaba931",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(final Calendar val, final int field, final ModifyType modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    final Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    final int millisecs = val.get(Calendar.MILLISECOND);\n    if (ModifyType.TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    final int seconds = val.get(Calendar.SECOND);\n    if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    final int minutes = val.get(Calendar.MINUTE);\n    if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (final int[] aField : fields) {\n        for (final int element : aField) {\n            if (element == field) {\n                if (modType == ModifyType.CEILING || modType == ModifyType.ROUND && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n            default:\n                break;\n        }\n        if (!offsetSet) {\n            final int min = val.getActualMinimum(aField[0]);\n            final int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "52e854e3bda9f1b92471884888f430345f73eca2",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(final Calendar val, final int field, final ModifyType modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    final Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    final int millisecs = val.get(Calendar.MILLISECOND);\n    if (ModifyType.TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    final int seconds = val.get(Calendar.SECOND);\n    if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    final int minutes = val.get(Calendar.MINUTE);\n    if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (final int[] aField : fields) {\n        for (final int element : aField) {\n            if (element == field) {\n                if (modType == ModifyType.CEILING || (modType == ModifyType.ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n            default:\n                break;\n        }\n        if (!offsetSet) {\n            final int min = val.getActualMinimum(aField[0]);\n            final int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "d6a556dad71a7d785b9c40608d0bf56062b134a5",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(final Calendar val, final int field, final int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    final Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    final int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    final int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    final int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (final int[] aField : fields) {\n        for (final int element : aField) {\n            if (element == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n            default:\n                break;\n        }\n        if (!offsetSet) {\n            final int min = val.getActualMinimum(aField[0]);\n            final int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "5292526e476ffbb19c6613a98464054236c86ace",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(final Calendar val, final int field, final int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    final Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    final int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    final int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    final int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (final int[] aField : fields) {\n        for (final int element : aField) {\n            if (element == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            final int min = val.getActualMinimum(aField[0]);\n            final int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(final Calendar val, final int field, final int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int[] aField : fields) {\n        for (int element : aField) {\n            if (element == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(aField[0]);\n            int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "14373ad1b11e5dc3a26457647ddee4e8ada97430",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int[] aField : fields) {\n        for (int element : aField) {\n            if (element == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(aField[0]);\n            int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "fab64bbdc726cf06c5993b7b8f50557882086002",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int[] aField : fields) {\n        for (int j = 0; j < aField.length; j++) {\n            if (aField[j] == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(aField[0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (aField[0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (aField[0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(aField[0]);\n            int max = val.getActualMaximum(aField[0]);\n            offset = val.get(aField[0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(aField[0], val.get(aField[0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "f446d290d6e0092e67b1a926e1a2e385d5db6c8a",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "49e68a3f962c0b8e0ac80743db5eecb1b493c9e6",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, int modType) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "a6a2d04877d91a4c7cfff889bb64e2627ca60994",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (!round || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (!round || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset >= 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "db5c7106a44107b94332ee6844514b003f538a51",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (!round || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (!round || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else if (field == Calendar.AM_PM) {\n                        if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                            val.add(Calendar.HOUR_OF_DAY, 12);\n                        } else {\n                            val.add(Calendar.HOUR_OF_DAY, -12);\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "050fe8e916507c9716983868284d64e58c1b56d2",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n    }\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (!round || seconds < 30)) {\n        time = time - (seconds * 1000L);\n    }\n    if (field == Calendar.MINUTE) {\n        done = true;\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (!round || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
      "commit": "9cbf70d82285d7ebdd190f7cd59f2a9d82a09c61",
      "startLine": 8,
      "endLine": 28,
      "methodCode": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (!round || seconds < 30)) {\n        time = time - (seconds * 1000L);\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (!round || minutes < 30)) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch(field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    }
  ]
}