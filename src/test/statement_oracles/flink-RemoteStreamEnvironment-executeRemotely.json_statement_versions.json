{
  "statementVersions": [
    {
      "commit": "fc3ee68bb1c0676ae8825c675d0c01e25d36db7b",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    final ClusterClient<?> client;\n    try {\n        if (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n            client = new StandaloneClusterClient(configuration);\n        } else {\n            client = new RestClusterClient<>(configuration, \"RemoteStreamEnvironment\");\n        }\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), streamGraph.getJobGraph().getJobID(), e);\n    }\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, streamGraph.getJobGraph().getJobID(), e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}"
    },
    {
      "commit": "af5279e9bd3dec18512a54c59982e3dc1f253cd2",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    final ClusterClient<?> client;\n    try {\n        if (CoreOptions.LEGACY_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n            client = new StandaloneClusterClient(configuration);\n        } else {\n            client = new RestClusterClient<>(configuration, \"RemoteStreamEnvironment\");\n        }\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}"
    },
    {
      "commit": "facf2ac67ae3ffd4cffd7c6f8536fd7953795fb9",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    final ClusterClient<?> client;\n    try {\n        if (CoreOptions.OLD_MODE.equals(configuration.getString(CoreOptions.MODE))) {\n            client = new StandaloneClusterClient(configuration);\n        } else {\n            client = new RestClusterClient<>(configuration, \"RemoteStreamEnvironment\");\n        }\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}"
    },
    {
      "commit": "38d3720863c6187153174d0df57fc414b0cf8e96",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    StandaloneClusterClient client;\n    try {\n        client = new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}"
    },
    {
      "commit": "fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(JobManagerOptions.ADDRESS, host);\n    configuration.setInteger(JobManagerOptions.PORT, port);\n    ClusterClient client;\n    try {\n        client = new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}"
    },
    {
      "commit": "ddd6a99a95b56c52ea5b5153b7270b578f5479bc",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    ClusterClient client;\n    try {\n        client = new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        try {\n            client.shutdown();\n        } catch (Exception e) {\n            LOG.warn(\"Could not properly shut down the cluster client.\", e);\n        }\n    }\n}"
    },
    {
      "commit": "f9b52a3114a2114e6846091acf3abb294a49615b",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    ClusterClient client;\n    try {\n        client = new StandaloneClusterClient(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.run(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader).getJobExecutionResult();\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "7498d3e35a29449270a88a30eb32b7de74887f5b",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.clientConfiguration);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "d7948fad6a73fdefae43cd42193342398a1581aa",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "protected JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "bf29de981c2bcd5cb5d33c68b158c95c8820f43d",
      "startLine": 5,
      "endLine": 10,
      "methodCode": "private JobExecutionResult executeRemotely(StreamGraph streamGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(streamGraph, jarFiles, globalClasspaths, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "06f6ac5d3edbc8dd20baf6e1b30900c189a68876",
      "startLine": 12,
      "endLine": 18,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (URL jarFile : jarFiles) {\n        try {\n            jobGraph.addJar(new Path(jarFile.toURI()));\n        } catch (URISyntaxException e) {\n            throw new ProgramInvocationException(\"URL is invalid\", e);\n        }\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(jobGraph.getJobConfiguration());\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "0ee0c1f5573ad059dc6a8e4489094b7f78267306",
      "startLine": 12,
      "endLine": 18,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (URL jarFile : jarFiles) {\n        try {\n            jobGraph.addJar(new Path(jarFile.toURI()));\n        } catch (URISyntaxException e) {\n            throw new ProgramInvocationException(\"URL is invalid\", e);\n        }\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(jobGraph.getJobConfiguration());\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "82d6236173093b7e035a21360c7b69c67fd6ae62",
      "startLine": 8,
      "endLine": 14,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    Configuration configuration = new Configuration();\n    configuration.addAll(jobGraph.getJobConfiguration());\n    configuration.addAll(this.config);\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "71bf2f570861daae53b24bfcf1d06aedb85311b9",
      "startLine": 8,
      "endLine": 12,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    Client client;\n    try {\n        client = new Client(configuration);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    } catch (Exception e) {\n        throw new ProgramInvocationException(\"Cannot establish connection to JobManager: \" + e.getMessage(), e);\n    }\n    try {\n        return client.runBlocking(jobGraph, usercodeClassLoader);\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    } finally {\n        client.shutdown();\n    }\n}"
    },
    {
      "commit": "b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029",
      "startLine": 8,
      "endLine": 11,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    configuration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, host);\n    configuration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, port);\n    try {\n        Client client = new Client(configuration, usercodeClassLoader, -1);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n        JobSubmissionResult result = client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn't return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    }\n}"
    },
    {
      "commit": "2b8db40ac40d70027ce331f3a04c6ca7aa562a84",
      "startLine": 8,
      "endLine": 9,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) throws ProgramInvocationException {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    ClassLoader usercodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, getClass().getClassLoader());\n    try {\n        Client client = new Client(new InetSocketAddress(host, port), configuration, usercodeClassLoader, -1);\n        client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n        JobSubmissionResult result = client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn't return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw e;\n    } catch (UnknownHostException e) {\n        throw new ProgramInvocationException(e.getMessage(), e);\n    } catch (Exception e) {\n        String term = e.getMessage() == null ? \".\" : (\": \" + e.getMessage());\n        throw new ProgramInvocationException(\"The program execution failed\" + term, e);\n    }\n}"
    },
    {
      "commit": "b70431239a5e18555866addb41ee6edf2b79ff60",
      "startLine": 8,
      "endLine": 9,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n    client.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled());\n    try {\n        JobSubmissionResult result = client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn't return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "6b0d40764da9dce2e2d21882e9a03a21c6783ff0",
      "startLine": 8,
      "endLine": 9,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()), -1);\n    try {\n        JobSubmissionResult result = client.run(jobGraph, true);\n        if (result instanceof JobExecutionResult) {\n            return (JobExecutionResult) result;\n        } else {\n            LOG.warn(\"The Client didn't return a JobExecutionResult\");\n            return new JobExecutionResult(result.getJobID(), -1, null);\n        }\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "e83d1ec102808cb9b3ef4208335f74e6f17bbe7a",
      "startLine": 8,
      "endLine": 9,
      "methodCode": "private JobExecutionResult executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        return client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "f94112fbbaaf2ecc6a9ecb314a5565203ce779a7",
      "startLine": 8,
      "endLine": 9,
      "methodCode": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "6867f9b93ec1ad9a627450c4fbd0b5ff98ef6148",
      "startLine": 8,
      "endLine": 9,
      "methodCode": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (File file : jarFiles) {\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, JobWithJars.buildUserCodeClassLoader(jarFiles, JobWithJars.class.getClassLoader()));\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "076223cb9540c973eaba7d24e50c0e1f3eb80308",
      "startLine": 14,
      "endLine": 15,
      "methodCode": "private void executeRemotely(JobGraph jobGraph) {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    for (int i = 0; i < jarFiles.length; i++) {\n        File file = new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "d0dd5138fd0bddf2bf942bffee1681c298043b3e",
      "startLine": 16,
      "endLine": 17,
      "methodCode": "@Override\npublic void execute() {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at {}:{}\", host, port);\n    }\n    JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n    for (int i = 0; i < jarFiles.length; i++) {\n        File file = new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "0163cfa11d64b641718a70aa30b7b896cdc077ba",
      "startLine": 16,
      "endLine": 17,
      "methodCode": "@Override\npublic void execute() {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n    for (int i = 0; i < jarFiles.length; i++) {\n        File file = new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration, getClass().getClassLoader());\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "35cf874c36fc522e9fae6af4625901ee3c3bc9a3",
      "startLine": 16,
      "endLine": 17,
      "methodCode": "@Override\npublic void execute() {\n    if (LOG.isInfoEnabled()) {\n        LOG.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n    for (int i = 0; i < jarFiles.length; i++) {\n        File file = new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration);\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "d56d48f1a1933f138f5d97f42b71aa64fad6bc6f",
      "startLine": 16,
      "endLine": 17,
      "methodCode": "@Override\npublic void execute() {\n    if (log.isInfoEnabled()) {\n        log.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n    for (int i = 0; i < jarFiles.length; i++) {\n        File file = new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration);\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "c524951f5c779d47cd3fc9d40fcc0dd4db4cdfeb",
      "startLine": 16,
      "endLine": 17,
      "methodCode": "@Override\npublic void execute() {\n    if (log.isInfoEnabled()) {\n        log.info(\"Running remotely at \" + host + \":\" + port);\n    }\n    JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n    for (int i = 0; i < jarFiles.length; i++) {\n        File file = new File(jarFiles[i]);\n        try {\n            JobWithJars.checkJarFile(file);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Problem with jar file \" + file.getAbsolutePath(), e);\n        }\n        jobGraph.addJar(new Path(file.getAbsolutePath()));\n    }\n    Configuration configuration = jobGraph.getJobConfiguration();\n    Client client = new Client(new InetSocketAddress(host, port), configuration);\n    try {\n        client.run(jobGraph, true);\n    } catch (ProgramInvocationException e) {\n        throw new RuntimeException(\"Cannot execute job due to ProgramInvocationException\", e);\n    }\n}"
    },
    {
      "commit": "646190d3adcbb599b051946ed342daa549ce54ef",
      "startLine": 13,
      "endLine": 14,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        if (log.isInfoEnabled()) {\n            log.info(\"Running remotely at \" + host + \":\" + port);\n        }\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    }\n}"
    },
    {
      "commit": "1e434d10ab16f0a36a9326cfdf7df416ff5b91d5",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "commit": "12e52f8ac430c00ed38096944e50db1e185f3567",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "commit": "23f649e4d42e8d2dde8ce424142c901b502ec583",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "commit": "1171d024664a93cf298e935b06cd1c1c4db258ff",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    }\n}"
    },
    {
      "commit": "d26c2305ede77abbceb6ebb58e1fdc6aad158cbe",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
      "commit": "b96db729c450ea05930ca0feba01769d3eb5d1f9",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n        }\n    }\n}"
    },
    {
      "commit": "5b05ca635d1a661bf2be3baf60159d84834a9942",
      "startLine": 10,
      "endLine": 11,
      "methodCode": "@Override\npublic void execute() {\n    try {\n        JobGraph jobGraph = jobGraphBuilder.getJobGraph();\n        for (int i = 0; i < jarFiles.length; i++) {\n            File file = new File(jarFiles[i]);\n            JobWithJars.checkJarFile(file);\n            jobGraph.addJar(new Path(file.getAbsolutePath()));\n        }\n        Configuration configuration = jobGraph.getJobConfiguration();\n        Client client = new Client(new InetSocketAddress(host, port), configuration);\n        client.run(jobGraph, true);\n    } catch (IOException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    } catch (ProgramInvocationException e) {\n        if (log.isErrorEnabled()) {\n            log.error(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}"
    }
  ]
}