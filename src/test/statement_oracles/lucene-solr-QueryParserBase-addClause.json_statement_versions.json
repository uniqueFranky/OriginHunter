{
  "statementVersions": [
    {
      "commit": "4aafacfbef423a25a349dd8c6e5e6178ac1ba334",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            clauses.set(clauses.size() - 1, new BooleanClause(c.getQuery(), Occur.MUST));\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            clauses.set(clauses.size() - 1, new BooleanClause(c.getQuery(), Occur.SHOULD));\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "e8e4245d9b36123446546ff15967ac95429ea2b0",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "5f30bedccc3f8a2ed14df05e3207ef9ed56965b2",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "8b4c80f04b4255b6f1f7309ffb01ccbea6db029b",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "778d96752fa94636a2136ea2b4d58a3fcbe283ec",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "649a0e83a47185fd5771e7d7492462d646789a80",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "d5a40278bc39ec0c4f300d68c9f5bd4be0fea85b",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(List clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = (BooleanClause) clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = (BooleanClause) clauses.get(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "1bbfaa54451f5654abd9c5976c865dae47d83cb4",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.addElement(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.addElement(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.addElement(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "197ad763d1a6320b60dfd21a5bfb13fa71144afa",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == OR_OPERATOR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "dfeed0220e6c4aa0c3a25157ce411ce25782a3f8",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (clauses.size() > 0 && operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == DEFAULT_OPERATOR_OR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "f6c12e189a8bcb0291b70d6272ec81acc3f0fcc6",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (conj == CONJ_AND) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.MUST);\n    }\n    if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.isProhibited())\n            c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n    if (q == null)\n        return;\n    if (operator == DEFAULT_OPERATOR_OR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n        clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n        throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n}"
    },
    {
      "commit": "2af2d858774f7391f13341b8f588e75287868237",
      "startLine": 2,
      "endLine": 24,
      "methodCode": "protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n    if (conj == CONJ_AND) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.prohibited)\n            c.required = true;\n    }\n    if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n        BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size() - 1);\n        if (!c.prohibited)\n            c.required = false;\n    }\n    if (q == null)\n        return;\n    if (operator == DEFAULT_OPERATOR_OR) {\n        prohibited = (mods == MOD_NOT);\n        required = (mods == MOD_REQ);\n        if (conj == CONJ_AND && !prohibited) {\n            required = true;\n        }\n    } else {\n        prohibited = (mods == MOD_NOT);\n        required = (!prohibited && conj != CONJ_OR);\n    }\n    clauses.addElement(new BooleanClause(q, required, prohibited));\n}"
    }
  ]
}