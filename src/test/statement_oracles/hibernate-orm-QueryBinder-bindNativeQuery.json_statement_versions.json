{
  "statementVersions": [
    {
      "commit": "9caca0ce37d5a2763d476c6fa2471addcca710ca",
      "startLine": 7,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, MetadataBuildingContext context, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHintDefinition hints = new QueryHintDefinition(queryAnn.hints());\n    String queryName = queryAnn.query();\n    NamedSQLQueryDefinitionBuilder builder = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setQuerySpaces(null).setCacheable(hints.getBoolean(queryName, QueryHints.CACHEABLE)).setCacheRegion(hints.getString(queryName, QueryHints.CACHE_REGION)).setTimeout(hints.getTimeout(queryName)).setFetchSize(hints.getInteger(queryName, QueryHints.FETCH_SIZE)).setFlushMode(hints.getFlushMode(queryName)).setCacheMode(hints.getCacheMode(queryName)).setReadOnly(hints.getBoolean(queryName, QueryHints.READ_ONLY)).setComment(hints.getString(queryName, QueryHints.COMMENT)).setParameterTypes(null).setCallable(hints.getBoolean(queryName, QueryHints.CALLABLE));\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        builder.setResultSetRef(resultSetMapping).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        builder.setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn });\n    } else {\n        builder.setQueryReturns(new NativeSQLQueryReturn[0]);\n    }\n    NamedSQLQueryDefinition query = builder.createNamedQueryDefinition();\n    if (isDefault) {\n        context.getMetadataCollector().addDefaultNamedNativeQuery(query);\n    } else {\n        context.getMetadataCollector().addNamedNativeQuery(query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n    }\n}"
    },
    {
      "commit": "a03d44f290deb8ccddc0827834e49e03fc8da275",
      "startLine": 7,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHintDefinition hints = new QueryHintDefinition(queryAnn.hints());\n    String queryName = queryAnn.query();\n    NamedSQLQueryDefinitionBuilder builder = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setQuerySpaces(null).setCacheable(hints.getBoolean(queryName, QueryHints.CACHEABLE)).setCacheRegion(hints.getString(queryName, QueryHints.CACHE_REGION)).setTimeout(hints.getTimeout(queryName)).setFetchSize(hints.getInteger(queryName, QueryHints.FETCH_SIZE)).setFlushMode(hints.getFlushMode(queryName)).setCacheMode(hints.getCacheMode(queryName)).setReadOnly(hints.getBoolean(queryName, QueryHints.READ_ONLY)).setComment(hints.getString(queryName, QueryHints.COMMENT)).setParameterTypes(null).setCallable(hints.getBoolean(queryName, QueryHints.CALLABLE));\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        builder.setResultSetRef(resultSetMapping).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        builder.setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn });\n    } else {\n        builder.setQueryReturns(new NativeSQLQueryReturn[0]);\n    }\n    NamedSQLQueryDefinition query = builder.createNamedQueryDefinition();\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(query.getName(), query);\n    } else {\n        mappings.addSQLQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n    }\n}"
    },
    {
      "commit": "31f43e3321f5c286a7eae492a9885f4185767278",
      "startLine": 7,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    NamedSQLQueryDefinitionBuilder builder = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setQuerySpaces(null).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).setCallable(getBoolean(queryName, \"org.hibernate.callable\", hints));\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        builder.setResultSetRef(resultSetMapping).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        builder.setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn });\n    } else {\n        builder.setQueryReturns(new NativeSQLQueryReturn[0]);\n    }\n    NamedSQLQueryDefinition query = builder.createNamedQueryDefinition();\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(query.getName(), query);\n    } else {\n        mappings.addSQLQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n    }\n}"
    },
    {
      "commit": "6cda7dc5777307cd5c66c8f4231923bdafbb3bf1",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).setCallable(getBoolean(queryName, \"org.hibernate.callable\", hints)).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).setCallable(getBoolean(queryName, \"org.hibernate.callable\", hints)).createNamedQueryDefinition();\n    } else {\n        query = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setQueryReturns(new NativeSQLQueryReturn[0]).setQuerySpaces(null).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).setCallable(getBoolean(queryName, \"org.hibernate.callable\", hints)).createNamedQueryDefinition();\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(query.getName(), query);\n    } else {\n        mappings.addSQLQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n    }\n}"
    },
    {
      "commit": "3edb72db4844c10aa8490472c4b1af05d75076ab",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setResultSetRef(resultSetMapping).setQuerySpaces(null).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).setCallable(getBoolean(queryName, \"org.hibernate.callable\", hints)).createNamedQueryDefinition();\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinitionBuilder(queryAnn.name()).setQuery(queryName).setQueryReturns(new NativeSQLQueryReturn[] { entityQueryReturn }).setQuerySpaces(null).setCacheable(getBoolean(queryName, \"org.hibernate.cacheable\", hints)).setCacheRegion(getString(queryName, \"org.hibernate.cacheRegion\", hints)).setTimeout(getTimeout(queryName, hints)).setFetchSize(getInteger(queryName, \"org.hibernate.fetchSize\", hints)).setFlushMode(getFlushMode(queryName, hints)).setCacheMode(getCacheMode(queryName, hints)).setReadOnly(getBoolean(queryName, \"org.hibernate.readOnly\", hints)).setComment(getString(queryName, \"org.hibernate.comment\", hints)).setParameterTypes(null).setCallable(getBoolean(queryName, \"org.hibernate.callable\", hints)).createNamedQueryDefinition();\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(query.getName(), query);\n    } else {\n        mappings.addSQLQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n    }\n}"
    },
    {
      "commit": "129c0f13482b99e2705f0e234b6bc0572a95c271",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryAnn.name(), queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryAnn.name(), queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(query.getName(), query);\n    } else {\n        mappings.addSQLQuery(query.getName(), query);\n    }\n    if (LOG.isDebugEnabled()) {\n        LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n    }\n}"
    },
    {
      "commit": "814b51493375bb781713a992353b6babba12dd31",
      "startLine": 7,
      "endLine": 17,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryAnn.name(), queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryAnn.name(), queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(query.getName(), query);\n    } else {\n        mappings.addSQLQuery(query.getName(), query);\n    }\n    LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "ad17f89c4c29f0327c843cf5265e156d65743ab1",
      "startLine": 7,
      "endLine": 17,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    LOG.debugf(\"Binding named native query: %s => %s\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "8c806d361d63764e8523006944dde52aff70532c",
      "startLine": 7,
      "endLine": 17,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name()))\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "a9b1425f3f07021dae556e710b2bdfdc3812661b",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    LOG.bindingNamedNativeQuery(queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "34c2839dccef33a8f3abb4eaf3192c1e1d9e1814",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "7419fc298dab9afe82fbdbb8b64854fa37f60817",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isEmptyAnnotationValue(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isEmptyAnnotationValue(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "f0f82e4f1ba7416ef010d5d71914a2bbde7fc22f",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, Mappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "1ca2bc19a5f667e10f9a2c2b10320b9c40921563",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "02451f12fbc3957ef3bc09ac0af79ffef1259bfb",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getTimeout(queryName, hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "9d7a03a5f7f03bc803d897baa590861154b39f5e",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getInteger(queryName, \"org.hibernate.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getInteger(queryName, \"org.hibernate.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    },
    {
      "commit": "7337743c93574823424ed6c399cfcf6bd75614f8",
      "startLine": 8,
      "endLine": 18,
      "methodCode": "public static void bindNativeQuery(NamedNativeQuery queryAnn, ExtendedMappings mappings, boolean isDefault) {\n    if (queryAnn == null)\n        return;\n    if (BinderHelper.isDefault(queryAnn.name())) {\n        throw new AnnotationException(\"A named query must have a name when used in class or package level\");\n    }\n    NamedSQLQueryDefinition query;\n    String resultSetMapping = queryAnn.resultSetMapping();\n    QueryHint[] hints = queryAnn.hints();\n    String queryName = queryAnn.query();\n    if (!BinderHelper.isDefault(resultSetMapping)) {\n        query = new NamedSQLQueryDefinition(queryName, resultSetMapping, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getInteger(queryName, \"org.hibernate.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else if (!void.class.equals(queryAnn.resultClass())) {\n        final NativeSQLQueryRootReturn entityQueryReturn = new NativeSQLQueryRootReturn(\"alias1\", queryAnn.resultClass().getName(), new HashMap(), LockMode.READ);\n        query = new NamedSQLQueryDefinition(queryName, new NativeSQLQueryReturn[] { entityQueryReturn }, null, getBoolean(queryName, \"org.hibernate.cacheable\", hints), getString(queryName, \"org.hibernate.cacheRegion\", hints), getInteger(queryName, \"org.hibernate.timeout\", hints), getInteger(queryName, \"org.hibernate.fetchSize\", hints), getFlushMode(queryName, hints), getCacheMode(queryName, hints), getBoolean(queryName, \"org.hibernate.readOnly\", hints), getString(queryName, \"org.hibernate.comment\", hints), null, getBoolean(queryName, \"org.hibernate.callable\", hints));\n    } else {\n        throw new NotYetImplementedException(\"Pure native scalar queries are not yet supported\");\n    }\n    if (isDefault) {\n        mappings.addDefaultSQLQuery(queryAnn.name(), query);\n    } else {\n        mappings.addSQLQuery(queryAnn.name(), query);\n    }\n    log.info(\"Binding named native query: {} => {}\", queryAnn.name(), queryAnn.query());\n}"
    }
  ]
}