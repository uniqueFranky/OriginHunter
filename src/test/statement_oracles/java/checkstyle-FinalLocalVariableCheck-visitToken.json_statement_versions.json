{
  "statementVersions": [
    {
      "commit": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "startLine": 9,
      "endLine": 15,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            currentScopeAssignedVariables.push(new ArrayDeque<>());\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) == null && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast) && !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) == null && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                final Optional<FinalVariableCandidate> candidate = getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                    currentScopeAssignedVariables.peek().add(ast);\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        case TokenTypes.LITERAL_BREAK:\n            scopeStack.peek().containsBreak = true;\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "8fef90609bcf29c84823f4a9affae013ded9379d",
      "startLine": 9,
      "endLine": 15,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            currentScopeAssignedVariables.push(new ArrayDeque<>());\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast) && !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && ast.findFirstToken(TokenTypes.MODIFIERS).findFirstToken(TokenTypes.FINAL) == null && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                final Optional<FinalVariableCandidate> candidate = getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                    currentScopeAssignedVariables.peek().add(ast);\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        case TokenTypes.LITERAL_BREAK:\n            scopeStack.peek().containsBreak = true;\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "5e0ab75777985f056715f6d9dc5e4667b1a0dfa2",
      "startLine": 9,
      "endLine": 15,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            currentScopeAssignedVariables.push(new ArrayDeque<>());\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast) && !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                final Optional<FinalVariableCandidate> candidate = getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                    currentScopeAssignedVariables.peek().add(ast);\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        case TokenTypes.LITERAL_BREAK:\n            scopeStack.peek().containsBreak = true;\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "4d214096fcc798a2bc4e71287339e6a8e08784c4",
      "startLine": 9,
      "endLine": 14,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast) && !isMultipleTypeCatch(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                final Optional<FinalVariableCandidate> candidate = getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "ed76401d3bd039d684d6de21c4894d3ab62a3076",
      "startLine": 9,
      "endLine": 14,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                final Optional<FinalVariableCandidate> candidate = getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    determineAssignmentConditions(ast, candidate.get());\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "bf69cf167c9432daabc7b6e4a426fff33650a057",
      "startLine": 9,
      "endLine": 14,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                final Optional<FinalVariableCandidate> candidate = getFinalCandidate(ast);\n                if (candidate.isPresent()) {\n                    if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n                        candidate.get().assignInIfBlock = true;\n                        if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n                            candidate.get().assignInIfBlockWhichIsInsideCaseBlock = true;\n                        }\n                    } else {\n                        candidate.get().assignOutsideConditionalBlock = true;\n                    }\n                }\n                removeFinalVariableCandidateFromStack(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "0a1a4c6e94c9b3b73b21b323f14ae7b7337b1b44",
      "startLine": 9,
      "endLine": 14,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_IF)) {\n                    markFinalVariableCandidateAsAssignedInIfBlock(ast);\n                    if (isInSpecificCodeBlock(ast, TokenTypes.CASE_GROUP)) {\n                        markFinalVariableCandidateAsAssignedInCaseBlock(ast);\n                    }\n                } else if (isInSpecificCodeBlock(ast, TokenTypes.LITERAL_ELSE)) {\n                    markFinalVariableCandidateAsAssignedInElseBlock(ast);\n                } else {\n                    markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock(ast);\n                }\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "55aa50d8f09d28521f0d0004ce475fa09082faea",
      "startLine": 9,
      "endLine": 14,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                if (isInIfBlock(ast)) {\n                    markFinalVariableCandidateAsAssignInIfBlock(ast);\n                } else if (isInElseBlock(ast)) {\n                    markFinalVariableCandidateAsAssignInElseBlock(ast);\n                } else {\n                    markFinalVariableCandidateAsAssignOutsideIfOrElseBlock(ast);\n                }\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "628e893f24cf41ad122c5adf656832a89168e766",
      "startLine": 9,
      "endLine": 14,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                storePrevScopeUninitializedVariableData();\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "9c3b17b9db6c0884d4d456b4d6219abc03a453d4",
      "startLine": 9,
      "endLine": 13,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.SLIST:\n            if (ast.getParent().getType() != TokenTypes.CASE_GROUP || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP) == ast.getParent()) {\n                scopeStack.push(new ScopeData());\n            }\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "36b91a59d62c9505b835717f00f470c499cf9b30",
      "startLine": 5,
      "endLine": 9,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n            scopeStack.push(new ScopeData());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertParameter(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !ast.branchContains(TokenTypes.FINAL) && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && isFirstChild(ast)) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!isInLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !isInAbstractOrNativeMethod(ast) && !ScopeUtils.isInInterfaceBlock(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast) && !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "b097b3f002ca40474b729c27c531787bc2e79f04",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!inLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !inAbstractOrNativeMethod(ast) && !ScopeUtils.inInterfaceBlock(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && !isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast) && !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Incorrect token type\");\n    }\n}"
    },
    {
      "commit": "c9c475a6c7a8cb728ba1c091b386db46f11a781f",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (!inLambda(ast) && !ast.branchContains(TokenTypes.FINAL) && !inAbstractOrNativeMethod(ast) && !ScopeUtils.inInterfaceBlock(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && isVariableInForInit(ast) && shouldCheckEnhancedForLoopVariable(ast) && !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "11ff590ba5cc717cbe00d88eb0b578e805572bc8",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast) && !ast.branchContains(TokenTypes.FINAL)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "3831aa913e25d2bd424ccbeb239bd06439867a58",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (isAssignOperator(parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType || TokenTypes.DEC == parentType || TokenTypes.POST_INC == parentType || TokenTypes.INC == parentType || TokenTypes.ASSIGN == parentType || TokenTypes.PLUS_ASSIGN == parentType || TokenTypes.MINUS_ASSIGN == parentType || TokenTypes.DIV_ASSIGN == parentType || TokenTypes.STAR_ASSIGN == parentType || TokenTypes.MOD_ASSIGN == parentType || TokenTypes.SR_ASSIGN == parentType || TokenTypes.BSR_ASSIGN == parentType || TokenTypes.SL_ASSIGN == parentType || TokenTypes.BXOR_ASSIGN == parentType || TokenTypes.BOR_ASSIGN == parentType || TokenTypes.BAND_ASSIGN == parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "5512e6fdba69ea486a21e299f7b134f4d9d60431",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast) || inLambda(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType || TokenTypes.DEC == parentType || TokenTypes.POST_INC == parentType || TokenTypes.INC == parentType || TokenTypes.ASSIGN == parentType || TokenTypes.PLUS_ASSIGN == parentType || TokenTypes.MINUS_ASSIGN == parentType || TokenTypes.DIV_ASSIGN == parentType || TokenTypes.STAR_ASSIGN == parentType || TokenTypes.MOD_ASSIGN == parentType || TokenTypes.SR_ASSIGN == parentType || TokenTypes.BSR_ASSIGN == parentType || TokenTypes.SL_ASSIGN == parentType || TokenTypes.BXOR_ASSIGN == parentType || TokenTypes.BOR_ASSIGN == parentType || TokenTypes.BAND_ASSIGN == parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "98a9266a8091c1c6b26d41b4e17e1a32458f1bac",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType || TokenTypes.DEC == parentType || TokenTypes.POST_INC == parentType || TokenTypes.INC == parentType || TokenTypes.ASSIGN == parentType || TokenTypes.PLUS_ASSIGN == parentType || TokenTypes.MINUS_ASSIGN == parentType || TokenTypes.DIV_ASSIGN == parentType || TokenTypes.STAR_ASSIGN == parentType || TokenTypes.MOD_ASSIGN == parentType || TokenTypes.SR_ASSIGN == parentType || TokenTypes.BSR_ASSIGN == parentType || TokenTypes.SL_ASSIGN == parentType || TokenTypes.BXOR_ASSIGN == parentType || TokenTypes.BOR_ASSIGN == parentType || TokenTypes.BAND_ASSIGN == parentType) && ast.getParent().getFirstChild() == ast) {\n                removeVariable(ast);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (ast.getParent().getType() != TokenTypes.OBJBLOCK && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if (TokenTypes.POST_DEC == parentType || TokenTypes.DEC == parentType || TokenTypes.POST_INC == parentType || TokenTypes.INC == parentType || TokenTypes.ASSIGN == parentType || TokenTypes.PLUS_ASSIGN == parentType || TokenTypes.MINUS_ASSIGN == parentType || TokenTypes.DIV_ASSIGN == parentType || TokenTypes.STAR_ASSIGN == parentType || TokenTypes.MOD_ASSIGN == parentType || TokenTypes.SR_ASSIGN == parentType || TokenTypes.BSR_ASSIGN == parentType || TokenTypes.SL_ASSIGN == parentType || TokenTypes.BXOR_ASSIGN == parentType || TokenTypes.BOR_ASSIGN == parentType || TokenTypes.BAND_ASSIGN == parentType) {\n                if (ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "93a33df5bda022b29fa6f4d6f3ad2d8b5f0a2b6f",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() != TokenTypes.OBJBLOCK) && shouldCheckEnhancedForLoopVariable(ast) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "a6b47597067d3456c894435a8fdc52b1c7060bed",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() != TokenTypes.OBJBLOCK) && (ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE) && isVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "c6019cd352aff6919a61b40fa8efce3567141206",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() != TokenTypes.OBJBLOCK) && (ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE) && isFirstVariableInForInit(ast)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST ast) {\n    switch(ast.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            scopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(ast) || inAbstractOrNativeMethod(ast)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((ast.getParent().getType() != TokenTypes.OBJBLOCK) && (ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(ast);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = ast.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "deb4d7a38805032ea8c9e2476eff5e00e38f1015",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractOrNativeMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK) && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK) && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK) && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "08638b5f739d9929698860048c052da2d5f80209",
      "startLine": 5,
      "endLine": 12,
      "methodCode": "@Override\npublic void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap<String, DetailAST>());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK) && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK) && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK && aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "43fe1ad269809f293b375dc4d0a4313798bf2124",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK && aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                if (aAST.getParent().getFirstChild() == aAST) {\n                    removeVariable(aAST);\n                }\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "9bcd88cf20db457966d0a83d2728a7c51a7d8623",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK && aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "2af259b791c8655a2b9862099763f860d3d7ae42",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST) || inAbstractMethod(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "62179e05f3f4a7214eb1fd7775a2012c8870e4a8",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n            if (ScopeUtils.inInterfaceBlock(aAST)) {\n                break;\n            }\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}"
    },
    {
      "commit": "0c717ef2abd068366612d44280633a1c7ac9efac",
      "startLine": 4,
      "endLine": 11,
      "methodCode": "public void visitToken(DetailAST aAST) {\n    switch(aAST.getType()) {\n        case TokenTypes.OBJBLOCK:\n        case TokenTypes.SLIST:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.METHOD_DEF:\n        case TokenTypes.CTOR_DEF:\n        case TokenTypes.STATIC_INIT:\n        case TokenTypes.INSTANCE_INIT:\n            mScopeStack.push(new HashMap());\n            break;\n        case TokenTypes.PARAMETER_DEF:\n        case TokenTypes.VARIABLE_DEF:\n            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK) {\n                insertVariable(aAST);\n            }\n            break;\n        case TokenTypes.IDENT:\n            final int parentType = aAST.getParent().getType();\n            if ((TokenTypes.POST_DEC == parentType) || (TokenTypes.DEC == parentType) || (TokenTypes.POST_INC == parentType) || (TokenTypes.INC == parentType) || (TokenTypes.ASSIGN == parentType) || (TokenTypes.PLUS_ASSIGN == parentType) || (TokenTypes.MINUS_ASSIGN == parentType) || (TokenTypes.DIV_ASSIGN == parentType) || (TokenTypes.STAR_ASSIGN == parentType) || (TokenTypes.MOD_ASSIGN == parentType) || (TokenTypes.SR_ASSIGN == parentType) || (TokenTypes.BSR_ASSIGN == parentType) || (TokenTypes.SL_ASSIGN == parentType) || (TokenTypes.BXOR_ASSIGN == parentType) || (TokenTypes.BOR_ASSIGN == parentType) || (TokenTypes.BAND_ASSIGN == parentType)) {\n                removeVariable(aAST);\n            }\n            break;\n        default:\n    }\n}"
    }
  ]
}