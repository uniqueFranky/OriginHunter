{
  "statementVersions": [
    {
      "commit": "2a5654734a64c5459819c5ced97bdacd0285ccc7",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(getExclusions(commandLine), commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                messages.forEach(System.out::println);\n            } else {\n                errorCounter = runCli(commandLine, filesToProcess);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0) {\n            if (!cliViolations) {\n                final LocalizedMessage errorCounterMessage = new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, ERROR_COUNTER, new String[] { String.valueOf(errorCounter) }, null, Main.class, null);\n                System.out.println(errorCounterMessage.getMessage());\n            }\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "b1b49751d38af0bf2476aea1f4595283615ab7de",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(getExclusions(commandLine), commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                messages.forEach(System.out::println);\n            } else {\n                errorCounter = runCli(commandLine, filesToProcess);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0) {\n            if (!cliViolations) {\n                final LocalizedMessage errorCounterMessage = new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, ERROR_COUNTER, new String[] { String.valueOf(errorCounter) }, null, Main.class, null);\n                System.out.println(errorCounterMessage.getMessage());\n            }\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "dab682c2f0e2853858a6d24e1fe2c2088315a0cc",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(getExclusions(commandLine), commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                messages.forEach(System.out::println);\n            } else {\n                errorCounter = runCli(commandLine, filesToProcess);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            final LocalizedMessage errorCounterMessage = new LocalizedMessage(0, Definitions.CHECKSTYLE_BUNDLE, ERROR_COUNTER, new String[] { String.valueOf(errorCounter) }, null, Main.class, null);\n            System.out.println(errorCounterMessage.getMessage());\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(getExclusions(commandLine), commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                messages.forEach(System.out::println);\n            } else {\n                errorCounter = runCli(commandLine, filesToProcess);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "6ee753af51a58c1c6ecc5e6d5946a32ee937eaa6",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(getExclusions(commandLine), commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                errorCounter = runCli(commandLine, filesToProcess);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "a6ab6053e6b3d421d19764418cba3858c683e6e8",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                errorCounter = runCli(commandLine, filesToProcess);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "1549ea4822139938296a58f59c38ae14f633c5aa",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine, filesToProcess);\n                if (commandLine.hasOption(OPTION_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file, false);\n                    System.out.print(stringAst);\n                } else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file, true);\n                    System.out.print(stringAst);\n                } else if (commandLine.hasOption(OPTION_J_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = DetailNodeTreeStringPrinter.printFileAst(file);\n                    System.out.print(stringAst);\n                } else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printJavaAndJavadocTree(file);\n                    System.out.print(stringAst);\n                } else {\n                    errorCounter = runCheckstyle(config);\n                    exitStatus = errorCounter;\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine, filesToProcess);\n                if (commandLine.hasOption(OPTION_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file, false);\n                    System.out.print(stringAst);\n                } else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file, true);\n                    System.out.print(stringAst);\n                } else if (commandLine.hasOption(OPTION_J_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = DetailNodeTreeStringPrinter.printFileAst(file);\n                    System.out.print(stringAst);\n                } else {\n                    errorCounter = runCheckstyle(config);\n                    exitStatus = errorCounter;\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "25621a3c3391ddf4bc0bb56535d23e73cd293657",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine, filesToProcess);\n                if (commandLine.hasOption(OPTION_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file, false);\n                    System.out.print(stringAst);\n                } else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file, true);\n                    System.out.print(stringAst);\n                } else {\n                    errorCounter = runCheckstyle(config);\n                    exitStatus = errorCounter;\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
      "startLine": 12,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<File> filesToProcess = getFilesToProcess(commandLine.getArgs());\n            final List<String> messages = validateCli(commandLine, filesToProcess);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine, filesToProcess);\n                if (commandLine.hasOption(OPTION_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file);\n                    System.out.print(stringAst);\n                } else {\n                    errorCounter = runCheckstyle(config);\n                    exitStatus = errorCounter;\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "c225479c7d3a7b82fec7d26131ac27496d336853",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws IOException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                if (commandLine.hasOption(OPTION_T_NAME)) {\n                    final File file = config.files.get(0);\n                    final String stringAst = AstTreeStringPrinter.printFileAst(file);\n                    System.out.print(stringAst);\n                } else {\n                    errorCounter = runCheckstyle(config);\n                    exitStatus = errorCounter;\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException ex) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        ex.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "f020066f8bdfb378df36904af3df8b5bc48858fd",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        e.printStackTrace();\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "5391df43637f6522979d46c5c4e35f772f08f4ac",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        printMessageAndCause(e);\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "b6d9344d1c152f225a22ce9ce09341b3cc9488af",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "0fc8b62a35beddc89cb3412388c27e88cd8cab4a",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(OPTION_V_NAME)) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "da6a8d083cb82a94707146de559911578f39affe",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (cliViolations) {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            } else {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        final int exitWithCheckstyleException = -2;\n        exitStatus = exitWithCheckstyleException;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "186625600d7678f597f56aa6a83d4b0a89e1fe35",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (!cliViolations) {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            } else {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        final int exitWithCheckstyleException = -2;\n        exitStatus = exitWithCheckstyleException;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "2880edd6554400955fb950bf8127311c436d2a7a",
      "startLine": 12,
      "endLine": 13,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (!cliViolations) {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            } else {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        final int exitWithCheckstyleException = -2;\n        exitStatus = exitWithCheckstyleException;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "aaf39002ac7fa00b95f4719beca058f6f7445574",
      "startLine": 13,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    final int exitWithCheckstyleException = -2;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (!cliViolations) {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            } else {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = exitWithCheckstyleException;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        if (exitStatus != 0) {\n            System.exit(exitStatus);\n        }\n    }\n}"
    },
    {
      "commit": "4299a4b408304cd0bcad6c25b4a322dbd94169a3",
      "startLine": 13,
      "endLine": 14,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    final int exitWithCliViolation = -1;\n    final int exitWithCheckstyleException = -2;\n    int exitStatus = 0;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n            exitStatus = 0;\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (!cliViolations) {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n                exitStatus = errorCounter;\n            } else {\n                exitStatus = exitWithCliViolation;\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        exitStatus = exitWithCliViolation;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        exitStatus = exitWithCheckstyleException;\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        System.exit(exitStatus);\n    }\n}"
    },
    {
      "commit": "fe6db3ab8a864e11eebfb0496f6a41852bdee019",
      "startLine": 9,
      "endLine": 10,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, CheckstyleException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (messages.isEmpty()) {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n            } else {\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (CheckstyleException e) {\n        errorCounter = 1;\n        System.out.println(e.getMessage());\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        System.exit(errorCounter);\n    }\n}"
    },
    {
      "commit": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b",
      "startLine": 9,
      "endLine": 10,
      "methodCode": "public static void main(String... args) throws UnsupportedEncodingException, CheckstyleException, FileNotFoundException {\n    int errorCounter = 0;\n    boolean cliViolations = false;\n    try {\n        final CommandLine commandLine = parseCli(args);\n        if (commandLine.hasOption(\"v\")) {\n            System.out.println(\"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion());\n        } else {\n            final List<String> messages = validateCli(commandLine);\n            cliViolations = !messages.isEmpty();\n            if (messages.isEmpty()) {\n                final CliOptions config = convertCliToPojo(commandLine);\n                errorCounter = runCheckstyle(config);\n            } else {\n                errorCounter = 1;\n                for (String message : messages) {\n                    System.out.println(message);\n                }\n            }\n        }\n    } catch (ParseException pex) {\n        cliViolations = true;\n        errorCounter = 1;\n        System.out.println(pex.getMessage());\n        printUsage();\n    } catch (Exception ex) {\n        errorCounter = 1;\n        throw ex;\n    } finally {\n        if (errorCounter != 0 && !cliViolations) {\n            System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));\n        }\n        System.exit(errorCounter);\n    }\n}"
    }
  ]
}