{
  "statementVersions": [
    {
      "commit": "932ad7dd2b82feeeada8eaff815430b47de47795",
      "startLine": 6,
      "endLine": 15,
      "methodCode": "private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n    Set<ClassNameDeclaration> classDeclarations = subType.getDeclarations(ClassNameDeclaration.class).keySet();\n    if (classDeclarations.isEmpty()) {\n        return Collections.emptyMap();\n    }\n    Map<String, Node> types = new HashMap<>((int) (classDeclarations.size() / 0.75f) + 1);\n    for (ClassNameDeclaration c : classDeclarations) {\n        String typeName = c.getName();\n        if (qualifyingName != null) {\n            typeName = qualifyingName + \".\" + typeName;\n        }\n        types.put(typeName, c.getNode());\n        types.putAll(getSubTypes(typeName, c.getScope()));\n    }\n    return types;\n}"
    },
    {
      "commit": "fd2dcddc447c8ae88fe5b1df9fca0326017309f8",
      "startLine": 2,
      "endLine": 11,
      "methodCode": "private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n    Map<String, Node> types = new HashMap<>();\n    for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n        String typeName = c.getName();\n        if (qualifyingName != null) {\n            typeName = qualifyingName + \".\" + typeName;\n        }\n        types.put(typeName, c.getNode());\n        types.putAll(getSubTypes(typeName, c.getScope()));\n    }\n    return types;\n}"
    },
    {
      "commit": "55a912e731236fc79025fd031734cc06d4c78aa5",
      "startLine": 2,
      "endLine": 11,
      "methodCode": "private Map<String, Node> getSubTypes(String qualifyingName, Scope subType) {\n    Map<String, Node> types = new HashMap<String, Node>();\n    for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n        String typeName = c.getName();\n        if (qualifyingName != null) {\n            typeName = qualifyingName + \".\" + typeName;\n        }\n        types.put(typeName, c.getNode());\n        types.putAll(getSubTypes(typeName, c.getScope()));\n    }\n    return types;\n}"
    },
    {
      "commit": "a8d7b594ab8ee3afbcf3390be2aa5c8dee1f06c7",
      "startLine": 2,
      "endLine": 11,
      "methodCode": "private Set<String> getSubTypes(String qualifyingName, Scope subType) {\n    Set<String> types = new HashSet<String>();\n    for (ClassNameDeclaration c : subType.getDeclarations(ClassNameDeclaration.class).keySet()) {\n        String typeName = c.getName();\n        if (qualifyingName != null) {\n            typeName = qualifyingName + \".\" + typeName;\n        }\n        types.add(typeName);\n        types.addAll(getSubTypes(typeName, c.getScope()));\n    }\n    return types;\n}"
    }
  ]
}