{
  "statementVersions": [
    {
      "commit": "9b0d19f913465483d0942558eb21e37868040050",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (retryAndFollowUpInterceptor.isCanceled()) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            eventListener.callFailed(RealCall.this, e);\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "1c98464839434a0fe7c7581cdae44bd3f2e6edd3",
      "startLine": 3,
      "endLine": 23,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (retryAndFollowUpInterceptor.isCanceled()) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n        eventListener.callEnd(RealCall.this);\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            eventListener.callFailed(RealCall.this, e);\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "7489193d5953bfba8c892e5aa98624e4ec73dbde",
      "startLine": 3,
      "endLine": 23,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (retryAndFollowUpInterceptor.isCanceled()) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n        eventListener.callEnd(RealCall.this, null);\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            eventListener.callEnd(RealCall.this, e);\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "51ca7c55da6fac733eb08a613c1c614ad2e66b5f",
      "startLine": 3,
      "endLine": 23,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (retryAndFollowUpInterceptor.isCanceled()) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n        eventListener.fetchEnd(RealCall.this, null);\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            eventListener.fetchEnd(RealCall.this, e);\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "c6a578ec7696430ecf5a4d4fd8f49c39b105b471",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (retryAndFollowUpInterceptor.isCanceled()) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "576408374d58a3e9a63714b6f7761cb42a315102",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "4f24a30c12032b7033884a630696014afd3e77cb",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Platform.get().log(INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "8ff37250310e8d2f9e73293199b3b6e42ec45b0f",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(RealCall.this, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(RealCall.this, response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(RealCall.this, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "38d570a6b28664b398cfa50c5c243c3631cde997",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            Request request = engine == null ? originalRequest : engine.getRequest();\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.dispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "fb700e20af6fa71a20656cd240df4df3c8f15976",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            Request request = engine == null ? originalRequest : engine.getRequest();\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "c9a89876de476983f273edbf108c365127c18c5e",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            Request request = engine == null ? originalRequest : engine.getRequest();\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "0c1481a2d3d7482a3e0c4e63f8d99ba6cea9c24b",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            Request request = engine == null ? originalRequest : engine.getRequest();\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "9631227619ffe9497c67d92d20428682e5df8862",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain(forWebSocket);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(engine.getRequest(), e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "e74e3f3bf744ef7f4d8ee724a7cf2347e486cfab",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(engine.getRequest(), e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "6184a7f5cf2a1d97072aaccb9fc00e08003848e3",
      "startLine": 3,
      "endLine": 21,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponseWithInterceptorChain();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(originalRequest, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(originalRequest, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "b72c9567df964696afdf4335b9456c28d017afde",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse(false);\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            engine.releaseConnection();\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "40c2e6aec09d139a4e96b45856020a5b324b01ef",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            engine.releaseConnection();\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            logger.log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "36cff8b86438a3b0f3bd3e701b374a1404a9168d",
      "startLine": 3,
      "endLine": 22,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            engine.releaseConnection();\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback) {\n            Logger.getLogger(OkHttpClient.class.getName()).log(Level.INFO, \"Callback failure for \" + toLoggableString(), e);\n        } else {\n            responseCallback.onFailure(request, e);\n        }\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "83e42cb9288896f88c934faa116b89165b3b9689",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            engine.releaseConnection();\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            throw new RuntimeException(e);\n        responseCallback.onFailure(request, e);\n    } finally {\n        client.getDispatcher().finished(this);\n    }\n}"
    },
    {
      "commit": "aa7e7a751c8e0096e18f792f3a737ed21d265ead",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            engine.releaseConnection();\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            throw new RuntimeException(e);\n        responseCallback.onFailure(request, e);\n    } finally {\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "f6a46b8992e486fb881b77c2fd533dc4d71dfd5b",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            throw new RuntimeException(e);\n        responseCallback.onFailure(request, e);\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "53b9f84cb694a6267373b1fdd6d2144a6f05b68b",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(request, new IOException(\"Canceled\"));\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            return;\n        responseCallback.onFailure(request, e);\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "c3e8a5d326f026ba6af20d0bf7da41c005ff1915",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(new Failure.Builder().request(request).exception(new IOException(\"Canceled\")).build());\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            return;\n        responseCallback.onFailure(new Failure.Builder().request(request).exception(e).build());\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "63d4dfaaa622d4cce72a09cdeead267afa3453a6",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(new Failure.Builder().request(request).exception(new CancellationException(\"Canceled\")).build());\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            return;\n        responseCallback.onFailure(new Failure.Builder().request(request).exception(e).build());\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "0b677ac70d37f9064d3a0c0914794f60f66d64be",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledCallback = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledCallback = true;\n            responseCallback.onFailure(new Failure.Builder().request(request).exception(new CancellationException(\"Canceled\")).build());\n        } else {\n            signalledCallback = true;\n            responseCallback.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledCallback)\n            return;\n        responseCallback.onFailure(new Failure.Builder().request(request).exception(e).build());\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "112dcc40900d503ea7e416e0da0a8fd9b08a9c17",
      "startLine": 3,
      "endLine": 20,
      "methodCode": "@Override\nprotected void execute() {\n    boolean signalledReceiver = false;\n    try {\n        Response response = getResponse();\n        if (canceled) {\n            signalledReceiver = true;\n            responseReceiver.onFailure(new Failure.Builder().request(request).exception(new CancellationException(\"Canceled\")).build());\n        } else {\n            signalledReceiver = true;\n            responseReceiver.onResponse(response);\n        }\n    } catch (IOException e) {\n        if (signalledReceiver)\n            return;\n        responseReceiver.onFailure(new Failure.Builder().request(request).exception(e).build());\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "dac5aed3d5f9307b9d1ab0a8c7840b232d053ef3",
      "startLine": 3,
      "endLine": 13,
      "methodCode": "@Override\nprotected void execute() {\n    try {\n        Response response = getResponse();\n        if (response != null && !canceled) {\n            responseReceiver.onResponse(response);\n        }\n    } catch (IOException e) {\n        responseReceiver.onFailure(new Failure.Builder().request(request).exception(e).build());\n    } finally {\n        engine.close();\n        dispatcher.finished(this);\n    }\n}"
    },
    {
      "commit": "749a65b776c8fc4b39b6463695980275da34da51",
      "startLine": 3,
      "endLine": 13,
      "methodCode": "@Override\nprotected void execute() {\n    try {\n        Response response = getResponse();\n        if (response != null && !canceled) {\n            responseReceiver.onResponse(response);\n        }\n    } catch (IOException e) {\n        responseReceiver.onFailure(new Failure.Builder().request(request).exception(e).build());\n    } finally {\n        engine.release(true);\n        dispatcher.finished(this);\n    }\n}"
    }
  ]
}