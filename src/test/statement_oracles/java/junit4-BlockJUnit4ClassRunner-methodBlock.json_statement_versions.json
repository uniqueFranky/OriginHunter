{
  "statementVersions": [
    {
      "commit": "113e8b7c6fd3f96ddbd9c759c58a27877f0f854b",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(final FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest(method);\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "bd5b90f75908b7a3ed074a7be29823170f008fb4",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(final FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest(method);\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "de86eb205637ea755909554b93d6da89353414dd",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "5f25ca318bc2b35ecf8526c08a1e3b3e17d375da",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "12b9b787a161d4b460d4d6a14da6ac53cac3713b",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "86abf33f863fee1db3ba7dd8ee3e9910f105f57d",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "public Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "a68ae0886c1c6274943e6f99d70816d162273d9c",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    statement = withRules(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "a1813f62876a6c7227ec5c866b621e01cda79664",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withRules(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withRules(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "e6769d4009db8030661815965e2e22829a4619ff",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withInterceptors(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "421ab330509a53302f56b209595f55b23bfdfc0e",
      "startLine": 14,
      "endLine": 18,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "1fcd990f60518c941a44bae2596392021614a20b",
      "startLine": 14,
      "endLine": 18,
      "methodCode": "protected Statement methodBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement statement = methodInvoker(method, test);\n    statement = possiblyExpectingExceptions(method, test, statement);\n    statement = withPotentialTimeout(method, test, statement);\n    statement = withBefores(method, test, statement);\n    statement = withAfters(method, test, statement);\n    return statement;\n}"
    },
    {
      "commit": "7a3e99635d7ffcc4d730f27835eeaeb082003199",
      "startLine": 14,
      "endLine": 18,
      "methodCode": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, test, link);\n    link = withPotentialTimeout(method, test, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "96d7dd609920deb1336cf85dc6c9a3a0d5e30d15",
      "startLine": 14,
      "endLine": 18,
      "methodCode": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, test, link);\n    link = withPotentialTimeout(method, test, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "9bd1be07aa38d7fa2de048845f7b13458c9420d7",
      "startLine": 14,
      "endLine": 18,
      "methodCode": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, test, link);\n    link = withPotentialTimeout(method, test, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "078e45bd31a9920e00633ad6ce658e22529304f2",
      "startLine": 15,
      "endLine": 19,
      "methodCode": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation = new TestAnnotation(method);\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(annotation, link);\n    link = withPotentialTimeout(annotation, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "0fa19baf003c5808831c59f8a839cc871586f30e",
      "startLine": 15,
      "endLine": 19,
      "methodCode": "protected Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation = new TestAnnotation(method);\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(annotation, link);\n    link = withPotentialTimeout(annotation, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "8226e3e64a7d4ace29eb08ab6c9fc9d4055f20c9",
      "startLine": 15,
      "endLine": 19,
      "methodCode": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation = new TestAnnotation(method);\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(annotation, link);\n    link = withPotentialTimeout(annotation, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "833a511d59e2cc5314283d5ce27ff6fd6514b459",
      "startLine": 15,
      "endLine": 19,
      "methodCode": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation = new TestAnnotation(method);\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(annotation, link);\n    link = withPotentialTimeout(annotation, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "94ebd93396420bcd03ab99a352e38df822d59f67",
      "startLine": 15,
      "endLine": 19,
      "methodCode": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation = new TestAnnotation(method);\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(annotation, link);\n    link = withPotentialTimeout(annotation, link);\n    link = withBefores(method, test, link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "8bed6c9278517d9fb13f274bc5a6ade358a39745",
      "startLine": 15,
      "endLine": 20,
      "methodCode": "public Statement childBlock(FrameworkMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    TestAnnotation annotation = new TestAnnotation(method);\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(annotation, link);\n    link = withPotentialTimeout(annotation, link);\n    link = withBefores(method, test, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "24a5aad1f49b4decf946f1df701e354a18544132",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "public Statement childBlock(TestMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = withPotentialTimeout(method, link);\n    link = withBefores(method, test, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2",
      "startLine": 14,
      "endLine": 19,
      "methodCode": "public Statement chain(TestMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return new Fail(e);\n    }\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = withPotentialTimeout(method, link);\n    link = withBefores(method, test, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withAfters(method, test, link);\n    return link;\n}"
    },
    {
      "commit": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b",
      "startLine": 2,
      "endLine": 7,
      "methodCode": "protected Notifier chain(TestMethod method, Object test) {\n    Statement link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = withPotentialTimeout(method, link);\n    link = withBefores(method, test, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withAfters(method, test, link);\n    return notifying(method, link);\n}"
    },
    {
      "commit": "0dbe9eefa369da78ca67bf5487797a8de5b2d631",
      "startLine": 2,
      "endLine": 7,
      "methodCode": "protected NotificationStrategy chain(TestMethod method, Object test) {\n    Link link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = withPotentialTimeout(method, link);\n    link = withBefores(method, test, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withAfters(method, test, link);\n    return notifying(method, link);\n}"
    },
    {
      "commit": "0e1c92693e70e52ad9af23ee6180500c74fc9c95",
      "startLine": 14,
      "endLine": 18,
      "methodCode": "protected Link chain(TestMethod method) {\n    Object test;\n    try {\n        test = new ReflectiveCallable() {\n\n            @Override\n            protected Object runReflectiveCall() throws Throwable {\n                return createTest();\n            }\n        }.run();\n    } catch (Throwable e) {\n        return throwException(e);\n    }\n    Link link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withPotentialTimeout(method, link);\n    link = withBeforeAndAfter(method, link, test);\n    return link;\n}"
    },
    {
      "commit": "f0ef837a40922ac08c608661385abf71732975d3",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "protected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {\n    Link link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withPotentialTimeout(method, link);\n    link = withBeforeAndAfter(method, link, test);\n    return notifying(method, link, notifier);\n}"
    },
    {
      "commit": "b333208ccfbef77c556a270bd4385586523dcafc",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "protected Link chain(TestMethod method, Object test) {\n    Link link = invoke(method, test);\n    link = possiblyExpectingExceptions(method, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withPotentialTimeout(method, link);\n    link = withBeforeAndAfter(method, link, test);\n    return notifying(method, link);\n}"
    },
    {
      "commit": "6887479f1b64c5a18f5708ea6905bb59804a9a0f",
      "startLine": 2,
      "endLine": 6,
      "methodCode": "protected Link chain(TestMethod method) {\n    Link link = invoke(method);\n    link = possiblyExpectingExceptions(method, link);\n    link = ignoreViolatedAssumptions(link);\n    link = withPotentialTimeout(method, link);\n    link = withBeforeAndAfter(method, link);\n    return notifying(method, link);\n}"
    },
    {
      "commit": "44e7458b19d5cd1900a765a440c96e85b81d25fc",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "protected Link chain(TestMethod method) {\n    Link link = invoke(method);\n    link = possiblyExpectingExceptions(method, link);\n    link = withPotentialTimeout(method, link);\n    link = withBeforeAndAfter(method, link);\n    return notifying(method, link);\n}"
    },
    {
      "commit": "576377b9ad44028dc84c2f8487cfe8dbccb8c252",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "protected Link chain(TestMethod method) {\n    Link link = anchor(method);\n    link = handleExceptions(link, method);\n    link = timeout(link, method);\n    link = new BeforeAndAfter(link, method);\n    return notifier(link, method);\n}"
    },
    {
      "commit": "57302f0df76fba83ba72a676bd660efeb5881af6",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "protected Link chain() {\n    Link link = anchor();\n    link = handleExceptions(link);\n    link = timeout(link);\n    link = new BeforeAndAfter(link);\n    link = new Notifier(link);\n    return new Ignored(link);\n}"
    },
    {
      "commit": "a58514aec7e843339be24980e92aeeb759327ffb",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "protected Link chain() {\n    Anchor anchor = anchor();\n    Anchor next = handleExceptions(anchor);\n    next = timeout(next);\n    Link link = new BeforeAndAfter(next);\n    return new Notifier(link);\n}"
    },
    {
      "commit": "4081076e513e84bb2376f889d4108e64e9a18653",
      "startLine": 2,
      "endLine": 5,
      "methodCode": "protected Link chain() {\n    Anchor anchor = anchor();\n    Link next = handleExceptions(anchor);\n    next = timeout(next);\n    next = new BeforeAndAfter(next);\n    return new Notifier(next);\n}"
    }
  ]
}