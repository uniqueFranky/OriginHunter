{
  "statementVersions": [
    {
      "commit": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = new HashSet<>();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedClassInfo = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedClassInfo, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedClassInfo.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        throwsList.stream().filter(exceptionInfo -> !exceptionInfo.isFound()).forEach(exceptionInfo -> {\n            final Token token = exceptionInfo.getName();\n            log(token.getLineNo(), token.getColumnNo(), MSG_EXPECTED_TAG, JavadocTagInfo.THROWS.getText(), token.getText());\n        });\n    }\n}"
    },
    {
      "commit": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedClassInfo = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedClassInfo, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedClassInfo.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        throwsList.stream().filter(exceptionInfo -> !exceptionInfo.isFound()).forEach(exceptionInfo -> {\n            final Token token = exceptionInfo.getName();\n            log(token.getLineNo(), token.getColumnNo(), MSG_EXPECTED_TAG, JavadocTagInfo.THROWS.getText(), token.getText());\n        });\n    }\n}"
    },
    {
      "commit": "aab0718232e060bd8f289770ab81780b3a2705a2",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedClassInfo = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedClassInfo, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedClassInfo.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo exceptionInfo : throwsList) {\n            if (!exceptionInfo.isFound()) {\n                final Token token = exceptionInfo.getName();\n                log(token.getLineNo(), token.getColumnNo(), MSG_EXPECTED_TAG, JavadocTagInfo.THROWS.getText(), token.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "bf9325be913ce46a1427232c455f4830b574ba44",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedClassInfo = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedClassInfo, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedClassInfo.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token token = ei.getName();\n                log(token.getLineNo(), token.getColumnNo(), MSG_EXPECTED_TAG, JavadocTagInfo.THROWS.getText(), token.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "5f5142b2325051f9ed31130167c73d154d547211",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedCI, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token token = ei.getName();\n                log(token.getLineNo(), token.getColumnNo(), MSG_EXPECTED_TAG, JavadocTagInfo.THROWS.getText(), token.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "d220d7c3cc74490c7f2923f2ea85d00133afe98c",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedCI, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), MSG_EXPECTED_TAG, JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "6f1840f011cea3a523d9df1278d4a0af98e1d967",
      "startLine": 2,
      "endLine": 23,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        final boolean found = foundThrows.contains(documentedEx) || isInThrows(throwsList, documentedCI, foundThrows);\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), MSG_EXCPECTED_TAG, JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getFirstArg();\n        final Token token = new Token(tag.getFirstArg(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (allowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getFirstArg());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), MSG_EXCPECTED_TAG, JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "eb5896a4a1d66552f5100046413f15d62b485b62",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final AbstractClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (allowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), MSG_EXCPECTED_TAG, JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (allowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG, JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), MSG_EXCPECTED_TAG, JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (allowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> tags, List<ExceptionInfo> throwsList, boolean reportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = tags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = throwsList.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (allowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (allowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && validateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!allowMissingThrowsTags && reportExpectedTags) {\n        for (ExceptionInfo ei : throwsList) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "e56f3d21ee1a0e8c0eced70ec7990fb03dcb3215",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd && mValidateThrows) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        for (ExceptionInfo ei : aThrows) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        for (ExceptionInfo ei : aThrows) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "d790eb1dc26141d6ce4c3637a31e06597a54e0e7",
      "startLine": 2,
      "endLine": 43,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (ei.getName().getText().equals(documentedCI.getName().getText())) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            }\n        }\n        throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        for (ExceptionInfo ei : aThrows) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "startLine": 2,
      "endLine": 34,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", JavadocTagInfo.THROWS.getText(), tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        for (ExceptionInfo ei : aThrows) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", JavadocTagInfo.THROWS.getText(), fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "startLine": 2,
      "endLine": 34,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = Sets.newHashSet();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        for (ExceptionInfo ei : aThrows) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "startLine": 2,
      "endLine": 34,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = new HashSet<String>();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        for (ExceptionInfo ei : aThrows) {\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "startLine": 2,
      "endLine": 34,
      "methodCode": "private void checkThrowsTags(List<JavadocTag> aTags, List<ExceptionInfo> aThrows, boolean aReportExpectedTags) {\n    final Set<String> foundThrows = new HashSet<String>();\n    final ListIterator<JavadocTag> tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = throwIt.next();\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "startLine": 2,
      "endLine": 34,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows, boolean aReportExpectedTags) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        final Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        final ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "788b41973d5747c7b4699a853b62168cf0001df6",
      "startLine": 2,
      "endLine": 34,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows, boolean aReportExpectedTags) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0",
      "startLine": 2,
      "endLine": 36,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows, boolean aReportExpectedTags) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final Token fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (documentedCI.getClazz() == ei.getClazz()) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
      "startLine": 2,
      "endLine": 36,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows, boolean aReportExpectedTags) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        Token token = new Token(tag.getArg1(), tag.getLineNo(), tag.getColumnNo());\n        ClassInfo documentedCI = createClassInfo(token, getCurrentClassName());\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final Token fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                found = isSubclass(documentedCI.getClazz(), ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                reqd = !isUnchecked(documentedCI.getClazz());\n            }\n            if (reqd) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final Token fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "836e4d1b12158b86ad0cb10505ff09282a39d277",
      "startLine": 2,
      "endLine": 44,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows, boolean aReportExpectedTags) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        Class documentedClass = null;\n        boolean classLoaded = false;\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                found = isSubclass(documentedClass, ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                reqd = !isUnchecked(documentedClass);\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "72be23f288369fdd9e562999bb9b0e2ff646c897",
      "startLine": 2,
      "endLine": 44,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows, boolean aReportExpectedTags) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        Class documentedClass = null;\n        boolean classLoaded = false;\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                found = isSubclass(documentedClass, ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                reqd = !isUnchecked(documentedClass);\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags && aReportExpectedTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "753a3a0c9708a7c050efd1dad93c37b424cf5c73",
      "startLine": 2,
      "endLine": 44,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        Class documentedClass = null;\n        boolean classLoaded = false;\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                found = isSubclass(documentedClass, ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                reqd = !isUnchecked(documentedClass);\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "2acda3b12797a818467773758f1029f7057a271c",
      "startLine": 2,
      "endLine": 44,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        Class documentedClass = null;\n        boolean classLoaded = false;\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                found = isSubclass(documentedClass, ei.getClazz());\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                reqd = !isUnchecked(documentedClass);\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "15b8debf99b3b0c600084fccde54d9562bd48b71",
      "startLine": 2,
      "endLine": 47,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        Class documentedClass = null;\n        boolean classLoaded = false;\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                found = isSubclass(documentedClass, ei.getClazz());\n                if (found) {\n                    ei.setFound();\n                }\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                if (!classLoaded) {\n                    documentedClass = loadClassForTag(tag);\n                    classLoaded = true;\n                }\n                reqd = !isUnchecked(documentedClass);\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "cd89321522d9bf7fc10547e743fb8bbb4c993791",
      "startLine": 2,
      "endLine": 50,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        Class documentedClass = null;\n        if (!found && (mAllowThrowsTagsForSubclasses || mAllowUndeclaredRTE)) {\n            documentedClass = resolveClass(documentedEx);\n            if (documentedClass == null) {\n                log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", documentedEx);\n            }\n        }\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getName();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses && documentedClass != null) {\n                if (ei.isLoadable() && ei.getClazz() == null) {\n                    ei.setClazz(resolveClass(declaredEx));\n                    if (!ei.isLoadable()) {\n                        log(fi.getLineNo(), \"javadoc.classInfo\", \"@throws\", declaredEx);\n                    }\n                }\n                found = isSubclass(documentedClass, ei.getClazz());\n                if (found) {\n                    ei.setFound();\n                }\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE && documentedClass != null) {\n                reqd = !isUnchecked(documentedClass);\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getName();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "04ac5dd87c11a2bf7b908b45bbca7933382df515",
      "startLine": 2,
      "endLine": 54,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getFullIdent();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                final ClassResolver cr = getClassResolver();\n                try {\n                    final Class documentedClass = cr.resolve(documentedEx);\n                    try {\n                        final Class declaredClass = cr.resolve(declaredEx);\n                        found = declaredClass.isAssignableFrom(documentedClass);\n                        if (found) {\n                            ei.setFound();\n                        }\n                    } catch (ClassNotFoundException e) {\n                        log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", declaredEx);\n                    }\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", documentedEx);\n                }\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                final ClassResolver cr = getClassResolver();\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getFullIdent();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "4e1f8ef98e9e43d6101a00bdecd040377472f852",
      "startLine": 2,
      "endLine": 54,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            final FullIdent fi = ei.getFullIdent();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                ei.setFound();\n                foundThrows.add(documentedEx);\n            } else if (mAllowThrowsTagsForSubclasses) {\n                final ClassResolver cr = getClassResolver();\n                try {\n                    final Class documentedClass = cr.resolve(documentedEx);\n                    try {\n                        final Class declaredClass = cr.resolve(declaredEx);\n                        found = declaredClass.isAssignableFrom(documentedClass);\n                        if (found) {\n                            ei.setFound();\n                        }\n                    } catch (ClassNotFoundException e) {\n                        log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", declaredEx);\n                    }\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", documentedEx);\n                }\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                final ClassResolver cr = getClassResolver();\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final ExceptionInfo ei = (ExceptionInfo) throwIt.next();\n            if (!ei.isFound()) {\n                final FullIdent fi = ei.getFullIdent();\n                log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n            }\n        }\n    }\n}"
    },
    {
      "commit": "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49",
      "startLine": 2,
      "endLine": 37,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final FullIdent fi = (FullIdent) throwIt.next();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                throwIt.remove();\n                foundThrows.add(documentedEx);\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                final ClassResolver cr = new ClassResolver(getClassLoader(), mPackageFullIdent.getText(), mImports);\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    if (!mAllowMissingThrowsTags) {\n        final ListIterator throwIt = aThrows.listIterator();\n        while (throwIt.hasNext()) {\n            final FullIdent fi = (FullIdent) throwIt.next();\n            log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n        }\n    }\n}"
    },
    {
      "commit": "28d1968038af94b1f169eca09a12f19164daac04",
      "startLine": 2,
      "endLine": 37,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final FullIdent fi = (FullIdent) throwIt.next();\n            final String declaredEx = fi.getText();\n            if (isSameType(declaredEx, documentedEx)) {\n                found = true;\n                throwIt.remove();\n                foundThrows.add(documentedEx);\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                final ClassResolver cr = new ClassResolver(getClassLoader(), mPackageFullIdent.getText(), mImports);\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    final ListIterator throwIt = aThrows.listIterator();\n    while (throwIt.hasNext()) {\n        final FullIdent fi = (FullIdent) throwIt.next();\n        log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n    }\n}"
    },
    {
      "commit": "58ce4c40970fc29d00e5740bc6098eb475668e86",
      "startLine": 2,
      "endLine": 36,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final FullIdent fi = (FullIdent) throwIt.next();\n            if (fi.getText().equals(documentedEx)) {\n                found = true;\n                throwIt.remove();\n                foundThrows.add(documentedEx);\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mAllowUndeclaredRTE) {\n                final ClassResolver cr = new ClassResolver(getClassLoader(), mPackageFullIdent.getText(), mImports);\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    final ListIterator throwIt = aThrows.listIterator();\n    while (throwIt.hasNext()) {\n        final FullIdent fi = (FullIdent) throwIt.next();\n        log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n    }\n}"
    },
    {
      "commit": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6",
      "startLine": 2,
      "endLine": 36,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final FullIdent fi = (FullIdent) throwIt.next();\n            if (fi.getText().equals(documentedEx)) {\n                found = true;\n                throwIt.remove();\n                foundThrows.add(documentedEx);\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mCheckUnusedThrows) {\n                final ClassResolver cr = new ClassResolver(getClassLoader(), mPackageFullIdent.getText(), mImports);\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    final ListIterator throwIt = aThrows.listIterator();\n    while (throwIt.hasNext()) {\n        final FullIdent fi = (FullIdent) throwIt.next();\n        log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n    }\n}"
    },
    {
      "commit": "c75f97dbc2123f550a1acc64886a8bebf4b888cf",
      "startLine": 2,
      "endLine": 36,
      "methodCode": "private void checkThrowsTags(List aTags, List aThrows) {\n    final Set foundThrows = new HashSet();\n    final ListIterator tagIt = aTags.listIterator();\n    while (tagIt.hasNext()) {\n        final JavadocTag tag = (JavadocTag) tagIt.next();\n        if (!tag.isThrowsTag()) {\n            continue;\n        }\n        tagIt.remove();\n        final String documentedEx = tag.getArg1();\n        boolean found = foundThrows.contains(documentedEx);\n        final ListIterator throwIt = aThrows.listIterator();\n        while (!found && throwIt.hasNext()) {\n            final FullIdent fi = (FullIdent) throwIt.next();\n            if (fi.getText().equals(documentedEx)) {\n                found = true;\n                throwIt.remove();\n                foundThrows.add(documentedEx);\n            }\n        }\n        if (!found) {\n            boolean reqd = true;\n            if (mCheckUnusedThrows) {\n                final ClassResolver cr = new ClassResolver(Thread.currentThread().getContextClassLoader(), mPackageFullIdent.getText(), mImports);\n                try {\n                    final Class clazz = cr.resolve(tag.getArg1());\n                    reqd = !RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);\n                } catch (ClassNotFoundException e) {\n                    log(tag.getLineNo(), \"javadoc.classInfo\", \"@throws\", tag.getArg1());\n                }\n            }\n            if (reqd) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag.getArg1());\n            }\n        }\n    }\n    final ListIterator throwIt = aThrows.listIterator();\n    while (throwIt.hasNext()) {\n        final FullIdent fi = (FullIdent) throwIt.next();\n        log(fi.getLineNo(), fi.getColumnNo(), \"javadoc.expectedTag\", \"@throws\", fi.getText());\n    }\n}"
    }
  ]
}