{
  "statementVersions": [
    {
      "commit": "e4e03ef4c091f5a35da0d97a6a35224197b8be02",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {\n    if (fileName == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (fileName == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    final String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    final Stack<int[]> backtrack = new Stack<>();\n    do {\n        if (backtrack.size() > 0) {\n            final int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > fileName.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = fileName.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);\n                    if (textIdx == NOT_FOUND) {\n                        break;\n                    }\n                    final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == fileName.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "8b9fe1b01ce21003f6a6ff8391ad2a64f4d21030",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    final String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    final Stack<int[]> backtrack = new Stack<>();\n    do {\n        if (backtrack.size() > 0) {\n            final int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == NOT_FOUND) {\n                        break;\n                    }\n                    final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "51f13c846dae950e1d27693c9e23c1063945210f",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    final String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    final Stack<int[]> backtrack = new Stack<>();\n    do {\n        if (backtrack.size() > 0) {\n            final int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == NOT_FOUND) {\n                        break;\n                    }\n                    final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "63eba2740e08ede085c78b131bc1a9c3f1d5ddb1",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    final String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    final Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            final int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == NOT_FOUND) {\n                        break;\n                    }\n                    final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "6aa00766b9103d75c763160280429af8e1f0549e",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(final String filename, final String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    final String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    final Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            final int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    final int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "cf5c462807a137b823a3155dfe9800b3cbf2303d",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "83f7246c3e9fe1d3f1ad6cf7ea0715a573fe2f2a",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "226bb72340b7ad715df7a2de586531e7c3078026",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "5e0fe4de1790c5e50573a8b6a4f26510a3b3d62a",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "d062bd01f7e9e9194ae0fd9dc01683e7c934c315",
      "startLine": 41,
      "endLine": 44,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                if (textIdx > filename.length()) {\n                    break;\n                }\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "5c13fa7579650c2cbcab61c6b18e509951f640aa",
      "startLine": 38,
      "endLine": 41,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = caseSensitivity.checkIndexOf(filename, textIdx, wcs[wcsIdx]);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = caseSensitivity.checkIndexOf(filename, textIdx + 1, wcs[wcsIdx]);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "a74a5a0c6ff41a4ca0a08caf740ebce1dc3c6d10",
      "startLine": 40,
      "endLine": 43,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    filename = caseSensitivity.convertCase(filename);\n    wildcardMatcher = caseSensitivity.convertCase(wildcardMatcher);\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack<int[]> backtrack = new Stack<int[]>();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "eff391033a01a092d943db90513412b08bb01525",
      "startLine": 40,
      "endLine": 43,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    filename = caseSensitivity.convertCase(filename);\n    wildcardMatcher = caseSensitivity.convertCase(wildcardMatcher);\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack backtrack = new Stack();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = (int[]) backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "07751ea95c575cb95a310a23a78dc8cbe85b27a9",
      "startLine": 38,
      "endLine": 41,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (caseSensitivity == null) {\n        caseSensitivity = IOCase.SENSITIVE;\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack backtrack = new Stack();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = (int[]) backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!caseSensitivity.checkRegionMatches(filename, textIdx, wcs[wcsIdx])) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "49ca3a4241c1847e08921ead7b582419fa53537c",
      "startLine": 39,
      "endLine": 42,
      "methodCode": "private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (system && isSystemWindows()) {\n        filename = filename.toLowerCase();\n        wildcardMatcher = wildcardMatcher.toLowerCase();\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack backtrack = new Stack();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = (int[]) backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "745375d22e427574f1ef1301c8378cd81e85a1fc",
      "startLine": 39,
      "endLine": 42,
      "methodCode": "private static boolean wildcardMatch(String filename, String wildcardMatcher, boolean system) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (system && (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR)) {\n        filename = filename.toLowerCase();\n        wildcardMatcher = wildcardMatcher.toLowerCase();\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack backtrack = new Stack();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = (int[]) backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    },
    {
      "commit": "1ead1cc51d537700eb72e3fa991e1d68162029d5",
      "startLine": 39,
      "endLine": 42,
      "methodCode": "public static boolean wildcardMatch(String filename, String wildcardMatcher) {\n    if (filename == null && wildcardMatcher == null) {\n        return true;\n    }\n    if (filename == null || wildcardMatcher == null) {\n        return false;\n    }\n    if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) {\n        filename = filename.toLowerCase();\n        wildcardMatcher = wildcardMatcher.toLowerCase();\n    }\n    String[] wcs = splitOnTokens(wildcardMatcher);\n    boolean anyChars = false;\n    int textIdx = 0;\n    int wcsIdx = 0;\n    Stack backtrack = new Stack();\n    do {\n        if (backtrack.size() > 0) {\n            int[] array = (int[]) backtrack.pop();\n            wcsIdx = array[0];\n            textIdx = array[1];\n            anyChars = true;\n        }\n        while (wcsIdx < wcs.length) {\n            if (wcs[wcsIdx].equals(\"?\")) {\n                textIdx++;\n                anyChars = false;\n            } else if (wcs[wcsIdx].equals(\"*\")) {\n                anyChars = true;\n                if (wcsIdx == wcs.length - 1) {\n                    textIdx = filename.length();\n                }\n            } else {\n                if (anyChars) {\n                    textIdx = filename.indexOf(wcs[wcsIdx], textIdx);\n                    if (textIdx == -1) {\n                        break;\n                    }\n                    int repeat = filename.indexOf(wcs[wcsIdx], textIdx + 1);\n                    if (repeat >= 0) {\n                        backtrack.push(new int[] { wcsIdx, repeat });\n                    }\n                } else {\n                    if (!filename.startsWith(wcs[wcsIdx], textIdx)) {\n                        break;\n                    }\n                }\n                textIdx += wcs[wcsIdx].length();\n                anyChars = false;\n            }\n            wcsIdx++;\n        }\n        if (wcsIdx == wcs.length && textIdx == filename.length()) {\n            return true;\n        }\n    } while (backtrack.size() > 0);\n    return false;\n}"
    }
  ]
}