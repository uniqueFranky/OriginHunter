{
  "statementVersions": [
    {
      "commit": "4f82195afdc4279c05826fc20f8642bfdaaafec3",
      "startLine": 72,
      "endLine": 88,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    final StrMatcher pfxMatcher = getVariablePrefixMatcher();\n    final StrMatcher suffMatcher = getVariableSuffixMatcher();\n    final char escape = getEscapeChar();\n    final StrMatcher valueDelimMatcher = getValueDelimiterMatcher();\n    final boolean substitutionInVariablesEnabled = isEnableSubstitutionInVariables();\n    final boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                if (preserveEscapes) {\n                    pos++;\n                    continue;\n                }\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                final int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (substitutionInVariablesEnabled && (endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varNameExpr = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (substitutionInVariablesEnabled) {\n                                final StrBuilder bufName = new StrBuilder(varNameExpr);\n                                substitute(bufName, 0, bufName.length());\n                                varNameExpr = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            final int endPos = pos;\n                            String varName = varNameExpr;\n                            String varDefaultValue = null;\n                            if (valueDelimMatcher != null) {\n                                final char[] varNameExprChars = varNameExpr.toCharArray();\n                                int valueDelimiterMatchLen = 0;\n                                for (int i = 0; i < varNameExprChars.length; i++) {\n                                    if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {\n                                        break;\n                                    }\n                                    if ((valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {\n                                        varName = varNameExpr.substring(0, i);\n                                        varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);\n                                        break;\n                                    }\n                                }\n                            }\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue == null) {\n                                varValue = varDefaultValue;\n                            }\n                            if (varValue != null) {\n                                final int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        }\n                        nestedVarCount--;\n                        pos += endMatchLen;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "e55aaa5706f031df2e8d68bdf088604c79944246",
      "startLine": 72,
      "endLine": 88,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    final StrMatcher pfxMatcher = getVariablePrefixMatcher();\n    final StrMatcher suffMatcher = getVariableSuffixMatcher();\n    final char escape = getEscapeChar();\n    final StrMatcher valueDelimMatcher = getValueDelimiterMatcher();\n    final boolean substitutionInVariablesEnabled = isEnableSubstitutionInVariables();\n    final boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                if (preserveEscapes) {\n                    pos++;\n                    continue;\n                }\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                final int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (substitutionInVariablesEnabled && (endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varNameExpr = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (substitutionInVariablesEnabled) {\n                                final StrBuilder bufName = new StrBuilder(varNameExpr);\n                                substitute(bufName, 0, bufName.length());\n                                varNameExpr = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            final int endPos = pos;\n                            String varName = varNameExpr;\n                            String varDefaultValue = null;\n                            if (valueDelimMatcher != null) {\n                                final char[] varNameExprChars = varNameExpr.toCharArray();\n                                int valueDelimiterMatchLen = 0;\n                                for (int i = 0; i < varNameExprChars.length; i++) {\n                                    if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {\n                                        break;\n                                    }\n                                    if ((valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {\n                                        varName = varNameExpr.substring(0, i);\n                                        varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);\n                                        break;\n                                    }\n                                }\n                            }\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue == null) {\n                                varValue = varDefaultValue;\n                            }\n                            if (varValue != null) {\n                                final int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        }\n                        nestedVarCount--;\n                        pos += endMatchLen;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "93b1808e523c252098139c37ee5b23324e855b4a",
      "startLine": 68,
      "endLine": 84,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    final StrMatcher pfxMatcher = getVariablePrefixMatcher();\n    final StrMatcher suffMatcher = getVariableSuffixMatcher();\n    final char escape = getEscapeChar();\n    final StrMatcher valueDelimMatcher = getValueDelimiterMatcher();\n    final boolean substitutionInVariablesEnabled = isEnableSubstitutionInVariables();\n    final boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                final int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (substitutionInVariablesEnabled && (endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varNameExpr = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (substitutionInVariablesEnabled) {\n                                final StrBuilder bufName = new StrBuilder(varNameExpr);\n                                substitute(bufName, 0, bufName.length());\n                                varNameExpr = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            final int endPos = pos;\n                            String varName = varNameExpr;\n                            String varDefaultValue = null;\n                            if (valueDelimMatcher != null) {\n                                final char[] varNameExprChars = varNameExpr.toCharArray();\n                                int valueDelimiterMatchLen = 0;\n                                for (int i = 0; i < varNameExprChars.length; i++) {\n                                    if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {\n                                        break;\n                                    }\n                                    if ((valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {\n                                        varName = varNameExpr.substring(0, i);\n                                        varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);\n                                        break;\n                                    }\n                                }\n                            }\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue == null) {\n                                varValue = varDefaultValue;\n                            }\n                            if (varValue != null) {\n                                final int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        }\n                        nestedVarCount--;\n                        pos += endMatchLen;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "1d97f23c08d8dbf889e976f9248d37173dbadb95",
      "startLine": 68,
      "endLine": 84,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    final StrMatcher pfxMatcher = getVariablePrefixMatcher();\n    final StrMatcher suffMatcher = getVariableSuffixMatcher();\n    final char escape = getEscapeChar();\n    final StrMatcher valueDelimMatcher = getValueDelimiterMatcher();\n    final boolean substitutionInVariablesEnabled = isEnableSubstitutionInVariables();\n    final boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                final int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (substitutionInVariablesEnabled && (endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varNameExpr = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (substitutionInVariablesEnabled) {\n                                final StrBuilder bufName = new StrBuilder(varNameExpr);\n                                substitute(bufName, 0, bufName.length());\n                                varNameExpr = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            final int endPos = pos;\n                            String varName = varNameExpr;\n                            String varDefaultValue = null;\n                            if (valueDelimMatcher != null) {\n                                final char[] varNameExprChars = varNameExpr.toCharArray();\n                                int valueDelimiterMatchLen = 0;\n                                for (int i = 0; i < varNameExprChars.length; i++) {\n                                    if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {\n                                        break;\n                                    }\n                                    if ((valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {\n                                        varName = varNameExpr.substring(0, i);\n                                        varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);\n                                        break;\n                                    }\n                                }\n                            }\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue == null) {\n                                varValue = varDefaultValue;\n                            }\n                            if (varValue != null) {\n                                final int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        } else {\n                            nestedVarCount--;\n                            pos += endMatchLen;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "abc5dda962fe00fba27f98807ca70439a37a3746",
      "startLine": 68,
      "endLine": 84,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    final StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    final StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    final char escape = getEscapeChar();\n    final StrMatcher valueDelimiterMatcher = getValueDelimiterMatcher();\n    final boolean substitutionInVariablesEnabled = isEnableSubstitutionInVariables();\n    final boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        final int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                final int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (substitutionInVariablesEnabled && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varNameExpr = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (substitutionInVariablesEnabled) {\n                                final StrBuilder bufName = new StrBuilder(varNameExpr);\n                                substitute(bufName, 0, bufName.length());\n                                varNameExpr = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            final int endPos = pos;\n                            String varName = varNameExpr;\n                            String varDefaultValue = null;\n                            if (valueDelimiterMatcher != null) {\n                                final char[] varNameExprChars = varNameExpr.toCharArray();\n                                int valueDelimiterMatchLen = 0;\n                                for (int i = 0; i < varNameExprChars.length; i++) {\n                                    if (!substitutionInVariablesEnabled && prefixMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {\n                                        break;\n                                    }\n                                    if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {\n                                        varName = varNameExpr.substring(0, i);\n                                        varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);\n                                        break;\n                                    }\n                                }\n                            }\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue == null) {\n                                varValue = varDefaultValue;\n                            }\n                            if (varValue != null) {\n                                final int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        } else {\n                            nestedVarCount--;\n                            pos += endMatchLen;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "5292526e476ffbb19c6613a98464054236c86ace",
      "startLine": 50,
      "endLine": 63,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    final StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    final StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    final char escape = getEscapeChar();\n    final boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        final int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                final int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (isEnableSubstitutionInVariables()) {\n                                final StrBuilder bufName = new StrBuilder(varName);\n                                substitute(bufName, 0, bufName.length());\n                                varName = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            final int endPos = pos;\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            final String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue != null) {\n                                final int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        } else {\n                            nestedVarCount--;\n                            pos += endMatchLen;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "startLine": 50,
      "endLine": 63,
      "methodCode": "private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (isEnableSubstitutionInVariables()) {\n                                StrBuilder bufName = new StrBuilder(varName);\n                                substitute(bufName, 0, bufName.length());\n                                varName = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            int endPos = pos;\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue != null) {\n                                int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        } else {\n                            nestedVarCount--;\n                            pos += endMatchLen;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "371e866442f46131cc38a9a5018e1703f52f9b60",
      "startLine": 50,
      "endLine": 63,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List<String> priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = priorVariables == null;\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (isEnableSubstitutionInVariables()) {\n                                StrBuilder bufName = new StrBuilder(varName);\n                                substitute(bufName, 0, bufName.length());\n                                varName = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            int endPos = pos;\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue != null) {\n                                int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + varLen - (endPos - startPos);\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        } else {\n                            nestedVarCount--;\n                            pos += endMatchLen;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return altered ? 1 : 0;\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "6f6eddbf3a41fa2838f062fee7724a69b86206df",
      "startLine": 50,
      "endLine": 63,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List<String> priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = (priorVariables == null);\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                int nestedVarCount = 0;\n                while (pos < bufEnd) {\n                    if (isEnableSubstitutionInVariables() && (endMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n                        nestedVarCount++;\n                        pos += endMatchLen;\n                        continue;\n                    }\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        if (nestedVarCount == 0) {\n                            String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                            if (isEnableSubstitutionInVariables()) {\n                                StrBuilder bufName = new StrBuilder(varName);\n                                substitute(bufName, 0, bufName.length());\n                                varName = bufName.toString();\n                            }\n                            pos += endMatchLen;\n                            int endPos = pos;\n                            if (priorVariables == null) {\n                                priorVariables = new ArrayList<String>();\n                                priorVariables.add(new String(chars, offset, length));\n                            }\n                            checkCyclicSubstitution(varName, priorVariables);\n                            priorVariables.add(varName);\n                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                            if (varValue != null) {\n                                int varLen = varValue.length();\n                                buf.replace(startPos, endPos, varValue);\n                                altered = true;\n                                int change = substitute(buf, startPos, varLen, priorVariables);\n                                change = change + (varLen - (endPos - startPos));\n                                pos += change;\n                                bufEnd += change;\n                                lengthChange += change;\n                                chars = buf.buffer;\n                            }\n                            priorVariables.remove(priorVariables.size() - 1);\n                            break;\n                        } else {\n                            nestedVarCount--;\n                            pos += endMatchLen;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return (altered ? 1 : 0);\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "startLine": 38,
      "endLine": 51,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List<String> priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = (priorVariables == null);\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                while (pos < bufEnd) {\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                        pos += endMatchLen;\n                        int endPos = pos;\n                        if (priorVariables == null) {\n                            priorVariables = new ArrayList<String>();\n                            priorVariables.add(new String(chars, offset, length));\n                        }\n                        checkCyclicSubstitution(varName, priorVariables);\n                        priorVariables.add(varName);\n                        String varValue = resolveVariable(varName, buf, startPos, endPos);\n                        if (varValue != null) {\n                            int varLen = varValue.length();\n                            buf.replace(startPos, endPos, varValue);\n                            altered = true;\n                            int change = substitute(buf, startPos, varLen, priorVariables);\n                            change = change + (varLen - (endPos - startPos));\n                            pos += change;\n                            bufEnd += change;\n                            lengthChange += change;\n                            chars = buf.buffer;\n                        }\n                        priorVariables.remove(priorVariables.size() - 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return (altered ? 1 : 0);\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "startLine": 38,
      "endLine": 51,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List<String> priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = (priorVariables == null);\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                while (pos < bufEnd) {\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                        pos += endMatchLen;\n                        int endPos = pos;\n                        if (priorVariables == null) {\n                            priorVariables = new ArrayList<String>();\n                            priorVariables.add(new String(chars, offset, length));\n                        }\n                        checkCyclicSubstitution(varName, priorVariables);\n                        priorVariables.add(varName);\n                        String varValue = resolveVariable(varName, buf, startPos, endPos);\n                        if (varValue != null) {\n                            int varLen = varValue.length();\n                            buf.replace(startPos, endPos, varValue);\n                            altered = true;\n                            int change = substitute(buf, startPos, varLen, priorVariables);\n                            change = change + (varLen - (endPos - startPos));\n                            pos += change;\n                            bufEnd += change;\n                            lengthChange += change;\n                            chars = buf.buffer;\n                        }\n                        priorVariables.remove(priorVariables.size() - 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return (altered ? 1 : 0);\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "654fb75d80a63fa551ced73c3b652f4120573590",
      "startLine": 38,
      "endLine": 51,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List<String> priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = (priorVariables == null);\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                while (pos < bufEnd) {\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                        pos += endMatchLen;\n                        int endPos = pos;\n                        if (priorVariables == null) {\n                            priorVariables = new ArrayList<String>();\n                            priorVariables.add(new String(chars, offset, length));\n                        }\n                        checkCyclicSubstitution(varName, priorVariables);\n                        priorVariables.add(varName);\n                        String varValue = resolveVariable(varName, buf, startPos, endPos);\n                        if (varValue != null) {\n                            int varLen = varValue.length();\n                            buf.replace(startPos, endPos, varValue);\n                            altered = true;\n                            int change = substitute(buf, startPos, varLen, priorVariables);\n                            change = change + (varLen - (endPos - startPos));\n                            pos += change;\n                            bufEnd += change;\n                            lengthChange += change;\n                            chars = buf.buffer;\n                        }\n                        priorVariables.remove(priorVariables.size() - 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return (altered ? 1 : 0);\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "927e7361037fa495cafece987c1c7d54b7e8128b",
      "startLine": 38,
      "endLine": 51,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = (priorVariables == null);\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                while (pos < bufEnd) {\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                        pos += endMatchLen;\n                        int endPos = pos;\n                        if (priorVariables == null) {\n                            priorVariables = new ArrayList();\n                            priorVariables.add(new String(chars, offset, length));\n                        }\n                        checkCyclicSubstitution(varName, priorVariables);\n                        priorVariables.add(varName);\n                        String varValue = resolveVariable(varName, buf, startPos, endPos);\n                        if (varValue != null) {\n                            int varLen = varValue.length();\n                            buf.replace(startPos, endPos, varValue);\n                            altered = true;\n                            int change = substitute(buf, startPos, varLen, priorVariables);\n                            change = change + (varLen - (endPos - startPos));\n                            pos += change;\n                            bufEnd += change;\n                            lengthChange += change;\n                            chars = buf.buffer;\n                        }\n                        priorVariables.remove(priorVariables.size() - 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return (altered ? 1 : 0);\n    }\n    return lengthChange;\n}"
    },
    {
      "commit": "4bfa1f6cb94c368ffa4febc3a2236886ced2290f",
      "startLine": 38,
      "endLine": 51,
      "methodCode": "private int substitute(StrBuilder buf, int offset, int length, List priorVariables) {\n    StrMatcher prefixMatcher = getVariablePrefixMatcher();\n    StrMatcher suffixMatcher = getVariableSuffixMatcher();\n    char escape = getEscapeChar();\n    boolean top = (priorVariables == null);\n    boolean altered = false;\n    int lengthChange = 0;\n    char[] chars = buf.buffer;\n    int bufEnd = offset + length;\n    int pos = offset;\n    while (pos < bufEnd) {\n        int startMatchLen = prefixMatcher.isMatch(chars, pos, offset, bufEnd);\n        if (startMatchLen == 0) {\n            pos++;\n        } else {\n            if (pos > offset && chars[pos - 1] == escape) {\n                buf.deleteCharAt(pos - 1);\n                chars = buf.buffer;\n                lengthChange--;\n                altered = true;\n                bufEnd--;\n            } else {\n                int startPos = pos;\n                pos += startMatchLen;\n                int endMatchLen = 0;\n                while (pos < bufEnd) {\n                    endMatchLen = suffixMatcher.isMatch(chars, pos, offset, bufEnd);\n                    if (endMatchLen == 0) {\n                        pos++;\n                    } else {\n                        String varName = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n                        pos += endMatchLen;\n                        int endPos = pos;\n                        if (priorVariables == null) {\n                            priorVariables = new ArrayList();\n                            priorVariables.add(new String(chars, offset, length));\n                        }\n                        checkCyclicSubstitution(varName, priorVariables);\n                        priorVariables.add(varName);\n                        String varValue = resolveVariable(varName);\n                        if (varValue != null) {\n                            int varLen = varValue.length();\n                            buf.replace(startPos, endPos, varValue);\n                            altered = true;\n                            int change = substitute(buf, startPos, varLen, priorVariables);\n                            change = change + (varLen - (endPos - startPos));\n                            pos += change;\n                            bufEnd += change;\n                            lengthChange += change;\n                            chars = buf.buffer;\n                        }\n                        priorVariables.remove(priorVariables.size() - 1);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (top) {\n        return (altered ? 1 : 0);\n    }\n    return lengthChange;\n}"
    }
  ]
}