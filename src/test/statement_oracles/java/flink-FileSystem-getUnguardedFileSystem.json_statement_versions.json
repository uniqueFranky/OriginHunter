{
  "statementVersions": [
    {
      "commit": "d7c2c417213502130b1aeab1868313df178555cc",
      "startLine": 32,
      "endLine": 41,
      "methodCode": "@Internal\npublic static FileSystem getUnguardedFileSystem(final URI fsUri) throws IOException {\n    checkNotNull(fsUri, \"file system URI\");\n    LOCK.lock();\n    try {\n        final URI uri;\n        if (fsUri.getScheme() != null) {\n            uri = fsUri;\n        } else {\n            final URI defaultUri = getDefaultFsUri();\n            URI rewrittenUri = null;\n            try {\n                rewrittenUri = new URI(defaultUri.getScheme(), null, defaultUri.getHost(), defaultUri.getPort(), fsUri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                if (defaultUri.getScheme().equals(\"file\")) {\n                    try {\n                        rewrittenUri = new URI(\"file\", null, new Path(new File(fsUri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    } catch (URISyntaxException ignored) {\n                    }\n                }\n            }\n            if (rewrittenUri != null) {\n                uri = rewrittenUri;\n            } else {\n                throw new IOException(\"The file system URI '\" + fsUri + \"' declares no scheme and cannot be interpreted relative to the default file system URI (\" + defaultUri + \").\");\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        {\n            FileSystem cached = CACHE.get(key);\n            if (cached != null) {\n                return cached;\n            }\n        }\n        if (FS_FACTORIES.isEmpty()) {\n            initialize(new Configuration());\n        }\n        final FileSystem fs;\n        final FileSystemFactory factory = FS_FACTORIES.get(uri.getScheme());\n        if (factory != null) {\n            fs = factory.create(uri);\n        } else {\n            try {\n                fs = FALLBACK_FACTORY.create(uri);\n            } catch (UnsupportedFileSystemSchemeException e) {\n                throw new UnsupportedFileSystemSchemeException(\"Could not find a file system implementation for scheme '\" + uri.getScheme() + \"'. The scheme is not directly supported by Flink and no Hadoop file \" + \"system to support this scheme could be loaded.\", e);\n            }\n        }\n        CACHE.put(key, fs);\n        return fs;\n    } finally {\n        LOCK.unlock();\n    }\n}"
    },
    {
      "commit": "536675b03a5050fda9c3e1fd403818cb50dcc6ff",
      "startLine": 32,
      "endLine": 38,
      "methodCode": "@Internal\npublic static FileSystem getUnguardedFileSystem(final URI fsUri) throws IOException {\n    checkNotNull(fsUri, \"file system URI\");\n    LOCK.lock();\n    try {\n        final URI uri;\n        if (fsUri.getScheme() != null) {\n            uri = fsUri;\n        } else {\n            final URI defaultUri = getDefaultFsUri();\n            URI rewrittenUri = null;\n            try {\n                rewrittenUri = new URI(defaultUri.getScheme(), null, defaultUri.getHost(), defaultUri.getPort(), fsUri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                if (defaultUri.getScheme().equals(\"file\")) {\n                    try {\n                        rewrittenUri = new URI(\"file\", null, new Path(new File(fsUri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    } catch (URISyntaxException ignored) {\n                    }\n                }\n            }\n            if (rewrittenUri != null) {\n                uri = rewrittenUri;\n            } else {\n                throw new IOException(\"The file system URI '\" + fsUri + \"' declares no scheme and cannot be interpreted relative to the default file system URI (\" + defaultUri + \").\");\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        {\n            FileSystem cached = CACHE.get(key);\n            if (cached != null) {\n                return cached;\n            }\n        }\n        final FileSystem fs;\n        final FileSystemFactory factory = FS_FACTORIES.get(uri.getScheme());\n        if (factory != null) {\n            fs = factory.create(uri);\n        } else {\n            try {\n                fs = FALLBACK_FACTORY.create(uri);\n            } catch (UnsupportedFileSystemSchemeException e) {\n                throw new UnsupportedFileSystemSchemeException(\"Could not find a file system implementation for scheme '\" + uri.getScheme() + \"'. The scheme is not directly supported by Flink and no Hadoop file \" + \"system to support this scheme could be loaded.\", e);\n            }\n        }\n        CACHE.put(key, fs);\n        return fs;\n    } finally {\n        LOCK.unlock();\n    }\n}"
    },
    {
      "commit": "3b786844dd9c0ce176eac98c8a05ebe50cb1ebe7",
      "startLine": 29,
      "endLine": 32,
      "methodCode": "@Internal\npublic static FileSystem getUnguardedFileSystem(URI uri) throws IOException {\n    final URI asked = uri;\n    LOCK.lock();\n    try {\n        if (uri.getScheme() == null) {\n            try {\n                if (defaultScheme == null) {\n                    defaultScheme = new URI(ConfigConstants.DEFAULT_FILESYSTEM_SCHEME);\n                }\n                uri = new URI(defaultScheme.getScheme(), null, defaultScheme.getHost(), defaultScheme.getPort(), uri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                try {\n                    if (defaultScheme.getScheme().equals(\"file\")) {\n                        uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    }\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme() == null) {\n            throw new IOException(\"The URI '\" + uri + \"' is invalid.\\n\" + \"The fs.default-scheme = \" + defaultScheme + \", the requested URI = \" + asked + \", and the final URI = \" + uri + \".\");\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        final FileSystem fs;\n        if (!isFlinkSupportedScheme(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n        return fs;\n    } finally {\n        LOCK.unlock();\n    }\n}"
    },
    {
      "commit": "19ef82cf358da54bf204e678bf203f25147b11f9",
      "startLine": 29,
      "endLine": 32,
      "methodCode": "@Internal\npublic static FileSystem getUnguardedFileSystem(URI uri) throws IOException {\n    FileSystem fs;\n    URI asked = uri;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                if (defaultScheme == null) {\n                    defaultScheme = new URI(ConfigConstants.DEFAULT_FILESYSTEM_SCHEME);\n                }\n                uri = new URI(defaultScheme.getScheme(), null, defaultScheme.getHost(), defaultScheme.getPort(), uri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                try {\n                    if (defaultScheme.getScheme().equals(\"file\")) {\n                        uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    }\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme() == null) {\n            throw new IOException(\"The URI '\" + uri + \"' is invalid.\\n\" + \"The fs.default-scheme = \" + defaultScheme + \", the requested URI = \" + asked + \", and the final URI = \" + uri + \".\");\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!isFlinkSupportedScheme(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "ba8ed263695d16eacb4bdfdf195dd22c83bb53ed",
      "startLine": 28,
      "endLine": 31,
      "methodCode": "public static FileSystem getUnguardedFileSystem(URI uri) throws IOException {\n    FileSystem fs;\n    URI asked = uri;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                if (defaultScheme == null) {\n                    defaultScheme = new URI(ConfigConstants.DEFAULT_FILESYSTEM_SCHEME);\n                }\n                uri = new URI(defaultScheme.getScheme(), null, defaultScheme.getHost(), defaultScheme.getPort(), uri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                try {\n                    if (defaultScheme.getScheme().equals(\"file\")) {\n                        uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    }\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme() == null) {\n            throw new IOException(\"The URI '\" + uri + \"' is invalid.\\n\" + \"The fs.default-scheme = \" + defaultScheme + \", the requested URI = \" + asked + \", and the final URI = \" + uri + \".\");\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!isFlinkSupportedScheme(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "a3d1a17406749e41185a77a64c23fc1cb3eabc76",
      "startLine": 28,
      "endLine": 31,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs;\n    URI asked = uri;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                if (defaultScheme == null) {\n                    defaultScheme = new URI(ConfigConstants.DEFAULT_FILESYSTEM_SCHEME);\n                }\n                uri = new URI(defaultScheme.getScheme(), null, defaultScheme.getHost(), defaultScheme.getPort(), uri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                try {\n                    if (defaultScheme.getScheme().equals(\"file\")) {\n                        uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    }\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme() == null) {\n            throw new IOException(\"The URI '\" + uri + \"' is invalid.\\n\" + \"The fs.default-scheme = \" + defaultScheme + \", the requested URI = \" + asked + \", and the final URI = \" + uri + \".\");\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!isFlinkSupportedScheme(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "76d3a6353a0a3f8960dc2b49d9eac6a4a279ea9e",
      "startLine": 28,
      "endLine": 31,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs;\n    URI asked = uri;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                if (defaultScheme == null) {\n                    defaultScheme = new URI(ConfigConstants.DEFAULT_FILESYSTEM_SCHEME);\n                }\n                uri = new URI(defaultScheme.getScheme(), null, defaultScheme.getHost(), defaultScheme.getPort(), uri.getPath(), null, null);\n            } catch (URISyntaxException e) {\n                try {\n                    if (defaultScheme.getScheme().equals(\"file\")) {\n                        uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                    }\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme() == null) {\n            throw new IOException(\"The URI '\" + uri + \"' is invalid.\\n\" + \"The fs.default-scheme = \" + defaultScheme + \", the requested URI = \" + asked + \", and the final URI = \" + uri + \".\");\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "1c8d866a83065e3d1bc9707dab81117f24c9f678",
      "startLine": 19,
      "endLine": 22,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                try {\n                    uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "2af658673f877a7e0fd73fdd2907f88824d793a5",
      "startLine": 19,
      "endLine": 22,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                try {\n                    uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "39fb7c945359465ce5241539559daac416e210b8",
      "startLine": 19,
      "endLine": 22,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                try {\n                    uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                System.out.println(\"Initializing new instance of wrapper for \" + wrapperClass);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "f2909293cbb37cc4b4516e3bef4db66376159e52",
      "startLine": 19,
      "endLine": 22,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                try {\n                    uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            Class<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n            if (wrapperClass != null) {\n                FSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n                if (CACHE.containsKey(wrappedKey)) {\n                    return CACHE.get(wrappedKey);\n                }\n                fs = instantiateHadoopFileSystemWrapper(wrapperClass);\n                fs.initialize(uri);\n                System.out.println(\"Initializing new instance of wrapper for \" + wrapperClass);\n                CACHE.put(wrappedKey, fs);\n            } else {\n                throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n            }\n        } else {\n            String fsClass = FSDIRECTORY.get(uri.getScheme());\n            if (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n                fs = instantiateHadoopFileSystemWrapper(null);\n            } else {\n                fs = instantiateFileSystem(fsClass);\n            }\n            System.out.println(\"Initializing new instance of native class for \" + fsClass);\n            fs.initialize(uri);\n            CACHE.put(key, fs);\n        }\n    }\n    return fs;\n}"
    },
    {
      "commit": "bbe54ac09154dd3e60870b0d26085e2e2ee564af",
      "startLine": 19,
      "endLine": 22,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                try {\n                    uri = new URI(\"file\", null, new Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n                } catch (URISyntaxException ex) {\n                    throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid.\");\n                }\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n        }\n        Class<? extends FileSystem> fsClass;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "4203bf99ddd009b72681ba0dc554cabd47e1c85c",
      "startLine": 15,
      "endLine": 18,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid. \" + \" File URIs need to specify aboslute file paths.\");\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n        }\n        Class<? extends FileSystem> fsClass;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "8b39ba9e45145a30c2b95c47d7b03bc3ed2a8a3a",
      "startLine": 15,
      "endLine": 18,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                throw new IOException(\"The file URI '\" + uri.toString() + \"' is not valid. \" + \" File URIs need to specify aboslute file paths.\");\n            }\n        }\n        if (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n            String supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n            throw new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\" + uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \", referenced in file URI '\" + uri.toString() + \"'.\");\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "8563d511da8ab8ac0e1362775f11aef7b67375be",
      "startLine": 11,
      "endLine": 14,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are example schemes. \" + \"Failed for \" + uri.toString() + \".\");\n            }\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \". Failed for \" + uri.toString() + \".\");\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "24eb47ac86299920aa137d5b6394a248ff58d19e",
      "startLine": 11,
      "endLine": 14,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are example schemes. \" + \"Failed for \" + uri.toString() + \".\");\n            }\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \". Failed for \" + uri.toString() + \".\");\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "d784bf9467bbaf8ffb37621c13fa30dfbb98e4d8",
      "startLine": 11,
      "endLine": 14,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are example schemes. \" + \"Failed for \" + uri.toString() + \".\");\n            }\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme() + \". Failed for \" + uri.toString() + \".\");\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "0038c9d0773e90676b1ee2a8a94dcf764f023e22",
      "startLine": 11,
      "endLine": 14,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            try {\n                uri = new URI(\"file\", null, uri.getPath(), null);\n            } catch (URISyntaxException e) {\n                throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are example schemes.\");\n            }\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "3a6344356a185be43f9be4b33702f97827f9ff96",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(final URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are schemes.\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        } catch (IllegalAccessException e) {\n            throw new IOException(\"Could not instantiate file system class: \" + e.getMessage(), e);\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "fc6b5168684ca298d8b025c839d9a4e48e470790",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(final URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are schemes.\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        } catch (IllegalAccessException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "33cb2ca9898809d2fc90765996ea56bbea458e59",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(final URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are schemes.\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        } catch (IllegalAccessException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "88d7305a5267aac598949519275123208195daf7",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(final URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null. file:// or hdfs:// are schemes.\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        } catch (IllegalAccessException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "d0c21f4c470812d699ec141210ad5119b3450de3",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(final URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (SYNCHRONIZATION_OBJECT) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        } catch (IllegalAccessException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "b27a112add2f4c221f9bfd8e4e953a750e8d64b3",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(final URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (synchronizationObject) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        } catch (IllegalAccessException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    },
    {
      "commit": "75e67a701cbabe5577967037c0e865d1c2e9a25b",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "public static FileSystem get(URI uri) throws IOException {\n    FileSystem fs = null;\n    synchronized (synchronizationObject) {\n        if (uri.getScheme() == null) {\n            throw new IOException(\"FileSystem: Scheme is null\");\n        }\n        final FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n        if (CACHE.containsKey(key)) {\n            return CACHE.get(key);\n        }\n        if (!FSDIRECTORY.containsKey(uri.getScheme())) {\n            throw new IOException(\"No file system found with scheme \" + uri.getScheme());\n        }\n        Class<? extends FileSystem> fsClass = null;\n        try {\n            fsClass = ClassUtils.getFileSystemByName(FSDIRECTORY.get(uri.getScheme()));\n        } catch (ClassNotFoundException e1) {\n            throw new IOException(StringUtils.stringifyException(e1));\n        }\n        try {\n            fs = fsClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        } catch (IllegalAccessException e) {\n            throw new IOException(StringUtils.stringifyException(e));\n        }\n        fs.initialize(uri);\n        CACHE.put(key, fs);\n    }\n    return fs;\n}"
    }
  ]
}