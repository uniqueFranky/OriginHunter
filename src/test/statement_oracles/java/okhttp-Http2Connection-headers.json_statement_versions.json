{
  "statementVersions": [
    {
      "commit": "abb0a790802996d1039c35424b70b0f3f06b94b7",
      "startLine": 7,
      "endLine": 38,
      "methodCode": "@Override\npublic void headers(boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    Http2Stream stream;\n    synchronized (Http2Connection.this) {\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (shutdown)\n                return;\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final Http2Stream newStream = new Http2Stream(streamId, Http2Connection.this, false, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            listenerExecutor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        Platform.get().log(INFO, \"Http2Connection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    stream.receiveHeaders(headerBlock);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "cd22113332cdeeedac8d6bda3297194f983b4aaf",
      "startLine": 7,
      "endLine": 38,
      "methodCode": "@Override\npublic void headers(boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    Http2Stream stream;\n    synchronized (Http2Connection.this) {\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (shutdown)\n                return;\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final Http2Stream newStream = new Http2Stream(streamId, Http2Connection.this, false, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        Platform.get().log(INFO, \"Http2Connection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    stream.receiveHeaders(headerBlock);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "3931dc8df0c57c7f50d23f8de532da0a51434f26",
      "startLine": 7,
      "endLine": 38,
      "methodCode": "@Override\npublic void headers(boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    Http2Stream stream;\n    synchronized (Http2Connection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final Http2Stream newStream = new Http2Stream(streamId, Http2Connection.this, false, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        Platform.get().log(INFO, \"Http2Connection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    stream.receiveHeaders(headerBlock);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
      "startLine": 7,
      "endLine": 38,
      "methodCode": "@Override\npublic void headers(boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    Http2Stream stream;\n    synchronized (Http2Connection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final Http2Stream newStream = new Http2Stream(streamId, Http2Connection.this, false, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        Platform.get().log(INFO, \"FramedConnection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    stream.receiveHeaders(headerBlock);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "0c04821a25c83fddebb29e8cd590609142ba20a2",
      "startLine": 7,
      "endLine": 38,
      "methodCode": "@Override\npublic void headers(boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    FramedStream stream;\n    synchronized (FramedConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final FramedStream newStream = new FramedStream(streamId, FramedConnection.this, false, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        Platform.get().log(INFO, \"FramedConnection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    stream.receiveHeaders(headerBlock);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "4f24a30c12032b7033884a630696014afd3e77cb",
      "startLine": 7,
      "endLine": 47,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    FramedStream stream;\n    synchronized (FramedConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final FramedStream newStream = new FramedStream(streamId, FramedConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        Platform.get().log(INFO, \"FramedConnection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "2dade17682071a3e1d60df4113795117e5c1833c",
      "startLine": 7,
      "endLine": 47,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    FramedStream stream;\n    synchronized (FramedConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final FramedStream newStream = new FramedStream(streamId, FramedConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostname, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        logger.log(Level.INFO, \"FramedConnection.Listener failure for \" + hostname, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "c9a89876de476983f273edbf108c365127c18c5e",
      "startLine": 7,
      "endLine": 47,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    FramedStream stream;\n    synchronized (FramedConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final FramedStream newStream = new FramedStream(streamId, FramedConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        logger.log(Level.INFO, \"FramedConnection.Listener failure for \" + hostName, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "38aaf7bca6d998d0d1a1839d2b8816735f9b8914",
      "startLine": 7,
      "endLine": 47,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    FramedStream stream;\n    synchronized (FramedConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final FramedStream newStream = new FramedStream(streamId, FramedConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        listener.onStream(newStream);\n                    } catch (IOException e) {\n                        logger.log(Level.INFO, \"FramedConnection.Listener failure for \" + hostName, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
      "startLine": 7,
      "endLine": 47,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    FramedStream stream;\n    synchronized (FramedConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final FramedStream newStream = new FramedStream(streamId, FramedConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        logger.log(Level.INFO, \"StreamHandler failure for \" + hostName, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "8fe27a50c2c88d382e6dc6600836bcc57fc7b0cf",
      "startLine": 7,
      "endLine": 47,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        logger.log(Level.INFO, \"StreamHandler failure for \" + hostName, e);\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "fb155c47661ede5da395dfb4e620867263b8c8e7",
      "startLine": 7,
      "endLine": 46,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (RuntimeException | IOException e) {\n                        try {\n                            newStream.close(ErrorCode.PROTOCOL_ERROR);\n                        } catch (IOException ignored) {\n                        }\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
      "startLine": 7,
      "endLine": 43,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "cc38140be4c7e41330cf7749c3eeba23c85f9522",
      "startLine": 7,
      "endLine": 43,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
      "startLine": 7,
      "endLine": 43,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<Header> headerBlock, HeadersMode headersMode) {\n    if (pushedStream(streamId)) {\n        pushHeadersLater(streamId, headerBlock, inFinished);\n        return;\n    }\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "110a4fac4257fe2df0e23149fbef76e750604cf4",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<Header> headerBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "358169b89f32c00bf229b4e42ccef756588da71f",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<Header> headerBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, headerBlock);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<Header> headerBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, headerBlock, initialWindowSize);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "f214cf9670339b850f97da4a2d4ad64758fd0e4d",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<Header> headerBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, headerBlock, peerSettings);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(headerBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<Header> nameValueBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, nameValueBlock, peerSettings);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(nameValueBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<ByteString> nameValueBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, nameValueBlock, peerSettings);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(nameValueBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "749a65b776c8fc4b39b6463695980275da34da51",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<ByteString> nameValueBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, nameValueBlock, settings);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(nameValueBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<ByteString> nameValueBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, nameValueBlock, settings);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp Callback %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(nameValueBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
      "startLine": 3,
      "endLine": 39,
      "methodCode": "@Override\npublic void headers(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId, int priority, List<String> nameValueBlock, HeadersMode headersMode) {\n    SpdyStream stream;\n    synchronized (SpdyConnection.this) {\n        if (shutdown)\n            return;\n        stream = getStream(streamId);\n        if (stream == null) {\n            if (headersMode.failIfStreamAbsent()) {\n                writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);\n                return;\n            }\n            if (streamId <= lastGoodStreamId)\n                return;\n            if (streamId % 2 == nextStreamId % 2)\n                return;\n            final SpdyStream newStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority, nameValueBlock, settings);\n            lastGoodStreamId = streamId;\n            streams.put(streamId, newStream);\n            executor.submit(new NamedRunnable(\"OkHttp Callback %s stream %d\", hostName, streamId) {\n\n                @Override\n                public void execute() {\n                    try {\n                        handler.receive(newStream);\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            return;\n        }\n    }\n    if (headersMode.failIfStreamPresent()) {\n        stream.closeLater(ErrorCode.PROTOCOL_ERROR);\n        removeStream(streamId);\n        return;\n    }\n    stream.receiveHeaders(nameValueBlock, headersMode);\n    if (inFinished)\n        stream.receiveFin();\n}"
    },
    {
      "commit": "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
      "startLine": 3,
      "endLine": 6,
      "methodCode": "@Override\npublic void headers(int streamId, List<String> nameValueBlock) throws IOException {\n    SpdyStream replyStream = getStream(streamId);\n    if (replyStream != null) {\n        replyStream.receiveHeaders(nameValueBlock);\n    }\n}"
    },
    {
      "commit": "3c0faa9ca18de3be0a178e590086888f4f89612a",
      "startLine": 3,
      "endLine": 6,
      "methodCode": "@Override\npublic void headers(int flags, int streamId, List<String> nameValueBlock) throws IOException {\n    SpdyStream replyStream = getStream(streamId);\n    if (replyStream != null) {\n        replyStream.receiveHeaders(nameValueBlock);\n    }\n}"
    },
    {
      "commit": "7ccbf48838b7cfe42759c67790636d442ea5daa3",
      "startLine": 3,
      "endLine": 6,
      "methodCode": "@Override\npublic void headers(int flags, int streamId, List<String> nameValueBlock) throws IOException {\n    SpdyStream replyStream = getStream(streamId);\n    if (replyStream != null) {\n        replyStream.receiveHeaders(nameValueBlock);\n    }\n}"
    },
    {
      "commit": "b9580d68e9bc34eef397e9bc7f13091f1e3f1528",
      "startLine": 3,
      "endLine": 6,
      "methodCode": "@Override\npublic void headers(int flags, int streamId, List<String> nameValueBlock) throws IOException {\n    SpdyStream replyStream = getStream(streamId);\n    if (replyStream != null) {\n        replyStream.receiveHeaders(nameValueBlock);\n    }\n}"
    },
    {
      "commit": "689f66222bd8984dd69229a4ee9caf8da528ae12",
      "startLine": 3,
      "endLine": 10,
      "methodCode": "@Override\npublic void headers(int flags, int streamId, List<String> nameValueBlock) throws IOException {\n    SpdyStream replyStream = getStream(streamId);\n    if (replyStream != null) {\n        try {\n            replyStream.receiveHeaders(nameValueBlock);\n        } catch (ProtocolException e) {\n            replyStream.closeLater(SpdyStream.RST_PROTOCOL_ERROR);\n        }\n    }\n}"
    },
    {
      "commit": "7a28500a72d6914c6be7d9d8ee47d23f92f35d64",
      "startLine": 3,
      "endLine": 10,
      "methodCode": "@Override\npublic void headers(int flags, int streamId, List<String> nameValueBlock) throws IOException {\n    SpdyStream replyStream = getStream(streamId);\n    if (replyStream != null) {\n        try {\n            replyStream.receiveHeaders(nameValueBlock);\n        } catch (ProtocolException e) {\n            replyStream.closeLater(SpdyStream.RST_PROTOCOL_ERROR);\n        }\n    }\n}"
    }
  ]
}