{
  "statementVersions": [
    {
      "commit": "0e8203f804d5a84f1d85267893bc827f75529584",
      "startLine": 38,
      "endLine": 52,
      "methodCode": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class<?> numericClass;\n    if (from != null) {\n        numericClass = from.getClass();\n    } else if (to != null) {\n        numericClass = to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (Double.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (Byte.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (Short.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (Long.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (Integer.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (Float.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (Date.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((Date) from).getTime() : null;\n        Long toValue = to != null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (Calendar.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue = to != null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((java.time.Duration) from).toNanos() : null;\n        Long toValue = to != null ? ((java.time.Duration) to).toNanos() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (java.time.Year.class.isAssignableFrom(numericClass)) {\n        Integer fromValue = from != null ? ((java.time.Year) from).getValue() : null;\n        Integer toValue = to != null ? ((java.time.Year) to).getValue() : null;\n        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((java.time.Instant) from).toEpochMilli() : null;\n        Long toValue = to != null ? ((java.time.Instant) to).toEpochMilli() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}"
    },
    {
      "commit": "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139",
      "startLine": 39,
      "endLine": 53,
      "methodCode": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class<?> numericClass;\n    if (from != null) {\n        numericClass = from.getClass();\n    } else if (to != null) {\n        numericClass = to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (Double.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (Byte.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (Short.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (Long.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (Integer.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (Float.class.isAssignableFrom(numericClass)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (Date.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((Date) from).getTime() : null;\n        Long toValue = to != null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (Calendar.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue = to != null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (JavaTimeBridgeProvider.isActive()) {\n        if (java.time.Duration.class.isAssignableFrom(numericClass)) {\n            Long fromValue = from != null ? ((java.time.Duration) from).toNanos() : null;\n            Long toValue = to != null ? ((java.time.Duration) to).toNanos() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (java.time.Year.class.isAssignableFrom(numericClass)) {\n            Integer fromValue = from != null ? ((java.time.Year) from).getValue() : null;\n            Integer toValue = to != null ? ((java.time.Year) to).getValue() : null;\n            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (java.time.Instant.class.isAssignableFrom(numericClass)) {\n            Long fromValue = from != null ? ((java.time.Instant) from).toEpochMilli() : null;\n            Long toValue = to != null ? ((java.time.Instant) to).toEpochMilli() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}"
    },
    {
      "commit": "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
      "startLine": 39,
      "endLine": 53,
      "methodCode": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class<?> numericClass;\n    if (from != null) {\n        numericClass = from.getClass();\n    } else if (to != null) {\n        numericClass = to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue = from != null ? ((Date) from).getTime() : null;\n        Long toValue = to != null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (Calendar.class.isAssignableFrom(numericClass)) {\n        Long fromValue = from != null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue = to != null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (JavaTimeBridgeProvider.isActive()) {\n        if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n            Long fromValue = from != null ? ((java.time.Duration) from).toNanos() : null;\n            Long toValue = to != null ? ((java.time.Duration) to).toNanos() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Year.class)) {\n            Integer fromValue = from != null ? ((java.time.Year) from).getValue() : null;\n            Integer toValue = to != null ? ((java.time.Year) to).getValue() : null;\n            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n            Long fromValue = from != null ? ((java.time.Instant) from).toEpochMilli() : null;\n            Long toValue = to != null ? ((java.time.Instant) to).toEpochMilli() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}"
    },
    {
      "commit": "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
      "startLine": 39,
      "endLine": 53,
      "methodCode": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class<?> numericClass;\n    if (from != null) {\n        numericClass = from.getClass();\n    } else if (to != null) {\n        numericClass = to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue = from != null ? ((Date) from).getTime() : null;\n        Long toValue = to != null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue = from != null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue = to != null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (JavaTimeBridgeProvider.isActive()) {\n        if (numericClass.isAssignableFrom(java.time.Duration.class)) {\n            Long fromValue = from != null ? ((java.time.Duration) from).toNanos() : null;\n            Long toValue = to != null ? ((java.time.Duration) to).toNanos() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Year.class)) {\n            Integer fromValue = from != null ? ((java.time.Year) from).getValue() : null;\n            Integer toValue = to != null ? ((java.time.Year) to).getValue() : null;\n            return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n        if (numericClass.isAssignableFrom(java.time.Instant.class)) {\n            Long fromValue = from != null ? ((java.time.Instant) from).toEpochMilli() : null;\n            Long toValue = to != null ? ((java.time.Instant) to).toEpochMilli() : null;\n            return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n        }\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}"
    },
    {
      "commit": "1f2600dedf2f75379ceb45e9f99103814f902c28",
      "startLine": 38,
      "endLine": 52,
      "methodCode": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class<?> numericClass;\n    if (from != null) {\n        numericClass = from.getClass();\n    } else if (to != null) {\n        numericClass = to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue = from != null ? ((Date) from).getTime() : null;\n        Long toValue = to != null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue = from != null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue = to != null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n        Long fromValue = from != null ? ((Duration) from).toNanos() : null;\n        Long toValue = to != null ? ((Duration) to).toNanos() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n        Integer fromValue = from != null ? ((Year) from).getValue() : null;\n        Integer toValue = to != null ? ((Year) to).getValue() : null;\n        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_INSTANT)) {\n        Long fromValue = from != null ? ((Instant) from).toEpochMilli() : null;\n        Long toValue = to != null ? ((Instant) to).toEpochMilli() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}"
    },
    {
      "commit": "3d93af0a91221be6d3e3b145061eec7c7a833bde",
      "startLine": 38,
      "endLine": 47,
      "methodCode": "public static Query createNumericRangeQuery(String fieldName, Object from, Object to, boolean includeLower, boolean includeUpper) {\n    Class<?> numericClass;\n    if (from != null) {\n        numericClass = from.getClass();\n    } else if (to != null) {\n        numericClass = to.getClass();\n    } else {\n        throw log.rangeQueryWithNullToAndFromValue(fieldName);\n    }\n    if (numericClass.isAssignableFrom(Double.class)) {\n        return NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Byte.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Byte) from).intValue(), ((Byte) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Short.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, ((Short) from).intValue(), ((Short) to).intValue(), includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Long.class)) {\n        return NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Integer.class)) {\n        return NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Float.class)) {\n        return NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Date.class)) {\n        Long fromValue = from != null ? ((Date) from).getTime() : null;\n        Long toValue = to != null ? ((Date) to).getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (numericClass.isAssignableFrom(Calendar.class)) {\n        Long fromValue = from != null ? ((Calendar) from).getTime().getTime() : null;\n        Long toValue = to != null ? ((Calendar) to).getTime().getTime() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_DURATION)) {\n        Long fromValue = from != null ? ((Duration) from).toNanos() : null;\n        Long toValue = to != null ? ((Duration) to).toNanos() : null;\n        return NumericRangeQuery.newLongRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    if (isAssignableFrom(numericClass, JAVA_TIME_YEAR)) {\n        Integer fromValue = from != null ? ((Year) from).getValue() : null;\n        Integer toValue = to != null ? ((Year) to).getValue() : null;\n        return NumericRangeQuery.newIntRange(fieldName, fromValue, toValue, includeLower, includeUpper);\n    }\n    throw log.numericRangeQueryWithNonNumericToAndFromValues(fieldName);\n}"
    }
  ]
}