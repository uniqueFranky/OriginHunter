{
  "statementVersions": [
    {
      "commit": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "@Override\npublic RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnException {\n    try {\n        if (!isAllowedDelegationTokenOp()) {\n            throw new IOException(\"Delegation Token can be renewed only with kerberos authentication\");\n        }\n        org.apache.hadoop.yarn.api.records.Token protoToken = request.getDelegationToken();\n        Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(protoToken.getIdentifier().array(), protoToken.getPassword().array(), new Text(protoToken.getKind()), new Text(protoToken.getService()));\n        String user = getRenewerForToken(token);\n        long nextExpTime = rmDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse = Records.newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    } catch (IOException e) {\n        throw RPCUtil.getRemoteException(e);\n    }\n}"
    },
    {
      "commit": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "@Override\npublic RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n        if (!isAllowedDelegationTokenOp()) {\n            throw new IOException(\"Delegation Token can be renewed only with kerberos authentication\");\n        }\n        org.apache.hadoop.yarn.api.records.Token protoToken = request.getDelegationToken();\n        Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(protoToken.getIdentifier().array(), protoToken.getPassword().array(), new Text(protoToken.getKind()), new Text(protoToken.getService()));\n        String user = getRenewerForToken(token);\n        long nextExpTime = rmDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse = Records.newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    } catch (IOException e) {\n        throw RPCUtil.getRemoteException(e);\n    }\n}"
    },
    {
      "commit": "ba5b19fb5d6a925231a123616d171e3f6062bd27",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "@Override\npublic RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n        if (!isAllowedDelegationTokenOp()) {\n            throw new IOException(\"Delegation Token can be renewed only with kerberos authentication\");\n        }\n        DelegationToken protoToken = request.getDelegationToken();\n        Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(protoToken.getIdentifier().array(), protoToken.getPassword().array(), new Text(protoToken.getKind()), new Text(protoToken.getService()));\n        String user = getRenewerForToken(token);\n        long nextExpTime = rmDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse = Records.newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    } catch (IOException e) {\n        throw RPCUtil.getRemoteException(e);\n    }\n}"
    },
    {
      "commit": "dd8fc7e499200476f44a3d1d38127f5c47c9eefb",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "@Override\npublic RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n        if (!isAllowedDelegationTokenOp()) {\n            throw new IOException(\"Delegation Token can be renewed only with kerberos authentication\");\n        }\n        DelegationToken protoToken = request.getDelegationToken();\n        Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(protoToken.getIdentifier().array(), protoToken.getPassword().array(), new Text(protoToken.getKind()), new Text(protoToken.getService()));\n        String user = UserGroupInformation.getCurrentUser().getShortUserName();\n        long nextExpTime = rmDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse = Records.newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    } catch (IOException e) {\n        throw RPCUtil.getRemoteException(e);\n    }\n}"
    }
  ]
}