{
  "statementVersions": [
    {
      "commit": "58327e1dd9707b09f82ae2d4d4ce14c253247154",
      "startLine": 4,
      "endLine": 8,
      "methodCode": "@Override\nprotected void processFiltered(File file, FileText fileText) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions()) && (!ordinaryChecks.isEmpty() || !commentChecks.isEmpty())) {\n        final FileContents contents = new FileContents(fileText);\n        final DetailAST rootAST = JavaParser.parse(contents);\n        if (!ordinaryChecks.isEmpty()) {\n            walk(rootAST, contents, AstState.ORDINARY);\n        }\n        if (!commentChecks.isEmpty()) {\n            final DetailAST astWithComments = JavaParser.appendHiddenCommentNodes(rootAST);\n            walk(astWithComments, contents, AstState.WITH_COMMENTS);\n        }\n        if (filters.isEmpty()) {\n            addMessages(messages);\n        } else {\n            final SortedSet<LocalizedMessage> filteredMessages = getFilteredMessages(file.getPath(), contents, rootAST);\n            addMessages(filteredMessages);\n        }\n        messages.clear();\n    }\n}"
    },
    {
      "commit": "f994512712c08a16def4a3c5a0426b7ab1590cc9",
      "startLine": 8,
      "endLine": 12,
      "methodCode": "@Override\nprotected void processFiltered(File file, FileText fileText) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        final String msg = \"%s occurred during the analysis of file %s.\";\n        final String fileName = file.getPath();\n        try {\n            if (!ordinaryChecks.isEmpty() || !commentChecks.isEmpty()) {\n                final FileContents contents = new FileContents(fileText);\n                final DetailAST rootAST = parse(contents);\n                if (!ordinaryChecks.isEmpty()) {\n                    walk(rootAST, contents, AstState.ORDINARY);\n                }\n                if (!commentChecks.isEmpty()) {\n                    final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n                    walk(astWithComments, contents, AstState.WITH_COMMENTS);\n                }\n                if (filters.isEmpty()) {\n                    addMessages(messages);\n                } else {\n                    final SortedSet<LocalizedMessage> filteredMessages = getFilteredMessages(fileName, contents, rootAST);\n                    addMessages(filteredMessages);\n                }\n                messages.clear();\n            }\n        } catch (final TokenStreamRecognitionException tre) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n            throw new CheckstyleException(exceptionMsg, tre);\n        } catch (RecognitionException | TokenStreamException ex) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }\n}"
    },
    {
      "commit": "6d9e8ece85007117e048fef55469623b830f9446",
      "startLine": 8,
      "endLine": 12,
      "methodCode": "@Override\nprotected void processFiltered(File file, FileText fileText) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        final String msg = \"%s occurred during the analysis of file %s.\";\n        final String fileName = file.getPath();\n        try {\n            if (!ordinaryChecks.isEmpty() || !commentChecks.isEmpty()) {\n                final FileContents contents = new FileContents(fileText);\n                final DetailAST rootAST = parse(contents);\n                if (!ordinaryChecks.isEmpty()) {\n                    walk(rootAST, contents, AstState.ORDINARY);\n                }\n                if (!commentChecks.isEmpty()) {\n                    final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n                    walk(astWithComments, contents, AstState.WITH_COMMENTS);\n                }\n                final SortedSet<LocalizedMessage> filteredMessages = getFilteredMessages(fileName, contents);\n                addMessages(filteredMessages);\n                messages.clear();\n            }\n        } catch (final TokenStreamRecognitionException tre) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n            throw new CheckstyleException(exceptionMsg, tre);\n        } catch (RecognitionException | TokenStreamException ex) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }\n}"
    },
    {
      "commit": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "startLine": 8,
      "endLine": 12,
      "methodCode": "@Override\nprotected void processFiltered(File file, FileText fileText) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        final String msg = \"%s occurred during the analysis of file %s.\";\n        final String fileName = file.getPath();\n        try {\n            if (!ordinaryChecks.isEmpty() || !commentChecks.isEmpty()) {\n                final FileContents contents = new FileContents(fileText);\n                final DetailAST rootAST = parse(contents);\n                if (!ordinaryChecks.isEmpty()) {\n                    walk(rootAST, contents, AstState.ORDINARY);\n                }\n                if (!commentChecks.isEmpty()) {\n                    final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n                    walk(astWithComments, contents, AstState.WITH_COMMENTS);\n                }\n            }\n        } catch (final TokenStreamRecognitionException tre) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n            throw new CheckstyleException(exceptionMsg, tre);\n        } catch (RecognitionException | TokenStreamException ex) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }\n}"
    },
    {
      "commit": "d72e6f7d0b9f339feef4309a9dada7fd381ba242",
      "startLine": 8,
      "endLine": 13,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        final String msg = \"%s occurred during the analysis of file %s.\";\n        final String fileName = file.getPath();\n        try {\n            if (!ordinaryChecks.isEmpty() || !commentChecks.isEmpty()) {\n                final FileText text = FileText.fromLines(file, lines);\n                final FileContents contents = new FileContents(text);\n                final DetailAST rootAST = parse(contents);\n                if (!ordinaryChecks.isEmpty()) {\n                    walk(rootAST, contents, AstState.ORDINARY);\n                }\n                if (!commentChecks.isEmpty()) {\n                    final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n                    walk(astWithComments, contents, AstState.WITH_COMMENTS);\n                }\n            }\n        } catch (final TokenStreamRecognitionException tre) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n            throw new CheckstyleException(exceptionMsg, tre);\n        } catch (RecognitionException | TokenStreamException ex) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }\n}"
    },
    {
      "commit": "27e1e94244b6bb369c2ea7502c235260f49f78b0",
      "startLine": 8,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        final String msg = \"%s occurred during the analysis of file %s.\";\n        final String fileName = file.getPath();\n        try {\n            if (!ordinaryChecks.isEmpty() || !commentChecks.isEmpty()) {\n                final FileText text = FileText.fromLines(file, lines);\n                final FileContents contents = new FileContents(text);\n                final DetailAST rootAST = parse(contents);\n                getMessageCollector().reset();\n                if (!ordinaryChecks.isEmpty()) {\n                    walk(rootAST, contents, AstState.ORDINARY);\n                }\n                if (!commentChecks.isEmpty()) {\n                    final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n                    walk(astWithComments, contents, AstState.WITH_COMMENTS);\n                }\n            }\n        } catch (final TokenStreamRecognitionException tre) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n            throw new CheckstyleException(exceptionMsg, tre);\n        } catch (RecognitionException | TokenStreamException ex) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }\n}"
    },
    {
      "commit": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "startLine": 7,
      "endLine": 11,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) throws CheckstyleException {\n    if (CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        final String msg = \"%s occurred during the analysis of file %s.\";\n        final String fileName = file.getPath();\n        try {\n            final FileText text = FileText.fromLines(file, lines);\n            final FileContents contents = new FileContents(text);\n            final DetailAST rootAST = parse(contents);\n            getMessageCollector().reset();\n            walk(rootAST, contents, AstState.ORDINARY);\n            final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n            walk(astWithComments, contents, AstState.WITH_COMMENTS);\n        } catch (final TokenStreamRecognitionException tre) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n            throw new CheckstyleException(exceptionMsg, tre);\n        } catch (RecognitionException | TokenStreamException ex) {\n            final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }\n}"
    },
    {
      "commit": "d46c2cf0e9df06bb5f424dbd7645574f082f7609",
      "startLine": 9,
      "endLine": 13,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) throws CheckstyleException {\n    if (!CommonUtils.matchesFileExtension(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    final String fileName = file.getPath();\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n        throw new CheckstyleException(exceptionMsg, tre);\n    } catch (RecognitionException | TokenStreamException ex) {\n        final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n        throw new CheckstyleException(exceptionMsg, ex);\n    }\n}"
    },
    {
      "commit": "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) throws CheckstyleException {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.isInCache(fileName, timestamp) || !CommonUtils.matchesFileExtension(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(Locale.ROOT, msg, \"TokenStreamRecognitionException\", fileName);\n        throw new CheckstyleException(exceptionMsg, tre);\n    } catch (RecognitionException | TokenStreamException ex) {\n        final String exceptionMsg = String.format(Locale.ROOT, msg, ex.getClass().getSimpleName(), fileName);\n        throw new CheckstyleException(exceptionMsg, ex);\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "5922d5a6730d7582d7d66121eb911ef9426f9e24",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) throws CheckstyleException {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.isInCache(fileName, timestamp) || !CommonUtils.matchesFileExtension(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        throw new CheckstyleException(exceptionMsg, tre);\n    } catch (RecognitionException | TokenStreamException ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        throw new CheckstyleException(exceptionMsg, ex);\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.isInCache(fileName, timestamp) || !CommonUtils.matchesFileExtension(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        final String message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.isInCache(fileName, timestamp) || !CommonUtils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        final String message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.inCache(fileName, timestamp) || !CommonUtils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        final String message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "c4928f486c67afa62e7e8fbd5d8f731be7186985",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.inCache(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        final String message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "82d8e91024a57a96fbb6410dacb29d6a3f582903",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.inCache(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message;\n        message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.inCache(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message;\n        message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "a2da840df3bcb4e251695f7fbf1a5d341142459d",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.inCache(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        message = re.getMessage();\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "ea9ff3965d9c657b5b7bd2d969e075f430635c47",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache != null && (cache.inCache(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions()))) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        if (re != null) {\n            message = re.getMessage();\n        }\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (cache != null && getMessageCollector().size() == 0) {\n        cache.put(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "56743942d548686fb90ebd8b7a17fed5977e49dc",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        if (re != null) {\n            message = re.getMessage();\n        }\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg, ex);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "aeef83ee58cce5b5bf0f10a8793fc37514751ef5",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s.\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        if (re != null) {\n            message = re.getMessage();\n        }\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !Utils.fileExtensionMatches(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        if (re != null) {\n            message = re.getMessage();\n        }\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !fileExtensionMatches(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        LOG.error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        if (re != null) {\n            message = re.getMessage();\n        }\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        LOG.error(exceptionMsg);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "1dacd5303bfe94b9d5476059b6a5676146d96708",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !fileExtensionMatches(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        String message = \"TokenStreamRecognitionException occured\";\n        if (re != null) {\n            message = re.getMessage();\n        }\n        getMessageCollector().add(createLocalizedMessage(message));\n    } catch (Throwable ex) {\n        final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(createLocalizedMessage(ex.getMessage()));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "14e0b0ea52977de4a8d8ceb6bab1420e84093a21",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !fileExtensionMatches(file, getFileExtensions())) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final RecognitionException re) {\n        final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        final String exceptionMsg = String.format(msg, \"Exception\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "b9a1bec65f9eec7b96add7336dfcca4bf284e479",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !fileExtensionMatches(file, fileExtensions)) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final RecognitionException re) {\n        final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        final String exceptionMsg = String.format(msg, \"Exception\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "204c073294cdca6756bcd546d6af85a797ad7d79",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp) || !fileExtensionMatches(file, fileExtensions)) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final RecognitionException re) {\n        final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        final String exceptionMsg = String.format(msg, \"Exception\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        err.printStackTrace();\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File file, List<String> lines) {\n    final String fileName = file.getPath();\n    final long timestamp = file.lastModified();\n    if (cache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(file, lines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final RecognitionException re) {\n        final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        final String exceptionMsg = String.format(msg, \"Exception\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        err.printStackTrace();\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        cache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "a8b8375b1db65b131938111ff283baed771161ed",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\nprotected void processFiltered(File aFile, List<String> aLines) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    final String msg = \"%s occurred during the analysis of file %s .\";\n    try {\n        final FileText text = FileText.fromLines(aFile, aLines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final RecognitionException re) {\n        final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        final String exceptionMsg = String.format(msg, \"TokenStreamException\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        final String exceptionMsg = String.format(msg, \"Exception\", fileName);\n        Utils.getExceptionLogger().error(exceptionMsg);\n        err.printStackTrace();\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "a24df47cafeab03fd65cf72b460aad3d2fafce3d",
      "startLine": 9,
      "endLine": 13,
      "methodCode": "@Override\nprotected void processFiltered(File aFile, List<String> aLines) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        final FileText text = FileText.fromLines(aFile, aLines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        getMessageCollector().reset();\n        walk(rootAST, contents, AstState.ORDINARY);\n        final DetailAST astWithComments = appendHiddenCommentNodes(rootAST);\n        walk(astWithComments, contents, AstState.WITH_COMMENTS);\n    } catch (final RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        err.printStackTrace();\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "@Override\nprotected void processFiltered(File aFile, List<String> aLines) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        final FileText text = FileText.fromLines(aFile, aLines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (final RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "3cd6646941eca3da7d3b9a221c88e4c1d214876e",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "@Override\nprotected void processFiltered(File aFile, List<String> aLines) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        final FileText text = FileText.fromLines(aFile, aLines);\n        final FileContents contents = new FileContents(text);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (final RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "startLine": 9,
      "endLine": 11,
      "methodCode": "@Override\nprotected void processFiltered(File aFile, List<String> aLines) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        final FileContents contents = new FileContents(fileName, aLines.toArray(new String[aLines.size()]));\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (final RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    }\n}"
    },
    {
      "commit": "17754d363645285e49bf4323a1af5762af47a8ea",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName, getCharset());\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (final FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, getId(), this.getClass(), null));\n    } catch (final IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, getId(), this.getClass(), null));\n    } catch (final RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n    } catch (final TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass(), null));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass(), null));\n        }\n    } catch (final TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass(), null));\n    } catch (final Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass(), null));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName, getCharset());\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (final FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, getId(), this.getClass()));\n    } catch (final IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, getId(), this.getClass()));\n    } catch (final RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass()));\n    } catch (final TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass()));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass()));\n        }\n    } catch (final TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass()));\n    } catch (final Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "788b41973d5747c7b4699a853b62168cf0001df6",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName, getCharset());\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, getId(), this.getClass()));\n    } catch (IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, getId(), this.getClass()));\n    } catch (RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass()));\n    } catch (TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, getId(), this.getClass()));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, getId(), this.getClass()));\n        }\n    } catch (TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, getId(), this.getClass()));\n    } catch (Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, getId(), this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "76374876692534687016dba762a465bf93039402",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName, getCharset());\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, this.getClass()));\n    } catch (IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, this.getClass()));\n    } catch (RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n    } catch (TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"TokenStreamRecognitionException occured.\" }, this.getClass()));\n        }\n    } catch (TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, this.getClass()));\n    } catch (Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "748df52c1317e298203bf28e48545d3e50db59f1",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName, getCharset());\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, this.getClass()));\n    } catch (IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, this.getClass()));\n    } catch (RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n    } catch (TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" }, this.getClass()));\n        }\n    } catch (TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, this.getClass()));\n    } catch (Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "915c6568cf2cde57c3e92ee9786acb4808562671",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName, getCharset());\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, this.getClass()));\n    } catch (IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, this.getClass()));\n    } catch (RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n    } catch (TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n        }\n    } catch (TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, this.getClass()));\n    } catch (Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "44e3d33fc25d44157486288d5c77de75156984cb",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, this.getClass()));\n    } catch (IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, this.getClass()));\n    } catch (RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n    } catch (TokenStreamRecognitionException tre) {\n        Utils.getExceptionLogger().debug(\"TokenStreamRecognitionException occured.\", tre);\n        final RecognitionException re = tre.recog;\n        if (re != null) {\n            getMessageCollector().add(new LocalizedMessage(re.getLine(), re.getColumn(), Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n        } else {\n            getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n        }\n    } catch (TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, this.getClass()));\n    } catch (Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "1e7bbb8cd8a0d8d2167792e917c7cb79a36b20b0",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        Utils.getExceptionLogger().debug(\"FileNotFoundException occured.\", fnfe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, this.getClass()));\n    } catch (IOException ioe) {\n        Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, this.getClass()));\n    } catch (RecognitionException re) {\n        Utils.getExceptionLogger().debug(\"RecognitionException occured.\", re);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n    } catch (TokenStreamException te) {\n        Utils.getExceptionLogger().debug(\"TokenStreamException occured.\", te);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, this.getClass()));\n    } catch (Throwable err) {\n        Utils.getExceptionLogger().debug(\"Throwable occured.\", err);\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "6db0b3effd48f02d741b2202338d710b1b254910",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null, this.getClass()));\n    } catch (IOException ioe) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }, this.getClass()));\n    } catch (RecognitionException re) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }, this.getClass()));\n    } catch (TokenStreamException te) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }, this.getClass()));\n    } catch (Throwable err) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }, this.getClass()));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "5ace399de6c8963584b1fbe08007721433c4bad3",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    } catch (Throwable err) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName);\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "d216ec75255a120ce7c24e51da7df63a2b9864de",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    getMessageCollector().reset();\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    } catch (Throwable err) {\n        getMessageCollector().add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }));\n    }\n    if (getMessageCollector().size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        getMessageDispatcher().fireErrors(fileName, getMessageCollector().getMessages());\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "784b3270054dd61d8c6dbe413bcedfc628063171",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    mMessages.reset();\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    } catch (Throwable err) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { \"\" + err }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        getMessageDispatcher().fireErrors(fileName, mMessages.getMessages());\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "2149a9c42dce7a3913cca83755c8f562b0442929",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    mMessages.reset();\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        getMessageDispatcher().fireErrors(fileName, mMessages.getMessages());\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "9f6a98ac725727519c43f6496f020c2e595dac57",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    mMessages.reset();\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        getMessageDispatcher().fireErrors(fileName, mMessages.getMessages());\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    mMessages.reset();\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents);\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        getMessageDispatcher().fireErrors(fileName, mMessages.getMessages());\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "abff1a2489ea8af10e1bc0a335551262d22f44e7",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    mMessages.reset();\n    try {\n        getMessageDispatcher().fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        walk(rootAST, contents, mConfig.getClassLoader());\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        getMessageDispatcher().fireErrors(fileName, mMessages.getMessages());\n    }\n    getMessageDispatcher().fireFileFinished(fileName);\n}"
    },
    {
      "commit": "54a09706ec1db32435b09e6b6910813325558f8d",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private void process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return;\n    }\n    mMessages.reset();\n    try {\n        fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        mWalker.walk(rootAST, contents, mConfig.getClassLoader());\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName, mMessages.getMessages());\n    }\n    fireFileFinished(fileName);\n}"
    },
    {
      "commit": "82b2ba526976588d550cac698e512f8de6c1ffc6",
      "startLine": 10,
      "endLine": 13,
      "methodCode": "private int process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return 0;\n    }\n    mMessages.reset();\n    try {\n        fireFileStarted(fileName);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        mWalker.walk(rootAST, contents, mConfig.getClassLoader());\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(fileName, mMessages.getMessages());\n    }\n    fireFileFinished(fileName);\n    return mMessages.size();\n}"
    },
    {
      "commit": "93390fbc8a6952bbb20571ac1b18a705814fc219",
      "startLine": 18,
      "endLine": 21,
      "methodCode": "private int process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return 0;\n    }\n    final String stripped;\n    final String basedir = mConfig.getBasedir();\n    if ((basedir == null) || !fileName.startsWith(basedir)) {\n        stripped = fileName;\n    } else {\n        final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;\n        stripped = fileName.substring(basedir.length() + skipSep);\n    }\n    mMessages.reset();\n    try {\n        fireFileStarted(stripped);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = TreeWalker.parse(contents);\n        mWalker.walk(rootAST, contents, mConfig.getClassLoader());\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(stripped, mMessages.getMessages());\n    }\n    fireFileFinished(stripped);\n    return mMessages.size();\n}"
    },
    {
      "commit": "822384a711290170148b43b5ae390dd4e8cfaf4f",
      "startLine": 18,
      "endLine": 21,
      "methodCode": "private int process(File aFile) {\n    final String fileName = aFile.getPath();\n    final long timestamp = aFile.lastModified();\n    if (mCache.alreadyChecked(fileName, timestamp)) {\n        return 0;\n    }\n    final String stripped;\n    final String basedir = mConfig.getBasedir();\n    if ((basedir == null) || !fileName.startsWith(basedir)) {\n        stripped = fileName;\n    } else {\n        final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;\n        stripped = fileName.substring(basedir.length() + skipSep);\n    }\n    mMessages.reset();\n    try {\n        fireFileStarted(stripped);\n        final String[] lines = Utils.getLines(fileName);\n        final FileContents contents = new FileContents(fileName, lines);\n        final DetailAST rootAST = parse(contents);\n        mWalker.walk(rootAST, contents, mConfig.getClassLoader());\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(fileName, timestamp);\n    } else {\n        fireErrors(stripped, mMessages.getMessages());\n    }\n    fireFileFinished(stripped);\n    return mMessages.size();\n}"
    },
    {
      "commit": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "startLine": 18,
      "endLine": 21,
      "methodCode": "private int process(String aFileName) {\n    final File f = new File(aFileName);\n    final long timestamp = f.lastModified();\n    if (mCache.alreadyChecked(aFileName, timestamp)) {\n        return 0;\n    }\n    final String stripped;\n    final String basedir = mConfig.getBasedir();\n    if ((basedir == null) || !aFileName.startsWith(basedir)) {\n        stripped = aFileName;\n    } else {\n        final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;\n        stripped = aFileName.substring(basedir.length() + skipSep);\n    }\n    mMessages.reset();\n    try {\n        fireFileStarted(stripped);\n        final String[] lines = Utils.getLines(aFileName);\n        final FileContents contents = new FileContents(aFileName, lines);\n        final DetailAST rootAST = parse(contents);\n        mWalker.walk(rootAST, contents, mConfig.getClassLoader());\n    } catch (FileNotFoundException fnfe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null));\n    } catch (IOException ioe) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }));\n    } catch (RecognitionException re) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }));\n    } catch (TokenStreamException te) {\n        mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }));\n    }\n    if (mMessages.size() == 0) {\n        mCache.checkedOk(aFileName, timestamp);\n    } else {\n        fireErrors(stripped, mMessages.getMessages());\n    }\n    fireFileFinished(stripped);\n    return mMessages.size();\n}"
    },
    {
      "commit": "51941dcf2475545cee7b754acd5e2494c53acf9c",
      "startLine": 18,
      "endLine": 39,
      "methodCode": "private int process(String aFileName) {\n    final File f = new File(aFileName);\n    final long timestamp = f.lastModified();\n    if (mCache.alreadyChecked(aFileName, timestamp)) {\n        return 0;\n    }\n    final String stripped;\n    final String basedir = mConfig.getBasedir();\n    if ((basedir == null) || !aFileName.startsWith(basedir)) {\n        stripped = aFileName;\n    } else {\n        final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;\n        stripped = aFileName.substring(basedir.length() + skipSep);\n    }\n    LocalizedMessage[] errors;\n    try {\n        fireFileStarted(stripped);\n        final String[] lines = Utils.getLines(aFileName);\n        try {\n            VerifierSingleton.getInstance().reset();\n            VerifierSingleton.getInstance().setLines(lines);\n            final Reader sar = new StringArrayReader(lines);\n            final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);\n            jl.setFilename(aFileName);\n            final GeneratedJava14Recognizer jr = new SilentJava14Recognizer(jl);\n            jr.setFilename(aFileName);\n            jr.setASTNodeClass(MyCommonAST.class.getName());\n            jr.compilationUnit();\n        } catch (RecognitionException re) {\n            VerifierSingleton.getInstance().reset();\n            VerifierSingleton.getInstance().setLines(lines);\n            final Reader sar = new StringArrayReader(lines);\n            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);\n            jl.setFilename(aFileName);\n            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);\n            jr.setFilename(aFileName);\n            jr.setASTNodeClass(MyCommonAST.class.getName());\n            jr.compilationUnit();\n        }\n        errors = VerifierSingleton.getInstance().getMessages();\n    } catch (FileNotFoundException fnfe) {\n        errors = new LocalizedMessage[] { new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null) };\n    } catch (IOException ioe) {\n        errors = new LocalizedMessage[] { new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { ioe.getMessage() }) };\n    } catch (RecognitionException re) {\n        errors = new LocalizedMessage[] { new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { re.getMessage() }) };\n    } catch (TokenStreamException te) {\n        errors = new LocalizedMessage[] { new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE, \"general.exception\", new String[] { te.getMessage() }) };\n    }\n    if (errors.length == 0) {\n        mCache.checkedOk(aFileName, timestamp);\n    } else {\n        fireErrors(stripped, errors);\n    }\n    fireFileFinished(stripped);\n    return errors.length;\n}"
    }
  ]
}