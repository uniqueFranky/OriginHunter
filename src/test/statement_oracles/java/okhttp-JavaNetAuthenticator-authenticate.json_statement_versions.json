{
  "statementVersions": [
    {
      "commit": "b3ecb0a6c9bf3a213377b889f2b3077a940363e2",
      "startLine": 12,
      "endLine": 22,
      "methodCode": "@Override\npublic Request authenticate(Route route, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.url();\n    boolean proxyAuthorization = response.code() == 407;\n    Proxy proxy = route.proxy();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.scheme()))\n            continue;\n        PasswordAuthentication auth;\n        if (proxyAuthorization) {\n            InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n            auth = java.net.Authenticator.requestPasswordAuthentication(proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.PROXY);\n        } else {\n            auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n        }\n        if (auth != null) {\n            String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()), challenge.charset());\n            return request.newBuilder().header(proxyAuthorization ? \"Proxy-Authorization\" : \"Authorization\", credential).build();\n        }\n    }\n    return null;\n}"
    },
    {
      "commit": "d9abee71f870d31d992402d2b855313987bf53ee",
      "startLine": 12,
      "endLine": 22,
      "methodCode": "@Override\npublic Request authenticate(Route route, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.url();\n    boolean proxyAuthorization = response.code() == 407;\n    Proxy proxy = route.proxy();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.scheme()))\n            continue;\n        PasswordAuthentication auth;\n        if (proxyAuthorization) {\n            InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n            auth = java.net.Authenticator.requestPasswordAuthentication(proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.PROXY);\n        } else {\n            auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n        }\n        if (auth != null) {\n            String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n            return request.newBuilder().header(proxyAuthorization ? \"Proxy-Authorization\" : \"Authorization\", credential).build();\n        }\n    }\n    return null;\n}"
    },
    {
      "commit": "0bfd6048574d61c138fd417051ae2a1bcb44638f",
      "startLine": 12,
      "endLine": 22,
      "methodCode": "@Override\npublic Request authenticate(Route route, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.url();\n    boolean proxyAuthorization = response.code() == 407;\n    Proxy proxy = route.proxy();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.scheme()))\n            continue;\n        PasswordAuthentication auth;\n        if (proxyAuthorization) {\n            InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n            auth = java.net.Authenticator.requestPasswordAuthentication(proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.PROXY);\n        } else {\n            auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n        }\n        if (auth != null) {\n            String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n            return request.newBuilder().header(proxyAuthorization ? \"Proxy-Authorization\" : \"Authorization\", credential).build();\n        }\n    }\n    return null;\n}"
    },
    {
      "commit": "c9a89876de476983f273edbf108c365127c18c5e",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.scheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "c07f55ac92d1e931260711edae987b51bee0be3d",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.scheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "93d547dcdaecddfa456aee0571131db2342e5abb",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.getRealm(), challenge.getScheme(), url.url(), RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "4c90a2e04a83646597a506a80b5a885d5c515bf0",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    HttpUrl url = request.httpUrl();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(), challenge.getRealm(), challenge.getScheme(), url.url(), RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "2b236fd66abbfffeb1c07a22dde5dcb8d3a2032c",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    URL url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), Util.getEffectivePort(url), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "0676d8b1733589a869098b9980118644b3bade4f",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    URL url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "d111f4cd19d3d69558dd2186d778efb69b90b1e3",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    URL url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme()))\n            continue;\n        PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "e920196fbd71822fc284ab76204bf75f95d3265a",
      "startLine": 10,
      "endLine": 14,
      "methodCode": "@Override\npublic Request authenticate(Proxy proxy, Response response) throws IOException {\n    List<Challenge> challenges = response.challenges();\n    Request request = response.request();\n    URL url = request.url();\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme()))\n            continue;\n        PasswordAuthentication auth = Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n        if (auth == null)\n            continue;\n        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));\n        return request.newBuilder().header(\"Authorization\", credential).build();\n    }\n    return null;\n}"
    },
    {
      "commit": "bd26cf927a8ee69aab11890c5d0bfe9b9312404d",
      "startLine": 8,
      "endLine": 11,
      "methodCode": "@Override\npublic Credential authenticate(Proxy proxy, URL url, List<Challenge> challenges) throws IOException {\n    for (int i = 0, size = challenges.size(); i < size; i++) {\n        Challenge challenge = challenges.get(i);\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) {\n            continue;\n        }\n        PasswordAuthentication auth = Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n        if (auth != null) {\n            return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n        }\n    }\n    return null;\n}"
    },
    {
      "commit": "f2a6a6496fb90f71d2f7facdc1798e28b0737248",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "@Override\npublic Credential authenticate(Proxy proxy, URL url, List<Challenge> challenges) throws IOException {\n    for (Challenge challenge : challenges) {\n        if (!\"Basic\".equalsIgnoreCase(challenge.getScheme())) {\n            continue;\n        }\n        PasswordAuthentication auth = Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n        if (auth != null) {\n            return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n        }\n    }\n    return null;\n}"
    },
    {
      "commit": "155a516b54ed60ec796cf5b9f2d8705012c5ceae",
      "startLine": 7,
      "endLine": 10,
      "methodCode": "@Override\npublic Credential authenticate(Proxy proxy, URL url, List<Challenge> challenges) throws IOException {\n    for (Challenge challenge : challenges) {\n        if (!\"Basic\".equals(challenge.getScheme())) {\n            continue;\n        }\n        PasswordAuthentication auth = Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n        if (auth != null) {\n            return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n        }\n    }\n    return null;\n}"
    },
    {
      "commit": "cb7ade556c9ce90e861e947380a2bb380101b05e",
      "startLine": 4,
      "endLine": 7,
      "methodCode": "@Override\npublic Credential authenticate(Proxy proxy, URL url, List<Challenge> challenges) throws IOException {\n    for (Challenge challenge : challenges) {\n        PasswordAuthentication auth = Authenticator.requestPasswordAuthentication(url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(), url.getProtocol(), challenge.getRealm(), challenge.getScheme(), url, Authenticator.RequestorType.SERVER);\n        if (auth != null) {\n            return Credential.basic(auth.getUserName(), new String(auth.getPassword()));\n        }\n    }\n    return null;\n}"
    }
  ]
}