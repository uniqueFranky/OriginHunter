{
  "statementVersions": [
    {
      "commit": "a639ee9275e672ca21320f56f62f1648d24aa140",
      "startLine": 19,
      "endLine": 25,
      "methodCode": "@Override\npublic void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp = getServletHandler().getServlet(precompiled);\n            if (jsp != null && jsp.getClassName() != null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        } else\n            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    synchronized (this) {\n        if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n            _servlet = new SingleThreadedWrapper();\n    }\n}"
    },
    {
      "commit": "a7891b2f520c1cdedf7b0b74cbf71f11b6137ba9",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp = getServletHandler().getServlet(precompiled);\n            if (jsp != null && jsp.getClassName() != null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        } else\n            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    synchronized (this) {\n        if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n            _servlet = new SingleThreadedWrapper();\n    }\n}"
    },
    {
      "commit": "edfd05dd9c9be4af1c61b30924d10725f8a7ec55",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp = getServletHandler().getServlet(precompiled);\n            if (jsp != null && jsp.getClassName() != null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to JspServlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        } else\n            LOG.warn(\"Bad jsp-file {} conversion to classname in holder {}\", _forcedPath, getName());\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "69afe33b820401cef1e08fcb5911a025b29a4487",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (!StringUtil.isBlank(precompiled)) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n            ServletHolder jsp = getServletHandler().getServlet(precompiled);\n            if (jsp != null && jsp.getClassName() != null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            } else {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "6097123af68784a0186337b2e01a8025d7d13d25",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp = getServletHandler().getServlet(precompiled);\n        if (jsp != null && jsp.getClassName() != null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() == null) {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "49a32eb1b0da23229441cd2f199ec57caab46cbc",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp = getServletHandler().getServlet(precompiled);\n        if (jsp != null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() == null) {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "2a25402de0a12ca41d85dc95fa365dbd70a4a086",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp = getServletHandler().getServlet(precompiled);\n        if (jsp != null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() == null) {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet class {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "3ff4195dbc3a5d2767e6ba1978d090ea41dd3d99",
      "startLine": 18,
      "endLine": 24,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp = getServletHandler().getServlet(precompiled);\n        if (jsp != null) {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() == null) {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    if (_initOnStartup)\n                        setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "7db7620c3656c89b70868e584445248838795233",
      "startLine": 16,
      "endLine": 21,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = getClassNameForJsp(_forcedPath);\n        LOG.debug(\"Checking for precompiled servlet {} for jsp {}\", precompiled, _forcedPath);\n        ServletHolder jsp = getServletHandler().getServlet(precompiled);\n        if (jsp != null) {\n            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            if (getClassName() == null) {\n                jsp = getServletHandler().getServlet(\"jsp\");\n                if (jsp != null) {\n                    LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                    setClassName(jsp.getClassName());\n                    for (Map.Entry<String, String> entry : jsp.getInitParameters().entrySet()) {\n                        if (!_initParams.containsKey(entry.getKey()))\n                            setInitParameter(entry.getKey(), entry.getValue());\n                    }\n                    if (_initOnStartup)\n                        setInitParameter(\"jspFile\", _forcedPath);\n                }\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    },
    {
      "commit": "b3be24742353f7b5880fa8229a20ed0b19058cac",
      "startLine": 14,
      "endLine": 15,
      "methodCode": "public void doStart() throws Exception {\n    _unavailable = 0;\n    if (!_enabled)\n        return;\n    if (_forcedPath != null) {\n        String precompiled = \"org.apache.jsp\" + _forcedPath.replace('.', '_').replace('/', '.');\n        ServletHolder jsp = getServletHandler().getServlet(precompiled);\n        if (jsp != null) {\n            LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n            setClassName(jsp.getClassName());\n        } else {\n            jsp = getServletHandler().getServlet(\"jsp\");\n            if (jsp != null) {\n                LOG.debug(\"JSP file {} for {} mapped to Servlet {}\", _forcedPath, getName(), jsp.getClassName());\n                setClassName(jsp.getClassName());\n            }\n        }\n    }\n    try {\n        super.doStart();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    try {\n        checkServletType();\n    } catch (UnavailableException ue) {\n        makeUnavailable(ue);\n        if (_servletHandler.isStartWithUnavailable()) {\n            LOG.ignore(ue);\n            return;\n        } else\n            throw ue;\n    }\n    checkInitOnStartup();\n    _identityService = _servletHandler.getIdentityService();\n    if (_identityService != null && _runAsRole != null)\n        _runAsToken = _identityService.newRunAsToken(_runAsRole);\n    _config = new Config();\n    if (_class != null && javax.servlet.SingleThreadModel.class.isAssignableFrom(_class))\n        _servlet = new SingleThreadedWrapper();\n}"
    }
  ]
}