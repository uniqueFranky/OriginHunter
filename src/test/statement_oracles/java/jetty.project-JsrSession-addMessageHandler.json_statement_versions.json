{
  "statementVersions": [
    {
      "commit": "05c534275253ba65a23863b5ef976636fcd8da4c",
      "startLine": 6,
      "endLine": 15,
      "methodCode": "@Override\npublic void addMessageHandler(MessageHandler handler) throws IllegalStateException {\n    Objects.requireNonNull(handler, \"MessageHandler cannot be null\");\n    synchronized (wrappers) {\n        for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass())) {\n            DecoderFactory.Wrapper wrapper = decoderFactory.getWrapperFor(metadata.getMessageClass());\n            if (wrapper == null) {\n                StringBuilder err = new StringBuilder();\n                err.append(\"Unable to find decoder for type <\");\n                err.append(metadata.getMessageClass().getName());\n                err.append(\"> used in <\");\n                err.append(metadata.getHandlerClass().getName());\n                err.append(\">\");\n                throw new IllegalStateException(err.toString());\n            }\n            MessageType key = wrapper.getMetadata().getMessageType();\n            MessageHandlerWrapper other = wrappers[key.ordinal()];\n            if (other != null) {\n                StringBuilder err = new StringBuilder();\n                err.append(\"Encountered duplicate MessageHandler handling message type <\");\n                err.append(wrapper.getMetadata().getObjectType().getName());\n                err.append(\">, \").append(metadata.getHandlerClass().getName());\n                err.append(\"<\");\n                err.append(metadata.getMessageClass().getName());\n                err.append(\"> and \");\n                err.append(other.getMetadata().getHandlerClass().getName());\n                err.append(\"<\");\n                err.append(other.getMetadata().getMessageClass().getName());\n                err.append(\"> both implement this message type\");\n                throw new IllegalStateException(err.toString());\n            } else {\n                MessageHandlerWrapper handlerWrapper = new MessageHandlerWrapper(handler, metadata, wrapper);\n                wrappers[key.ordinal()] = handlerWrapper;\n            }\n        }\n        updateMessageHandlerSet();\n    }\n}"
    },
    {
      "commit": "33c11dffaa86d09b33fd350f07cd9c548b7d3b7c",
      "startLine": 6,
      "endLine": 15,
      "methodCode": "@Override\npublic void addMessageHandler(MessageHandler handler) throws IllegalStateException {\n    Objects.requireNonNull(handler, \"MessageHandler cannot be null\");\n    synchronized (wrappers) {\n        for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass())) {\n            DecoderFactory.Wrapper wrapper = decoderFactory.getWrapperFor(metadata.getMessageClass());\n            if (wrapper == null) {\n                StringBuilder err = new StringBuilder();\n                err.append(\"Unable to find decoder for type <\");\n                err.append(metadata.getMessageClass().getName());\n                err.append(\"> used in <\");\n                err.append(metadata.getHandlerClass().getName());\n                err.append(\">\");\n                throw new IllegalStateException(err.toString());\n            }\n            MessageType key = wrapper.getMetadata().getMessageType();\n            MessageHandlerWrapper other = wrappers[key.ordinal()];\n            if (other != null) {\n                StringBuilder err = new StringBuilder();\n                err.append(\"Encountered duplicate MessageHandler handling message type <\");\n                err.append(key.name());\n                err.append(\">, \").append(metadata.getHandlerClass().getName());\n                err.append(\"<\");\n                err.append(metadata.getMessageClass().getName());\n                err.append(\"> and \");\n                err.append(other.getMetadata().getHandlerClass().getName());\n                err.append(\"<\");\n                err.append(other.getMetadata().getMessageClass().getName());\n                err.append(\"> both implement this message type\");\n                throw new IllegalStateException(err.toString());\n            } else {\n                MessageHandlerWrapper handlerWrapper = new MessageHandlerWrapper(handler, metadata, wrapper);\n                wrappers[key.ordinal()] = handlerWrapper;\n            }\n        }\n        messageHandlerSet.clear();\n        for (MessageHandlerWrapper wrapper : wrappers) {\n            if (wrapper == null) {\n                continue;\n            }\n            messageHandlerSet.add(wrapper.getHandler());\n        }\n    }\n}"
    },
    {
      "commit": "46e9493c850d0ff2e6f30f455ad358251e1a2d48",
      "startLine": 6,
      "endLine": 6,
      "methodCode": "@Override\npublic void addMessageHandler(MessageHandler handler) throws IllegalStateException {\n    Objects.requireNonNull(handler, \"MessageHandler cannot be null\");\n    synchronized (wrappers) {\n        for (MessageHandlerMetadata metadata : messageHandlerFactory.getMetadata(handler.getClass())) {\n            DecoderWrapper decoder = decoderFactory.getWrapperFor(metadata.getMessageClass());\n            MessageType key = decoder.getMetadata().getMessageType();\n            MessageHandlerWrapper other = wrappers[key.ordinal()];\n            if (other != null) {\n                StringBuilder err = new StringBuilder();\n                err.append(\"Encountered duplicate MessageHandler handling message type <\");\n                err.append(key.name());\n                err.append(\">, \").append(metadata.getHandlerClass().getName());\n                err.append(\"<\");\n                err.append(metadata.getMessageClass().getName());\n                err.append(\"> and \");\n                err.append(other.getMetadata().getHandlerClass().getName());\n                err.append(\"<\");\n                err.append(other.getMetadata().getMessageClass().getName());\n                err.append(\"> both implement this message type\");\n                throw new IllegalStateException(err.toString());\n            } else {\n                MessageHandlerWrapper wrapper = new MessageHandlerWrapper(handler, metadata, decoder);\n                wrappers[key.ordinal()] = wrapper;\n            }\n        }\n        messageHandlerSet.clear();\n        for (MessageHandlerWrapper wrapper : wrappers) {\n            if (wrapper == null) {\n                continue;\n            }\n            messageHandlerSet.add(wrapper.getHandler());\n        }\n    }\n}"
    }
  ]
}