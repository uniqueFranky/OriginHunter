{
  "statementVersions": [
    {
      "commit": "8f56e81f938c6f68d9e15f9b43f3f17ab467faa2",
      "startLine": 15,
      "endLine": 21,
      "methodCode": "private Http2Stream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (nextStreamId > Integer.MAX_VALUE / 2) {\n                shutdown(REFUSED_STREAM);\n            }\n            if (shutdown) {\n                throw new ConnectionShutdownException();\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId == 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "86be1c3acdf3c7b26c57cae17612b74ada5ce1a1",
      "startLine": 12,
      "endLine": 18,
      "methodCode": "private Http2Stream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new ConnectionShutdownException();\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId == 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
      "startLine": 12,
      "endLine": 18,
      "methodCode": "private Http2Stream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = false;\n    boolean flushHeaders;\n    Http2Stream stream;\n    int streamId;\n    synchronized (writer) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId == 0) {\n            writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            writer.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        writer.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "0c04821a25c83fddebb29e8cd590609142ba20a2",
      "startLine": 12,
      "endLine": 18,
      "methodCode": "private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = false;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "a18d4e184b224d1567ffc1faa5502a5eeaf5445c",
      "startLine": 12,
      "endLine": 18,
      "methodCode": "private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "1503e362f61ca8c55adebcce802a724ae375debe",
      "startLine": 12,
      "endLine": 19,
      "methodCode": "private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    boolean flushHeaders;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (flushHeaders) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "c9a89876de476983f273edbf108c365127c18c5e",
      "startLine": 11,
      "endLine": 17,
      "methodCode": "private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
      "startLine": 11,
      "endLine": 17,
      "methodCode": "private FramedStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    FramedStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new FramedStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "cc38140be4c7e41330cf7749c3eeba23c85f9522",
      "startLine": 11,
      "endLine": 17,
      "methodCode": "private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "1ab398fb93f61e6053ba0190fb76b2d312b83800",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else if (client) {\n            throw new IllegalArgumentException(\"client streams shouldn't have associated stream IDs\");\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "a5ba3e9062f3bde4bb6896f1db433a2408119e94",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            if (client)\n                throw new IOException(\"Client attempted to push stream: \" + associatedStreamId);\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "110a4fac4257fe2df0e23149fbef76e750604cf4",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "private SpdyStream newStream(int associatedStreamId, List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        if (associatedStreamId == 0) {\n            frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n        } else {\n            frameWriter.pushPromise(associatedStreamId, streamId, requestHeaders);\n        }\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "ab78dadb4bb94db74770e179e04e2ed791c4a51e",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    if (!out) {\n        frameWriter.flush();\n    }\n    return stream;\n}"
    },
    {
      "commit": "358169b89f32c00bf229b4e42ccef756588da71f",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<Header> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<ByteString> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<ByteString> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "68de030b356e83ca5680986a290e98cfee8fd550",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = -1;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (frameWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
      "startLine": 14,
      "endLine": 20,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    boolean outFinished = !out;\n    boolean inFinished = !in;\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "3c0faa9ca18de3be0a178e590086888f4f89612a",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "7ccbf48838b7cfe42759c67790636d442ea5daa3",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "2d45a13249943cafa73460b35c3c366e5742eb6f",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "6f6d959fdae64065521990413f86bc7ab038d7c1",
      "startLine": 13,
      "endLine": 19,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n                setIdle(false);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "1bd9fefb5199d1499c8dac6c82c18c82e0678428",
      "startLine": 13,
      "endLine": 18,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
      "startLine": 13,
      "endLine": 18,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    int slot = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "689f66222bd8984dd69229a4ee9caf8da528ae12",
      "startLine": 12,
      "endLine": 17,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "7f4249625960b7f10dc61aae4d1896c2e126f538",
      "startLine": 12,
      "endLine": 17,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            if (stream.isOpen()) {\n                streams.put(streamId, stream);\n            }\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
      "startLine": 12,
      "endLine": 15,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            if (shutdown) {\n                throw new IOException(\"shutdown\");\n            }\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "853c4012b79711f123c0b9780e565062b32bf1c7",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n    }\n    return stream;\n}"
    },
    {
      "commit": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.flags = flags;\n        spdyWriter.id = streamId;\n        spdyWriter.associatedId = associatedStreamId;\n        spdyWriter.priority = priority;\n        spdyWriter.nameValueBlock = requestHeaders;\n        spdyWriter.synStream();\n    }\n    return stream;\n}"
    },
    {
      "commit": "60b3a6dd6240f40c29fffd897c2dac314af49836",
      "startLine": 9,
      "endLine": 12,
      "methodCode": "public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream stream;\n    int streamId;\n    synchronized (spdyWriter) {\n        synchronized (this) {\n            streamId = nextStreamId;\n            nextStreamId += 2;\n            stream = new SpdyStream(streamId, this, requestHeaders, flags);\n            streams.put(streamId, stream);\n        }\n        spdyWriter.flags = flags;\n        spdyWriter.id = streamId;\n        spdyWriter.associatedId = associatedStreamId;\n        spdyWriter.priority = priority;\n        spdyWriter.nameValueBlock = requestHeaders;\n        spdyWriter.synStream();\n    }\n    return stream;\n}"
    },
    {
      "commit": "2bd54fa72fe72f92212428a024050838c2b62d57",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "public synchronized SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int streamId = nextStreamId;\n    nextStreamId += 2;\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream result = new SpdyStream(streamId, this, requestHeaders, flags);\n    streams.put(streamId, result);\n    spdyWriter.flags = flags;\n    spdyWriter.id = streamId;\n    spdyWriter.associatedId = associatedStreamId;\n    spdyWriter.priority = priority;\n    spdyWriter.nameValueBlock = requestHeaders;\n    spdyWriter.synStream();\n    return result;\n}"
    },
    {
      "commit": "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e",
      "startLine": 2,
      "endLine": 8,
      "methodCode": "public synchronized SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in) throws IOException {\n    int streamId = nextStreamId;\n    nextStreamId += 2;\n    int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId = 0;\n    int priority = 0;\n    SpdyStream result = new SpdyStream(streamId, this, requestHeaders, flags);\n    streams.put(streamId, result);\n    spdyWriter.flags = flags;\n    spdyWriter.streamId = streamId;\n    spdyWriter.associatedStreamId = associatedStreamId;\n    spdyWriter.priority = priority;\n    spdyWriter.nameValueBlock = requestHeaders;\n    spdyWriter.synStream();\n    return result;\n}"
    }
  ]
}