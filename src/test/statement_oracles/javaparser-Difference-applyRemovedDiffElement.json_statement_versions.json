{
  "statementVersions": [
    {
      "commit": "4f9e0c67e6f11738be45155bd5606f18445fcec7",
      "startLine": 13,
      "endLine": 23,
      "methodCode": "private void applyRemovedDiffElement(RemovedGroup removedGroup, Removed removed, TextElement originalElement, boolean originalElementIsChild, boolean originalElementIsToken) {\n    if (removed.isChild() && originalElementIsChild) {\n        ChildTextElement originalElementChild = (ChildTextElement) originalElement;\n        if (originalElementChild.isComment()) {\n            Comment comment = (Comment) originalElementChild.getChild();\n            if (!comment.isOrphan() && comment.getCommentedNode().isPresent() && comment.getCommentedNode().get().equals(removed.getChild())) {\n                nodeText.removeElement(originalIndex);\n            } else {\n                originalIndex++;\n            }\n        } else {\n            nodeText.removeElement(originalIndex);\n            if ((diffIndex + 1 >= diffElements.size() || !(diffElements.get(diffIndex + 1) instanceof Added)) && !removedGroup.isACompleteLine()) {\n                originalIndex = considerEnforcingIndentation(nodeText, originalIndex);\n            }\n            if (originalElements.size() > originalIndex && originalIndex > 0) {\n                if (originalElements.get(originalIndex).isWhiteSpace() && originalElements.get(originalIndex - 1).isWhiteSpace()) {\n                    if ((diffIndex + 1) == diffElements.size() || (diffElements.get(diffIndex + 1) instanceof Kept)) {\n                        originalElements.remove(originalIndex--);\n                    }\n                }\n            }\n            diffIndex++;\n        }\n    } else if (removed.isToken() && originalElementIsToken && (removed.getTokenType() == ((TokenTextElement) originalElement).getTokenKind())) {\n        nodeText.removeElement(originalIndex);\n        diffIndex++;\n    } else if (originalElementIsToken && originalElement.isWhiteSpaceOrComment()) {\n        originalIndex++;\n    } else if (removed.isPrimitiveType()) {\n        if (isPrimitiveType(originalElement)) {\n            nodeText.removeElement(originalIndex);\n            diffIndex++;\n        } else {\n            throw new UnsupportedOperationException(\"removed \" + removed.getElement() + \" vs \" + originalElement);\n        }\n    } else if (removed.isWhiteSpace()) {\n        diffIndex++;\n    } else if (originalElement.isWhiteSpace()) {\n        originalIndex++;\n    } else {\n        throw new UnsupportedOperationException(\"removed \" + removed.getElement() + \" vs \" + originalElement);\n    }\n    cleanTheLineOfLeftOverSpace(removedGroup, removed);\n}"
    },
    {
      "commit": "2d3f5e219af9d1ba916f1dc21a6169a41a254632",
      "startLine": 13,
      "endLine": 23,
      "methodCode": "private void applyRemovedDiffElement(RemovedGroup removedGroup, Removed removed, TextElement originalElement, boolean originalElementIsChild, boolean originalElementIsToken) {\n    if (removed.isChild() && originalElementIsChild) {\n        ChildTextElement originalElementChild = (ChildTextElement) originalElement;\n        if (originalElementChild.isComment()) {\n            Comment comment = (Comment) originalElementChild.getChild();\n            if (!comment.isOrphan() && comment.getCommentedNode().isPresent() && comment.getCommentedNode().get().equals(removed.getChild())) {\n                nodeText.removeElement(originalIndex);\n            } else {\n                originalIndex++;\n            }\n        } else {\n            nodeText.removeElement(originalIndex);\n            if ((diffIndex + 1 >= diffElements.size() || !(diffElements.get(diffIndex + 1) instanceof Added)) && !removedGroup.isACompleteLine()) {\n                originalIndex = considerEnforcingIndentation(nodeText, originalIndex);\n            }\n            if (originalElements.size() > originalIndex && originalIndex > 0) {\n                if (originalElements.get(originalIndex).isWhiteSpace() && originalElements.get(originalIndex - 1).isWhiteSpace()) {\n                    if ((diffIndex + 1) == diffElements.size() || (diffElements.get(diffIndex + 1) instanceof Kept)) {\n                        originalElements.remove(originalIndex--);\n                    }\n                }\n            }\n            diffIndex++;\n        }\n    } else if (removed.isToken() && originalElementIsToken && (removed.getTokenType() == ((TokenTextElement) originalElement).getTokenKind())) {\n        nodeText.removeElement(originalIndex);\n        diffIndex++;\n    } else if (originalElementIsToken && originalElement.isWhiteSpaceOrComment()) {\n        originalIndex++;\n    } else if (removed.isPrimitiveType()) {\n        if (isPrimitiveType(originalElement)) {\n            nodeText.removeElement(originalIndex);\n            diffIndex++;\n        } else {\n            throw new UnsupportedOperationException(\"removed \" + removed.getElement() + \" vs \" + originalElement);\n        }\n    } else if (removed.isWhiteSpace()) {\n        diffIndex++;\n    } else if (originalElement.isWhiteSpace()) {\n        originalIndex++;\n    } else {\n        throw new UnsupportedOperationException(\"removed \" + removed.getElement() + \" vs \" + originalElement);\n    }\n    if (removedGroup.isACompleteLine() && removedGroup.getLastElement() == removed) {\n        Integer lastElementIndex = removedGroup.getLastElementIndex();\n        Optional<Integer> indentation = removedGroup.getIndentation();\n        if (originalIndex < originalElements.size() && originalElements.get(originalIndex).isNewline()) {\n            originalIndex = considerCleaningTheLine(nodeText, originalIndex);\n        } else if (!isReplaced(lastElementIndex) && indentation.isPresent()) {\n            for (int i = 0; i < indentation.get(); i++) {\n                nodeText.removeElement(originalIndex);\n            }\n        }\n    }\n}"
    },
    {
      "commit": "b7bd15d12e107c85e29912960f7b4e48aac4dc38",
      "startLine": 13,
      "endLine": 27,
      "methodCode": "private void applyRemovedDiffElement(Removed removed, TextElement originalElement, boolean originalElementIsChild, boolean originalElementIsToken) {\n    if (removed.isChild() && originalElementIsChild) {\n        ChildTextElement originalElementChild = (ChildTextElement) originalElement;\n        if (originalElementChild.isComment()) {\n            Comment comment = (Comment) originalElementChild.getChild();\n            if (!comment.isOrphan() && comment.getCommentedNode().isPresent() && comment.getCommentedNode().get().equals(removed.getChild())) {\n                nodeText.removeElement(originalIndex);\n            } else {\n                originalIndex++;\n            }\n        } else {\n            nodeText.removeElement(originalIndex);\n            if (originalIndex < originalElements.size() && originalElements.get(originalIndex).isNewline()) {\n                originalIndex = considerCleaningTheLine(nodeText, originalIndex);\n            } else {\n                if (diffIndex + 1 >= diffElements.size() || !(diffElements.get(diffIndex + 1) instanceof Added)) {\n                    originalIndex = considerEnforcingIndentation(nodeText, originalIndex);\n                }\n                if (originalElements.size() > originalIndex && originalIndex > 0) {\n                    if (originalElements.get(originalIndex).isWhiteSpace() && originalElements.get(originalIndex - 1).isWhiteSpace()) {\n                        if ((diffIndex + 1) == diffElements.size() || (diffElements.get(diffIndex + 1) instanceof Kept)) {\n                            originalElements.remove(originalIndex--);\n                        }\n                    }\n                }\n            }\n            diffIndex++;\n        }\n    } else if (removed.isToken() && originalElementIsToken && (removed.getTokenType() == ((TokenTextElement) originalElement).getTokenKind())) {\n        nodeText.removeElement(originalIndex);\n        diffIndex++;\n    } else if (originalElementIsToken && originalElement.isWhiteSpaceOrComment()) {\n        originalIndex++;\n    } else if (removed.isPrimitiveType()) {\n        if (isPrimitiveType(originalElement)) {\n            nodeText.removeElement(originalIndex);\n            diffIndex++;\n        } else {\n            throw new UnsupportedOperationException(\"removed \" + removed.getElement() + \" vs \" + originalElement);\n        }\n    } else if (removed.isWhiteSpace()) {\n        diffIndex++;\n    } else if (originalElement.isWhiteSpace()) {\n        originalIndex++;\n    } else {\n        throw new UnsupportedOperationException(\"removed \" + removed.getElement() + \" vs \" + originalElement);\n    }\n}"
    }
  ]
}